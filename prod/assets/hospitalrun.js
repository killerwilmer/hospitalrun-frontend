"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('hospitalrun/adapters/application', ['exports', 'ember', 'ember-pouch', 'hospitalrun/mixins/pouch-adapter-utils'], function (exports, _ember, _emberPouch, _hospitalrunMixinsPouchAdapterUtils) {
  var bind = _ember['default'].run.bind;
  exports['default'] = _emberPouch.Adapter.extend(_hospitalrunMixinsPouchAdapterUtils['default'], {
    database: _ember['default'].inject.service(),
    db: _ember['default'].computed.reads('database.mainDB'),

    _specialQueries: ['containsValue', 'mapReduce'],

    _executeContainsSearch: function _executeContainsSearch(store, type, query) {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var typeName = _this.getRecordTypeName(type);
        var searchUrl = '/search/hrdb/' + typeName + '/_search';
        if (query.containsValue && query.containsValue.value) {
          var queryString = '';
          query.containsValue.keys.forEach(function (key) {
            if (!_ember['default'].isEmpty(queryString)) {
              queryString = queryString + ' OR ';
            }
            var queryValue = query.containsValue.value;
            switch (key.type) {
              case 'contains':
                {
                  queryValue = '*' + queryValue + '*';
                  break;
                }
              case 'fuzzy':
                {
                  queryValue = queryValue + '~';
                  break;
                }
            }
            queryString = queryString + 'data.' + key.name + ':' + queryValue;
          });
          var successFn = function successFn(results) {
            if (results && results.hits && results.hits.hits) {
              var resultDocs = _ember['default'].A(results.hits.hits).map(function (hit) {
                var mappedResult = hit._source;
                mappedResult.id = mappedResult._id;
                return mappedResult;
              });
              var response = {
                rows: resultDocs
              };
              _this._handleQueryResponse(response, store, type).then(resolve, reject);
            } else if (results.rows) {
              _this._handleQueryResponse(results, store, type).then(resolve, reject);
            } else {
              reject('Search results are not valid');
            }
          };
          _ember['default'].$.ajax(searchUrl, {
            dataType: 'json',
            data: {
              q: queryString
            },
            success: successFn
          });
        } else {
          reject('invalid query');
        }
      });
    },

    _handleQueryResponse: function _handleQueryResponse(response, store, type) {
      var _this2 = this;

      var database = this.get('database');
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        if (response.rows.length > 0) {
          var ids = response.rows.map(function (row) {
            return database.getEmberId(row.id);
          });
          _this2.findRecord(store, type, ids).then(function (findResponse) {
            var primaryRecordName = type.modelName.camelize().pluralize(),
                sortedValues = [];
            // Sort response in order of ids
            ids.forEach(function (id) {
              var resolvedRecord = findResponse[primaryRecordName].findBy('id', id);
              sortedValues.push(resolvedRecord);
            });
            findResponse[primaryRecordName] = sortedValues;
            resolve(findResponse);
          }, reject);
        } else {
          var emptyResponse = {};
          emptyResponse[type.modelName] = [];
          resolve(emptyResponse);
        }
      });
    },

    /**
     * @private
     * Look for nulls and maxvalues in start key because those keys can't be handled by the sort/list function
     */
    _doesStartKeyContainSpecialCharacters: function _doesStartKeyContainSpecialCharacters(startkey) {
      var haveSpecialCharacters = false,
          maxValue = this.get('maxValue');
      if (!_ember['default'].isEmpty(startkey) && _ember['default'].isArray(startkey)) {
        startkey.forEach(function (keyvalue) {
          if (keyvalue === null || keyvalue === maxValue) {
            haveSpecialCharacters = true;
          }
        });
      }
      return haveSpecialCharacters;
    },

    _startChangesToStoreListener: function _startChangesToStoreListener() {
      var db = this.get('db');
      if (db) {
        this.changes = db.changes({
          since: 'now',
          live: true,
          returnDocs: false
        }).on('change', bind(this, 'onChange')).on('error', _ember['default'].K); // Change sometimes throws weird 500 errors that we can ignore
        db.changesListener = this.changes;
      }
    },

    generateIdForRecord: function generateIdForRecord() {
      return PouchDB.utils.uuid();
    },

    query: function query(store, type, _query, options) {
      var _this3 = this;

      var specialQuery = false;
      for (var i = 0; i < this._specialQueries.length; i++) {
        if (_ember['default'].get(_query, this._specialQueries[i])) {
          specialQuery = true;
          break;
        }
      }
      if (!specialQuery) {
        if (_query.options) {
          this._init(store, type);
          var recordTypeName = this.getRecordTypeName(type);
          return this.get('db').rel.find(recordTypeName, _query.options);
        } else {
          return this._super(store, type, _query, options);
        }
      } else {
        var mapReduce = null,
            queryParams = {};
        if (_query.options) {
          queryParams = _ember['default'].copy(_query.options);
          if (_query.sortKey || _query.filterBy) {
            if (_query.sortDesc) {
              queryParams.sortDesc = _query.sortDesc;
            }
            if (_query.sortKey) {
              queryParams.sortKey = _query.sortKey;
            }
            if (!this._doesStartKeyContainSpecialCharacters(queryParams.startkey)) {
              queryParams.sortLimit = queryParams.limit;
              delete queryParams.limit;
              queryParams.sortStartKey = JSON.stringify(queryParams.startkey);
              delete queryParams.startkey;
            } else if (queryParams.startkey) {
              queryParams.startkey = JSON.stringify(queryParams.startkey);
            }
            if (_query.filterBy) {
              queryParams.filterBy = JSON.stringify(_query.filterBy);
            }
            if (queryParams.endkey) {
              queryParams.endkey = JSON.stringify(queryParams.endkey);
            }
            _query.useList = true;
          }
        }
        queryParams.reduce = false;
        queryParams.include_docs = false;
        if (_query.mapReduce) {
          mapReduce = _query.mapReduce;
        } else if (_query.containsValue) {
          return this._executeContainsSearch(store, type, _query);
        }
        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          var db = _this3.get('db');
          try {
            if (mapReduce) {
              if (_query.useList) {
                queryParams.include_docs = true;
                var listParams = {
                  query: queryParams
                };
                db.list(mapReduce + '/sort/' + mapReduce, listParams, function (err, response) {
                  if (err) {
                    _this3._pouchError(reject)(err);
                  } else {
                    _this3._handleQueryResponse(response.json, store, type).then(resolve, reject);
                  }
                });
              } else {
                db.query(mapReduce, queryParams, function (err, response) {
                  if (err) {
                    _this3._pouchError(reject)(err);
                  } else {
                    _this3._handleQueryResponse(response, store, type).then(resolve, reject);
                  }
                });
              }
            } else {
              db.allDocs(queryParams, function (err, response) {
                if (err) {
                  _this3._pouchError(reject)(err);
                } else {
                  _this3._handleQueryResponse(response, store, type).then(resolve, reject);
                }
              });
            }
          } catch (err) {
            _this3._pouchError(reject)(err);
          }
        }, 'findQuery in application-pouchdb-adapter');
      }
    }
  });
});
define('hospitalrun/adapters/user', ['exports', 'ember', 'ember-data', 'hospitalrun/mixins/user-session'], function (exports, _ember, _emberData, _hospitalrunMixinsUserSession) {
  exports['default'] = _emberData['default'].RESTAdapter.extend(_hospitalrunMixinsUserSession['default'], {
    database: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),
    endpoint: '/db/_users/',
    defaultSerializer: 'couchdb',
    oauthHeaders: _ember['default'].computed.alias('database.oauthHeaders'),

    ajaxError: function ajaxError(jqXHR) {
      var error = this._super(jqXHR);
      if (jqXHR && jqXHR.status === 401) {
        var jsonErrors = _ember['default'].$.parseJSON(jqXHR.responseText);
        window.Hospitalrun.__container__.lookup('controller:application').transitionToRoute('login');
        return new _emberData['default'].InvalidError(jsonErrors);
      } else {
        return error;
      }
    },

    /**
    @method ajaxOptions Overriden here so that we can specify xhr with credentials
    @private
    @param {String} url
    @param {String} type The request type GET, POST, PUT, DELETE etc.
    @param {Object} options
    @return {Object} hash
    */
    ajaxOptions: function ajaxOptions(url, type, options) {
      options = options || {};
      options.xhrFields = { withCredentials: true };
      return this._super(url, type, options);
    },

    /**
     Called by the store when a newly created record is
     saved via the `save` method on a model record instance.
      The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request
     to a URL computed by `buildURL`.
      See `serialize` for information on how to customize the serialized form
     of a record.
      @method createRecord
     @param {DS.Store} store
     @param {subclass of DS.Model} type
     @param {DS.Model} record
     @returns {Promise} promise
    */
    createRecord: function createRecord(store, type, record) {
      return this.updateRecord(store, type, record);
    },

    /**
    Called by the store when a record is deleted.
    @method deleteRecord
    @param {DS.Store} store
    @param {subclass of DS.Model} type
    @param {DS.Snapshot} record
    @returns {Promise} promise
    */
    deleteRecord: function deleteRecord(store, type, snapshot) {
      return this.updateRecord(store, type, snapshot, true);
    },

    /**
    Called by the store in order to fetch the JSON for a given
    type and ID.
     The `find` method makes an Ajax request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.
     This method performs an HTTP `GET` request with the id provided as part of the query string.
     @method find
    @param {DS.Store} store
    @param {subclass of DS.Model} type
    @param {String} id
    @returns {Promise} promise
    */
    find: function find(store, type, id) {
      var findUrl = this.endpoint + id;
      return this.ajax(findUrl, 'GET');
    },

    headers: (function () {
      var oauthHeaders = this.get('oauthHeaders');
      if (_ember['default'].isEmpty(oauthHeaders)) {
        return {};
      } else {
        return oauthHeaders;
      }
    }).property('oauthHeaders'),

    /**
     Called by the store when an existing record is saved
     via the `save` method on a model record instance.
      The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request
     to a URL computed by `buildURL`.
      See `serialize` for information on how to customize the serialized form
     of a record.
      @method updateRecord
     @param {DS.Store} store
     @param {subclass of DS.Model} type
     @param {DS.Snapshot} record
     @param {boolean} deleteUser true if we are deleting the user.
     @returns {Promise} promise
    */
    updateRecord: function updateRecord(store, type, record, deleteUser) {
      var data = {};
      var serializer = store.serializerFor(record.modelName);
      serializer.serializeIntoHash(data, type, record, { includeId: true });
      data.type = 'user';
      if (deleteUser) {
        data.deleted = true;
        delete data.oauth;
        data.roles = ['deleted'];
      }
      if (_ember['default'].isEmpty(data._rev)) {
        delete data._rev;
      }
      data = this._cleanPasswordAttrs(data);
      var putURL = '' + this.endpoint + _ember['default'].get(record, 'id');
      return this.ajax(putURL, 'PUT', {
        data: data
      });
    },

    /**
    Called by the store in order to fetch a JSON array for all
    of the records for a given type.
     The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.
     @private
    @method findAll
    @param {DS.Store} store //currently unused
    @param {subclass of DS.Model} type //currently unused
    @param {String} sinceToken //currently unused
    @returns {Promise} promise
    */
    findAll: function findAll() {
      var ajaxData = {
        data: {
          include_docs: true,
          startkey: '"org.couchdb.user"'
        }
      };
      var allURL = this.endpoint + '_all_docs';
      return this.ajax(allURL, 'GET', ajaxData);
    },

    /**
     Remove null/empty password fields from payload sent to server
     */
    _cleanPasswordAttrs: function _cleanPasswordAttrs(data) {
      var attrsToCheck = ['derived_key', 'password', 'password_scheme', 'password_sha', 'salt', 'iterations'];
      attrsToCheck.forEach(function (attr) {
        if (_ember['default'].isEmpty(data[attr])) {
          delete data[attr];
        }
      });
      return data;
    },

    shouldReloadAll: function shouldReloadAll() {
      return true;
    }

  });
});
define('hospitalrun/admin/address/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({
    hideCancelButton: true,
    updateCapability: 'update_config',

    afterUpdate: function afterUpdate() {
      this.displayAlert(this.get('i18n').t('admin.address.titles.options_saved'), this.get('i18n').t('admin.address.messages.address_saved'));
    }
  });
});
define('hospitalrun/admin/address/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({
    hideNewButton: true,
    newTitle: (0, _emberI18n.translationMacro)('admin.address.new_title'),
    editTitle: (0, _emberI18n.translationMacro)('admin.address.edit_title'),
    model: function model() {
      return new _ember['default'].RSVP.Promise((function (resolve) {
        this.get('store').find('option', 'address_options').then(function (addressOptions) {
          resolve(addressOptions);
        }, (function () {
          var store = this.get('store');
          var newConfig = store.push(store.normalize('option', {
            id: 'address_options',
            value: {
              address1Label: this.get('i18n').t('admin.address.address_label'),
              address1Include: true
            }
          }));
          resolve(newConfig);
        }).bind(this));
      }).bind(this));
    }
  });
});
define("hospitalrun/admin/address/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/admin/address/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
            morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
            morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["label", ["subexpr", "t", ["admin.address.address1_label"], [], ["loc", [null, [5, 25], [5, 59]]]], "property", "value.address1Label"], ["loc", [null, [5, 8], [5, 92]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["admin.address.include1_label"], [], ["loc", [null, [6, 28], [6, 62]]]], "property", "value.address1Include"], ["loc", [null, [6, 8], [6, 97]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["admin.address.address2_label"], [], ["loc", [null, [7, 25], [7, 59]]]], "property", "value.address2Label"], ["loc", [null, [7, 8], [7, 92]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["admin.address.include2_label"], [], ["loc", [null, [8, 28], [8, 62]]]], "property", "value.address2Include"], ["loc", [null, [8, 8], [8, 97]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["admin.address.address3_label"], [], ["loc", [null, [9, 25], [9, 59]]]], "property", "value.address3Label"], ["loc", [null, [9, 8], [9, 92]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["admin.address.include3_label"], [], ["loc", [null, [10, 28], [10, 62]]]], "property", "value.address3Include"], ["loc", [null, [10, 8], [10, 97]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["admin.address.address4_label"], [], ["loc", [null, [11, 25], [11, 59]]]], "property", "value.address4Label"], ["loc", [null, [11, 8], [11, 92]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["admin.address.include4_label"], [], ["loc", [null, [12, 28], [12, 62]]]], "property", "value.address4Include"], ["loc", [null, [12, 8], [12, 97]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/admin/address/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 23], [4, 28]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [4, 6], [13, 18]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/admin/address/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [16, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/admin/loaddb/controller', ['exports', 'ember', 'ember-i18n', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/progress-dialog'], function (exports, _ember, _emberI18n, _hospitalrunMixinsModalHelper, _hospitalrunMixinsProgressDialog) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsProgressDialog['default'], {
    database: _ember['default'].inject.service(),
    fileSystem: _ember['default'].inject.service('filesystem'),
    progressMessage: (0, _emberI18n.translationMacro)('admin.loaddb.progress_message'),
    progressTitle: (0, _emberI18n.translationMacro)('admin.loaddb.progress_title'),
    syncResults: null,

    actions: {
      loadFile: function loadFile() {
        var _this = this;

        var fileSystem = this.get('fileSystem'),
            fileToImport = this.get('importFile');
        if (!fileToImport || !fileToImport.type) {
          this.displayAlert(this.get('i18n').t('admin.loaddb.display_alert_title'), this.get('i18n').t('admin.loaddb.display_alert_message'));
        } else {
          this.showProgressModal();
          this.set('syncResults');
          fileSystem.fileToString(fileToImport).then(function (fileAsString) {
            var database = _this.get('database');
            _this.set('importFile');
            _this.set('model.importFileName');
            database.loadDBFromDump(fileAsString).then(function (results) {
              _this.closeProgressModal();
              _this.set('syncResults', results);
            })['catch'](function (err) {
              _this.displayAlert(_this.get('i18n').t('admin.loaddb.error_display_alert_title'), _this.get('i18n').t('admin.loaddb.error_display_alert_message', { error: JSON.stringify(err) }));
            });
          });
        }
      }
    }
  });
});
define('hospitalrun/admin/loaddb/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {
    hideNewButton: true,
    editTitle: (0, _emberI18n.translationMacro)('admin.loaddb.edit_title'),

    beforeModel: function beforeModel() {
      if (!this.currentUserCan('load_db')) {
        this.transitionTo('application');
      }
    },

    // No model needed for import.
    model: function model() {
      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));
    }
  });
});
define("hospitalrun/admin/loaddb/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/admin/loaddb/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createElementMorph(element4);
          morphs[2] = dom.createMorphAt(element4, 0, 0);
          return morphs;
        },
        statements: [["inline", "file-upload", [], ["label", ["subexpr", "t", ["labels.file_to_Load"], [], ["loc", [null, [4, 28], [4, 53]]]], "property", "importFileName", "selectedFile", ["subexpr", "@mut", [["get", "importFile", ["loc", [null, [4, 93], [4, 103]]]]], [], []]], ["loc", [null, [4, 8], [4, 106]]]], ["element", "action", ["loadFile"], [], ["loc", [null, [5, 40], [5, 61]]]], ["inline", "t", ["buttons.load_file"], [], ["loc", [null, [5, 62], [5, 87]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/admin/loaddb/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group col-xs-3");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "form-control-static");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group col-xs-3");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "form-control-static");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group col-xs-3");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "form-control-static");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group col-xs-3");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "form-control-static");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var element1 = dom.childAt(fragment, [5]);
          var element2 = dom.childAt(fragment, [7]);
          var element3 = dom.childAt(fragment, [9]);
          var morphs = new Array(9);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["labels.file_load_successful"], [], ["loc", [null, [8, 10], [8, 45]]]], ["inline", "t", ["labels.start_time"], [], ["loc", [null, [10, 15], [10, 40]]]], ["inline", "date-format", [["get", "syncResults.start_time", ["loc", [null, [11, 53], [11, 75]]]]], ["format", "l h:mm A"], ["loc", [null, [11, 39], [11, 95]]]], ["inline", "t", ["labels.end_time"], [], ["loc", [null, [14, 15], [14, 38]]]], ["inline", "date-format", [["get", "syncResults.end_time", ["loc", [null, [15, 53], [15, 73]]]]], ["format", "l h:mm A"], ["loc", [null, [15, 39], [15, 93]]]], ["inline", "t", ["labels.doc_read"], [], ["loc", [null, [18, 15], [18, 38]]]], ["content", "syncResults.docs_read", ["loc", [null, [19, 39], [19, 64]]]], ["inline", "t", ["labels.doc_written"], [], ["loc", [null, [22, 15], [22, 41]]]], ["content", "syncResults.docs_written", ["loc", [null, [23, 39], [23, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/admin/loaddb/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-primary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element5, 1, 1);
        morphs[1] = dom.createMorphAt(element5, 2, 2);
        return morphs;
      },
      statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 21], [3, 26]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [3, 4], [6, 16]]]], ["block", "if", [["get", "syncResults", ["loc", [null, [7, 10], [7, 21]]]]], [], 1, null, ["loc", [null, [7, 4], [25, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('hospitalrun/admin/lookup/controller', ['exports', 'ember', 'hospitalrun/mixins/billing-categories', 'hospitalrun/mixins/lab-pricing-types', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/imaging-pricing-types', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/unit-types', 'hospitalrun/mixins/visit-types'], function (exports, _ember, _hospitalrunMixinsBillingCategories, _hospitalrunMixinsLabPricingTypes, _hospitalrunMixinsModalHelper, _hospitalrunMixinsImagingPricingTypes, _hospitalrunMixinsInventoryTypeList, _hospitalrunMixinsUnitTypes, _hospitalrunMixinsVisitTypes) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsBillingCategories['default'], _hospitalrunMixinsLabPricingTypes['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsImagingPricingTypes['default'], _hospitalrunMixinsInventoryTypeList['default'], _hospitalrunMixinsUnitTypes['default'], _hospitalrunMixinsVisitTypes['default'], {
    fileSystem: _ember['default'].inject.service('filesystem'),
    lookupTypes: _ember['default'].computed(function () {
      return [{
        name: this.get('i18n').t('admin.lookup.anesthesia_types'),
        value: 'anesthesia_types',
        model: {
          procedure: 'anesthesiaType'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.anesthesiologists'),
        value: 'anesthesiologists',
        model: {
          procedure: 'anesthesiologist'
        }
      }, {
        defaultValues: 'defaultBillingCategories',
        name: this.get('i18n').t('admin.lookup.billing_categories'),
        value: 'billing_categories',
        models: {
          'billing-line-item': 'category'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.clinic_list'),
        value: 'clinic_list',
        models: { // Models that use this lookup -- use this later to update models on lookup changes
          patient: 'clinic'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.country_list'),
        value: 'country_list',
        models: {
          patient: 'country'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.diagnosis_list'),
        value: 'diagnosis_list',
        models: {
          visit: 'primaryDiagnosis'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.cpt_code_list'),
        value: 'cpt_code_list',
        models: {
          procedure: 'cptCode'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.expense_account_list'),
        value: 'expense_account_list',
        models: {
          'inv-request': 'expenseAccount',
          pricing: 'expenseAccount'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.aisle_location_list'),
        value: 'aisle_location_list',
        models: {
          inventory: 'aisleLocation',
          'inv-location': 'aisleLocation',
          'inv-purchase': 'aisleLocation',
          'inv-request': ['deliveryAisle', 'locationsAffected' // Special use case that we need to handle
          ]
        }
      }, {
        name: this.get('i18n').t('admin.lookup.warehouse_list'),
        value: 'warehouse_list',
        models: {
          inventory: 'location',
          'inv-location': 'location',
          'inv-purchase': 'location',
          'inv-request': ['deliveryLocation', 'locationsAffected' // Special use case that we need to handle
          ]
        }
      }, {
        defaultValues: 'defaultInventoryTypes',
        name: this.get('i18n').t('admin.lookup.inventory_types'),
        value: 'inventory_types',
        models: {
          inventory: 'inventoryType'
        }
      }, {
        defaultValues: 'defaultImagingPricingTypes',
        name: this.get('i18n').t('admin.lookup.imaging_pricing_types'),
        value: 'imaging_pricing_types',
        models: {
          pricing: 'pricingType'
        }
      }, {
        defaultValues: 'defaultLabPricingTypes',
        name: this.get('i18n').t('admin.lookup.lab_pricing_types'),
        value: 'lab_pricing_types',
        models: {
          pricing: 'pricingType'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.patient_status_list'),
        value: 'patient_status_list',
        models: {
          patient: 'status'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.physician_list'),
        value: 'physician_list',
        models: {
          appointment: 'provider',
          visit: 'examiner',
          procedure: ['assistant', 'physician']
        }
      }, {
        name: this.get('i18n').t('admin.lookup.procedure_list'),
        value: 'procedure_list',
        models: {
          procedure: 'description'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.procedure_locations'),
        value: 'procedure_locations',
        models: {
          procedure: 'location'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.procedure_pricing_types'),
        value: 'procedure_pricing_types',
        models: {
          pricing: 'pricingType'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.radiologists'),
        value: 'radiologists',
        model: {
          imaging: 'radiologist'
        }
      }, {
        name: this.get('i18n').t('labels.sex'),
        value: 'sex',
        model: {
          patient: 'sex'
        }
      }, {
        defaultValues: 'defaultUnitList',
        name: this.get('i18n').t('admin.lookup.unit_types'),
        value: 'unit_types',
        models: {
          inventory: 'distributionUnit',
          'inv-purchase': 'distributionUnit'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.vendor_list'),
        value: 'vendor_list',
        models: {
          'inv-purchase': 'vendor'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.visit_location_list'),
        value: 'visit_location_list',
        models: {
          appointment: 'location',
          visit: 'location'
        }
      }, {
        defaultValues: 'defaultVisitTypes',
        name: this.get('i18n').t('admin.lookup.visit_types'),
        value: 'visit_types',
        models: {
          visit: 'visitType'
        }
      }, {
        name: this.get('i18n').t('admin.lookup.ward_pricing_types'),
        value: 'ward_pricing_types',
        models: {
          pricing: 'pricingType'
        }
      }];
    }),

    importFile: _ember['default'].computed.alias('lookupTypeList.importFile'),

    lookupTitle: (function () {
      var lookupType = this.get('model.lookupType'),
          lookupTypes = this.get('lookupTypes'),
          lookupDesc;
      if (!_ember['default'].isEmpty(lookupType)) {
        lookupDesc = lookupTypes.findBy('value', lookupType);
        if (!_ember['default'].isEmpty(lookupDesc)) {
          return lookupDesc.name;
        }
      }
    }).property('model.lookupType'),

    lookupTypeList: (function () {
      var lookupType = this.get('model.lookupType'),
          lookupItem;
      if (!_ember['default'].isEmpty(lookupType)) {
        lookupItem = this.get('model').findBy('id', lookupType);
        if (_ember['default'].isEmpty(lookupItem) || !lookupItem.get('isLoaded')) {
          var defaultValues = [],
              lookupTypes = this.get('lookupTypes'),
              lookupDesc = lookupTypes.findBy('value', lookupType),
              store = this.get('store');
          if (!_ember['default'].isEmpty(lookupDesc) && !_ember['default'].isEmpty(lookupDesc.defaultValues)) {
            defaultValues = this.get(lookupDesc.defaultValues);
          }
          lookupItem = store.push(store.normalize('lookup', {
            id: lookupType,
            value: defaultValues
          }));
        }
        if (!_ember['default'].isEmpty(lookupItem) && _ember['default'].isEmpty(lookupItem.get('userCanAdd'))) {
          lookupItem.set('userCanAdd', true);
        }
        this.set('model.userCanAdd', lookupItem.get('userCanAdd'));
        this.set('model.organizeByType', lookupItem.get('organizeByType'));
        return lookupItem;
      }
    }).property('model.lookupType'),

    lookupTypeValues: (function () {
      var values = this.get('lookupTypeList.value');
      if (!_ember['default'].isEmpty(values)) {
        values.sort(this._sortValues);
      }
      return _ember['default'].ArrayProxy.create({ content: _ember['default'].A(values) });
    }).property('model.lookupType', 'lookupTypeList.value'),

    showOrganizeByType: (function () {
      var lookupType = this.get('model.lookupType');
      return !_ember['default'].isEmpty(lookupType) && lookupType.indexOf('pricing_types') > 0;
    }).property('model.lookupType'),

    _canDeleteValue: function _canDeleteValue(value) {
      var lookupType = this.get('model.lookupType');
      switch (lookupType) {
        case 'inventory_types':
          {
            if (value === 'Medication') {
              this.displayAlert(this.get('i18n').t('admin.lookup.delete_value_inventory_type_medication_title'), this.get('i18n').t('admin.lookup.delete_value_inventory_type_medication_message'));
              return false;
            }
            break;
          }
        case 'lab_pricing_types':
          {
            if (value === 'Lab Procedure') {
              this.displayAlert(this.get('i18n').t('admin.lookup.delete_value_lab_pricing_type_procedure_title'), this.get('i18n').t('admin.lookup.delete_value_lab_pricing_type_procedure_message'));
              return false;
            }
            break;
          }
        case 'imaging_pricing_types':
          {
            if (value === 'Imaging Procedure') {
              this.displayAlert(this.get('i18n').t('admin.lookup.delete_value_imaging_pricing_type_procedure_title'), this.get('i18n').t('admin.lookup.delete_value_imaging_pricing_type_procedure_message'));
              return false;
            }
            break;
          }
        case 'visit_types':
          {
            if (value === 'Admission') {
              this.displayAlert(this.get('i18n').t('admin.lookup.delete_value_visit_type_admission_title'), this.get('i18n').t('admin.lookup.delete_value_visit_type_admission_message'));
              return false;
            } else if (value === 'Imaging') {
              this.displayAlert(this.get('i18n').t('admin.lookup.delete_value_visit_type_imaging_title'), this.get('i18n').t('admin.lookup.delete_value_visit_type_imaging_message'));
              return false;
            } else if (value === 'Lab') {
              this.displayAlert(this.get('i18n').t('admin.lookup.delete_value_visit_type_lab_title'), this.get('i18n').t('admin.lookup.delete_value_visit_type_lab_message'));
              return false;
            } else if (value === 'Pharmacy') {
              this.displayAlert(this.get('i18n').t('admin.lookup.delete_value_visit_type_pharmacy_title'), this.get('i18n').t('admin.lookup.delete_value_visit_type_pharmacy_message'));
              return false;
            }
          }
      }
      return true;
    },

    _sortValues: function _sortValues(a, b) {
      return _ember['default'].compare(a.toLowerCase(), b.toLowerCase());
    },

    actions: {
      addValue: function addValue() {
        this.send('openModal', 'admin.lookup.edit', _ember['default'].Object.create({
          isNew: true
        }));
      },
      deleteValue: function deleteValue(value) {
        var lookupTypeList = this.get('lookupTypeList'),
            lookupTypeValues = lookupTypeList.get('value');
        if (this._canDeleteValue(value)) {
          lookupTypeValues.removeObject(value.toString());
          lookupTypeList.save();
        }
      },
      editValue: function editValue(value) {
        if (!_ember['default'].isEmpty(value)) {
          this.send('openModal', 'admin.lookup.edit', _ember['default'].Object.create({
            isNew: false,
            originalValue: value.toString(),
            value: value.toString()
          }));
        }
      },
      importList: function importList() {
        var fileSystem = this.get('fileSystem'),
            fileToImport = this.get('importFile'),
            lookupTypeList = this.get('lookupTypeList');
        if (!fileToImport || !fileToImport.type) {
          this.displayAlert(this.get('i18n').t('admin.lookup.alert_import_list_title'), this.get('i18n').t('admin.lookup.alert_import_list_message'));
        } else {
          fileSystem.fileToDataURL(fileToImport).then((function (fileDataUrl) {
            var dataUrlParts = fileDataUrl.split(',');
            lookupTypeList.setProperties({
              _attachments: {
                file: {
                  content_type: fileToImport.type,
                  data: dataUrlParts[1]
                }
              },
              importFile: true
            });
            lookupTypeList.save().then((function () {
              this.displayAlert(this.get('i18n').t('admin.lookup.alert_import_list_save_title'), this.get('i18n').t('admin.lookup.alert_import_list_save_message'), 'refreshLookupLists');
              this.set('importFile');
              this.set('model.importFileName');
            }).bind(this));
          }).bind(this));
        }
      },
      updateList: function updateList() {
        var lookupTypeList = this.get('lookupTypeList');
        lookupTypeList.set('userCanAdd', this.get('model.userCanAdd'));
        lookupTypeList.set('organizeByType', this.get('model.organizeByType'));
        lookupTypeList.save().then((function () {
          this.displayAlert(this.get('i18n').t('admin.lookup.alert_import_list_update_title'), this.get('i18n').t('admin.lookup.alert_import_list_update_message'));
        }).bind(this));
      },
      updateValue: function updateValue(valueObject) {
        var updateList = false,
            lookupTypeList = this.get('lookupTypeList'),
            lookupTypeValues = this.get('lookupTypeValues'),
            values = lookupTypeList.get('value'),
            value = valueObject.get('value');
        if (valueObject.get('isNew')) {
          updateList = true;
        } else {
          var originalValue = valueObject.get('originalValue');
          if (value !== originalValue) {
            lookupTypeValues.removeObject(originalValue);
            updateList = true;
            // TODO UPDATE ALL EXISTING DATA LOOKUPS (NODEJS JOB)
          }
        }
        if (updateList) {
          values.addObject(value);
          values = values.sort(this._sortValues);
          lookupTypeList.set('value', values);
          lookupTypeList.save().then(function (list) {
            // Make sure that the list on screen gets updated with the sorted items.
            var values = _ember['default'].copy(list.get('value'));
            lookupTypeValues.clear();
            lookupTypeValues.addObjects(values);
          });
        }
      }
    }
  });
});
define('hospitalrun/admin/lookup/edit/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {
    editController: _ember['default'].inject.controller('admin/lookup'),
    showUpdateButton: true,

    updateButtonAction: 'update',

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      update: function update() {
        if (!_ember['default'].isEmpty(this.get('model.value'))) {
          this.get('editController').send('updateValue', this.get('model'));
          this.send('closeModal');
        }
      }
    }
  });
});
define("hospitalrun/admin/lookup/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/admin/lookup/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["label", ["subexpr", "t", ["admin.lookup.edit.template.label_title"], [], ["loc", [null, [7, 21], [7, 65]]]], "property", "value", "class", "lookup-type-value"], ["loc", [null, [7, 4], [7, 110]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/admin/lookup/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false, "action", "update"], 0, null, ["loc", [null, [6, 2], [8, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/admin/lookup/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "t", [["subexpr", "if", [["get", "model.isNew", ["loc", [null, [3, 17], [3, 28]]]], "admin.lookup.edit.template.add_title", "admin.lookup.edit.template.edit_title"], [], ["loc", [null, [3, 13], [3, 108]]]]], [], ["loc", [null, [3, 10], [3, 109]]]], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "t", [["subexpr", "if", [["get", "model.isNew", ["loc", [null, [5, 28], [5, 39]]]], "admin.lookup.edit.template.update_button_text_add", "admin.lookup.edit.template.update_button_text_update"], [], ["loc", [null, [5, 24], [5, 147]]]]], [], ["loc", [null, [5, 21], [5, 148]]]]], 0, null, ["loc", [null, [1, 0], [9, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/admin/lookup/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    hideNewButton: true,
    pageTitle: (0, _emberI18n.translationMacro)('admin.lookup.page_title'),
    model: function model() {
      return this.store.findAll('lookup');
    },

    afterModel: function afterModel(model) {
      model.set('lookupType', 'anesthesia_types');
    },

    actions: {
      refreshLookupLists: function refreshLookupLists() {
        this.refresh();
      }
    }
  });
});
define("hospitalrun/admin/lookup/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/admin/lookup/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "em-select", [], ["class", "col-xs-3 lookup-type", "label", ["subexpr", "t", ["labels.lookup_type"], [], ["loc", [null, [5, 63], [5, 87]]]], "property", "lookupType", "content", ["subexpr", "@mut", [["get", "lookupTypes", ["loc", [null, [6, 50], [6, 61]]]]], [], []], "optionValuePath", "value", "optionLabelPath", "name", "selected", ["subexpr", "@mut", [["get", "model.lookupType", ["loc", [null, [8, 29], [8, 45]]]]], [], []]], ["loc", [null, [5, 16], [9, 18]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 12
            },
            "end": {
              "line": 32,
              "column": 12
            }
          },
          "moduleName": "hospitalrun/admin/lookup/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "lookup-type-value");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default neutral");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default warning");
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "octicon octicon-x");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var element6 = dom.childAt(element5, [3]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element6, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
          morphs[1] = dom.createElementMorph(element7);
          morphs[2] = dom.createMorphAt(element7, 0, 0);
          morphs[3] = dom.createElementMorph(element8);
          morphs[4] = dom.createMorphAt(element8, 1, 1);
          return morphs;
        },
        statements: [["content", "lookupTypeValue", ["loc", [null, [26, 50], [26, 69]]]], ["element", "action", ["editValue", ["get", "lookupTypeValue", ["loc", [null, [28, 85], [28, 100]]]]], ["bubbles", false], ["loc", [null, [28, 64], [28, 117]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [28, 118], [28, 137]]]], ["element", "action", ["deleteValue", ["get", "lookupTypeValue", ["loc", [null, [29, 87], [29, 102]]]]], ["bubbles", false], ["loc", [null, [29, 64], [29, 119]]]], ["inline", "t", ["labels.delete"], [], ["loc", [null, [29, 159], [29, 180]]]]],
        locals: ["lookupTypeValue"],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 16
              },
              "end": {
                "line": 45,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/admin/lookup/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-checkbox", [], ["label", "Organize Pricing By Type", "property", "organizeByType", "class", "col-sm-4"], ["loc", [null, [44, 20], [44, 111]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/admin/lookup/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-sm-4");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-sm-4");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [3]);
          var element3 = dom.childAt(element0, [5]);
          var element4 = dom.childAt(element3, [3]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(element1, 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element2, 0, 0);
          morphs[3] = dom.createMorphAt(element0, 3, 3);
          morphs[4] = dom.createMorphAt(element3, 1, 1);
          morphs[5] = dom.createElementMorph(element4);
          morphs[6] = dom.createMorphAt(element4, 0, 0);
          return morphs;
        },
        statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["labels.user_can_add_new_value"], [], ["loc", [null, [40, 40], [40, 75]]]], "property", "userCanAdd"], ["loc", [null, [40, 20], [40, 99]]]], ["element", "action", ["updateList"], [], ["loc", [null, [41, 52], [41, 75]]]], ["inline", "t", ["buttons.update"], [], ["loc", [null, [41, 76], [41, 98]]]], ["block", "if", [["get", "showOrganizeByType", ["loc", [null, [43, 22], [43, 40]]]]], [], 0, null, ["loc", [null, [43, 16], [45, 23]]]], ["inline", "file-upload", [], ["label", ["subexpr", "t", ["labels.import_file"], [], ["loc", [null, [47, 40], [47, 64]]]], "property", "importFileName", "selectedFile", ["subexpr", "@mut", [["get", "importFile", ["loc", [null, [47, 104], [47, 114]]]]], [], []]], ["loc", [null, [47, 20], [47, 117]]]], ["element", "action", ["importList"], [], ["loc", [null, [48, 52], [48, 75]]]], ["inline", "t", ["buttons.import"], [], ["loc", [null, [48, 76], [48, 98]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/admin/lookup/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-primary");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-primary");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-heading");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        dom.setAttribute(el3, "class", "panel-title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        dom.setAttribute(el4, "class", "table-header");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-footer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "btn btn-default neutral");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element9 = dom.childAt(fragment, [2]);
        var element10 = dom.childAt(element9, [3, 1]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element9, [5]);
        var element13 = dom.childAt(element12, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element9, [1, 1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element11, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(element10, 3, 3);
        morphs[5] = dom.createElementMorph(element13);
        morphs[6] = dom.createMorphAt(element13, 0, 0);
        morphs[7] = dom.createMorphAt(element12, 3, 3);
        return morphs;
      },
      statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 25], [3, 30]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [3, 8], [11, 20]]]], ["content", "lookupTitle", ["loc", [null, [16, 32], [16, 47]]]], ["inline", "t", ["labels.value"], [], ["loc", [null, [21, 20], [21, 40]]]], ["inline", "t", ["labels.actions"], [], ["loc", [null, [22, 20], [22, 42]]]], ["block", "each", [["get", "lookupTypeValues", ["loc", [null, [24, 20], [24, 36]]]]], [], 1, null, ["loc", [null, [24, 12], [32, 21]]]], ["element", "action", ["addValue"], [], ["loc", [null, [36, 48], [36, 69]]]], ["inline", "t", ["buttons.add_value"], [], ["loc", [null, [36, 70], [36, 95]]]], ["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [37, 25], [37, 30]]]]], [], []], "submitButton", false], 2, null, ["loc", [null, [37, 8], [51, 20]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('hospitalrun/admin/query/controller', ['exports', 'ember', 'hospitalrun/mixins/edit-panel-props', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunMixinsEditPanelProps, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsEditPanelProps['default'], {
    hideCancelButton: true,
    showUpdateButton: true,
    updateButtonAction: 'query',
    updateButtonText: 'Query', // admin function not requiring i8ln

    objectTypeList: ['appointment', 'imaging', 'inv-location', 'inv-purchase', 'inv-request', 'inventory', 'invoice', 'lab', 'medication', 'patient', 'photo', 'procedure', 'visit', 'vital'],

    objectTypes: _ember['default'].computed.map('objectTypeList', _hospitalrunUtilsSelectValues['default'].selectValuesMap),

    actions: {
      query: function query() {
        var fieldName = this.get('fieldName'),
            objectType = this.get('objectType'),
            queryValue = this.get('queryValue');
        var query = {
          containsValue: {
            value: queryValue,
            keys: [fieldName]
          }
        };
        this.store.query(objectType, query).then((function (results) {
          if (_ember['default'].isEmpty(results)) {
            this.set('errorMessage', 'Query returned no results.');
            this.set('haveError', true);
            this.set('showQueryResults', false);
          } else {
            var currentValue,
                attributes = ['id'],
                resultRow,
                resultRows = [];
            results.get('firstObject').eachAttribute(function (name) {
              attributes.push(name);
            });

            results.forEach(function (result) {
              resultRow = [];
              /*resultRow.push({
                  name: 'id',
                  value: result.get('id')
              });*/
              attributes.forEach(function (attribute) {
                currentValue = result.get(attribute);
                if (!_ember['default'].isEmpty(currentValue)) {
                  resultRow.push({
                    name: attribute,
                    value: currentValue
                  });
                }
              });
              resultRows.push(resultRow);
            });
            this.set('resultRows', resultRows);
            this.set('haveError', false);
            this.set('showQueryResults', true);
          }
        }).bind(this), (function (error) {
          this.set('errorMessage', error);
          this.set('haveError', true);
          this.set('showQueryResults', false);
        }).bind(this));
      }
    }
  });
});
define('hospitalrun/admin/query/route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsUserSession) {
  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsUserSession['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
    beforeModel: function beforeModel() {
      if (!this.currentUserCan('query_db')) {
        this.transitionTo('application');
      }
    }
  });
});
define("hospitalrun/admin/query/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/admin/query/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-select", [], ["class", "col-xs-3", "label", "Object Type", "property", "objectType", "content", ["subexpr", "@mut", [["get", "objectTypes", ["loc", [null, [9, 44], [9, 55]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "objectType", ["loc", [null, [10, 23], [10, 33]]]]], [], []]], ["loc", [null, [8, 10], [11, 12]]]], ["inline", "em-input", [], ["label", "Field Name", "property", "fieldName"], ["loc", [null, [13, 8], [13, 60]]]], ["inline", "em-input", [], ["label", "Query Value", "property", "queryValue"], ["loc", [null, [14, 8], [14, 62]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/admin/query/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-danger");
            dom.setAttribute(el1, "role", "alert");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "errorMessage", ["loc", [null, [19, 49], [19, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 33,
                    "column": 12
                  },
                  "end": {
                    "line": 38,
                    "column": 12
                  }
                },
                "moduleName": "hospitalrun/admin/query/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("th");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
                return morphs;
              },
              statements: [["content", "name", ["loc", [null, [35, 20], [35, 28]]]], ["content", "value", ["loc", [null, [36, 20], [36, 29]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 8
                },
                "end": {
                  "line": 40,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/admin/query/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1, "class", "table");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tr");
              dom.setAttribute(el2, "class", "table-header");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createTextNode("Field");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createTextNode("Value");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["block", "each", [["get", "this", ["loc", [null, [33, 20], [33, 24]]]]], [], 0, null, ["loc", [null, [33, 12], [38, 21]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/admin/query/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel panel-primary");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createTextNode("Query Results");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-body");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "resultRows", ["loc", [null, [27, 16], [27, 26]]]]], [], 0, null, ["loc", [null, [27, 8], [40, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/admin/query/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "this", ["loc", [null, [6, 23], [6, 27]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 6], [15, 18]]]], ["block", "if", [["get", "haveError", ["loc", [null, [18, 8], [18, 17]]]]], [], 1, null, ["loc", [null, [18, 2], [20, 9]]]], ["block", "if", [["get", "showQueryResults", ["loc", [null, [21, 8], [21, 24]]]]], [], 2, null, ["loc", [null, [21, 2], [43, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/admin/query/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment(" template-lint bare-strings=false ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [3, 29], [3, 43]]]]], [], []]], 0, null, ["loc", [null, [3, 0], [44, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/admin/roles/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/user-roles', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUserRoles, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUserRoles['default'], _hospitalrunMixinsUserSession['default'], {
    currentRole: '',
    disabledAction: false,
    hideCancelButton: true,
    updateCapability: 'user_roles',
    filteredRoles: _ember['default'].computed.filter('userRoles', function (userRole) {
      return userRole.name !== 'System Administrator';
    }),

    availableCapabilities: [{
      name: 'admin',
      capabilities: ['admin', 'load_db', 'update_config', 'user_roles']
    }, {
      name: 'appointments',
      capabilities: ['appointments', 'add_appointment']
    }, {
      name: 'billing',
      capabilities: ['billing', 'add_charge', 'add_pricing', 'add_pricing_profile', 'add_invoice', 'add_payment', 'delete_invoice', 'delete_pricing', 'delete_pricing_profile', 'edit_invoice', 'invoices', 'override_invoice', 'pricing']
    }, {
      name: 'patients',
      capabilities: ['patients', 'add_diagnosis', 'add_photo', 'add_patient', 'add_visit', 'add_vitals', 'admit_patient', 'delete_photo', 'delete_patient', 'delete_appointment', 'delete_diagnosis', 'delete_procedure', 'delete_socialwork', 'delete_vitals', 'delete_visit', 'discharge_patient', 'patient_reports', 'visits']
    }, {
      name: 'medication',
      capabilities: ['medication', 'add_medication', 'delete_medication', 'fulfill_medication']
    }, {
      name: 'labs',
      capabilities: ['labs', 'add_lab', 'complete_lab', 'delete_lab']
    }, {
      name: 'imaging',
      capabilities: ['imaging', 'add_imaging', 'complete_imaging', 'delete_imaging']
    }, {
      name: 'inventory',
      capabilities: ['inventory', 'add_inventory_request', 'add_inventory_item', 'add_inventory_purchase', 'adjust_inventory_location', 'delete_inventory_item', 'fulfill_inventory']
    }],

    capabilitySections: _ember['default'].computed.map('availableCapabilities', function (section) {
      var _this = this;

      var mappedCapabilities = [];
      section.capabilities.forEach(function (key) {
        mappedCapabilities.push({
          key: key,
          name: _this.get('i18n').t('admin.roles.capability.' + key)
        });
      });
      return {
        name: this.get('i18n').t('admin.roles.capability.' + section.name),
        capabilities: mappedCapabilities
      };
    }),

    actions: {
      selectRole: function selectRole(role) {
        var _this2 = this;

        var roleToUpdate = this.get('model').findBy('id', role.dasherize());
        this.set('currentRole', role);
        this.set('roleToUpdate', roleToUpdate);
        if (roleToUpdate) {
          var capabilities = roleToUpdate.get('capabilities');
          this.get('availableCapabilities').forEach(function (section) {
            section.capabilities.forEach(function (capability) {
              if (capabilities.contains(capability)) {
                _this2.set(capability, true);
              } else {
                _this2.set(capability, false);
              }
            });
          });
        } else {
          var defaultCapabilities = this.get('defaultCapabilities');
          Object.keys(defaultCapabilities).forEach(function (capability) {
            var capabilityRoles = defaultCapabilities[capability];
            if (capabilityRoles.contains(role)) {
              _this2.set(capability, true);
            } else {
              _this2.set(capability, false);
            }
          });
        }
      },

      update: function update() {
        var _this3 = this;

        var currentRole = this.get('currentRole');
        var roleToUpdate = this.get('roleToUpdate');
        if (_ember['default'].isEmpty(roleToUpdate)) {
          roleToUpdate = this.get('store').createRecord('user-role', {
            id: currentRole.dasherize(),
            name: currentRole
          });
        }
        var capabilitiesToSave = [];
        this.get('availableCapabilities').forEach(function (section) {
          section.capabilities.forEach(function (capability) {
            if (_this3.get(capability) === true) {
              capabilitiesToSave.push(capability);
            }
          });
        });
        roleToUpdate.set('capabilities', capabilitiesToSave);
        roleToUpdate.save().then(function () {
          _this3.displayAlert(_this3.get('i18n').t('admin.roles.titles.role_saved'), _this3.get('i18n').t('admin.roles.messages.role_saved', { roleName: currentRole }));
        });
      }
    }

  });
});
define('hospitalrun/admin/roles/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({
    hideNewButton: true,
    newTitle: (0, _emberI18n.translationMacro)('admin.user_roles'),
    editTitle: (0, _emberI18n.translationMacro)('admin.user_roles'),
    model: function model() {
      return this.get('store').findAll('user-role');
    }
  });
});
define("hospitalrun/admin/roles/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 12
                },
                "end": {
                  "line": 15,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/admin/roles/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element1, 'value');
              morphs[1] = dom.createAttrMorph(element1, 'selected');
              morphs[2] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "userRole.name", ["loc", [null, [11, 31], [11, 44]]]]]]], ["attribute", "selected", ["subexpr", "eq", [["get", "selectedRole", ["loc", [null, [12, 36], [12, 48]]]], ["get", "userRole.name", ["loc", [null, [12, 49], [12, 62]]]]], [], ["loc", [null, [12, 31], [12, 64]]]]], ["content", "userRole.name", ["loc", [null, [13, 16], [13, 33]]]]],
            locals: ["userRole"],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 14
                  },
                  "end": {
                    "line": 28,
                    "column": 14
                  }
                },
                "moduleName": "hospitalrun/admin/roles/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "capability.name", ["loc", [null, [27, 36], [27, 51]]]]], [], []], "property", ["subexpr", "@mut", [["get", "capability.key", ["loc", [null, [27, 61], [27, 75]]]]], [], []], "class", ["subexpr", "concat", ["checkbox", " checkbox-", ["get", "capability.key", ["loc", [null, [27, 114], [27, 128]]]]], [], ["loc", [null, [27, 82], [27, 129]]]]], ["loc", [null, [27, 16], [27, 131]]]]],
              locals: ["capability"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/admin/roles/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "detail-section");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "panel-heading");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("h3");
              dom.setAttribute(el3, "class", "panel-title");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "detail-section-content");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
              return morphs;
            },
            statements: [["content", "capabilitySection.name", ["loc", [null, [22, 16], [22, 42]]]], ["block", "each", [["get", "capabilitySection.capabilities", ["loc", [null, [26, 22], [26, 52]]]]], [], 0, null, ["loc", [null, [26, 14], [28, 23]]]]],
            locals: ["capabilitySection"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 32,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/admin/roles/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group has-success");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("select");
            dom.setAttribute(el2, "class", "form-control role-select");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("option");
            dom.setAttribute(el3, "disabled", "");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [3]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
            morphs[1] = dom.createAttrMorph(element3, 'onchange');
            morphs[2] = dom.createAttrMorph(element4, 'selected');
            morphs[3] = dom.createMorphAt(element3, 3, 3);
            morphs[4] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["labels.role"], [], ["loc", [null, [6, 39], [6, 58]]]], ["attribute", "onchange", ["subexpr", "action", ["selectRole"], ["value", "target.value"], ["loc", [null, [7, 27], [7, 71]]]]], ["attribute", "selected", ["subexpr", "is-not", [["get", "selectedRole", ["loc", [null, [8, 47], [8, 59]]]]], [], ["loc", [null, [8, 38], [8, 61]]]]], ["block", "each", [["get", "filteredRoles", ["loc", [null, [10, 20], [10, 33]]]]], [], 0, null, ["loc", [null, [10, 12], [15, 21]]]], ["block", "each", [["get", "capabilitySections", ["loc", [null, [18, 16], [18, 34]]]]], [], 1, null, ["loc", [null, [18, 8], [31, 17]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/admin/roles/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 23], [4, 27]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [4, 6], [32, 18]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/admin/roles/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [35, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/admin/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({
    addCapability: 'add_user',
    allowSearch: false,
    moduleName: 'admin',
    sectionTitle: 'Admin',

    editPath: (function () {
      return 'users.edit';
    }).property(),

    deletePath: (function () {
      return 'users.delete';
    }).property()
  });
});
define('hospitalrun/app', ['exports', 'ember', 'hospitalrun/resolver', 'ember-load-initializers', 'hospitalrun/config/environment'], function (exports, _ember, _hospitalrunResolver, _emberLoadInitializers, _hospitalrunConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _hospitalrunConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _hospitalrunConfigEnvironment['default'].podModulePrefix,
    Resolver: _hospitalrunResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _hospitalrunConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('hospitalrun/appointments/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    title: 'Delete Appointment',

    afterDeleteAction: (function () {
      var deleteFromPatient = this.get('model.deleteFromPatient');
      if (deleteFromPatient) {
        return 'appointmentDeleted';
      } else {
        return 'closeModal';
      }
    }).property('model.deleteFromPatient')
  });
});
define("hospitalrun/appointments/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/appointments/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["appointments.messages.delete_appointment_message"], [], ["loc", [null, [8, 4], [8, 60]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/appointments/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/appointments/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsAppointmentStatuses, _ember, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsVisitTypes) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsAppointmentStatuses['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsVisitTypes['default'], {
    appointmentsController: _ember['default'].inject.controller('appointments'),
    endHour: null,
    endMinute: null,
    findPatientVisits: false,
    startHour: null,
    startMinute: null,

    hourList: (function () {
      var hour,
          hourList = [];
      for (hour = 0; hour < 24; hour++) {
        var hourText = hour % 12 + (hour < 12 ? ' AM' : ' PM');
        if (hourText === '0 AM') {
          hourText = 'Midnight';
        } else if (hourText === '0 PM') {
          hourText = 'Noon';
        }
        hourList.push({
          name: hourText,
          value: hour
        });
      }
      return hourList;
    }).property(),

    locationList: _ember['default'].computed.alias('appointmentsController.locationList'),

    lookupListsToUpdate: [{
      name: 'physicianList',
      property: 'model.provider',
      id: 'physician_list'
    }, {
      name: 'locationList',
      property: 'model.location',
      id: 'visit_location_list'
    }],

    minuteList: (function () {
      var minute,
          minuteList = [];
      for (minute = 0; minute < 60; minute++) {
        minuteList.push(String('00' + minute).slice(-2));
      }
      return minuteList;
    }).property(),

    physicianList: _ember['default'].computed.alias('appointmentsController.physicianList'),
    showTime: (function () {
      var allDay = this.get('model.allDay'),
          isAdmissionAppointment = this.get('isAdmissionAppointment');
      return !allDay && isAdmissionAppointment;
    }).property('model.allDay', 'isAdmissionAppointment'),
    visitTypesList: _ember['default'].computed.alias('appointmentsController.visitTypeList'),

    cancelAction: (function () {
      var returnTo = this.get('model.returnTo');
      if (_ember['default'].isEmpty(returnTo)) {
        return this._super();
      } else {
        return 'returnTo';
      }
    }).property('model.returnTo'),

    isAdmissionAppointment: (function () {
      var model = this.get('model'),
          appointmentType = model.get('appointmentType'),
          isAdmissionAppointment = appointmentType === 'Admission';
      if (!isAdmissionAppointment) {
        model.set('allDay', true);
      }
      return isAdmissionAppointment;
    }).property('model.appointmentType'),

    updateCapability: 'add_appointment',

    afterUpdate: function afterUpdate() {
      this.send(this.get('cancelAction'));
    },

    beforeUpdate: function beforeUpdate() {
      this._updateAppointmentDates();
      return _ember['default'].RSVP.Promise.resolve();
    },

    endHourChanged: (function () {
      this._updateDate('endHour', 'endDate');
    }).observes('endHour'),

    endMinuteChanged: (function () {
      this._updateDate('endMinute', 'endDate');
    }).observes('endMinute'),

    endTimeHasError: (function () {
      var endDateError = this.get('model.errors.endDate');
      return endDateError.length > 0;
    }).property('model.isValid'),

    isAllDay: (function () {
      var allDay = this.get('model.allDay'),
          isAdmissionAppointment = this.get('isAdmissionAppointment');
      if (allDay) {
        var endDate = this.get('model.endDate'),
            startDate = this.get('model.startDate');
        this.set('model.startDate', moment(startDate).startOf('day').toDate());
        this.set('startHour', 0);
        this.set('startMinute', '00');
        this.set('model.endDate', moment(endDate).endOf('day').toDate());
        this.set('endHour', 23);
        this.set('endMinute', '59');
      } else {
        if (isAdmissionAppointment) {
          this._updateAllTimes();
        }
      }
      return allDay;
    }).property('model.allDay'),

    startHourChanged: (function () {
      this._updateDate('startHour', 'startDate');
    }).observes('startHour'),

    startMinuteChanged: (function () {
      this._updateDate('startMinute', 'startDate');
    }).observes('startMinute'),

    _updateAllTimes: function _updateAllTimes() {
      this.endHourChanged();
      this.endMinuteChanged();
      this.startMinuteChanged();
      this.startHourChanged();
    },

    _updateAppointmentDates: function _updateAppointmentDates() {
      var allDay = this.get('model.allDay'),
          isAdmissionAppointment = this.get('isAdmissionAppointment'),
          appointmentDate = this.get('model.appointmentDate');
      if (!isAdmissionAppointment) {
        this.set('model.endDate', appointmentDate);
        this.set('model.startDate', appointmentDate);
        if (!allDay) {
          this._updateAllTimes();
        }
      }
    },

    _updateDate: function _updateDate(fieldName, dateFieldName) {
      var model = this.get('model'),
          fieldValue = this.get(fieldName),
          dateToChange = model.get(dateFieldName);
      if (!_ember['default'].isEmpty(dateToChange)) {
        dateToChange = moment(dateToChange);
        if (fieldName.indexOf('Hour') > -1) {
          dateToChange.hour(fieldValue);
        } else {
          dateToChange.minute(fieldValue);
        }
        model.set(dateFieldName, dateToChange.toDate());
        _ember['default'].run.once(this, function () {
          model.validate()['catch'](_ember['default'].K);
        });
      }
    }
  });
});
define('hospitalrun/appointments/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-list-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsPatientListRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsPatientListRoute['default'], {
    editTitle: (0, _emberI18n.translationMacro)('appointments.edit_title'),
    modelName: 'appointment',
    newTitle: (0, _emberI18n.translationMacro)('appointments.new_title'),

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        appointmentType: 'Admission',
        allDay: true,
        selectPatient: true,
        startDate: new Date()
      });
    }
  });
});
define("hospitalrun/appointments/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/appointments/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-typeahead", [], ["property", "patientTypeAhead", "label", ["subexpr", "t", ["labels.patient"], [], ["loc", [null, [4, 60], [4, 80]]]], "content", ["subexpr", "@mut", [["get", "patientList", ["loc", [null, [4, 89], [4, 100]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedPatient", ["loc", [null, [4, 111], [4, 126]]]]], [], []], "class", "required test-patient-input"], ["loc", [null, [4, 6], [4, 164]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/appointments/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-summary", [], ["patient", ["subexpr", "@mut", [["get", "model.patient", ["loc", [null, [6, 32], [6, 45]]]]], [], []], "returnTo", "appointments.edit", "returnToContext", ["subexpr", "@mut", [["get", "model.id", ["loc", [null, [6, 91], [6, 99]]]]], [], []], "disablePatientLink", ["subexpr", "@mut", [["get", "model.isNew", ["loc", [null, [6, 119], [6, 130]]]]], [], []]], ["loc", [null, [6, 6], [6, 133]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 6
                },
                "end": {
                  "line": 12,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/appointments/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "date-picker", [], ["property", "startDate", "label", ["subexpr", "t", ["labels.start_date"], [], ["loc", [null, [10, 49], [10, 72]]]], "showTime", ["subexpr", "@mut", [["get", "showTime", ["loc", [null, [10, 82], [10, 90]]]]], [], []], "class", "col-sm-4 required test-appointment-start"], ["loc", [null, [10, 8], [10, 141]]]], ["inline", "date-picker", [], ["property", "endDate", "label", ["subexpr", "t", ["labels.end_date"], [], ["loc", [null, [11, 47], [11, 68]]]], "showTime", ["subexpr", "@mut", [["get", "showTime", ["loc", [null, [11, 78], [11, 86]]]]], [], []], "class", "col-sm-4 required test-appointment-end"], ["loc", [null, [11, 8], [11, 135]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 56,
                      "column": 12
                    },
                    "end": {
                      "line": 58,
                      "column": 12
                    }
                  },
                  "moduleName": "hospitalrun/appointments/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  dom.setAttribute(el1, "class", "help-block");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["inline", "t", ["appointments.messages.end_time_later_than_start"], [], ["loc", [null, [57, 36], [57, 91]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 8
                  },
                  "end": {
                    "line": 60,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/appointments/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "form-group col-sm-3 required");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "control-label");
                dom.setAttribute(el2, "for", "startTime");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "input-group");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "input-group-addon");
                var el4 = dom.createTextNode(":");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "control-label");
                dom.setAttribute(el2, "for", "endTime");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "input-group");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "input-group-addon");
                var el4 = dom.createTextNode(":");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [3]);
                var element2 = dom.childAt(fragment, [3]);
                var element3 = dom.childAt(element2, [3]);
                var morphs = new Array(8);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(element1, 1, 1);
                morphs[2] = dom.createMorphAt(element1, 5, 5);
                morphs[3] = dom.createAttrMorph(element2, 'class');
                morphs[4] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
                morphs[5] = dom.createMorphAt(element3, 1, 1);
                morphs[6] = dom.createMorphAt(element3, 5, 5);
                morphs[7] = dom.createMorphAt(element2, 5, 5);
                return morphs;
              },
              statements: [["inline", "t", ["labels.start_time"], [], ["loc", [null, [16, 57], [16, 82]]]], ["inline", "select-list", [], ["content", ["subexpr", "@mut", [["get", "hourList", ["loc", [null, [19, 24], [19, 32]]]]], [], []], "optionLabelPath", "name", "optionValuePath", "value", "value", ["subexpr", "@mut", [["get", "startHour", ["loc", [null, [22, 22], [22, 31]]]]], [], []], "class", "form-control", "id", "startTime", "action", ["subexpr", "action", [["subexpr", "mut", [["get", "startHour", ["loc", [null, [25, 36], [25, 45]]]]], [], ["loc", [null, [25, 31], [25, 46]]]]], [], ["loc", [null, [25, 23], [25, 47]]]]], ["loc", [null, [18, 14], [26, 16]]]], ["inline", "select-list", [], ["content", ["subexpr", "@mut", [["get", "minuteList", ["loc", [null, [29, 24], [29, 34]]]]], [], []], "value", ["subexpr", "@mut", [["get", "startMinute", ["loc", [null, [30, 22], [30, 33]]]]], [], []], "class", "form-control", "action", ["subexpr", "action", [["subexpr", "mut", [["get", "startMinute", ["loc", [null, [32, 36], [32, 47]]]]], [], ["loc", [null, [32, 31], [32, 48]]]]], [], ["loc", [null, [32, 23], [32, 49]]]]], ["loc", [null, [28, 14], [33, 16]]]], ["attribute", "class", ["concat", ["form-group col-sm-3 required has-feedback ", ["subexpr", "if", [["get", "endTimeHasError", ["loc", [null, [36, 69], [36, 84]]]], "has-error"], [], ["loc", [null, [36, 64], [36, 98]]]]]]], ["inline", "t", ["labels.end_time"], [], ["loc", [null, [37, 55], [37, 78]]]], ["inline", "select-list", [], ["content", ["subexpr", "@mut", [["get", "hourList", ["loc", [null, [40, 26], [40, 34]]]]], [], []], "optionLabelPath", "name", "optionValuePath", "value", "value", ["subexpr", "@mut", [["get", "endHour", ["loc", [null, [43, 24], [43, 31]]]]], [], []], "class", "form-control", "id", "endTime", "action", ["subexpr", "action", [["subexpr", "mut", [["get", "endHour", ["loc", [null, [46, 38], [46, 45]]]]], [], ["loc", [null, [46, 33], [46, 46]]]]], [], ["loc", [null, [46, 25], [46, 47]]]]], ["loc", [null, [39, 14], [47, 16]]]], ["inline", "select-list", [], ["content", ["subexpr", "@mut", [["get", "minuteList", ["loc", [null, [50, 26], [50, 36]]]]], [], []], "value", ["subexpr", "@mut", [["get", "endMinute", ["loc", [null, [51, 24], [51, 33]]]]], [], []], "class", "form-control", "action", ["subexpr", "action", [["subexpr", "mut", [["get", "endMinute", ["loc", [null, [53, 38], [53, 47]]]]], [], ["loc", [null, [53, 33], [53, 48]]]]], [], ["loc", [null, [53, 25], [53, 49]]]]], ["loc", [null, [49, 14], [54, 16]]]], ["block", "if", [["get", "endTimeHasError", ["loc", [null, [56, 18], [56, 33]]]]], [], 0, null, ["loc", [null, [56, 12], [58, 19]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/appointments/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "date-picker", [], ["property", "appointmentDate", "label", ["subexpr", "t", ["labels.date"], [], ["loc", [null, [13, 55], [13, 72]]]], "class", "col-sm-4 required test-appointment-date"], ["loc", [null, [13, 8], [13, 122]]]], ["block", "unless", [["get", "isAllDay", ["loc", [null, [14, 18], [14, 26]]]]], [], 0, null, ["loc", [null, [14, 8], [60, 19]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 83,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/appointments/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [2]);
            var element5 = dom.childAt(fragment, [4]);
            var element6 = dom.childAt(fragment, [6]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(element4, 1, 1);
            morphs[2] = dom.createMorphAt(element4, 3, 3);
            morphs[3] = dom.createMorphAt(element5, 1, 1);
            morphs[4] = dom.createMorphAt(element5, 3, 3);
            morphs[5] = dom.createMorphAt(element6, 1, 1);
            morphs[6] = dom.createMorphAt(element6, 3, 3);
            morphs[7] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.selectPatient", ["loc", [null, [3, 10], [3, 29]]]]], [], 0, 1, ["loc", [null, [3, 4], [7, 11]]]], ["block", "if", [["get", "isAdmissionAppointment", ["loc", [null, [9, 12], [9, 34]]]]], [], 2, 3, ["loc", [null, [9, 6], [61, 13]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["labels.all_day"], [], ["loc", [null, [62, 26], [62, 46]]]], "property", "allDay", "class", "col-sm-2"], ["loc", [null, [62, 6], [62, 84]]]], ["inline", "em-select", [], ["class", "col-sm-6 required test-appointment-type", "label", ["subexpr", "t", ["labels.type"], [], ["loc", [null, [65, 72], [65, 89]]]], "property", "appointmentType", "content", ["subexpr", "@mut", [["get", "visitTypes", ["loc", [null, [66, 43], [66, 53]]]]], [], []]], ["loc", [null, [65, 6], [67, 8]]]], ["inline", "select-or-typeahead", [], ["className", "col-sm-6 test-appointment-with", "property", "provider", "label", ["subexpr", "t", ["labels.with"], [], ["loc", [null, [69, 14], [69, 31]]]], "list", ["subexpr", "@mut", [["get", "physicianList", ["loc", [null, [69, 37], [69, 50]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.provider", ["loc", [null, [70, 18], [70, 32]]]]], [], []]], ["loc", [null, [68, 6], [71, 8]]]], ["inline", "select-or-typeahead", [], ["className", "col-sm-6 required test-appointment-location", "property", "location", "label", ["subexpr", "t", ["labels.location"], [], ["loc", [null, [75, 14], [75, 35]]]], "list", ["subexpr", "@mut", [["get", "locationList", ["loc", [null, [75, 41], [75, 53]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.location", ["loc", [null, [76, 18], [76, 32]]]]], [], []]], ["loc", [null, [74, 6], [77, 8]]]], ["inline", "em-select", [], ["class", "col-sm-3 test-appointment-status", "property", "status", "label", ["subexpr", "t", ["labels.status"], [], ["loc", [null, [79, 14], [79, 33]]]], "content", ["subexpr", "@mut", [["get", "appointmentStatuses", ["loc", [null, [79, 42], [79, 61]]]]], [], []]], ["loc", [null, [78, 6], [80, 8]]]], ["inline", "em-text", [], ["label", ["subexpr", "t", ["labels.notes"], [], ["loc", [null, [82, 20], [82, 38]]]], "property", "notes", "rows", 3], ["loc", [null, [82, 4], [82, 65]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 84,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/appointments/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [83, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/appointments/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [84, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/appointments/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {
    startKey: [],
    canAddVisit: (function () {
      return this.currentUserCan('add_visit');
    }).property(),

    canEdit: (function () {
      // Add and edit are the same capability
      return this.currentUserCan('add_appointment');
    }).property(),

    canDelete: (function () {
      return this.currentUserCan('delete_appointment');
    }).property(),

    sortProperties: ['startDate', 'endDate'],
    sortAscending: true
  });
});
define('hospitalrun/appointments/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    editReturn: 'appointments.index',
    modelName: 'appointment',
    pageTitle: (0, _emberI18n.translationMacro)('appointments.this_week'),

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var endDate = item.get('endDate'),
          id = this._getPouchIdFromItem(item),
          startDate = item.get('startDate');
      if (endDate && endDate !== '') {
        endDate = new Date(endDate);
        if (endDate.getTime) {
          endDate = endDate.getTime();
        }
      }
      if (startDate && startDate !== '') {
        startDate = new Date(startDate);
        if (startDate.getTime) {
          startDate = startDate.getTime();
        }
      }

      return [startDate, endDate, id];
    },

    _modelQueryParams: function _modelQueryParams() {
      var endOfWeek = moment().endOf('week').toDate().getTime(),
          startOfWeek = moment().startOf('week').toDate().getTime(),
          maxId = this._getMaxPouchId();
      return {
        options: {
          startkey: [startOfWeek, null, null],
          endkey: [endOfWeek, endOfWeek, maxId]
        },
        mapReduce: 'appointments_by_date'
      };
    },

    actions: {
      editAppointment: function editAppointment(appointment) {
        appointment.set('returnTo', this.get('editReturn'));
        this.send('editItem', appointment);
      }
    }
  });
});
define("hospitalrun/appointments/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/appointments/index/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["appointments/item"], [], ["loc", [null, [13, 6], [13, 37]]]]],
          locals: ["appointment"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/appointments/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "class", "table");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          dom.setAttribute(el2, "class", "table-header");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element1, [9]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element1, [13]), 0, 0);
          morphs[7] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["labels.date"], [], ["loc", [null, [4, 10], [4, 29]]]], ["inline", "t", ["labels.name"], [], ["loc", [null, [5, 10], [5, 29]]]], ["inline", "t", ["labels.type"], [], ["loc", [null, [6, 10], [6, 29]]]], ["inline", "t", ["labels.location"], [], ["loc", [null, [7, 10], [7, 33]]]], ["inline", "t", ["labels.provider"], [], ["loc", [null, [8, 10], [8, 33]]]], ["inline", "t", ["labels.status"], [], ["loc", [null, [9, 10], [9, 31]]]], ["inline", "t", ["labels.actions"], [], ["loc", [null, [10, 10], [10, 32]]]], ["block", "each", [["get", "model", ["loc", [null, [12, 12], [12, 17]]]]], [], 0, null, ["loc", [null, [12, 4], [14, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/appointments/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [16, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/appointments/item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 8
            },
            "end": {
              "line": 14,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/appointments/item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default neutral");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["editAppointment", ["get", "appointment", ["loc", [null, [13, 79], [13, 90]]]]], ["bubbles", false], ["loc", [null, [13, 52], [13, 107]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [13, 108], [13, 127]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 8
            },
            "end": {
              "line": 17,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/appointments/item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["createVisit", ["get", "appointment", ["loc", [null, [16, 67], [16, 78]]]]], ["bubbles", false], ["loc", [null, [16, 44], [16, 95]]]], ["inline", "t", ["buttons.add_visit"], [], ["loc", [null, [16, 96], [16, 121]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 8
            },
            "end": {
              "line": 20,
              "column": 16
            }
          },
          "moduleName": "hospitalrun/appointments/item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default warning");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "octicon octicon-x");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Delete");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["deleteItem", ["get", "appointment", ["loc", [null, [19, 80], [19, 91]]]]], ["bubbles", false], ["loc", [null, [19, 58], [19, 109]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/appointments/item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        dom.setAttribute(el2, "class", "appointment-date");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        dom.setAttribute(el2, "class", "appointment-status");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n        \n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [13]);
        var morphs = new Array(10);
        morphs[0] = dom.createElementMorph(element3);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [9]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [11]), 0, 0);
        morphs[7] = dom.createMorphAt(element4, 1, 1);
        morphs[8] = dom.createMorphAt(element4, 2, 2);
        morphs[9] = dom.createMorphAt(element4, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["editAppointment", ["get", "appointment", ["loc", [null, [1, 31], [1, 42]]]]], [], ["loc", [null, [1, 4], [1, 44]]]], ["content", "appointment.formattedAppointmentDate", ["loc", [null, [3, 8], [3, 48]]]], ["content", "appointment.patient.displayName", ["loc", [null, [5, 8], [5, 43]]]], ["content", "appointment.appointmentType", ["loc", [null, [6, 8], [6, 39]]]], ["content", "appointment.location", ["loc", [null, [7, 8], [7, 32]]]], ["content", "appointment.provider", ["loc", [null, [8, 8], [8, 32]]]], ["content", "appointment.displayStatus", ["loc", [null, [9, 35], [9, 64]]]], ["block", "if", [["get", "canEdit", ["loc", [null, [12, 14], [12, 21]]]]], [], 0, null, ["loc", [null, [12, 8], [14, 15]]]], ["block", "if", [["get", "canAddVisit", ["loc", [null, [15, 14], [15, 25]]]]], [], 1, null, ["loc", [null, [15, 8], [17, 15]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [18, 14], [18, 23]]]]], [], 2, null, ["loc", [null, [18, 8], [20, 23]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('hospitalrun/appointments/missed/controller', ['exports', 'hospitalrun/appointments/index/controller'], function (exports, _hospitalrunAppointmentsIndexController) {
  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend({
    startKey: []
  });
});
define('hospitalrun/appointments/missed/route', ['exports', 'hospitalrun/appointments/index/route', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _emberI18n) {
  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend({
    editReturn: 'appointments.missed',
    modelName: 'appointment',
    pageTitle: (0, _emberI18n.translationMacro)('appointments.missed'),

    _modelQueryParams: function _modelQueryParams() {
      var queryParams = this._super.apply(this, arguments);
      queryParams.filterBy = [{
        name: 'status',
        value: 'Missed'
      }];
      return queryParams;
    }
  });
});
define("hospitalrun/appointments/missed/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/appointments/missed/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["appointments/index"], [], ["loc", [null, [1, 0], [1, 32]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/appointments/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsUserSession, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {
    addCapability: 'add_appointment',
    allowSearch: false,
    currentScreenTitle: (0, _emberI18n.translationMacro)('appointments.current_screen_title'),
    editTitle: (0, _emberI18n.translationMacro)('appointments.edit_title'),
    newTitle: (0, _emberI18n.translationMacro)('appointments.new_title'),
    moduleName: 'appointments',
    newButtonText: (0, _emberI18n.translationMacro)('appointments.buttons.new_button'),
    sectionTitle: (0, _emberI18n.translationMacro)('appointments.section_title'),

    actions: {
      createVisit: function createVisit(appointment) {
        var visitProps = appointment.getProperties('startDate', 'endDate', 'location', 'patient');
        visitProps.visitType = appointment.get('appointmentType');
        visitProps.examiner = appointment.get('provider');
        this.transitionTo('visits.edit', 'new').then((function (newRoute) {
          newRoute.currentModel.setProperties(visitProps);
        }).bind(this));
      }
    },

    additionalModels: [{
      name: 'physicianList',
      findArgs: ['lookup', 'physician_list']
    }, {
      name: 'locationList',
      findArgs: ['lookup', 'visit_location_list']
    }, {
      name: 'visitTypesList',
      findArgs: ['lookup', 'visit_types']
    }]
  });
});
define('hospitalrun/appointments/search/controller', ['exports', 'hospitalrun/appointments/index/controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunAppointmentsIndexController, _hospitalrunMixinsAppointmentStatuses, _ember, _hospitalrunUtilsSelectValues, _hospitalrunMixinsVisitTypes) {
  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend(_hospitalrunMixinsAppointmentStatuses['default'], _hospitalrunMixinsVisitTypes['default'], {
    appointmentsController: _ember['default'].inject.controller('appointments'),
    appointmentType: null,
    physicians: _ember['default'].computed.alias('appointmentsController.physicianList.value'),
    physicianList: (function () {
      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('physicians'), true);
    }).property('physicians'),

    provider: null,
    queryParams: ['appointmentType', 'provider', 'status', 'startKey', 'startDate'],
    selectedProvider: null,
    selectedStatus: null,
    sortProperties: null,
    startDate: null,
    startKey: [],
    status: null,
    visitTypesList: _ember['default'].computed.alias('appointmentsController.visitTypeList'),

    actions: {
      search: function search() {
        var appointmentType = this.get('model.selectedAppointmentType'),
            fieldsToSet = {
          startKey: [],
          previousStartKey: null,
          previousStartKeys: []
        },
            provider = this.get('model.selectedProvider'),
            status = this.get('model.selectedStatus'),
            startDate = this.get('model.selectedStartingDate');

        if (_ember['default'].isEmpty(appointmentType)) {
          fieldsToSet.appointmentType = null;
        } else {
          fieldsToSet.appointmentType = appointmentType;
        }
        if (_ember['default'].isEmpty(provider)) {
          fieldsToSet.provider = null;
        } else {
          fieldsToSet.provider = provider;
        }
        if (_ember['default'].isEmpty(status)) {
          fieldsToSet.status = null;
        } else {
          fieldsToSet.status = status;
        }
        if (!_ember['default'].isEmpty(startDate)) {
          fieldsToSet.startDate = startDate.getTime();
        }
        if (!_ember['default'].isEmpty(fieldsToSet)) {
          this.setProperties(fieldsToSet);
        }
      }
    }
  });
});
define('hospitalrun/appointments/search/route', ['exports', 'hospitalrun/appointments/index/route', 'hospitalrun/mixins/date-format', 'ember', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _hospitalrunMixinsDateFormat, _ember, _emberI18n) {
  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend(_hospitalrunMixinsDateFormat['default'], {
    editReturn: 'appointments.search',
    filterParams: ['appointmentType', 'provider', 'status'],
    modelName: 'appointment',
    pageTitle: (0, _emberI18n.translationMacro)('appointments.search_title'),

    queryParams: {
      appointmentType: { refreshModel: true },
      provider: { refreshModel: true },
      status: { refreshModel: true },
      startDate: { refreshModel: true },
      startKey: { refreshModel: true }
    },

    _modelQueryParams: function _modelQueryParams(params) {
      var startDate = params.startDate,
          maxValue = this.get('maxValue');
      if (_ember['default'].isEmpty(startDate)) {
        startDate = moment();
      } else {
        startDate = moment(parseInt(startDate));
      }
      var startOfDay = startDate.startOf('day').toDate().getTime();
      var searchOptions = {
        startkey: [startOfDay, null, 'appointment_'],
        endkey: [maxValue, maxValue, 'appointment_' + maxValue]
      };
      return {
        options: searchOptions,
        mapReduce: 'appointments_by_date'
      };
    },

    model: function model(params) {
      return this._super(params).then((function (model) {
        model.setProperties({
          selectedAppointmentType: params.appointmentType,
          selectedProvider: params.provider,
          selectedStatus: params.status
        });
        var startDate = params.startDate;
        startDate = new Date();
        if (!_ember['default'].isEmpty(params.startDate)) {
          startDate.setTime(params.startDate);
        }
        model.set('selectedStartingDate', startDate);
        model.set('display_selectedStartingDate', this._dateFormat(startDate));
        return model;
      }).bind(this));
    }

  });
});
define("hospitalrun/appointments/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/appointments/search/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "calss", "row");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            morphs[3] = dom.createMorphAt(element1, 3, 3);
            return morphs;
          },
          statements: [["inline", "date-picker", [], ["property", "selectedStartingDate", "label", "Show Appointments On Or After", "class", "col-sm-3"], ["loc", [null, [6, 10], [6, 112]]]], ["inline", "em-select", [], ["class", "col-sm-3", "property", "selectedStatus", "label", "Status", "content", ["subexpr", "@mut", [["get", "appointmentStatusesWithEmpty", ["loc", [null, [8, 37], [8, 65]]]]], [], []]], ["loc", [null, [7, 10], [9, 12]]]], ["inline", "em-select", [], ["class", "col-sm-3", "label", "Type", "property", "selectedAppointmentType", "content", ["subexpr", "@mut", [["get", "visitTypesWithEmpty", ["loc", [null, [13, 57], [13, 76]]]]], [], []]], ["loc", [null, [12, 10], [14, 12]]]], ["inline", "em-select", [], ["class", "col-sm-3", "property", "selectedProvider", "label", "With", "content", ["subexpr", "@mut", [["get", "physicianList", ["loc", [null, [16, 35], [16, 48]]]]], [], []]], ["loc", [null, [15, 10], [17, 12]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 94
              }
            },
            "moduleName": "hospitalrun/appointments/search/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["labels.date"], [], ["loc", [null, [27, 75], [27, 94]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 6
              },
              "end": {
                "line": 29,
                "column": 105
              }
            },
            "moduleName": "hospitalrun/appointments/search/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["labels.type"], [], ["loc", [null, [29, 86], [29, 105]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 6
              },
              "end": {
                "line": 30,
                "column": 102
              }
            },
            "moduleName": "hospitalrun/appointments/search/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["labels.location"], [], ["loc", [null, [30, 79], [30, 102]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 98
              }
            },
            "moduleName": "hospitalrun/appointments/search/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["labels.with"], [], ["loc", [null, [31, 79], [31, 98]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 6
              },
              "end": {
                "line": 32,
                "column": 98
              }
            },
            "moduleName": "hospitalrun/appointments/search/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["labels.status"], [], ["loc", [null, [32, 77], [32, 98]]]]],
          locals: [],
          templates: []
        };
      })();
      var child6 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 4
              },
              "end": {
                "line": 37,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/appointments/search/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["appointments/item"], [], ["loc", [null, [36, 6], [36, 37]]]]],
          locals: ["appointment"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/appointments/search/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-info");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-footer");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "class", "table");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          dom.setAttribute(el2, "class", "table-header");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [3, 1]);
          var element4 = dom.childAt(fragment, [3]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(11);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(element3, 0, 0);
          morphs[3] = dom.createMorphAt(element5, 1, 1);
          morphs[4] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          morphs[5] = dom.createMorphAt(element5, 5, 5);
          morphs[6] = dom.createMorphAt(element5, 7, 7);
          morphs[7] = dom.createMorphAt(element5, 9, 9);
          morphs[8] = dom.createMorphAt(element5, 11, 11);
          morphs[9] = dom.createMorphAt(dom.childAt(element5, [13]), 0, 0);
          morphs[10] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 23], [4, 28]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [4, 6], [19, 18]]]], ["element", "action", ["search"], [], ["loc", [null, [22, 38], [22, 57]]]], ["inline", "t", ["buttons.search"], [], ["loc", [null, [22, 58], [22, 80]]]], ["block", "sortable-column", [], ["sortBy", "date", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [27, 48], [27, 56]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [27, 65], [27, 72]]]]], [], []]], 1, null, ["loc", [null, [27, 6], [27, 114]]]], ["inline", "t", ["labels.name"], [], ["loc", [null, [28, 10], [28, 29]]]], ["block", "sortable-column", [], ["sortBy", "appointmentType", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [29, 59], [29, 67]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [29, 76], [29, 83]]]]], [], []]], 2, null, ["loc", [null, [29, 6], [29, 125]]]], ["block", "sortable-column", [], ["sortBy", "location", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [30, 52], [30, 60]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [30, 69], [30, 76]]]]], [], []]], 3, null, ["loc", [null, [30, 6], [30, 122]]]], ["block", "sortable-column", [], ["sortBy", "provider", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [31, 52], [31, 60]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [31, 69], [31, 76]]]]], [], []]], 4, null, ["loc", [null, [31, 6], [31, 118]]]], ["block", "sortable-column", [], ["sortBy", "status", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [32, 50], [32, 58]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [32, 67], [32, 74]]]]], [], []]], 5, null, ["loc", [null, [32, 6], [32, 118]]]], ["inline", "t", ["labels.actions"], [], ["loc", [null, [33, 10], [33, 32]]]], ["block", "each", [["get", "model", ["loc", [null, [35, 12], [35, 17]]]]], [], 6, null, ["loc", [null, [35, 4], [37, 13]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/appointments/search/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [39, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/appointments/today/controller', ['exports', 'hospitalrun/appointments/index/controller'], function (exports, _hospitalrunAppointmentsIndexController) {
  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend({
    startKey: []
  });
});
define('hospitalrun/appointments/today/route', ['exports', 'hospitalrun/appointments/index/route', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _emberI18n) {
  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend({
    editReturn: 'appointments.today',
    modelName: 'appointment',
    pageTitle: (0, _emberI18n.translationMacro)('appointments.today_title'),

    _modelQueryParams: function _modelQueryParams() {
      var endOfDay = moment().endOf('day').toDate().getTime(),
          maxValue = this.get('maxValue'),
          startOfDay = moment().startOf('day').toDate().getTime();
      return {
        options: {
          startkey: [startOfDay, null, 'appointment_'],
          endkey: [endOfDay, endOfDay, 'appointment_' + maxValue]
        },
        mapReduce: 'appointments_by_date'
      };
    }
  });
});
define("hospitalrun/appointments/today/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/appointments/today/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["appointments/index"], [], ["loc", [null, [1, 0], [1, 32]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/authenticators/custom', ['exports', 'ember', 'ember-simple-auth/authenticators/base'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase) {
  exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
    config: _ember['default'].inject.service(),
    database: _ember['default'].inject.service(),
    serverEndpoint: '/db/_session',
    useGoogleAuth: false,

    /**
      @method absolutizeExpirationTime
      @private
    */
    _absolutizeExpirationTime: function _absolutizeExpirationTime(expiresIn) {
      if (!_ember['default'].isEmpty(expiresIn)) {
        return new Date(new Date().getTime() + (expiresIn - 5) * 1000).getTime();
      }
    },

    _checkUser: function _checkUser(user) {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _this._makeRequest('POST', { name: user.name }, '/chkuser').then(function (response) {
          if (response.error) {
            reject(response);
          }
          user.displayName = response.displayName;
          user.role = response.role;
          user.prefix = response.prefix;
          resolve(user);
        }, function () {
          // If chkuser fails, user is probably offline; resolve with currently stored credentials
          resolve(user);
        });
      });
    },

    _getPromise: function _getPromise(type, data) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this._makeRequest(type, data).then(function (response) {
          _ember['default'].run(function () {
            resolve(response);
          });
        }, function (xhr) {
          _ember['default'].run(function () {
            reject(xhr.responseJSON || xhr.responseText);
          });
        });
      }).bind(this));
    },

    _makeRequest: function _makeRequest(type, data, url) {
      if (!url) {
        url = this.serverEndpoint;
      }
      return _ember['default'].$.ajax({
        url: url,
        type: type,
        data: data,
        dataType: 'json',
        contentType: 'application/x-www-form-urlencoded',
        xhrFields: {
          withCredentials: true
        }
      });
    },

    /**
     Authenticate using google auth credentials or credentials from couch db.
     @method authenticate
     @param {Object} credentials The credentials to authenticate the session with
     @return {Ember.RSVP.Promise} A promise that resolves when an access token is successfully acquired from the server and rejects otherwise
     */
    authenticate: function authenticate(credentials) {
      var _this2 = this;

      if (credentials.google_auth) {
        this.useGoogleAuth = true;
        var sessionCredentials = {
          google_auth: true,
          consumer_key: credentials.params.k,
          consumer_secret: credentials.params.s1,
          token: credentials.params.t,
          token_secret: credentials.params.s2,
          name: credentials.params.i
        };
        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          _this2._checkUser(sessionCredentials).then(function (user) {
            resolve(user);
            _this2.get('config').setCurrentUser(user.name);
          }, reject);
        });
      }

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var data = { name: credentials.identification, password: credentials.password };
        _this2._makeRequest('POST', data).then(function (response) {
          response.name = data.name;
          response.expires_at = _this2._absolutizeExpirationTime(600);
          _this2._checkUser(response).then(function (user) {
            _this2.get('config').setCurrentUser(user.name);
            var database = _this2.get('database');
            database.setup({}).then(function () {
              resolve(user);
            }, reject);
          }, reject);
        }, function (xhr) {
          reject(xhr.responseJSON || xhr.responseText);
        });
      });
    },

    invalidate: function invalidate() {
      if (this.useGoogleAuth) {
        return new _ember['default'].RSVP.resolve();
      } else {
        return this._getPromise('DELETE');
      }
    },

    restore: function restore(data) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var now = new Date().getTime();
        if (!_ember['default'].isEmpty(data.expires_at) && data.expires_at < now) {
          reject();
        } else {
          if (data.google_auth) {
            _this3.useGoogleAuth = true;
          }
          _this3._checkUser(data).then(resolve, reject);
        }
      });
    }

  });
});
define('hospitalrun/components/action-checkbox', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // From http://emberjs.jsbin.com/rwjblue/58/edit?html,css,js,output
    attributeBindings: ['type', 'value'],
    tagName: 'input',
    type: 'checkbox',
    checked: false,

    _updateElementValue: (function () {
      this.set('checked', this.$().prop('checked'));
    }).on('didInsertElement'),

    change: function change() {
      this._updateElementValue();
      this.sendAction('action', this.get('value'), this.get('checked'));
    }
  });
});
define('hospitalrun/components/active-link', ['exports', 'ember-cli-active-link-wrapper/components/active-link'], function (exports, _emberCliActiveLinkWrapperComponentsActiveLink) {
  exports['default'] = _emberCliActiveLinkWrapperComponentsActiveLink['default'];
});
define('hospitalrun/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'hospitalrun/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _hospitalrunConfigEnvironment) {

  var name = _hospitalrunConfigEnvironment['default'].APP.name;
  var version = _hospitalrunConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('hospitalrun/components/array-display', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    isArray: (function () {
      var content = this.get('content');
      return _ember['default'].isArray(content);
    }).property('content')
  });
});
define('hospitalrun/components/charge-quantity', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['col-xs-2', 'form-group'],
    classNameBindings: ['hasError'],
    tagName: 'td',
    pricingItem: null,

    didReceiveAttrs: function didReceiveAttrs() /*attrs*/{
      this._super.apply(this, arguments);
      this.quantitySelected = _ember['default'].computed.alias('model.' + this.get('pricingItem.id'));
    },

    hasError: (function () {
      var quantitySelected = this.get('quantitySelected');
      return !_ember['default'].isEmpty(quantitySelected) && isNaN(quantitySelected);
    }).property('quantitySelected'),

    quantityHelp: (function () {
      if (this.get('hasError')) {
        return 'not a valid number';
      }
    }).property('hasError')

  });
});
define('hospitalrun/components/charges-by-type-tab', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    attributeBindings: ['role'],
    classNameBindings: ['active'],
    index: null,
    pricingList: null,
    role: 'presentation',
    tagName: 'li',

    active: (function () {
      var index = this.get('index');
      return index === 0;
    }).property(),

    tabId: (function () {
      return this.get('pricingType').toLowerCase().dasherize();
    }).property('pricingType'),

    tabHref: (function () {
      var tabId = this.get('tabId');
      return '#' + tabId;
    }).property('tabId')
  });
});
define('hospitalrun/components/checkbox-or-typeahead', ['exports', 'ember', 'hospitalrun/components/select-or-typeahead'], function (exports, _ember, _hospitalrunComponentsSelectOrTypeahead) {
  exports['default'] = _hospitalrunComponentsSelectOrTypeahead['default'].extend({
    checkboxesPerRow: 5,
    model: null,

    _getLabelFromContent: function _getLabelFromContent(object) {
      var optionLabelPath = this.get('optionLabelPath');
      return _ember['default'].get(object, optionLabelPath);
    },

    _getValueFromContent: function _getValueFromContent(object) {
      var optionValuePath = this.get('optionValuePath');
      return _ember['default'].get(object, optionValuePath);
    },

    _mapCheckboxValues: function _mapCheckboxValues(value) {
      return {
        label: this._getLabelFromContent(value),
        value: this._getValueFromContent(value)
      };
    },

    _setup: (function () {
      var property = this.get('property');
      _ember['default'].defineProperty(this, 'errors', _ember['default'].computed('model.errors.' + property, function () {
        var property = this.get('property'),
            errors = this.get('model.errors.' + property);
        if (!_ember['default'].isEmpty(errors)) {
          return errors[0];
        }
      }));
    }).on('init'),

    checkboxRows: (function () {
      var checkboxRows = [],
          checkboxesPerRow = this.get('checkboxesPerRow'),
          content = this.get('content'),
          allValues = content.copy();
      while (allValues.length > 0) {
        var checkBoxRowValues = allValues.splice(0, checkboxesPerRow).map(this._mapCheckboxValues.bind(this));
        checkboxRows.push(checkBoxRowValues);
      }
      return checkboxRows;
    }).property('content', 'checkboxesPerRow'),

    actions: {
      checkboxChanged: function checkboxChanged(value, checked) {
        var property = this.get('property'),
            propertyName = 'model.' + property,
            selectedValues = this.get(propertyName);
        if (!_ember['default'].isArray(selectedValues)) {
          selectedValues = [];
        }
        if (checked && !selectedValues.contains(value)) {
          selectedValues.addObject(value);
        } else if (!checked && selectedValues.contains(value)) {
          selectedValues.removeObject(value);
        }
        this.set(propertyName, selectedValues);
        this.set('selection', selectedValues);
        this.get('model').validate()['catch'](_ember['default'].K);
      }
    }

  });
});
define('hospitalrun/components/control-within-label', ['exports', 'ember-rapid-forms/components/control-within-label'], function (exports, _emberRapidFormsComponentsControlWithinLabel) {
  exports['default'] = _emberRapidFormsComponentsControlWithinLabel['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/custom-form', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Component.extend(_hospitalrunUtilsSelectValues['default'], {
    classNames: 'detail-section-content',
    fieldsByRow: (function () {
      var _this = this;

      var rows = [];
      var form = this.get('form');
      if (!_ember['default'].isEmpty(form)) {
        (function () {
          var fields = form.fields;
          var numberOfColumns = _this.getWithDefault('form.columns', 1);
          var currentRow = [];

          var colCount = 0;
          var colWidth = 12 / numberOfColumns;
          fields.forEach(function (field) {
            if (!field.classNames) {
              field.classNames = '';
            }
            var colSpan = field.colSpan || 1;
            if (colCount === numberOfColumns || colCount + colSpan > numberOfColumns) {
              rows.push(currentRow.slice());
              currentRow = [];
              colCount = 0;
            }
            field.classNames += ' col-sm-' + colWidth * colSpan;
            if (field.type === 'select') {
              field.mappedValues = field.values.map(_this.selectValuesMap);
            }
            currentRow.push(field);
            colCount += colSpan;
          });
          if (colCount > 0) {
            rows.push(currentRow);
          }
        })();
      }
      return rows;
    }).property('form')
  });
});
define('hospitalrun/components/date-input', ['exports', 'ember', 'ember-rapid-forms/components/html-input'], function (exports, _ember, _emberRapidFormsComponentsHtmlInput) {
  exports['default'] = _emberRapidFormsComponentsHtmlInput['default'].extend({
    _picker: null,

    _shouldSetDate: function _shouldSetDate(currentDate, picker) {
      return picker && (_ember['default'].isEmpty(currentDate) || _ember['default'].isEmpty(picker.getDate()) || currentDate.getTime && picker.getDate().getTime() !== currentDate.getTime());
    },

    currentDateChangedValue: function currentDateChangedValue() {
      var currentDate = this.get('currentDate'),
          picker = this.get('_picker');
      if (!_ember['default'].isEmpty(currentDate) && this._shouldSetDate(currentDate, picker)) {
        picker.setDate(currentDate);
      }
    },

    format: (function () {
      var showTime = this.get('showTime');
      if (showTime) {
        return 'l h:mm A';
      } else {
        return 'l';
      }
    }).property('mainComponent.showTime'),

    showTimeChanged: (function () {
      var picker = this.get('_picker');
      if (picker) {
        picker.destroy();
        this.didInsertElement();
      }
    }).observes('mainComponent.showTime'),

    dateSet: function dateSet() {
      var currentDate = this.get('currentDate'),
          picker = this.get('_picker');
      if (this._shouldSetDate(currentDate, picker)) {
        this.set('currentDate', picker.getDate());
      }
    },

    didInsertElement: function didInsertElement() {
      var currentDate = this.get('currentDate'),
          $input = this.$('input'),
          picker = null,
          props = this.getProperties('format', 'yearRange', 'showTime');

      props.onSelect = this.dateSet.bind(this);

      if (!_ember['default'].isEmpty(this.get('minDate'))) {
        props.minDate = this.get('minDate');
        if (props.minDate === 'now') {
          props.minDate = new Date();
        }
      }
      if (!_ember['default'].isEmpty(this.get('maxDate'))) {
        props.maxDate = this.get('maxDate');
        if (props.maxDate === 'now') {
          props.maxDate = new Date();
        }
      }
      props.field = $input[0];
      picker = new Pikaday(props);
      _ember['default'].run.next(this, function () {
        picker.setDate(currentDate);
      });
      this.set('_picker', picker);
    },

    didReceiveAttrs: function didReceiveAttrs() /*attrs*/{
      this._super.apply(this, arguments);
      var dateProperty = this.get('mainComponent.property'),
          displayPropertyName = 'display_' + dateProperty;
      this.set('mainComponent.property', displayPropertyName);
      this.currentDate = _ember['default'].computed.alias('mainComponent.model.' + dateProperty);
      this.selectedValue = _ember['default'].computed.alias('mainComponent.model.' + displayPropertyName);
      this.minDate = _ember['default'].computed.alias('mainComponent.minDate');
      this.maxDate = _ember['default'].computed.alias('mainComponent.maxDate');
      this.showTime = _ember['default'].computed.alias('mainComponent.showTime');
      this.yearRange = _ember['default'].computed.alias('mainComponent.yearRange');
      this.addObserver('mainComponent.model.' + dateProperty, this, this.currentDateChangedValue);
      _ember['default'].Binding.from('mainComponent.model.errors.' + dateProperty).to('mainComponent.model.errors.' + displayPropertyName).connect(this);
    },

    willDestroyElement: function willDestroyElement() {
      var picker = this.get('_picker');
      if (picker) {
        picker.destroy();
      }
      this.set('_picker', null);
    }

  });
});
define('hospitalrun/components/date-picker', ['exports', 'ember-rapid-forms/components/em-input'], function (exports, _emberRapidFormsComponentsEmInput) {
  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({
    htmlComponent: 'date-input',
    minDate: null,
    maxDate: null,
    showTime: false,
    yearRange: 10
  });
});
// Dervied from http://spin.atomicobject.com/2013/10/29/ember-js-date-picker/
define('hospitalrun/components/edit-panel', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    editPanelProps: null,

    actions: {
      cancel: function cancel() {
        this.sendAction('editPanelProps.cancelAction');
      },
      disabledAction: function disabledAction() {
        this.sendAction('editPanelProps.disabledAction');
      },
      fireButtonAction: function fireButtonAction(buttonAction) {
        this.set(buttonAction, buttonAction);
        this.sendAction(buttonAction);
      },
      updateButtonAction: function updateButtonAction() {
        this.sendAction('editPanelProps.updateButtonAction');
      }
    }
  });
});
define('hospitalrun/components/em-checkbox', ['exports', 'ember-rapid-forms/components/em-checkbox'], function (exports, _emberRapidFormsComponentsEmCheckbox) {
  exports['default'] = _emberRapidFormsComponentsEmCheckbox['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-form-control-help', ['exports', 'ember-rapid-forms/components/em-form-control-help'], function (exports, _emberRapidFormsComponentsEmFormControlHelp) {
  exports['default'] = _emberRapidFormsComponentsEmFormControlHelp['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-form-group', ['exports', 'ember-rapid-forms/components/em-form-group'], function (exports, _emberRapidFormsComponentsEmFormGroup) {
  exports['default'] = _emberRapidFormsComponentsEmFormGroup['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-form-label', ['exports', 'ember-rapid-forms/components/em-form-label'], function (exports, _emberRapidFormsComponentsEmFormLabel) {
  exports['default'] = _emberRapidFormsComponentsEmFormLabel['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-form-submit', ['exports', 'ember-rapid-forms/components/em-form-submit'], function (exports, _emberRapidFormsComponentsEmFormSubmit) {
  exports['default'] = _emberRapidFormsComponentsEmFormSubmit['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-form', ['exports', 'ember-rapid-forms/components/em-form'], function (exports, _emberRapidFormsComponentsEmForm) {
  exports['default'] = _emberRapidFormsComponentsEmForm['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-input', ['exports', 'ember-rapid-forms/components/em-input'], function (exports, _emberRapidFormsComponentsEmInput) {
  exports['default'] = _emberRapidFormsComponentsEmInput['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-select', ['exports', 'ember-rapid-forms/components/em-select'], function (exports, _emberRapidFormsComponentsEmSelect) {
  exports['default'] = _emberRapidFormsComponentsEmSelect['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/em-text', ['exports', 'ember-rapid-forms/components/em-text'], function (exports, _emberRapidFormsComponentsEmText) {
  exports['default'] = _emberRapidFormsComponentsEmText['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/erf-html-checkbox', ['exports', 'ember-rapid-forms/components/html-checkbox'], function (exports, _emberRapidFormsComponentsHtmlCheckbox) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRapidFormsComponentsHtmlCheckbox['default'];
    }
  });
});
define('hospitalrun/components/erf-html-input', ['exports', 'ember-rapid-forms/components/html-input'], function (exports, _emberRapidFormsComponentsHtmlInput) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRapidFormsComponentsHtmlInput['default'];
    }
  });
});
define('hospitalrun/components/erf-html-select', ['exports', 'ember-rapid-forms/components/html-select'], function (exports, _emberRapidFormsComponentsHtmlSelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRapidFormsComponentsHtmlSelect['default'];
    }
  });
});
define('hospitalrun/components/erf-html-text', ['exports', 'ember-rapid-forms/components/html-text'], function (exports, _emberRapidFormsComponentsHtmlText) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRapidFormsComponentsHtmlText['default'];
    }
  });
});
define('hospitalrun/components/ext-radio', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    includeOtherOption: false,
    otherOptionLabel: null,
    showInline: false,

    haveLabel: (function () {
      var firstRadio = this.get('content.firstObject');
      return !_ember['default'].isEmpty(firstRadio.label);
    }).property('content'),

    radioClass: (function () {
      if (this.get('showInline')) {
        return 'radio-inline';
      } else {
        return 'radio';
      }
    }).property('showInline')
  });
});
define('hospitalrun/components/file-upload', ['exports', 'hospitalrun/components/image-upload'], function (exports, _hospitalrunComponentsImageUpload) {
  exports['default'] = _hospitalrunComponentsImageUpload['default'].extend({
    resizeFile: false
  });
});
define('hospitalrun/components/form-group-control', ['exports', 'ember-rapid-forms/components/form-group-control'], function (exports, _emberRapidFormsComponentsFormGroupControl) {
  exports['default'] = _emberRapidFormsComponentsFormGroupControl['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/form-group', ['exports', 'ember-rapid-forms/components/form-group'], function (exports, _emberRapidFormsComponentsFormGroup) {
  exports['default'] = _emberRapidFormsComponentsFormGroup['default'];
});
//import Ember from 'ember';
define('hospitalrun/components/icd10-pcs-typeahead', ['exports', 'hospitalrun/components/icd10-typeahead'], function (exports, _hospitalrunComponentsIcd10Typeahead) {
  exports['default'] = _hospitalrunComponentsIcd10Typeahead['default'].extend();
});
define('hospitalrun/components/icd10-typeahead', ['exports', 'hospitalrun/components/type-ahead'], function (exports, _hospitalrunComponentsTypeAhead) {
  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({
    'class': 'scrollable-typeahead',
    minlength: 2,
    selectionKey: 'id',
    setOnBlur: true,
    templates: {
      header: '<div class="alert alert-success well-sm query-results" role="alert"></div>'
    },

    _sourceQuery: function _sourceQuery(query, cb) {
      // Custom source function
      // Get the data from the Blodhound engine and process it.
      this.bloodhound.get(query, (function (suggestions) {
        cb(suggestions);
        // Set the headers content.
        var $header = this.$('.query-results');
        $header.html('<strong><em>' + query + '</em></strong> returned <strong>' + suggestions.length + '</strong> results');
      }).bind(this));
    },

    _getSource: function _getSource() {
      return this._sourceQuery.bind(this);
    }
  });
});
define('hospitalrun/components/image-upload', ['exports', 'ember-rapid-forms/components/em-input'], function (exports, _emberRapidFormsComponentsEmInput) {
  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({
    fileInputEl: null,
    resizeFile: true,
    selectedFile: null,
    type: 'file',

    _fileChanged: function _fileChanged() {
      var inputEl = this.get('fileInputEl'),
          resize = this.get('resizeFile');

      if (resize) {
        // Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js
        window.URL = window.URL || window.webkitURL;
        var blobURL = window.URL.createObjectURL(inputEl.files[0]); // and get it's URL
        // helper Image object
        var image = new Image();
        image.src = blobURL;
        image.onload = (function () {
          window.URL.revokeObjectURL(blobURL);
          // have to wait till it's loaded
          this.set('selectedFile', this._resizeImage(image)); // send it to canvas
        }).bind(this);
      } else {
        this.set('selectedFile', inputEl.files[0]);
      }
    },

    /**
     * Resize the image to no larger than 1024px so that file sizes
     * are not too large.
     */
    _resizeImage: function _resizeImage(img) {
      // Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js
      var canvas = document.createElement('canvas'),
          height = img.height,
          width = img.width,
          maxHeight = 1024,
          maxWidth = 1024;

      // calculate the width and height, constraining the proportions
      if (width > height) {
        if (width > maxWidth) {
          // height *= max_width / width;
          height = Math.round(height *= maxWidth / width);
          width = maxWidth;
        }
      } else {
        if (height > maxHeight) {
          // width *= max_height / height;
          width = Math.round(width *= maxHeight / height);
          height = maxHeight;
        }
      }

      // resize the canvas and draw the image data into it
      canvas.width = width;
      canvas.height = height;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(img, 0, 0, width, height);

      var dataURI = canvas.toDataURL('image/png');
      var binary = atob(dataURI.split(',')[1]);
      var array = [];
      for (var i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
      }
      return new Blob([new Uint8Array(array)], { type: 'image/png' });
    },

    didInsertElement: function didInsertElement() {
      var $input = this.$('input');
      this.set('fileInputEl', $input[0]);
      $input.on('change', this._fileChanged.bind(this));
    }

  });
});
define('hospitalrun/components/inventory-location-picker', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Component.extend({
    calculatedLocationPickers: null,
    doingSetup: false,
    label: null,
    locationList: null,
    quantityRequested: null,

    locationChange: function locationChange() {
      var doingSetup = this.get('doingSetup'),
          locationList = this.get('locationList'),
          locationPickers = this.get('calculatedLocationPickers'),
          quantityRequested = this.get('quantityRequested'),
          quantitySatisfiedIdx = -1,
          selectedLocations = [];
      if (!doingSetup) {
        locationPickers.reduce(function (previousValue, item, index) {
          var selectedLocation = item.get('selectedLocation'),
              returnValue;
          if (_ember['default'].isEmpty(selectedLocation)) {
            returnValue = previousValue;
          } else {
            returnValue = previousValue + selectedLocation.get('quantity');
          }
          if (quantitySatisfiedIdx === -1 && returnValue >= quantityRequested) {
            quantitySatisfiedIdx = index;
          }
          return returnValue;
        }, 0);
        if (quantitySatisfiedIdx > -1) {
          if (locationPickers.get('length') > quantitySatisfiedIdx + 1) {
            locationPickers = locationPickers.slice(0, quantitySatisfiedIdx + 1);
            this.set('calculatedLocationPickers', locationPickers);
          }
        } else {
          locationPickers.addObject(_ember['default'].Object.create());
        }
        this._setupLocationPickers(locationPickers, locationList);
      }
      locationPickers.forEach(function (locationPicker) {
        selectedLocations.addObject(locationPicker.get('selectedLocation'));
      });
      this.set('componentSelectedLocations', selectedLocations);
    },

    _setup: (function () {
      _ember['default'].Binding.from('selectedLocations').to('componentSelectedLocations').connect(this);
    }).on('init'),

    _setupLocationPickers: function _setupLocationPickers(locationPickers, locationList, setInitialLocation) {
      locationPickers.reduce(function (previousValue, item) {
        var selectedLocation = item.get('selectedLocation');
        item.set('subLocationList', previousValue.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap));
        if (!previousValue.contains(selectedLocation) || setInitialLocation) {
          item.set('selectedLocation', previousValue.get('firstObject'));
        }
        item.set('label', 'And');
        return previousValue.filter(function (location) {
          return item.get('selectedLocation.id') !== location.get('id');
        });
      }, locationList);
      var firstPicker = locationPickers.get('firstObject');
      if (!_ember['default'].isEmpty(firstPicker)) {
        firstPicker.set('label', this.get('label'));
      }
      this.set('calculatedLocationPickers', locationPickers);
    },

    locationPickers: (function () {
      var locationList = this.get('locationList'),
          locationPickers = [],
          quantityRequested = this.get('quantityRequested');
      if (_ember['default'].isEmpty(locationList) || _ember['default'].isEmpty(quantityRequested)) {
        // We need both a locationList and a quantityRequested
        return;
      }
      this.set('doingSetup', true);
      locationList.reduce(function (previousValue, location) {
        if (previousValue < quantityRequested) {
          locationPickers.addObject(_ember['default'].Object.create());
        }
        return previousValue + location.get('quantity');
      }, 0);
      this._setupLocationPickers(locationPickers, locationList, true);
      this.locationChange();
      this.set('doingSetup', false);
      return this.get('calculatedLocationPickers');
    }).property('calculatedLocationPickers', 'locationList', 'quantityRequested')
  });
});
define('hospitalrun/components/inventory-typeahead', ['exports', 'ember', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunComponentsTypeAhead) {
  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({
    classNameBindings: ['haveInventoryItems'],
    displayKey: 'name',
    showQuantity: true,
    _mapInventoryItems: function _mapInventoryItems(item) {
      var returnObj = {};
      if (this.get('showQuantity') && item.quantity) {
        returnObj.name = item.name + ' - ' + item.friendlyId + ' (' + item.quantity + ' available)';
      } else {
        returnObj.name = item.name + ' - ' + item.friendlyId;
      }
      returnObj[this.get('selectionKey')] = item;
      return returnObj;
    },

    haveInventoryItems: (function () {
      var content = this.get('content');
      if (!_ember['default'].isEmpty(content) && content.length > 0) {
        return 'have-inventory-items';
      }
    }).property('content'),

    mappedContent: (function () {
      var content = this.get('content'),
          mapped = [];
      if (content) {
        mapped = content.map(this._mapInventoryItems.bind(this));
      }
      return mapped;
    }).property('content'),

    contentChanged: (function () {
      var bloodhound = this.get('bloodhound'),
          content = this.get('content');
      if (bloodhound) {
        bloodhound.clear();
        bloodhound.add(content.map(this._mapInventoryItems.bind(this)));
      }
    }).observes('content.[]')
  });
});
define('hospitalrun/components/item-listing', ['exports', 'ember', 'hospitalrun/mixins/paging-actions'], function (exports, _ember, _hospitalrunMixinsPagingActions) {
  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPagingActions['default'], {
    classNames: ['panel', 'panel-primary']
  });
});
define('hospitalrun/components/loading-message', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',
    showLoadingMessages: false,
    loadingMessages: ['The top butterfly flight speed is 12 miles per hour. Some moths can fly 25 miles per hour!', 'Owls are the only birds that can see the color blue.', 'Cats have over 100 vocal sounds; dogs only have 10.', 'Humans use a total of 72 different muscles in speech.', 'More than 1,000 different languages are spoken on the continent of Africa.', 'An erythrophobe is someone who blushes easily.', 'The most common phobia in the world is odynophobia which is the fear of pain.', 'Your body uses 300 muscles to balance itself when you are standing still.', 'Certain frogs can be frozen solid then thawed, and continue living.', 'Our eyes are always the same size from birth, but our nose and ears never stop growing.', 'Your tongue is the only muscle in your body that is attached at only one end.', 'Camels have three eyelids to protect themselves from blowing sand.'],

    _setRandomMessage: function _setRandomMessage() {
      var loadingMessages = this.get('loadingMessages'),
          idx = Math.floor(Math.random() * loadingMessages.length);
      this.set('message', loadingMessages[idx]);
      this.set('timer', _ember['default'].run.later(this, this._setRandomMessage, 1000));
    },

    didInsertElement: function didInsertElement() {
      this._setRandomMessage();
    },

    willDestroyElement: function willDestroyElement() {
      var timer = this.get('timer');
      if (!_ember['default'].isEmpty(timer)) {
        _ember['default'].run.cancel(timer);
      }
    }
  });
});
define('hospitalrun/components/location-select', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    locationPicker: null,

    _setup: (function () {
      this.locationChange = this.currentLocationChanged.bind(this);
    }).on('init'),

    currentLocationChanged: function currentLocationChanged(newLocation) {
      this.get('locationPicker').set('selectedLocation', newLocation);
      _ember['default'].run.once(this, function () {
        this.get('parentView').locationChange();
      });
    }

  });
});
define('hospitalrun/components/modal-dialog', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    cancelAction: 'cancel',
    closeModalAction: 'closeModal',
    hideCancelButton: false,
    hideUpdateButton: false,
    isUpdateDisabled: false,
    title: '',
    updateButtonAction: '',
    updateButtonClass: '',
    updateButtonText: '',
    cancelButtonText: '',
    cancelBtnText: (function () {
      var cancelText = this.get('cancelButtonText');
      if (_ember['default'].isEmpty(cancelText)) {
        return 'Cancel';
      } else {
        return cancelText;
      }
    }).property('cancelButtonText'),
    actions: {
      cancelAction: function cancelAction() {
        this.sendAction('cancelAction');
      },
      updateAction: function updateAction() {
        this.sendAction('updateButtonAction');
      }
    },

    didInsertElement: function didInsertElement() {
      var $modal = this.$('.modal').modal();

      $modal.on('hidden.bs.modal', (function () {
        this.sendAction('closeModalAction');
      }).bind(this));
    },

    willDestroyElement: function willDestroyElement() {
      var $modal = this.$('.modal');
      $modal.off('hidden.bs.modal');
      $modal.modal('hide');
      // jquery fixes
      $('body').removeClass('modal-open');
      $('.modal-backdrop').remove();
    }
  });
});
define('hospitalrun/components/nav-menu', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsUserSession) {
  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsUserSession['default'], {
    tagName: 'div',
    classNames: ['primary-nav-item'],
    nav: null,

    show: (function () {
      this._setupSubNav();
      return this.currentUserCan(this.get('nav').capability);
    }).property('nav', 'session.data.authenticated.userCaps'),

    isShowing: false,

    _setup: (function () {
      var nav = this.get('nav');
      nav.closeSubnav = (function () {
        this.set('isShowing', false);
      }).bind(this);
      this._setupSubNav();
    }).on('init'),

    _setupSubNav: function _setupSubNav() {
      var _this = this;

      var nav = this.get('nav');
      nav.subnav.forEach(function (item) {
        item.show = _this.currentUserCan(item.capability);
      });
    },

    callNavAction: 'navAction',
    callCloseSettings: 'closeSettings',

    actions: {
      toggleContent: function toggleContent() {
        this.set('isShowing', !this.get('isShowing'));
        this.sendAction('callNavAction', this.nav);
      },

      resetNav: function resetNav() {
        this.sendAction('callCloseSettings');
      }
    }
  });
});
define('hospitalrun/components/nav-paging', ['exports', 'ember', 'hospitalrun/mixins/paging-actions'], function (exports, _ember, _hospitalrunMixinsPagingActions) {
  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPagingActions['default'], {
    classNames: ['paging-buttons'],
    paginationProps: null
  });
});
define('hospitalrun/components/patient-summary', ['exports', 'ember', 'hospitalrun/mixins/patient-diagnosis'], function (exports, _ember, _hospitalrunMixinsPatientDiagnosis) {
  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPatientDiagnosis['default'], {
    classNames: ['patient-summary'],
    disablePatientLink: false,
    editProcedureAction: 'editProcedure',
    patient: null,
    patientProcedures: null,
    showPatientAction: 'showPatient',
    visits: null,

    havePrimaryDiagnoses: (function () {
      var primaryDiagnosesLength = this.get('primaryDiagnoses.length');
      return primaryDiagnosesLength > 0;
    }).property('primaryDiagnoses.length'),

    haveProcedures: (function () {
      var proceduresLength = this.get('patientProcedures.length');
      return proceduresLength > 0;
    }).property('patientProcedures.length'),

    haveSecondaryDiagnoses: (function () {
      var secondaryDiagnosesLength = this.get('secondaryDiagnoses.length');
      return secondaryDiagnosesLength > 0;
    }).property('secondaryDiagnoses.length'),

    primaryDiagnoses: (function () {
      var visits = this.get('visits');
      return this.getPrimaryDiagnoses(visits);
    }).property('visits.[]'),

    secondaryDiagnoses: (function () {
      var visits = this.get('visits');
      return this.getSecondaryDiagnoses(visits);
    }).property('visits.[]'),

    shouldLinkToPatient: (function () {
      var disablePatientLink = this.get('disablePatientLink');
      return !disablePatientLink;
    }).property('disablePatientLink'),

    actions: {
      linkToPatient: function linkToPatient() {
        var shouldLink = this.get('shouldLinkToPatient');
        if (shouldLink) {
          var patient = this.get('patient'),
              returnTo = this.get('returnTo'),
              returnToContext = this.get('returnToContext');
          patient.set('returnTo', returnTo);
          patient.set('returnToContext', returnToContext);
          this.sendAction('showPatientAction', this.get('patient'));
        }
      },
      editProcedure: function editProcedure(procedure) {
        procedure.set('returnToVisit', false);
        procedure.set('returnToPatient', true);
        procedure.set('patient', this.get('patient'));
        this.sendAction('editProcedureAction', procedure);
      }
    }
  });
});
define('hospitalrun/components/patient-typeahead', ['exports', 'ember', 'hospitalrun/mixins/patient-name', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunMixinsPatientName, _hospitalrunComponentsTypeAhead) {
  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend(_hospitalrunMixinsPatientName['default'], {
    displayKey: 'name',
    setOnBlur: true,

    _mapPatient: function _mapPatient(item) {
      var returnObj = {};
      returnObj.name = this.getPatientDisplayName(item) + ' - ' + this.getPatientDisplayId(item);
      returnObj[this.get('selectionKey')] = item;
      return returnObj;
    },

    contentChanged: (function () {
      var bloodhound = this.get('bloodhound'),
          content = this.get('content');
      if (bloodhound) {
        bloodhound.clear();
        if (!_ember['default'].isEmpty(content)) {
          bloodhound.add(content.map(this._mapPatient.bind(this)));
        }
      }
    }).observes('content.[]'),

    mappedContent: (function () {
      var content = this.get('content'),
          mapped = [];
      if (content) {
        mapped = content.map(this._mapPatient.bind(this));
      }
      return mapped;
    }).property('content')

  });
});
define('hospitalrun/components/photo-display', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    computedPhotoUrl: null,
    filesystem: _ember['default'].inject.service(),
    isFileSystemEnabled: _ember['default'].computed.alias('filesystem.isFileSystemEnabled'),
    fileName: _ember['default'].computed.alias('photo.fileName'),
    photo: null,
    url: _ember['default'].computed.alias('photo.url'),

    photoUrl: (function () {
      var computedPhotoUrl = this.get('computedPhotoUrl'),
          fileName = this.get('fileName'),
          filesystem = this.get('filesystem'),
          isFileSystemEnabled = this.get('isFileSystemEnabled'),
          url = this.get('url');
      if (!_ember['default'].isEmpty(computedPhotoUrl)) {
        return computedPhotoUrl;
      } else if (isFileSystemEnabled) {
        filesystem.pathToFileSystemURL(fileName).then((function (photoUrl) {
          if (!_ember['default'].isEmpty(photoUrl)) {
            this.set('computedPhotoUrl', photoUrl);
          }
        }).bind(this));
      }
      return url;
    }).property('computedPhotoUrl', 'fileName', 'url')
  });
});
define('hospitalrun/components/price-list', ['exports', 'ember', 'hospitalrun/mixins/charge-actions'], function (exports, _ember, _hospitalrunMixinsChargeActions) {
  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsChargeActions['default'], {
    attributeBindings: ['tabId:id', 'role'],
    charges: _ember['default'].computed.alias('model.charges'),
    classNameBindings: ['active'],
    classNames: ['tab-pane'],
    index: null,
    model: null,
    pricingList: null,
    pricingType: null,
    role: 'tab',
    setChargeQuantityAction: 'setChargeQuantity',

    active: (function () {
      var index = this.get('index');
      return index === 0;
    }).property(),

    pricingListByType: (function () {
      var pricingList = this.get('pricingList'),
          pricingType = this.get('pricingType'),
          rows = [];
      if (!_ember['default'].isEmpty(pricingList)) {
        pricingList = pricingList.filterBy('pricingType', pricingType);
        pricingList = pricingList.map((function (pricingItem) {
          var chargesForItem = this.findChargeForPricingItem(pricingItem, this.get('charges'));
          if (chargesForItem) {
            this.sendAction('setChargeQuantityAction', pricingItem.id, chargesForItem.get('quantity'));
          }
          return pricingItem;
        }).bind(this));
        var offset = 0,
            length = pricingList.length;
        while (offset < length) {
          rows.push(pricingList.slice(offset, offset + 6));
          offset += 6;
        }
      }
      return rows;
    }).property('pricingType', 'pricingList'),

    tabId: (function () {
      return this.get('pricingType').toLowerCase().dasherize();
    }).property('pricingType')

  });
});
define('hospitalrun/components/pricing-typeahead', ['exports', 'ember', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunComponentsTypeAhead) {
  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({
    displayKey: 'name',
    setOnBlur: true,

    _mapContentItems: function _mapContentItems() {
      var content = this.get('content');
      if (content) {
        var mapped = content.filter(function (item) {
          return !_ember['default'].isEmpty(item);
        });
        mapped = mapped.map((function (item) {
          var returnObj = {};
          returnObj.name = item.name;
          returnObj[this.get('selectionKey')] = item;
          return returnObj;
        }).bind(this));
        return mapped;
      } else {
        return [];
      }
    }
  });
});
define('hospitalrun/components/print-this', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    didInsertElement: function didInsertElement() {
      _ember['default'].run.scheduleOnce('afterRender', this, function () {
        window.print();
      });
    }
  });
});
define('hospitalrun/components/quantity-calc', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    quantityGroups: null,
    calculated: null,
    currentUnit: null,
    targetUnit: null,
    unitList: null,

    showTotal: (function () {
      var calculated = this.get('calculated'),
          quantityGroups = this.get('quantityGroups');
      if (quantityGroups.length > 1 && !_ember['default'].isEmpty(calculated) && !isNaN(calculated)) {
        return true;
      }
      return false;
    }).property('calculated'),

    currentQuantityGroups: (function () {
      var calculated = this.get('calculated'),
          firstQuantityObject,
          quantityGroups = this.get('quantityGroups'),
          targetUnit = this.get('targetUnit'),
          selectedUnit;
      if (_ember['default'].isEmpty(quantityGroups)) {
        quantityGroups = new Array({
          index: 0,
          unit: targetUnit,
          firstQuantity: true,
          quantity: calculated
        });
        this.set('quantityGroups', quantityGroups);
      }
      firstQuantityObject = quantityGroups.get('firstObject');
      if (!_ember['default'].isEmpty(firstQuantityObject)) {
        selectedUnit = firstQuantityObject.unit;
        if (_ember['default'].isEmpty(selectedUnit)) {
          this.set('quantityGroups.firstObject.unit', targetUnit);
        } else {
          this.updateCurrentUnit(selectedUnit, 0);
        }
      }
      return quantityGroups;
    }).property('quantityGroups', 'targetUnit'),

    calculateTotal: function calculateTotal() {
      var quantityGroups = this.get('quantityGroups'),
          haveQuantities = false,
          lastObject = quantityGroups.get('lastObject'),
          targetUnit = this.get('targetUnit');
      haveQuantities = quantityGroups.every(function (item) {
        var quantity = item.quantity,
            unit = item.unit;
        return !_ember['default'].isEmpty(quantity) && !_ember['default'].isEmpty(unit) && !isNaN(quantity);
      });
      if (haveQuantities && lastObject.unit === targetUnit) {
        var newValue = quantityGroups.reduce(function (previousValue, item) {
          return previousValue * parseInt(item.quantity);
        }, 1);
        this.set('calculated', newValue);
      } else {
        this.set('calculated');
      }
    },

    updateCurrentUnit: function updateCurrentUnit(selectedUnit, index) {
      var targetUnit = this.get('targetUnit'),
          quantityGroups = this.get('quantityGroups'),
          groupLength = quantityGroups.length;
      if (!_ember['default'].isEmpty(targetUnit)) {
        if (selectedUnit === targetUnit) {
          // Done
          if (index < groupLength - 1) {
            quantityGroups.removeAt(index + 1, groupLength - 1 - index);
          }
        } else {
          if (index === groupLength - 1) {
            quantityGroups.addObject({
              unitName: selectedUnit,
              unit: targetUnit,
              index: quantityGroups.length
            });
          } else {
            _ember['default'].set(quantityGroups.objectAt(index + 1), 'unitName', selectedUnit);
          }
        }
        _ember['default'].run.once(this, this.calculateTotal);
      }
    }
  });
});
define('hospitalrun/components/quantity-conv', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    firstQuantity: false,
    quantity: null,
    quantityHelp: null,
    unitName: null,
    unit: null,
    resetUnitName: false,
    targetUnit: _ember['default'].computed.alias('parentView.targetUnit'),
    unitList: null,

    unitClass: (function () {
      var selectedUnit = this.get('unit'),
          targetUnit = this.get('targetUnit'),
          unitClass = 'has-success';
      if (!_ember['default'].isEmpty(targetUnit) && _ember['default'].isEmpty(selectedUnit)) {
        this.set('unitHelp', 'please select a unit');
        unitClass = 'has-error';
      } else {
        if (_ember['default'].isEmpty(targetUnit)) {
          unitClass = '';
        }
        this.set('unitHelp');
      }
      this.get('parentView').updateCurrentUnit(selectedUnit, this.get('index'));
      return unitClass;
    }).property('targetUnit', 'unit'),

    quantityClass: (function () {
      var quantity = this.get('quantity'),
          quantityClass = 'has-success',
          targetUnit = this.get('targetUnit');
      if (!_ember['default'].isEmpty(targetUnit) && (_ember['default'].isEmpty(quantity) || isNaN(quantity))) {
        this.set('quantityHelp', 'not a valid number');
        quantityClass = 'has-error';
      } else {
        if (_ember['default'].isEmpty(targetUnit)) {
          quantityClass = '';
        }
        this.set('quantityHelp');
      }
      _ember['default'].run.once(this, function () {
        this.get('parentView').calculateTotal();
      });
      return quantityClass;
    }).property('quantity', 'targetUnit')
  });
});
define('hospitalrun/components/radio-button', ['exports', 'ember-radio-buttons/components/radio-button'], function (exports, _emberRadioButtonsComponentsRadioButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRadioButtonsComponentsRadioButton['default'];
    }
  });
});
define('hospitalrun/components/role-select', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // possible passed-in values with their defaults:
    content: null,
    prompt: null,
    optionValuePath: 'roles',
    optionLabelPath: 'name',
    action: _ember['default'].K, // action to fire on change

    // shadow the passed-in `selection` to avoid
    // leaking changes to it via a 2-way binding
    _selection: _ember['default'].computed.reads('selection'),

    init: function init() {
      this._super.apply(this, arguments);
      if (!this.get('content')) {
        this.set('content', []);
      }
    },

    actions: {
      change: function change() {
        var selectEl = this.$('select')[0];
        var selectedIndex = selectEl.selectedIndex;
        var content = this.get('content');

        // decrement index by 1 if we have a prompt
        var hasPrompt = !!this.get('prompt');
        var contentIndex = hasPrompt ? selectedIndex - 1 : selectedIndex;

        var selection = content[contentIndex].roles;

        // set the local, shadowed selection to avoid leaking
        // changes to `selection` out via 2-way binding
        this.set('_selection', selection);

        var changeCallback = this.get('action');
        changeCallback(selection);
      }
    }
  });
});
define('hospitalrun/components/search-listing', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    action: 'allItems',
    actions: {
      allItems: function allItems() {
        this.sendAction();
      }
    }
  });
});
define('hospitalrun/components/select-list', ['exports', 'ember-select-list/components/select-list'], function (exports, _emberSelectListComponentsSelectList) {
  exports['default'] = _emberSelectListComponentsSelectList['default'];
});
define('hospitalrun/components/select-or-typeahead', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Component.extend({
    name: 'select-or-typeahead',
    className: null,
    hint: true,
    label: null,
    list: null,
    optionLabelPath: 'value',
    optionValuePath: 'id',
    property: null,
    prompt: ' ',
    selection: null,
    setOnBlur: true,
    typeAheadType: null,

    content: (function () {
      var list = this.get('list'),
          optionLabelPath = this.get('optionLabelPath'),
          optionValuePath = this.get('optionValuePath'),
          userCanAdd = this.get('userCanAdd');

      if (!_ember['default'].isEmpty(list) && list.get) {
        var contentList = list.get('value');
        if (_ember['default'].isEmpty(contentList)) {
          return [];
        }

        if (!userCanAdd && optionLabelPath === 'value' && optionValuePath === 'id') {
          return contentList.map(_hospitalrunUtilsSelectValues['default'].selectValuesMap);
        } else {
          return contentList;
        }
      }
    }).property('list'),

    usePricingTypeAhead: (function () {
      return this.get('typeAheadType') === 'pricing';
    }).property('typeAheadType'),

    userCanAdd: (function () {
      var list = this.get('list');
      if (!_ember['default'].isEmpty(list) && list.get) {
        return list.get('userCanAdd');
      } else {
        return true;
      }
    }).property('list')
  });
});
define('hospitalrun/components/smart-prescription', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].TextArea.extend(_ember['default'].TargetActionSupport, {
    valueDidChange: _ember['default'].observer('value', function () {
      this.triggerAction({
        action: 'search'
      });
    })
  });
});
define('hospitalrun/components/sortable-column', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'th',
    action: 'sortByKey',
    sortDesc: false,
    sortBy: null,
    sortKey: null,
    sorted: (function () {
      var sortBy = this.get('sortBy'),
          sortKey = this.get('sortKey');
      return sortBy === sortKey;
    }).property('sortBy', 'sortKey'),

    click: function click() {
      var sortBy = this.get('sortBy'),
          sorted = this.get('sorted'),
          sortDesc = false;
      if (sorted) {
        sortDesc = this.toggleProperty('sortDesc');
      }
      this.sendAction('action', sortBy, sortDesc);
    }
  });
});
define('hospitalrun/components/take-photo', ['exports', 'ember'], function (exports, _ember) {
  var takeAPicture = 'Take a Picture';
  var uploadAFile = 'Upload a File';

  // Derived from https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos and
  // https://github.com/samdutton/simpl/blob/master/getusermedia/sources/js/main.js
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
  exports['default'] = _ember['default'].Component.extend({
    canvas: null,
    video: null,
    photo: null,
    photoFile: null,
    width: 200,
    height: 0,
    selectedCamera: null,
    videoSources: null,
    photoSource: null,
    photoSources: [takeAPicture, uploadAFile],
    setupCamera: false,

    /***
     * Setup the specified camera
     */
    _cameraChange: function _cameraChange(selectedCamera) {
      this.set('selectedCamera', selectedCamera);
      var stream = this.get('stream'),
          video = this.get('video');
      if (!_ember['default'].isEmpty(stream)) {
        video.src = null;
        this._stopStream();
      }
      var videoSource = this.get('selectedCamera');
      var constraints = {
        audio: false,
        video: {
          optional: [{ sourceId: videoSource }]
        }
      };
      navigator.getUserMedia(constraints, this._gotStream.bind(this), this._errorCallback);
      this._setupVideo();
    },

    _errorCallback: function _errorCallback(error) {
      console.log('navigator.getUserMedia error: ', error);
    },

    /***
     * Callback for MediaStreamTrack.getSources
     */
    _gotSources: function _gotSources(sourceInfos) {
      var cameraCount = 0,
          cameraLabel,
          videoSources = [];
      for (var i = 0; i !== sourceInfos.length; ++i) {
        var sourceInfo = sourceInfos[i];
        if (sourceInfo.kind === 'video') {
          cameraLabel = 'Camera ' + ++cameraCount;
          if (sourceInfo.label) {
            cameraLabel += ' (' + sourceInfo.label + ')';
          }
          videoSources.addObject({
            id: sourceInfo.id,
            label: cameraLabel
          });
        }
      }
      this.set('videoSources', videoSources);
      if (videoSources.length > 0) {
        this.set('selectedCamera', videoSources[0].id);
        this.cameraChange(videoSources[0].id);
      }
    },

    /***
     * Callback handler for getUserMedia.
     */
    _gotStream: function _gotStream(stream) {
      if (this.isDestroyed) {
        this._stopStream(stream);
      } else {
        var video = this.get('video');
        this.set('stream', stream); // make stream available to object
        video.src = window.URL.createObjectURL(stream);
        video.play();
      }
    },

    _photoSourceChanged: function _photoSourceChanged(photoSource) {
      var camera = this.$('.camera'),
          fileUpload = this.$('.fileupload'),
          setupCamera = this.get('setupCamera');
      this.set('photoSource', photoSource);
      if (photoSource === uploadAFile) {
        fileUpload.show();
        camera.hide();
      } else {
        fileUpload.hide();
        camera.show();
        if (!setupCamera) {
          var canvas = this.$('canvas')[0],
              photo = this.$('img')[0],
              video = this.$('video')[0];
          this.setProperties({
            canvas: canvas,
            photo: photo,
            video: video
          });
          if (typeof MediaStreamTrack === 'undefined' || MediaStreamTrack.getSources === 'undefined') {
            if (navigator.getUserMedia) {
              navigator.getUserMedia({ audio: false, video: true }, this._gotStream.bind(this), this._errorCallback);
              this._setupCanPlayListener(video);
            }
          } else {
            MediaStreamTrack.getSources(this._gotSources.bind(this));
            this._setupCanPlayListener(video);
          }
          this.set('setupCamera', true);
        }
      }
    },

    _setupCanPlayListener: function _setupCanPlayListener(video) {
      // Remove listener if it was already added before.
      video.removeEventListener('canplay', this._setupVideo.bind(this), false);
      video.addEventListener('canplay', this._setupVideo.bind(this), false);
    },

    /***
     * Setup the dimensions for the video preview and picture elements.
     */
    _setupVideo: function _setupVideo() {
      var canvas = this.get('canvas'),
          height = this.get('height'),
          video = this.get('video'),
          width = this.get('width');
      height = video.videoHeight / (video.videoWidth / width);
      video.setAttribute('width', width);
      video.setAttribute('height', height);
      canvas.setAttribute('width', width);
      canvas.setAttribute('height', height);
      this.setProperties({
        height: height,
        width: width
      });
    },

    _setup: (function () {
      this.cameraChange = this._cameraChange.bind(this);
      this.photoSourceChange = this._photoSourceChanged.bind(this);
      var photoSource = takeAPicture;
      if (!this.get('canCaptureVideo')) {
        photoSource = uploadAFile;
      }
      this.set('photoSource', photoSource);
    }).on('init'),

    _stopStream: function _stopStream(stream) {
      var streamToStop = stream || this.get('stream');
      if (!_ember['default'].isEmpty(streamToStop)) {
        if (typeof streamToStop.active === 'undefined') {
          streamToStop.stop();
        } else {
          var track = streamToStop.getTracks()[0];
          track.stop();
        }
      }
    },

    actions: {
      takePhoto: function takePhoto() {
        var canvas = this.get('canvas'),
            height = this.get('height'),
            video = this.get('video'),
            width = this.get('width');
        canvas.width = width;
        canvas.height = height;
        canvas.getContext('2d').drawImage(video, 0, 0, width, height);
        var data = canvas.toDataURL('image/png');
        var binary = atob(data.split(',')[1]);
        var array = [];
        for (var i = 0; i < binary.length; i++) {
          array.push(binary.charCodeAt(i));
        }
        this.set('photoFile', new Blob([new Uint8Array(array)], { type: 'image/png' }));
      }
    },

    canCaptureVideo: (function () {
      if (navigator.getUserMedia) {
        return true;
      } else {
        return false;
      }
    }).property(),

    didInsertElement: function didInsertElement() {
      var camera = this.$('.camera'),
          fileUpload = this.$('.fileUpload');
      if (camera.length === 1) {
        fileUpload.hide();
      }
      this.photoSourceChange(this.get('photoSource'));
    },

    showCameraSelect: (function () {
      var photoSource = this.get('photoSource'),
          videoSources = this.get('videoSources');
      return photoSource === takeAPicture && videoSources && videoSources.length > 1;
    }).property('photoSource', 'videoSources'),

    willDestroyElement: function willDestroyElement() {
      this._stopStream();
    }
  });
});
define('hospitalrun/components/text-search', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].TextField.extend(_ember['default'].TargetActionSupport, {
    change: function change() {
      this.triggerAction({
        action: 'search'
      });
    },
    didInsertElement: function didInsertElement() {
      this.$().focus();
    }
  });
});
define('hospitalrun/components/type-ahead', ['exports', 'ember', 'ember-data', 'ember-rapid-forms/components/em-input'], function (exports, _ember, _emberData, _emberRapidFormsComponentsEmInput) {
  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({
    _mapContentItems: function _mapContentItems() {
      var content = this.get('content');
      if (content) {
        var mapped = content.filter(function (item) {
          return !_ember['default'].isEmpty(item);
        });
        if (content instanceof _emberData['default'].RecordArray) {
          mapped = mapped.map((function (item) {
            var returnObj = item.getProperties(this.get('displayKey'));
            returnObj[this.get('selectionKey')] = item;
            return returnObj;
          }).bind(this));
        } else {
          mapped = mapped.map((function (item) {
            var returnObj = {};
            returnObj[this.get('displayKey')] = item;
            return returnObj;
          }).bind(this));
        }
        return mapped;
      } else {
        return [];
      }
    },

    mappedContent: (function () {
      return this._mapContentItems();
    }).property('content'),

    contentChanged: (function () {
      var bloodhound = this.get('bloodhound');
      if (bloodhound) {
        bloodhound.clear();
        bloodhound.add(this._mapContentItems());
      }
    }).observes('content.[]'),

    bloodhound: null,
    displayKey: 'value',
    selectionKey: 'value',
    hint: true,
    highlight: true,
    lastHint: null,
    minlength: 1,
    selectedItem: false,
    inputElement: null,
    typeAhead: null,
    setOnBlur: true,
    templates: null,

    _getSource: function _getSource() {
      var typeAheadBloodhound = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace(this.get('displayKey')),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: this.get('mappedContent')
      });
      typeAheadBloodhound.initialize();
      this.set('bloodhound', typeAheadBloodhound);
      return typeAheadBloodhound.ttAdapter();
    },

    didInsertElement: function didInsertElement() {
      var $input = this.$('input');
      this.set('inputElement', $input);
      var $typeahead = $input.typeahead({
        autoselect: true,
        hint: this.get('hint'),
        highlight: this.get('highlight'),
        minLength: this.get('minlength')
      }, {
        displayKey: this.get('displayKey'),
        source: this._getSource(),
        templates: this.get('templates')
      });
      this.set('typeAhead', $typeahead);

      $typeahead.on('typeahead:selected', (function (event, item) {
        this.set('selection', item[this.get('selectionKey')]);
        this.set('selectedItem', true);
      }).bind(this));

      $typeahead.on('typeahead:autocompleted', (function (event, item) {
        this.set('selection', item[this.get('selectionKey')]);
        this.set('selectedItem', true);
      }).bind(this));

      if (this.get('setOnBlur')) {
        $input.on('keyup', (function () {
          var $hint = this.$('.tt-hint'),
              hintValue = $hint.val();
          this.set('lastHint', hintValue);
          this.set('selectedItem', false);
        }).bind(this));

        $input.on('blur', (function (event) {
          var selection = this.get('selection');
          var targetValue = event.target.value.trim();
          if (!_ember['default'].isEmpty(selection)) {
            if (selection.trim) {
              selection = selection.trim();
            }
            this.set('selection', selection);
          }
          if (!this.get('selectedItem')) {
            var lastHint = this.get('lastHint'),
                exactMatch = false;
            if (_ember['default'].isEmpty(lastHint)) {
              lastHint = targetValue;
              exactMatch = true;
            }
            if (!_ember['default'].isEmpty(targetValue) && !_ember['default'].isEmpty(lastHint)) {
              this.get('bloodhound').search(lastHint, (function (suggestions) {
                if (suggestions.length > 0) {
                  if (!exactMatch || lastHint.toLowerCase() === suggestions[0][this.get('displayKey')].toLowerCase()) {
                    this.set('selectedItem', true);
                    this.set('selection', suggestions[0][this.get('selectionKey')]);
                    event.target.value = suggestions[0][this.get('displayKey')];
                    this.get('model').set(this.get('propertyName'), event.target.value);
                  }
                } else if (targetValue !== selection) {
                  this.set('selection');
                }
              }).bind(this));
            } else if (_ember['default'].isEmpty(targetValue)) {
              this.set('selection');
            }
          }
        }).bind(this));
      }
    },

    willDestroyElement: function willDestroyElement() {
      this.get('inputElement').typeahead('destroy');
    }

  });
});
define('hospitalrun/controllers/abstract-delete-controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    afterDeleteAction: 'closeModal',
    showUpdateButton: true,
    updateButtonText: 'Delete',
    updateButtonAction: 'delete',

    isUpdateDisabled: false,

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      'delete': function _delete() {
        var recordToDelete = this.get('model');
        this.get('model').destroyRecord().then((function () {
          this.send(this.get('afterDeleteAction'), recordToDelete);
        }).bind(this));
      }
    }
  });
});
define('hospitalrun/controllers/abstract-edit-controller', ['exports', 'ember', 'hospitalrun/mixins/edit-panel-props', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsEditPanelProps, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunMixinsModalHelper, _hospitalrunMixinsUserSession) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsEditPanelProps['default'], _hospitalrunMixinsIsUpdateDisabled['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsUserSession['default'], {
    cancelAction: 'allItems',

    cancelButtonText: (function () {
      var i18n = this.get('i18n');
      var hasDirtyAttributes = this.get('model.hasDirtyAttributes');
      if (hasDirtyAttributes) {
        return i18n.t('buttons.cancel');
      } else {
        return i18n.t('buttons.return_button');
      }
    }).property('model.hasDirtyAttributes'),

    disabledAction: (function () {
      var isValid = this.get('model.isValid');
      if (!isValid) {
        return 'showDisabledDialog';
      }
    }).property('model.isValid'),

    isNewOrDeleted: (function () {
      return this.get('model.isNew') || this.get('model.isDeleted');
    }).property('model.isNew', 'model.isDeleted'),

    /**
     *  Lookup lists that should be updated when the model has a new value to add to the lookup list.
     *  lookupListsToUpdate: [{
     *      name: 'countryList', //Name of property containing lookup list
     *      property: 'country', //Corresponding property on model that potentially contains a new value to add to the list
     *      id: 'country_list' //Id of the lookup list to update
     *  }
     */
    lookupListsToUpdate: null,

    showUpdateButton: (function () {
      var updateButtonCapability = this.get('updateCapability');
      return this.currentUserCan(updateButtonCapability);
    }).property('updateCapability'),

    updateButtonAction: 'update',
    updateButtonText: (function () {
      var i18n = this.get('i18n');
      if (this.get('model.isNew')) {
        return i18n.t('buttons.add');
      } else {
        return i18n.t('buttons.update');
      }
    }).property('model.isNew'),
    updateCapability: null,

    /**
     * Add the specified value to the lookup list if it doesn't already exist in the list.
     * @param lookupList array the lookup list to add to.
     * @param value string the value to add.
     * @param listsToUpdate array the lookup lists that need to be saved.
     * @param listsName string name of the list to add the value to.
     */
    _addValueToLookupList: function _addValueToLookupList(lookupList, value, listsToUpdate, listName) {
      var lookupListValues = lookupList.get('value');
      if (!_ember['default'].isArray(lookupListValues)) {
        lookupListValues = [];
      }
      if (!lookupListValues.contains(value)) {
        lookupListValues.push(value);
        lookupListValues.sort();
        lookupList.set('value', lookupListValues);
        if (!listsToUpdate.contains(lookupList)) {
          listsToUpdate.push(lookupList);
        }
        this.set(listName, lookupList);
      }
    },

    _cancelUpdate: function _cancelUpdate() {
      var cancelledItem = this.get('model');
      cancelledItem.rollbackAttributes();
    },

    actions: {
      cancel: function cancel() {
        this._cancelUpdate();
        this.send(this.get('cancelAction'));
      },

      returnTo: function returnTo() {
        this._cancelUpdate();
        var returnTo = this.get('model.returnTo'),
            returnToContext = this.get('model.returnToContext');
        if (_ember['default'].isEmpty(returnToContext)) {
          this.transitionToRoute(returnTo);
        } else {
          this.transitionToRoute(returnTo, returnToContext);
        }
      },

      showDisabledDialog: function showDisabledDialog() {
        this.displayAlert('Warning!!!!', 'Please fill in required fields (marked with *) and correct the errors before saving.');
      },

      /**
       * Update the model and perform the before update and after update
       * @param skipAfterUpdate boolean (optional) indicating whether or not
       * to skip the afterUpdate call.
       */
      update: function update(skipAfterUpdate) {
        var _this = this;

        try {
          this.beforeUpdate().then(function () {
            _this.saveModel(skipAfterUpdate);
          })['catch'](function (err) {
            if (!err.ignore) {
              _this.displayAlert('Error!!!!', 'An error occurred while attempting to save: ' + JSON.stringify(err));
            }
          });
        } catch (ex) {
          this.displayAlert('Error!!!!', 'An error occurred while attempting to save: ' + ex);
        }
      }
    },

    /**
     * Override this function to perform logic after record update
     * @param record the record that was just updated.
     */
    afterUpdate: function afterUpdate() {},

    /**
     * Override this function to perform logic before record update.
     * @returns {Promise} Promise that resolves after before update is done.
     */
    beforeUpdate: function beforeUpdate() {
      return _ember['default'].RSVP.Promise.resolve();
    },

    /**
     * Save the model and then (optionally) run the after update.
     * @param skipAfterUpdate boolean (optional) indicating whether or not
     * to skip the afterUpdate call.
     */
    saveModel: function saveModel(skipAfterUpdate) {
      this.get('model').save().then((function (record) {
        this.updateLookupLists();
        if (!skipAfterUpdate) {
          this.afterUpdate(record);
        }
      }).bind(this));
    },

    /**
     * Update any new values added to a lookup list
     */
    updateLookupLists: function updateLookupLists() {
      var lookupLists = this.get('lookupListsToUpdate'),
          listsToUpdate = _ember['default'].A();
      if (!_ember['default'].isEmpty(lookupLists)) {
        lookupLists.forEach((function (list) {
          var propertyValue = this.get(list.property),
              lookupList = this.get(list.name),
              store = this.get('store');
          if (!_ember['default'].isEmpty(propertyValue)) {
            if (!lookupList) {
              lookupList = store.push(store.normalize('lookup', {
                id: list.id,
                value: [],
                userCanAdd: true
              }));
            }
            if (_ember['default'].isArray(propertyValue)) {
              propertyValue.forEach((function (value) {
                this._addValueToLookupList(lookupList, value, listsToUpdate, list.name);
              }).bind(this));
            } else {
              this._addValueToLookupList(lookupList, propertyValue, listsToUpdate, list.name);
            }
          }
        }).bind(this));
        listsToUpdate.forEach(function (list) {
          list.save();
        });
      }
    }

  });
});
define('hospitalrun/controllers/abstract-paged-controller', ['exports', 'ember', 'hospitalrun/mixins/pagination-props', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsPaginationProps, _hospitalrunMixinsProgressDialog, _hospitalrunMixinsUserSession) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsPaginationProps['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsUserSession['default'], {
    addPermission: null,
    deletePermission: null,
    nextStartKey: null,
    previousStartKey: null,
    previousStartKeys: [],
    progressMessage: 'Loading Records.  Please wait...',
    progressTitle: 'Loading',
    queryParams: ['startKey', 'sortKey', 'sortDesc'],
    sortDesc: false,
    sortKey: null,

    canAdd: (function () {
      return this.currentUserCan(this.get('addPermission'));
    }).property(),

    canDelete: (function () {
      return this.currentUserCan(this.get('deletePermission'));
    }).property(),

    canEdit: (function () {
      // Default to using add permission
      return this.currentUserCan(this.get('addPermission'));
    }).property(),

    showActions: (function () {
      return this.get('canAdd') || this.get('canEdit') || this.get('canDelete');
    }).property('canAdd', 'canEdit', 'canDelete'),

    disablePreviousPage: (function () {
      return _ember['default'].isEmpty(this.get('previousStartKey'));
    }).property('previousStartKey'),

    disableNextPage: (function () {
      return _ember['default'].isEmpty(this.get('nextStartKey'));
    }).property('nextStartKey'),

    showPagination: (function () {
      return !_ember['default'].isEmpty(this.get('previousStartKey')) || !_ember['default'].isEmpty(this.get('nextStartKey'));
    }).property('nextStartKey', 'previousStartKey'),

    hasRecords: _ember['default'].computed('model.length', {
      get: function get() {
        var model = this.get('model');
        if (!_ember['default'].isEmpty(model)) {
          return model.get('length') > 0;
        } else {
          return false;
        }
      }
    }),

    actions: {
      nextPage: function nextPage() {
        var key = this.get('nextStartKey'),
            previousStartKeys = this.get('previousStartKeys'),
            firstKey = this.get('firstKey');
        this.set('previousStartKey', firstKey);
        previousStartKeys.push(firstKey);
        this.set('startKey', key);
        this.showProgressModal();
      },
      previousPage: function previousPage() {
        var key = this.get('previousStartKey'),
            previousStartKeys = this.get('previousStartKeys');
        previousStartKeys.pop();
        this.set('startKey', key);
        this.set('previousStartKey', previousStartKeys.pop());
        this.set('previousStartKeys', previousStartKeys);
        this.showProgressModal();
      },
      sortByKey: function sortByKey(sortKey, sortDesc) {
        this.setProperties({
          previousStartKey: null,
          previousStartKeys: [],
          sortDesc: sortDesc,
          sortKey: sortKey,
          startKey: null
        });
        this.showProgressModal();
      }
    }
  });
});
define('hospitalrun/controllers/abstract-report-controller', ['exports', 'ember', 'hospitalrun/mixins/date-format', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/pagination-props', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, _ember, _hospitalrunMixinsDateFormat, _hospitalrunMixinsModalHelper, _hospitalrunMixinsNumberFormat, _hospitalrunMixinsPaginationProps, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsPaginationProps['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], {
    defaultErrorMessage: 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.',
    offset: 0,
    limit: 25,
    progressMessage: 'Please wait while your report is generated.',
    progressTitle: 'Generating Report',
    reportColumns: null,
    reportHeaders: null,
    reportRows: [],
    reportTitle: null,
    reportType: null,
    reportTypes: null,
    showFirstPageButton: true,
    showLastPageButton: true,
    showReportResults: false,

    /**
     * Add a row to the report using the selected columns to add the row.
     * @param {Array} row the row to add
     * @param {boolean} skipFormatting true if formatting should be skipped.
     * @param reportColumns {Object} the columns to display on the report;
     * optional, if not set, the property reportColumns on the controller
     * will be used.
     * @param reportAction {Object} action to fire on row when row is clicked.
     */
    _addReportRow: function _addReportRow(row, skipFormatting, reportColumns, rowAction) {
      var columnValue,
          reportRows = this.get('reportRows'),
          reportRow = [];
      if (_ember['default'].isEmpty(reportColumns)) {
        reportColumns = this.get('reportColumns');
      }
      for (var column in reportColumns) {
        if (reportColumns[column].include) {
          columnValue = _ember['default'].get(row, reportColumns[column].property);
          if (_ember['default'].isEmpty(columnValue)) {
            reportRow.push('');
          } else if (reportColumns[column].format === '_numberFormat') {
            if (skipFormatting) {
              reportRow.push(columnValue);
            } else {
              reportRow.push(this._numberFormat(columnValue));
            }
          } else if (!skipFormatting && reportColumns[column].format) {
            reportRow.push(this[reportColumns[column].format](columnValue));
          } else {
            reportRow.push(columnValue);
          }
        }
      }
      if (rowAction) {
        reportRows.addObject({
          rowAction: rowAction,
          row: reportRow
        });
      } else {
        reportRows.addObject(reportRow);
      }
    },

    /**
     * Finish up the report by setting headers, titles and export.
     * @param reportColumns {Object} the columns to display on the report;
     * optional, if not set, the property reportColumns on the controller
     * will be used.
     */
    _finishReport: function _finishReport(reportColumns) {
      this.set('showReportResults', true);
      this.set('offset', 0);
      this._setReportHeaders(reportColumns);
      this._setReportTitle();
      this._generateExport();
      this.closeProgressModal();
    },

    _generateExport: function _generateExport() {
      var csvRows = [],
          reportHeaders = this.get('reportHeaders'),
          dataArray = [reportHeaders];
      dataArray.addObjects(this.get('reportRows'));
      dataArray.forEach(function (reportRow) {
        var rowToAdd;
        if (reportRow.row) {
          rowToAdd = reportRow.row;
        } else {
          rowToAdd = reportRow;
        }
        rowToAdd = rowToAdd.map(function (column) {
          if (!column) {
            return '';
          } else if (column.replace) {
            return column.replace('"', '""');
          } else {
            return column;
          }
        });
        csvRows.push('"' + rowToAdd.join('","') + '"');
      });
      var csvString = csvRows.join('\r\n');
      var uriContent = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csvString);
      this.set('csvExport', uriContent);
    },

    _notifyReportError: function _notifyReportError(errorMessage) {
      var alertMessage = 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.';
      this.closeProgressModal();
      this.displayAlert('Error Generating Report', alertMessage);
      throw new Error(errorMessage);
    },

    _setReportHeaders: function _setReportHeaders(reportColumns) {
      var reportHeaders = [];
      if (_ember['default'].isEmpty(reportColumns)) {
        reportColumns = this.get('reportColumns');
      }
      for (var column in reportColumns) {
        if (reportColumns[column].include) {
          reportHeaders.push(reportColumns[column].label);
        }
      }
      this.set('reportHeaders', reportHeaders);
    },

    _setReportTitle: function _setReportTitle() {
      var endDate = this.get('endDate'),
          formattedEndDate = '',
          formattedStartDate = '',
          reportType = this.get('reportType'),
          reportTypes = this.get('reportTypes'),
          startDate = this.get('startDate');
      if (!_ember['default'].isEmpty(endDate)) {
        formattedEndDate = moment(endDate).format('l');
      }

      var reportDesc = reportTypes.findBy('value', reportType);
      if (_ember['default'].isEmpty(startDate)) {
        this.set('reportTitle', reportDesc.name + ' Report ' + formattedEndDate);
      } else {
        formattedStartDate = moment(startDate).format('l');
        this.set('reportTitle', reportDesc.name + ' Report ' + formattedStartDate + ' - ' + formattedEndDate);
      }
    },

    actions: {
      firstPage: function firstPage() {
        this.set('offset', 0);
      },

      nextPage: function nextPage() {
        var limit = this.get('limit');
        this.incrementProperty('offset', limit);
      },

      previousPage: function previousPage() {
        var limit = this.get('limit');
        this.decrementProperty('offset', limit);
      },

      lastPage: function lastPage() {
        var reportRowLength = this.get('reportRows.length'),
            limit = this.get('limit'),
            pages = parseInt(reportRowLength / limit);
        this.set('offset', pages * limit);
      }

    },

    currentReportRows: (function () {
      var limit = this.get('limit'),
          offset = this.get('offset'),
          reportRows = this.get('reportRows');
      return reportRows.slice(offset, offset + limit);
    }).property('reportRows.[]', 'offset', 'limit'),

    disablePreviousPage: (function () {
      return this.get('offset') === 0;
    }).property('offset'),

    disableNextPage: (function () {
      var limit = this.get('limit'),
          length = this.get('reportRows.length'),
          offset = this.get('offset');
      return offset + limit >= length;
    }).property('offset', 'limit', 'reportRows.length'),

    showPagination: (function () {
      var length = this.get('reportRows.length'),
          limit = this.get('limit');
      return length > limit;
    }).property('reportRows.length')

  });
});
define('hospitalrun/controllers/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    filesystem: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),
    _setup: (function () {
      var fileSystem = this.get('filesystem');
      fileSystem.setup();
    }).on('init')
  });
});
define('hospitalrun/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('hospitalrun/controllers/index', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsUserSession) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsUserSession['default'], {
    indexLinks: ['Appointments', 'Labs', 'Imaging', 'Inventory', 'Medication', 'Patients', 'Users'],

    setupPermissions: (function () {
      var permissions = this.get('defaultCapabilities');
      for (var capability in permissions) {
        if (this.currentUserCan(capability)) {
          this.set('userCan_' + capability, true);
        }
      }
    }).on('init'),

    activeLinks: (function () {
      var activeLinks = [],
          indexLinks = this.get('indexLinks');
      indexLinks.forEach((function (link) {
        var action = link.toLowerCase();
        if (this.currentUserCan(action)) {
          activeLinks.push({
            action: action,
            text: link
          });
        }
      }).bind(this));
      return activeLinks;
    }).property('indexLinks')

  });
});
define('hospitalrun/controllers/login', ['exports', 'ember'], function (exports, _ember) {
  var LoginController = _ember['default'].Controller.extend({
    session: _ember['default'].inject.service(),
    errorMessage: null,
    identification: null,
    password: null,

    actions: {
      authenticate: function authenticate() {
        var _this = this;

        var _getProperties = this.getProperties('identification', 'password');

        var identification = _getProperties.identification;
        var password = _getProperties.password;

        this.get('session').authenticate('authenticator:custom', {
          identification: identification,
          password: password
        })['catch'](function (error) {
          _this.set('errorMessage', error.reason);
        });
      }
    }
  });

  exports['default'] = LoginController;
});
define('hospitalrun/controllers/navigation', ['exports', 'ember', 'hospitalrun/mixins/hospitalrun-version', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session', 'hospitalrun/mixins/navigation'], function (exports, _ember, _hospitalrunMixinsHospitalrunVersion, _hospitalrunMixinsModalHelper, _hospitalrunMixinsProgressDialog, _hospitalrunMixinsUserSession, _hospitalrunMixinsNavigation) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsHospitalrunVersion['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsNavigation['default'], {
    ajax: _ember['default'].inject.service(),
    application: _ember['default'].inject.controller(),
    allowSearch: false,
    config: _ember['default'].inject.service(),
    currentSearchText: null,
    currentRouteName: _ember['default'].computed.alias('application.currentRouteName'),
    progressTitle: 'Searching',
    searchRoute: null,
    session: _ember['default'].inject.service(),
    syncStatus: '',
    currentOpenNav: null,

    actions: {
      about: function about() {
        var _this = this;

        var version = this.get('version');
        this.get('ajax').request('/serverinfo').then(function (siteInfo) {
          var message = 'Version: ' + version;
          if (!_ember['default'].isEmpty(siteInfo)) {
            message += ' Site Info: ' + siteInfo;
          }
          _this.displayAlert(_this.get('i18n').t('navigation.about'), message);
        });
      },

      invalidateSession: function invalidateSession() {
        var session = this.get('session');
        if (session.get('isAuthenticated')) {
          session.invalidate();
        }
      },

      search: function search() {
        if (this.allowSearch && this.searchRoute) {
          var currentRouteName = this.get('currentRouteName'),
              currentSearchText = this.get('currentSearchText'),
              textToFind = this.get('searchText');
          if (currentSearchText !== textToFind || currentRouteName.indexOf('.search') === -1) {
            this.set('searchText', '');
            this.set('progressMessage', 'Searching for ' + textToFind + '.  Please wait...');
            this.showProgressModal();
            this.transitionToRoute(this.searchRoute + '/' + textToFind);
          }
        }
      },

      navAction: function navAction(nav) {
        if (this.currentOpenNav && this.currentOpenNav.route !== nav.route) {
          this.currentOpenNav.closeSubnav();
        }
        this.currentOpenNav = nav;
        this.transitionToRoute(nav.route);
        this.set('isShowingSettings', false);
      },

      toggleSettings: function toggleSettings() {
        this.toggleProperty('isShowingSettings');
      },

      closeSettings: function closeSettings() {
        this.set('isShowingSettings', false);
      }

    }
  });
});
define('hospitalrun/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('hospitalrun/dialog/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    showUpdateButton: true,
    isUpdateDisabled: false,

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      confirm: function confirm() {
        var confirmAction = this.getWithDefault('model.confirmAction', 'model.confirm');
        this.send(confirmAction, this.get('model'));
        this.send('closeModal');
      },

      ok: function ok() {
        var okAction = this.get('model.okAction');
        if (!_ember['default'].isEmpty(okAction)) {
          this.send(okAction, this.get('model'));
        }
        this.send('closeModal');
      }
    }
  });
});
define("hospitalrun/dialog/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/dialog/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "progress");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "progress-bar progress-bar-striped active");
            dom.setAttribute(el2, "role", "progressbar");
            dom.setAttribute(el2, "aria-valuemin", "0");
            dom.setAttribute(el2, "aria-valuemax", "100");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "sr-only");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("% Complete");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'aria-valuenow');
            morphs[1] = dom.createAttrMorph(element0, 'style');
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            return morphs;
          },
          statements: [["attribute", "aria-valuenow", ["get", "model.progressBarValue", ["loc", [null, [11, 95], [11, 117]]]]], ["attribute", "style", ["get", "model.progressBarStyle", ["loc", [null, [12, 52], [12, 74]]]]], ["content", "model.progressBarValue", ["loc", [null, [13, 30], [13, 56]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/dialog/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.showProgress", ["loc", [null, [9, 8], [9, 26]]]]], [], 0, null, ["loc", [null, [9, 2], [16, 9]]]], ["content", "model.message", ["loc", [null, [17, 2], [17, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/dialog/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "model.hideCancelButton", ["loc", [null, [2, 21], [2, 43]]]]], [], []], "hideUpdateButton", ["subexpr", "@mut", [["get", "model.hideUpdateButton", ["loc", [null, [3, 21], [3, 43]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "model.isUpdateDisabled", ["loc", [null, [4, 21], [4, 43]]]]], [], []], "title", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [5, 10], [5, 21]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "model.updateButtonAction", ["loc", [null, [6, 23], [6, 47]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "model.updateButtonText", ["loc", [null, [7, 21], [7, 43]]]]], [], []], "cancelButtonText", ["subexpr", "@mut", [["get", "model.cancelButtonText", ["loc", [null, [8, 21], [8, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [18, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/finishgauth/route', ['exports', 'ember', 'hospitalrun/mixins/setup-user-role'], function (exports, _ember, _hospitalrunMixinsSetupUserRole) {
  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsSetupUserRole['default'], {
    config: _ember['default'].inject.service(),
    database: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),
    model: function model(params) {
      if (params.k && params.s1 && params.s2 && params.t) {
        this.get('session').authenticate('authenticator:custom', {
          google_auth: true,
          params: params
        });
        var oauthConfigs = {
          config_consumer_key: params.k,
          config_consumer_secret: params.s1,
          config_oauth_token: params.t,
          config_token_secret: params.s2
        };
        return this.get('config').saveOauthConfigs(oauthConfigs).then((function () {
          var _this = this;

          oauthConfigs.config_use_google_auth = true;
          return this.get('database').setup(oauthConfigs).then(function () {
            return _this.setupUserRole();
          });
        }).bind(this));
      }
    }
  });
});
define('hospitalrun/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/date-format', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Helper.helper(function (params, hash) {
    if (!_ember['default'].isEmpty(params[0])) {
      var dateFormat = 'l';
      var date = params[0];
      if (hash && hash.format) {
        dateFormat = hash.format;
      }
      return moment(date).format(dateFormat);
    }
  });
});
define('hospitalrun/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/html-line-break', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var text = _ref2[0];

    if (text !== null && typeof text !== 'undefined') {
      return new _ember['default'].Handlebars.SafeString(text.replace(/\n/g, '<br>'));
    } else {
      return null;
    }
  });
});
define('hospitalrun/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/is-equal-array', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var lhs = _ref2[0];
    var rhs = _ref2[1];

    if (!_ember['default'].isArray(lhs) || !_ember['default'].isArray(rhs) || lhs.get('length') !== rhs.get('length')) {
      return false;
    }
    return lhs.every(function (item) {
      return rhs.contains(item);
    });
  });
});
define('hospitalrun/helpers/is-equal-by-path', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 3);

    var leftSide = _ref2[0];
    var rightSide = _ref2[1];
    var path = _ref2[2];

    if (path) {
      return _ember['default'].get(leftSide, path) === rightSide;
    } else {
      return leftSide === rightSide;
    }
  });
});
define('hospitalrun/helpers/is-equal', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var lhs = _ref2[0];
    var rhs = _ref2[1];

    return lhs === rhs;
  });
});
define('hospitalrun/helpers/is-not', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];

    return !value;
  });
});
define('hospitalrun/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/number-format', ['exports', 'ember', 'hospitalrun/mixins/number-format'], function (exports, _ember, _hospitalrunMixinsNumberFormat) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var NumberHandler = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']);
  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var number = _ref2[0];

    var numberHandler = new NumberHandler();
    return numberHandler._numberFormat(number);
  });
});
define('hospitalrun/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('hospitalrun/helpers/read-path', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var object = _ref2[0];
    var path = _ref2[1];

    if (_ember['default'].isEmpty(path)) {
      return object;
    } else {
      return _ember['default'].get(object, path);
    }
  });
});
define('hospitalrun/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('hospitalrun/helpers/t', ['exports', 'ember-i18n/helper'], function (exports, _emberI18nHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nHelper['default'];
    }
  });
});
define('hospitalrun/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('hospitalrun/imaging/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {
  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({
    cancelAction: 'closeModal',
    newPricingItem: false,
    requestingController: _ember['default'].inject.controllers('imaging/edit'),
    pricingList: _ember['default'].computed.alias('requestingController.chargesPricingList')
  });
});
define("hospitalrun/imaging/charge/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/imaging/charge/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["procedures/charge"], [], ["loc", [null, [6, 2], [6, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/charge/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [7, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/imaging/completed/completed-list-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tr'
  });
});
define("hospitalrun/imaging/completed/completed-list-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/completed/completed-list-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "requested-date");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "imaging-date");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "requested-by");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "display-name");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "type");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "results");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "notes");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [10]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [12]), 0, 0);
        return morphs;
      },
      statements: [["inline", "date-format", [["get", "imaging.requestedDate", ["loc", [null, [1, 41], [1, 62]]]]], [], ["loc", [null, [1, 27], [1, 64]]]], ["inline", "date-format", [["get", "imaging.imagingDate", ["loc", [null, [2, 39], [2, 58]]]]], [], ["loc", [null, [2, 25], [2, 60]]]], ["content", "imaging.requestedBy", ["loc", [null, [3, 25], [3, 48]]]], ["content", "imaging.patient.displayName", ["loc", [null, [4, 25], [4, 56]]]], ["content", "imaging.imagingType.name", ["loc", [null, [5, 17], [5, 45]]]], ["content", "imaging.result", ["loc", [null, [6, 20], [6, 38]]]], ["content", "imaging.notes", ["loc", [null, [7, 18], [7, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/imaging/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({
    startKey: [],
    showActions: false
  });
});
define('hospitalrun/imaging/completed/route', ['exports', 'ember-i18n', 'hospitalrun/imaging/index/route'], function (exports, _emberI18n, _hospitalrunImagingIndexRoute) {
  exports['default'] = _hospitalrunImagingIndexRoute['default'].extend({
    pageTitle: (0, _emberI18n.translationMacro)('imaging.titles.completed_imaging'),
    searchStatus: 'Completed'
  });
});
define("hospitalrun/imaging/completed/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 15,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/imaging/completed/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "imaging/completed/completed-list-item", [], ["imaging", ["subexpr", "@mut", [["get", "imaging", ["loc", [null, [14, 56], [14, 63]]]]], [], []]], ["loc", [null, [14, 8], [14, 65]]]]],
            locals: ["imaging"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/imaging/completed/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table imaging-completed-table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element1, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
            morphs[6] = dom.createMorphAt(dom.childAt(element1, [13]), 0, 0);
            morphs[7] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.date_requested"], [], ["loc", [null, [5, 14], [5, 43]]]], ["inline", "t", ["labels.date_completed"], [], ["loc", [null, [6, 14], [6, 43]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [7, 14], [7, 41]]]], ["inline", "t", ["labels.patient"], [], ["loc", [null, [8, 14], [8, 36]]]], ["inline", "t", ["labels.imaging_type"], [], ["loc", [null, [9, 14], [9, 41]]]], ["inline", "t", ["labels.results"], [], ["loc", [null, [10, 14], [10, 36]]]], ["inline", "t", ["labels.notes"], [], ["loc", [null, [11, 14], [11, 34]]]], ["block", "each", [["get", "model", ["loc", [null, [13, 14], [13, 19]]]]], [], 0, null, ["loc", [null, [13, 6], [15, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/imaging/completed/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", ["imaging.messages.no_completed"], [], ["loc", [null, [19, 9], [19, 46]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/imaging/completed/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], 0, 1, ["loc", [null, [2, 2], [21, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/completed/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [22, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/imaging/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {
    title: 'Delete Request',

    actions: {
      'delete': function _delete() {
        this.removeChildFromVisit(this.get('model'), 'imaging').then((function () {
          this.get('model').destroyRecord().then((function () {
            this.send('closeModal');
          }).bind(this));
        }).bind(this));
      }
    }
  });
});
define("hospitalrun/imaging/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/imaging/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    Are you sure you wish to delete this imaging request?\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/imaging/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {
    imagingController: _ember['default'].inject.controller('imaging'),

    chargePricingCategory: 'Imaging',
    chargeRoute: 'imaging.charge',
    selectedImagingType: null,

    canComplete: (function () {
      var isNew = this.get('model.isNew'),
          imagingTypeName = this.get('model.imagingTypeName'),
          selectedImagingType = this.get('selectedImagingType');
      if (isNew && (_ember['default'].isEmpty(imagingTypeName) || _ember['default'].isArray(selectedImagingType) && selectedImagingType.length > 1)) {
        return false;
      } else {
        return this.currentUserCan('complete_imaging');
      }
    }).property('selectedImagingType.[]', 'model.imagingTypeName'),

    actions: {
      completeImaging: function completeImaging() {
        this.set('model.status', 'Completed');
        this.get('model').validate().then((function () {
          if (this.get('model.isValid')) {
            this.set('model.imagingDate', new Date());
            this.send('update');
          }
        }).bind(this))['catch'](_ember['default'].K);
      },

      /**
       * Save the imaging request(s), creating multiples when user selects multiple imaging tests.
       */
      update: function update() {
        if (this.get('model.isNew')) {
          var newImaging = this.get('model'),
              selectedImagingType = this.get('selectedImagingType');
          if (_ember['default'].isEmpty(this.get('model.status'))) {
            this.set('model.status', 'Requested');
          }
          this.set('model.requestedBy', newImaging.getUserName());
          this.set('model.requestedDate', new Date());
          if (_ember['default'].isEmpty(selectedImagingType)) {
            this.saveNewPricing(this.get('model.imagingTypeName'), 'Imaging', 'model.imagingType').then((function () {
              this.addChildToVisit(newImaging, 'imaging', 'Imaging').then((function () {
                this.saveModel();
              }).bind(this));
            }).bind(this));
          } else {
            this.getSelectedPricing('selectedImagingType').then((function (pricingRecords) {
              if (_ember['default'].isArray(pricingRecords)) {
                this.createMultipleRequests(pricingRecords, 'imagingType', 'imaging', 'Imaging');
              } else {
                this.set('model.imagingType', pricingRecords);
                this.addChildToVisit(newImaging, 'imaging', 'Imaging').then((function () {
                  this.saveModel();
                }).bind(this));
              }
            }).bind(this));
          }
        } else {
          this.saveModel();
        }
      }
    },

    additionalButtons: (function () {
      var i18n = this.get('i18n');
      var canComplete = this.get('canComplete'),
          isValid = this.get('model.isValid');
      if (isValid && canComplete) {
        return [{
          buttonAction: 'completeImaging',
          buttonIcon: 'glyphicon glyphicon-ok',
          'class': 'btn btn-primary on-white',
          buttonText: i18n.t('buttons.complete')
        }];
      }
    }).property('canComplete', 'model.isValid'),

    lookupListsToUpdate: [{
      name: 'radiologistList',
      property: 'model.radiologist',
      id: 'radiologists'
    }],

    pricingTypeForObjectType: 'Imaging Procedure',
    pricingTypes: _ember['default'].computed.alias('imagingController.imagingPricingTypes'),

    pricingList: null, // This gets filled in by the route

    radiologistList: _ember['default'].computed.alias('imagingController.radiologistList'),

    updateCapability: 'add_imaging',

    afterUpdate: function afterUpdate(saveResponse, multipleRecords) {
      var i18n = this.get('i18n');
      this.updateLookupLists();
      var afterDialogAction, alertTitle, alertMessage;
      if (this.get('model.status') === 'Completed') {
        alertTitle = i18n.t('imaging.alerts.completed_title');
        alertMessage = i18n.t('imaging.alerts.completed_message');
      } else {
        alertTitle = i18n.t('imaging.alerts.saved_title');
        alertMessage = i18n.t('imaging.alerts.saved_message');
      }
      if (multipleRecords) {
        afterDialogAction = this.get('cancelAction');
      }
      this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);
      this.set('model.selectPatient', false);
    }

  });
});
define('hospitalrun/imaging/edit/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember', 'hospitalrun/mixins/patient-list-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _ember, _hospitalrunMixinsPatientListRoute) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], _hospitalrunMixinsPatientListRoute['default'], {
    editTitle: (0, _emberI18n.translationMacro)('imaging.titles.edit_title'),
    modelName: 'imaging',
    newTitle: (0, _emberI18n.translationMacro)('imaging.titles.new_title'),
    pricingCategory: 'Imaging',

    actions: {
      returnToAllItems: function returnToAllItems() {
        this.controller.send('returnToAllItems');
      }
    },

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        selectPatient: true,
        requestDate: moment().startOf('day').toDate()
      });
    }
  });
});
define("hospitalrun/imaging/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/imaging/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-typeahead", [], ["property", "patientTypeAhead", "label", ["subexpr", "t", ["labels.patient"], [], ["loc", [null, [4, 60], [4, 80]]]], "content", ["subexpr", "@mut", [["get", "patientList", ["loc", [null, [4, 88], [4, 99]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedPatient", ["loc", [null, [4, 110], [4, 125]]]]], [], []], "class", "required patient-input"], ["loc", [null, [4, 6], [4, 158]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/imaging/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-summary", [], ["patient", ["subexpr", "@mut", [["get", "model.patient", ["loc", [null, [6, 32], [6, 45]]]]], [], []], "returnTo", "imaging.edit", "returnToContext", ["subexpr", "@mut", [["get", "model.id", ["loc", [null, [6, 86], [6, 94]]]]], [], []], "disablePatientLink", ["subexpr", "@mut", [["get", "model.isNew", ["loc", [null, [6, 114], [6, 125]]]]], [], []]], ["loc", [null, [6, 6], [6, 128]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/imaging/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-select", [], ["class", "col-xs-3 required", "label", ["subexpr", "t", ["labels.visit"], [], ["loc", [null, [10, 52], [10, 70]]]], "property", "visit", "content", ["subexpr", "@mut", [["get", "patientVisitsForSelect", ["loc", [null, [11, 35], [11, 57]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.visitDescription", "prompt", ["subexpr", "t", ["imaging.labels.add_new_visit"], [], ["loc", [null, [13, 17], [13, 51]]]], "selected", ["subexpr", "@mut", [["get", "model.visit", ["loc", [null, [14, 19], [14, 30]]]]], [], []]], ["loc", [null, [10, 8], [15, 10]]]], ["inline", "checkbox-or-typeahead", [], ["property", "imagingTypeName", "label", ["subexpr", "t", ["labels.imaging_type"], [], ["loc", [null, [18, 14], [18, 39]]]], "list", ["subexpr", "@mut", [["get", "objectTypeList", ["loc", [null, [18, 45], [18, 59]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedImagingType", ["loc", [null, [19, 18], [19, 37]]]]], [], []], "optionLabelPath", "name", "typeAheadType", "pricing", "className", "required", "prompt", " ", "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [24, 14], [24, 19]]]]], [], []], "class", "imaging-type-input"], ["loc", [null, [17, 6], [26, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/imaging/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group col-xs-3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group col-xs-9");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group col-xs-12");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element0, [3]);
              var element3 = dom.childAt(fragment, [3, 1]);
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.visit"], [], ["loc", [null, [30, 17], [30, 37]]]], ["content", "model.visit.visitDate", ["loc", [null, [31, 41], [31, 66]]]], ["inline", "t", ["labels.imaging_type"], [], ["loc", [null, [34, 17], [34, 44]]]], ["content", "model.imagingType.name", ["loc", [null, [35, 41], [35, 67]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [40, 17], [40, 44]]]], ["content", "model.requestedBy", ["loc", [null, [41, 41], [41, 62]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/imaging/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "select-or-typeahead", [], ["property", "radiologist", "label", ["subexpr", "t", ["imaging.labels.radiologist"], [], ["loc", [null, [47, 14], [47, 46]]]], "list", ["subexpr", "@mut", [["get", "radiologistList", ["loc", [null, [47, 52], [47, 67]]]]], [], []], "prompt", " ", "class", "radiologist-input"], ["loc", [null, [46, 6], [50, 8]]]], ["inline", "em-input", [], ["property", "result", "label", ["subexpr", "t", ["labels.result"], [], ["loc", [null, [51, 41], [51, 60]]]], "class", "result-input"], ["loc", [null, [51, 6], [51, 83]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 54,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/imaging/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.selectPatient", ["loc", [null, [3, 10], [3, 29]]]]], [], 0, 1, ["loc", [null, [3, 4], [7, 11]]]], ["block", "if", [["get", "model.isNew", ["loc", [null, [8, 10], [8, 21]]]]], [], 2, 3, ["loc", [null, [8, 4], [44, 11]]]], ["block", "if", [["get", "canComplete", ["loc", [null, [45, 10], [45, 21]]]]], [], 4, null, ["loc", [null, [45, 4], [52, 11]]]], ["inline", "em-text", [], ["property", "notes", "label", ["subexpr", "t", ["labels.notes"], [], ["loc", [null, [53, 37], [53, 55]]]], "rows", 3], ["loc", [null, [53, 4], [53, 65]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/imaging/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [54, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [55, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/imaging/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {
    startKey: [],
    addPermission: 'add_imaging'
  });
});
define('hospitalrun/imaging/index/imaging-edit-button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'button',
    classNames: ['btn', 'btn-default', 'neutral']
  });
});
define("hospitalrun/imaging/index/imaging-edit-button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 54
            }
          },
          "moduleName": "hospitalrun/imaging/index/imaging-edit-button/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["labels.edit"], [], ["loc", [null, [1, 35], [1, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/index/imaging-edit-button/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "link-to", ["imaging.edit", ["get", "imaging", ["loc", [null, [1, 26], [1, 33]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 66]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/imaging/index/requested-list-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tr',
    classNames: ['clickable'],

    click: function click() {
      this.sendAction('action', this.imaging);
    }
  });
});
define("hospitalrun/imaging/index/requested-list-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/imaging/index/requested-list-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "imaging/index/imaging-edit-button", [], ["imaging", ["subexpr", "@mut", [["get", "imaging", ["loc", [null, [10, 50], [10, 57]]]]], [], []]], ["loc", [null, [10, 6], [10, 59]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/imaging/index/requested-list-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "canEdit", ["loc", [null, [9, 10], [9, 17]]]]], [], 0, null, ["loc", [null, [9, 4], [11, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/index/requested-list-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "date");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "requested-by");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "patient");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "type");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "notes");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 0, 0);
        morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "date-format", [["get", "imaging.requestedDate", ["loc", [null, [1, 31], [1, 52]]]]], [], ["loc", [null, [1, 17], [1, 54]]]], ["content", "imaging.requestedBy", ["loc", [null, [2, 25], [2, 48]]]], ["content", "imaging.patient.displayName", ["loc", [null, [3, 20], [3, 51]]]], ["content", "imaging.imagingType.name", ["loc", [null, [4, 17], [4, 45]]]], ["content", "imaging.notes", ["loc", [null, [5, 18], [5, 35]]]], ["block", "if", [["get", "showActions", ["loc", [null, [7, 6], [7, 17]]]]], [], 0, null, ["loc", [null, [7, 0], [13, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/imaging/index/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-index-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractIndexRoute) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    modelName: 'imaging',
    pageTitle: (0, _emberI18n.translationMacro)('imaging.page_title'),
    searchStatus: 'Requested',

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var imagingDateAsTime = item.get('imagingDateAsTime'),
          id = this._getPouchIdFromItem(item),
          requestedDateAsTime = item.get('requestedDateAsTime'),
          searchStatus = this.get('searchStatus');
      return [searchStatus, requestedDateAsTime, imagingDateAsTime, id];
    },
    _modelQueryParams: function _modelQueryParams() {
      var maxId = this._getMaxPouchId(),
          maxValue = this.get('maxValue'),
          minId = this._getMinPouchId(),
          searchStatus = this.get('searchStatus');
      return {
        options: {
          startkey: [searchStatus, null, null, minId],
          endkey: [searchStatus, maxValue, maxValue, maxId]
        },
        mapReduce: 'imaging_by_status'
      };
    }
  });
});
define("hospitalrun/imaging/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/imaging/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [11, 14], [11, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 6
                },
                "end": {
                  "line": 20,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/imaging/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "imaging/index/requested-list-item", [], ["imaging", ["subexpr", "@mut", [["get", "imaging", ["loc", [null, [16, 18], [16, 25]]]]], [], []], "action", "editItem", "showActions", ["subexpr", "@mut", [["get", "showActions", ["loc", [null, [18, 22], [18, 33]]]]], [], []], "canEdit", ["subexpr", "@mut", [["get", "canEdit", ["loc", [null, [19, 18], [19, 25]]]]], [], []]], ["loc", [null, [15, 8], [19, 27]]]]],
            locals: ["imaging"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/imaging/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1]);
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element3, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(element3, 11, 11);
            morphs[6] = dom.createMorphAt(element2, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.date_requested"], [], ["loc", [null, [5, 12], [5, 41]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [6, 12], [6, 39]]]], ["inline", "t", ["labels.patient"], [], ["loc", [null, [7, 12], [7, 34]]]], ["inline", "t", ["labels.imaging_type"], [], ["loc", [null, [8, 12], [8, 39]]]], ["inline", "t", ["labels.notes"], [], ["loc", [null, [9, 12], [9, 32]]]], ["block", "if", [["get", "showActions", ["loc", [null, [10, 14], [10, 25]]]]], [], 0, null, ["loc", [null, [10, 8], [12, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [14, 14], [14, 19]]]]], [], 1, null, ["loc", [null, [14, 6], [20, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 41
                },
                "end": {
                  "line": 24,
                  "column": 127
                }
              },
              "moduleName": "hospitalrun/imaging/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["newItem"], [], ["loc", [null, [24, 68], [24, 88]]]], ["inline", "t", ["messages.create_new_record"], [], ["loc", [null, [24, 89], [24, 123]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/imaging/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["inline", "t", ["messages.no_items_found"], [], ["loc", [null, [24, 9], [24, 40]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [24, 47], [24, 53]]]]], [], 0, null, ["loc", [null, [24, 41], [24, 134]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/imaging/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [26, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/imaging/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [27, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/imaging/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-module-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractModuleRoute) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({
    addCapability: 'add_imaging',
    additionalModels: [{
      name: 'imagingPricingTypes',
      findArgs: ['lookup', 'imaging_pricing_types']
    }, {
      name: 'radiologistList',
      findArgs: ['lookup', 'radiologists']
    }],
    allowSearch: false,
    moduleName: 'imaging',
    newButtonText: (0, _emberI18n.translationMacro)('imaging.buttons.new_button'),
    sectionTitle: (0, _emberI18n.translationMacro)('imaging.section_title')
  });
});
define('hospitalrun/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'hospitalrun/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _hospitalrunConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_hospitalrunConfigEnvironment['default'].APP.name, _hospitalrunConfigEnvironment['default'].APP.version)
  };
});
define('hospitalrun/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('hospitalrun/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('hospitalrun/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.ArrayController.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define("hospitalrun/initializers/ember-i18n", ["exports", "hospitalrun/instance-initializers/ember-i18n"], function (exports, _hospitalrunInstanceInitializersEmberI18n) {
  exports["default"] = {
    name: _hospitalrunInstanceInitializersEmberI18n["default"].name,

    initialize: function initialize() {
      var application = arguments[1] || arguments[0]; // depending on Ember version
      if (application.instanceInitializer) {
        return;
      }

      _hospitalrunInstanceInitializersEmberI18n["default"].initialize(application);
    }
  };
});
define('hospitalrun/initializers/ember-simple-auth', ['exports', 'ember', 'hospitalrun/config/environment', 'ember-simple-auth/configuration', 'ember-simple-auth/initializers/setup-session', 'ember-simple-auth/initializers/setup-session-service'], function (exports, _ember, _hospitalrunConfigEnvironment, _emberSimpleAuthConfiguration, _emberSimpleAuthInitializersSetupSession, _emberSimpleAuthInitializersSetupSessionService) {
  exports['default'] = {
    name: 'ember-simple-auth',
    initialize: function initialize(registry) {
      var config = _hospitalrunConfigEnvironment['default']['ember-simple-auth'] || {};
      config.baseURL = _hospitalrunConfigEnvironment['default'].baseURL;
      _emberSimpleAuthConfiguration['default'].load(config);

      (0, _emberSimpleAuthInitializersSetupSession['default'])(registry);
      (0, _emberSimpleAuthInitializersSetupSessionService['default'])(registry);
    }
  };
});
define('hospitalrun/initializers/export-application-global', ['exports', 'ember', 'hospitalrun/config/environment'], function (exports, _ember, _hospitalrunConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_hospitalrunConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _hospitalrunConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_hospitalrunConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('hospitalrun/initializers/i18n', ['exports'], function (exports) {
  exports['default'] = {
    name: 'i18n',

    after: 'ember-i18n',

    initialize: function initialize(app) {
      app.inject('route', 'i18n', 'service:i18n');
      app.inject('controller', 'i18n', 'service:i18n');
      app.inject('mixin', 'i18n', 'service:i18n');
      app.inject('model', 'i18n', 'service:i18n');
    }
  };
});
define('hospitalrun/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('hospitalrun/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: _ember['default'].K
  };
});
define('hospitalrun/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('hospitalrun/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define("hospitalrun/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define("hospitalrun/instance-initializers/ember-i18n", ["exports", "ember", "ember-i18n/stream", "ember-i18n/legacy-helper", "hospitalrun/config/environment"], function (exports, _ember, _emberI18nStream, _emberI18nLegacyHelper, _hospitalrunConfigEnvironment) {
  exports["default"] = {
    name: 'ember-i18n',

    initialize: function initialize(appOrAppInstance) {
      if (_emberI18nLegacyHelper["default"] != null) {
        (function () {
          // Used for Ember < 1.13
          var i18n = appOrAppInstance.container.lookup('service:i18n');

          i18n.localeStream = new _emberI18nStream["default"](function () {
            return i18n.get('locale');
          });

          _ember["default"].addObserver(i18n, 'locale', i18n, function () {
            this.localeStream.value(); // force the stream to be dirty
            this.localeStream.notify();
          });

          _ember["default"].HTMLBars._registerHelper('t', _emberI18nLegacyHelper["default"]);
        })();
      }
    }
  };
});
define('hospitalrun/instance-initializers/ember-simple-auth', ['exports', 'ember-simple-auth/instance-initializers/setup-session-restoration'], function (exports, _emberSimpleAuthInstanceInitializersSetupSessionRestoration) {
  exports['default'] = {
    name: 'ember-simple-auth',
    initialize: function initialize(instance) {
      (0, _emberSimpleAuthInstanceInitializersSetupSessionRestoration['default'])(instance);
    }
  };
});
define('hospitalrun/inventory/adjust/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-adjustment-types', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventoryAdjustmentTypes, _ember, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryAdjustmentTypes['default'], {
    inventoryController: _ember['default'].inject.controller('inventory'),

    expenseAccountList: _ember['default'].computed.alias('inventoryController.expenseAccountList'),

    title: (0, _emberI18n.translationMacro)('inventory.titles.adjustment'),

    transactionTypeChanged: (function () {
      _ember['default'].run.once(this, function () {
        this.get('model').validate()['catch'](_ember['default'].K);
      });
    }).observes('transactionType'),

    updateButtonText: (function () {
      return this.get('model.transactionType');
    }).property('model.transactionType'),

    updateButtonAction: 'adjust',

    updateCapability: 'adjust_inventory_location',

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      adjust: function adjust() {
        this.send('adjustItems', this.get('model'), true);
      }
    }
  });
});
define("hospitalrun/inventory/adjust/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 31,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/adjust/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "form-control-static");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "form-control-static");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "form-control-static");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var element3 = dom.childAt(fragment, [7]);
            var element4 = dom.childAt(fragment, [11]);
            var morphs = new Array(11);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
            morphs[6] = dom.createMorphAt(element3, 1, 1);
            morphs[7] = dom.createMorphAt(element3, 3, 3);
            morphs[8] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            morphs[9] = dom.createMorphAt(element4, 1, 1);
            morphs[10] = dom.createMorphAt(element4, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["inventory.labels.item"], [], ["loc", [null, [8, 35], [8, 64]]]], ["content", "model.adjustmentItem.name", ["loc", [null, [9, 37], [9, 66]]]], ["inline", "t", ["inventory.labels.adjustment_for"], [], ["loc", [null, [12, 35], [12, 74]]]], ["content", "model.locationName", ["loc", [null, [13, 37], [13, 59]]]], ["inline", "t", ["inventory.labels.current_quantity"], [], ["loc", [null, [16, 35], [16, 76]]]], ["content", "model.quantity", ["loc", [null, [17, 37], [17, 55]]]], ["inline", "em-select", [], ["class", "col-sm-4", "label", ["subexpr", "t", ["inventory.labels.adjustment_type"], [], ["loc", [null, [20, 41], [20, 79]]]], "property", "transactionType", "content", ["subexpr", "@mut", [["get", "adjustmentTypes", ["loc", [null, [21, 43], [21, 58]]]]], [], []], "optionValuePath", "type", "optionLabelPath", "name"], ["loc", [null, [20, 6], [23, 8]]]], ["inline", "em-input", [], ["property", "adjustmentQuantity", "label", ["subexpr", "t", ["labels.quantity"], [], ["loc", [null, [24, 53], [24, 74]]]], "class", "col-sm-3 required"], ["loc", [null, [24, 6], [24, 102]]]], ["inline", "em-text", [], ["label", ["subexpr", "t", ["inventory.labels.reason"], [], ["loc", [null, [26, 20], [26, 49]]]], "property", "reason", "rows", 3], ["loc", [null, [26, 4], [26, 76]]]], ["inline", "date-picker", [], ["property", "dateCompleted", "label", ["subexpr", "t", ["inventory.labels.adjustment_date"], [], ["loc", [null, [28, 51], [28, 89]]]], "class", "col-sm-4 required"], ["loc", [null, [28, 6], [28, 117]]]], ["inline", "select-or-typeahead", [], ["property", "expenseAccount", "label", ["subexpr", "t", ["inventory.labels.expense"], [], ["loc", [null, [29, 60], [29, 90]]]], "list", ["subexpr", "@mut", [["get", "expenseAccountList", ["loc", [null, [29, 96], [29, 114]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.expenseAccount", ["loc", [null, [29, 125], [29, 145]]]]], [], []], "class", "col-sm-8"], ["loc", [null, [29, 6], [29, 165]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/adjust/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 2], [31, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 17
          }
        },
        "moduleName": "hospitalrun/inventory/adjust/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [32, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/barcode/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    selectedPrinter: null,

    barcodeUri: (function () {
      var id = this.get('model.id'),
          name = this.get('model.name');
      return _ember['default'].$(document).JsBarcode(id, {
        width: 1,
        height: 20,
        fontSize: 10,
        displayValue: name,
        returnUri: true
      });
    }).property('id', 'name'),

    printers: (function () {
      return dymo.label.framework.getTapePrinters();
    }).property(),

    havePrinters: (function () {
      var printers = this.get('printers');
      if (printers.length > 0) {
        return true;
      } else {
        return false;
      }
    }).property('printers'),

    singlePrinter: (function () {
      var printers = this.get('printers');
      if (printers.length === 1) {
        return true;
      } else {
        return false;
      }
    }).property('printers'),

    actions: {
      print: function print() {
        var barcodeUri = this.get('barcodeUri'),
            selectedPrinter = this.get('selectedPrinter');
        if (!selectedPrinter) {
          selectedPrinter = this.get('printers')[0].name;
        }
        _ember['default'].$.get('/dymo/BarcodeAsImage.label', function (labelXml) {
          var barcodeAsImageLabel = dymo.label.framework.openLabelXml(labelXml);
          var pngBase64 = barcodeUri.substr('data:image/png;base64,'.length);
          barcodeAsImageLabel.setObjectText('Image', pngBase64);
          barcodeAsImageLabel.print(selectedPrinter);
        }, 'text');
      }
    }

  });
});
define('hospitalrun/inventory/barcode/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model(params) {
      return this.store.find('inventory', params.inventory_id);
    }

  });
});
define("hospitalrun/inventory/barcode/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 12
              },
              "end": {
                "line": 25,
                "column": 12
              }
            },
            "moduleName": "hospitalrun/inventory/barcode/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "for", "printerSelect");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("            \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["inventory.labels.printer"], [], ["loc", [null, [15, 43], [15, 75]]]], ["inline", "select-list", [], ["content", ["subexpr", "@mut", [["get", "printers", ["loc", [null, [17, 28], [17, 36]]]]], [], []], "optionLabelPath", "name", "optionValuePath", "name", "value", ["subexpr", "@mut", [["get", "selectedPrinter", ["loc", [null, [20, 26], [20, 41]]]]], [], []], "class", "form-control", "action", ["subexpr", "action", [["subexpr", "mut", [["get", "selectedPrinter", ["loc", [null, [22, 40], [22, 55]]]]], [], ["loc", [null, [22, 35], [22, 56]]]]], [], ["loc", [null, [22, 27], [22, 57]]]], "id", "printerSelect"], ["loc", [null, [16, 16], [24, 18]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/barcode/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    \n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "form-group");
          var el4 = dom.createTextNode("            \n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-primary");
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", " glyphicon glyphicon-print");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element2);
          morphs[3] = dom.createMorphAt(element2, 2, 2);
          return morphs;
        },
        statements: [["inline", "t", ["inventory.labels.print_barcode"], [], ["loc", [null, [10, 32], [10, 70]]]], ["block", "unless", [["get", "singlePrinter", ["loc", [null, [14, 22], [14, 35]]]]], [], 0, null, ["loc", [null, [14, 12], [25, 23]]]], ["element", "action", ["print"], [], ["loc", [null, [27, 40], [27, 58]]]], ["inline", "t", ["inventory.labels.print"], [], ["loc", [null, [27, 108], [27, 138]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/barcode/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-default");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0, 1, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element3, 'src');
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["attribute", "src", ["get", "barcodeUri", ["loc", [null, [3, 15], [3, 25]]]]], ["block", "if", [["get", "havePrinters", ["loc", [null, [7, 6], [7, 18]]]]], [], 0, null, ["loc", [null, [7, 0], [30, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/batch/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventoryId, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _ember, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryId['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventorySelection['default'], {
    doingUpdate: false,
    inventoryController: _ember['default'].inject.controller('inventory'),
    inventoryItems: null,
    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),
    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),
    vendorList: _ember['default'].computed.alias('inventoryController.vendorList'),
    purchaseAttributes: ['expirationDate', 'inventoryItem', 'lotNumber', 'purchaseCost', 'quantity', 'vendorItemNo'],

    inventoryList: (function () {
      var inventoryItems = this.get('inventoryItems');
      if (!_ember['default'].isEmpty(inventoryItems)) {
        var mappedItems = inventoryItems.map(function (item) {
          return item.doc;
        });
        return mappedItems;
      }
    }).property('inventoryItems.[]'),

    lookupListsToUpdate: [{
      name: 'aisleLocationList', // Name of property containing lookup list
      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'aisle_location_list' // Id of the lookup list to update
    }, {
      name: 'vendorList', // Name of property containing lookup list
      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'vendor_list' // Id of the lookup list to update
    }, {
      name: 'warehouseList', // Name of property containing lookup list
      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'warehouse_list' // Id of the lookup list to update
    }],

    showDistributionUnit: (function () {
      return this._haveValidInventoryItem();
    }).property('model.inventoryItemTypeAhead', 'model.inventoryItem'),

    showInvoiceItems: (function () {
      var invoiceItems = this.get('model.invoiceItems');
      return !_ember['default'].isEmpty(invoiceItems);
    }).property('model.invoiceItems.[]'),

    totalReceived: (function () {
      var invoiceItems = this.get('model.invoiceItems'),
          total = 0;
      if (!_ember['default'].isEmpty('invoiceItems')) {
        total = invoiceItems.reduce(function (previousValue, item) {
          return previousValue + Number(item.get('purchaseCost'));
        }, total);
      }
      var purchaseCost = this.get('model.purchaseCost');
      if (this.get('model.isValid') && !_ember['default'].isEmpty(purchaseCost)) {
        total += Number(purchaseCost);
      }
      return total;
    }).property('model.invoiceItems.[].purchaseCost', 'model.isValid', 'model.purchaseCost'),

    updateButtonText: (0, _emberI18n.translationMacro)('inventory.labels.save'),

    updateCapability: 'add_inventory_item',

    _addNewInventoryItem: function _addNewInventoryItem() {
      this.generateId().then((function (inventoryId) {
        var inventoryItem = this.store.createRecord('inventory', {
          id: inventoryId,
          name: this.get('model.inventoryItemTypeAhead'),
          quantity: 0, // Needed for validation purposes
          skipSavePurchase: true
        });
        this.send('openModal', 'inventory.quick-add', inventoryItem);
      }).bind(this));
    },

    _addInventoryItem: function _addInventoryItem() {
      var model = this.get('model'),
          inventoryItemTypeAhead = this.get('model.inventoryItemTypeAhead'),
          purchaseCost = this.get('model.purchaseCost'),
          quantity = this.get('model.quantity');
      return model.validate().then((function () {
        if (this.get('model.isValid') && !_ember['default'].isEmpty(inventoryItemTypeAhead) && !_ember['default'].isEmpty(quantity) && !_ember['default'].isEmpty(purchaseCost)) {
          if (this._haveValidInventoryItem()) {
            this._addInvoiceItem();
          } else {
            this._addNewInventoryItem();
            return true;
          }
        } else {
          throw Error('invalid');
        }
      }).bind(this))['catch']((function () {
        this.displayAlert(this.get('i18n').t('inventory.titles.warning'), this.get('i18n').t('inventory.messages.warning'));
      }).bind(this));
    },

    _addInvoiceItem: function _addInvoiceItem() {
      var model = this.get('model'),
          invoiceItems = model.get('invoiceItems'),
          itemProperties = model.getProperties(this.get('purchaseAttributes')),
          invoiceItem = _ember['default'].Object.create(itemProperties);
      invoiceItems.addObject(invoiceItem);
      model.set('expirationDate');
      model.set('inventoryItem');
      model.set('inventoryItemTypeAhead');
      model.set('lotNumber');
      model.set('purchaseCost');
      model.set('quantity');
      model.set('selectedInventoryItem');
      model.set('vendorItemNo');
    },

    _findInventoryItem: function _findInventoryItem(purchase) {
      var invoiceItems = this.get('model.invoiceItems'),
          inventoryId = purchase.get('inventoryItem');
      if (!_ember['default'].isEmpty(inventoryId)) {
        var invoiceItem = invoiceItems.find(function (item) {
          return item.get('inventoryItem.id') === inventoryId;
        }, this);
        if (!_ember['default'].isEmpty(invoiceItem)) {
          return invoiceItem.get('inventoryItem');
        }
      }
    },

    _haveValidInventoryItem: function _haveValidInventoryItem() {
      var inventoryItemTypeAhead = this.get('model.inventoryItemTypeAhead'),
          inventoryItem = this.get('model.inventoryItem');
      if (_ember['default'].isEmpty(inventoryItemTypeAhead) || _ember['default'].isEmpty(inventoryItem)) {
        return false;
      } else {
        var inventoryItemName = inventoryItem.get('name'),
            typeAheadName = inventoryItemTypeAhead.substr(0, inventoryItemName.length);
        if (typeAheadName !== inventoryItemName) {
          return false;
        } else {
          return true;
        }
      }
    },

    _savePurchases: function _savePurchases() {
      var model = this.get('model'),
          purchaseDefaults = model.getProperties(['dateReceived', 'vendor', 'invoiceNo', 'location', 'aisleLocation', 'giftInKind']),
          invoiceItems = model.get('invoiceItems'),
          inventoryPurchase,
          savePromises = [];
      invoiceItems.forEach((function (invoiceItem) {
        var inventoryItem = invoiceItem.get('inventoryItem'),
            quantity = invoiceItem.get('quantity');
        inventoryPurchase = this.store.createRecord('inv-purchase', purchaseDefaults);
        inventoryPurchase.setProperties(invoiceItem.getProperties(this.get('purchaseAttributes')));
        inventoryPurchase.setProperties({
          distributionUnit: inventoryItem.get('distributionUnit'),
          currentQuantity: quantity,
          originalQuantity: quantity,
          inventoryItem: inventoryItem.get('id')
        });
        savePromises.push(inventoryPurchase.save());
      }).bind(this));
      _ember['default'].RSVP.all(savePromises).then((function (results) {
        var inventorySaves = [],
            purchasesAdded = [];
        results.forEach((function (newPurchase) {
          var inventoryItem = this._findInventoryItem(newPurchase),
              purchases = inventoryItem.get('purchases');
          purchases.addObject(newPurchase);
          purchasesAdded.push(this.newPurchaseAdded(inventoryItem, newPurchase));
        }).bind(this));

        _ember['default'].RSVP.all(inventorySaves).then((function () {
          results.forEach((function (newPurchase) {
            var inventoryItem = this._findInventoryItem(newPurchase);
            inventoryItem.updateQuantity();
            inventorySaves.push(inventoryItem.save());
          }).bind(this));
          _ember['default'].RSVP.all(inventorySaves).then((function () {
            this.updateLookupLists();
            this.displayAlert(this.get('i18n').t('inventory.titles.purchase_saved'), this.get('i18n').t('inventory.messages.purchase_saved'), 'allItems');
          }).bind(this));
        }).bind(this));
      }).bind(this));
    },

    actions: {
      addInventoryItem: function addInventoryItem() {
        this._addInventoryItem();
      },

      addedNewInventoryItem: function addedNewInventoryItem(inventoryItem) {
        this.set('model.inventoryItem', inventoryItem);
        this._addInvoiceItem();
        this.send('closeModal');
        if (this.get('doingUpdate')) {
          this._savePurchases();
        }
      },

      removeItem: function removeItem(removeInfo) {
        var invoiceItems = this.get('model.invoiceItems'),
            item = removeInfo.itemToRemove;
        invoiceItems.removeObject(item);
        this.send('closeModal');
      },

      showRemoveItem: function showRemoveItem(item) {
        var message = this.get('i18n').t('inventory.messages.remove_item'),
            model = _ember['default'].Object.create({
          itemToRemove: item
        }),
            title = this.get('i18n').t('inventory.titles.remove_item');
        this.displayConfirm(title, message, 'removeItem', model);
      },

      /**
       * Update the model
       */
      update: function update() {
        this.set('doingUpdate', true);
        this._addInventoryItem().then((function (addingNewInventory) {
          if (!addingNewInventory) {
            this._savePurchases();
          }
        }).bind(this));
      }
    }
  });
});
define('hospitalrun/inventory/batch/route', ['exports', 'hospitalrun/inventory/request/route', 'ember', 'ember-i18n'], function (exports, _hospitalrunInventoryRequestRoute, _ember, _emberI18n) {
  exports['default'] = _hospitalrunInventoryRequestRoute['default'].extend({
    editTitle: (0, _emberI18n.translationMacro)('navigation.subnav.inventory_received'),
    modelName: 'inventory-batch',
    newTitle: (0, _emberI18n.translationMacro)('navigation.subnav.inventory_received'),
    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        invoiceItems: [],
        dateReceived: new Date()
      });
    },

    actions: {
      addedNewInventoryItem: function addedNewInventoryItem(model) {
        this.controller.send('addedNewInventoryItem', model);
      }
    }
  });
});
define("hospitalrun/inventory/batch/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 12
                },
                "end": {
                  "line": 35,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/inventory/batch/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.inventoryItem.distributionUnit", ["loc", [null, [34, 45], [34, 85]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 66,
                    "column": 8
                  },
                  "end": {
                    "line": 103,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/inventory/batch/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "col-sm-2");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "col-sm-2");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "input-group");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "input-group-addon");
                var el5 = dom.createTextNode("\n                  ");
                dom.appendChild(el4, el5);
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                 ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "col-sm-2");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "form-group");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "col-sm-2");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "form-group");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "col-sm-2");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "form-group");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "col-sm-2");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "col-sm-1");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("button");
                dom.setAttribute(el3, "class", "btn btn-default warning");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "octicon octicon-x");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [3, 1]);
                var element2 = dom.childAt(element0, [13, 1]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
                morphs[1] = dom.createMorphAt(element1, 1, 1);
                morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
                morphs[3] = dom.createMorphAt(dom.childAt(element0, [5, 1]), 1, 1);
                morphs[4] = dom.createMorphAt(dom.childAt(element0, [7, 1]), 1, 1);
                morphs[5] = dom.createMorphAt(dom.childAt(element0, [9, 1]), 1, 1);
                morphs[6] = dom.createMorphAt(dom.childAt(element0, [11]), 1, 1);
                morphs[7] = dom.createElementMorph(element2);
                morphs[8] = dom.createMorphAt(element2, 2, 2);
                return morphs;
              },
              statements: [["content", "invoiceItem.inventoryItem.name", ["loc", [null, [69, 14], [69, 48]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "invoiceItem.quantity", ["loc", [null, [73, 51], [73, 71]]]]], [], []]], ["loc", [null, [73, 16], [73, 74]]]], ["content", "invoiceItem.inventoryItem.distributionUnit", ["loc", [null, [75, 18], [75, 64]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "invoiceItem.purchaseCost", ["loc", [null, [81, 51], [81, 75]]]]], [], []]], ["loc", [null, [81, 16], [81, 78]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "invoiceItem.vendorItemNo", ["loc", [null, [86, 51], [86, 75]]]]], [], []]], ["loc", [null, [86, 16], [86, 78]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "invoiceItem.lotNumber", ["loc", [null, [91, 49], [91, 70]]]]], [], []]], ["loc", [null, [91, 14], [91, 73]]]], ["inline", "date-picker", [], ["property", "expirationDate", "minDate", "now", "model", ["subexpr", "@mut", [["get", "invoiceItem", ["loc", [null, [95, 74], [95, 85]]]]], [], []]], ["loc", [null, [95, 14], [95, 88]]]], ["element", "action", ["showRemoveItem", ["get", "invoiceItem", ["loc", [null, [98, 80], [98, 91]]]]], ["bubbles", false], ["loc", [null, [98, 54], [98, 108]]]], ["inline", "t", ["inventory.labels.remove"], [], ["loc", [null, [99, 55], [99, 86]]]]],
              locals: ["invoiceItem"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 54,
                  "column": 4
                },
                "end": {
                  "line": 106,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/batch/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h3");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1, "class", "table");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tr");
              dom.setAttribute(el2, "class", "table-header");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h4");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [3]);
              var element4 = dom.childAt(element3, [1]);
              var morphs = new Array(10);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element4, [7]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element4, [9]), 0, 0);
              morphs[6] = dom.createMorphAt(dom.childAt(element4, [11]), 0, 0);
              morphs[7] = dom.createMorphAt(dom.childAt(element4, [13]), 0, 0);
              morphs[8] = dom.createMorphAt(element3, 3, 3);
              morphs[9] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["inventory.labels.invoice_items"], [], ["loc", [null, [55, 10], [55, 48]]]], ["inline", "t", ["inventory.labels.name"], [], ["loc", [null, [58, 14], [58, 43]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [59, 14], [59, 37]]]], ["inline", "t", ["inventory.labels.cost"], [], ["loc", [null, [60, 14], [60, 43]]]], ["inline", "t", ["inventory.labels.item_number"], [], ["loc", [null, [61, 14], [61, 50]]]], ["inline", "t", ["inventory.labels.serial_number"], [], ["loc", [null, [62, 14], [62, 52]]]], ["inline", "t", ["inventory.labels.expiration_date"], [], ["loc", [null, [63, 14], [63, 54]]]], ["inline", "t", ["inventory.labels.action"], [], ["loc", [null, [64, 14], [64, 45]]]], ["block", "each", [["get", "model.invoiceItems", ["loc", [null, [66, 16], [66, 34]]]]], [], 0, null, ["loc", [null, [66, 8], [103, 17]]]], ["inline", "t", ["inventory.labels.total_received"], ["total", ["subexpr", "@mut", [["get", "totalReceived", ["loc", [null, [105, 54], [105, 67]]]]], [], []]], ["loc", [null, [105, 10], [105, 69]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 107,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/batch/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "form-group col-sm-2");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "class", "control-label");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel panel-primary");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-body");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "row");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "form-group col-sm-1");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "control-label");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "row");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "form-group col-sm-2");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "control-label");
            var el6 = dom.createTextNode(" ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("p");
            dom.setAttribute(el5, "class", "form-control-static");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("button");
            dom.setAttribute(el6, "class", "btn btn-primary");
            var el7 = dom.createTextNode("\n                ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("span");
            dom.setAttribute(el7, "class", "octicon octicon-plus");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode(" ");
            dom.appendChild(el6, el7);
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n              ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var element6 = dom.childAt(fragment, [3]);
            var element7 = dom.childAt(element6, [5]);
            var element8 = dom.childAt(fragment, [5]);
            var element9 = dom.childAt(element8, [3]);
            var element10 = dom.childAt(element9, [1]);
            var element11 = dom.childAt(element10, [5]);
            var element12 = dom.childAt(element9, [3]);
            var element13 = dom.childAt(element12, [7, 3, 1]);
            var morphs = new Array(19);
            morphs[0] = dom.createMorphAt(element5, 1, 1);
            morphs[1] = dom.createMorphAt(element5, 3, 3);
            morphs[2] = dom.createMorphAt(element5, 5, 5);
            morphs[3] = dom.createMorphAt(element6, 1, 1);
            morphs[4] = dom.createMorphAt(element6, 3, 3);
            morphs[5] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
            morphs[6] = dom.createMorphAt(element7, 3, 3);
            morphs[7] = dom.createMorphAt(dom.childAt(element8, [1, 1]), 0, 0);
            morphs[8] = dom.createMorphAt(element10, 1, 1);
            morphs[9] = dom.createMorphAt(element10, 3, 3);
            morphs[10] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
            morphs[11] = dom.createMorphAt(element11, 3, 3);
            morphs[12] = dom.createMorphAt(element10, 7, 7);
            morphs[13] = dom.createMorphAt(element12, 1, 1);
            morphs[14] = dom.createMorphAt(element12, 3, 3);
            morphs[15] = dom.createMorphAt(element12, 5, 5);
            morphs[16] = dom.createElementMorph(element13);
            morphs[17] = dom.createMorphAt(element13, 3, 3);
            morphs[18] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "date-picker", [], ["property", "dateReceived", "label", ["subexpr", "t", ["inventory.labels.date_received"], [], ["loc", [null, [4, 50], [4, 86]]]], "class", "col-sm-4 required"], ["loc", [null, [4, 6], [4, 114]]]], ["inline", "select-or-typeahead", [], ["property", "vendor", "label", ["subexpr", "t", ["inventory.labels.vendor"], [], ["loc", [null, [5, 52], [5, 81]]]], "list", ["subexpr", "@mut", [["get", "vendorList", ["loc", [null, [5, 87], [5, 97]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.vendor", ["loc", [null, [5, 108], [5, 120]]]]], [], []], "className", "col-sm-4 required test-vendor"], ["loc", [null, [5, 6], [5, 164]]]], ["inline", "em-input", [], ["property", "invoiceNo", "label", ["subexpr", "t", ["inventory.labels.invoice_number"], [], ["loc", [null, [6, 44], [6, 81]]]], "class", "col-sm-4 test-invoice-number"], ["loc", [null, [6, 6], [6, 120]]]], ["inline", "select-or-typeahead", [], ["property", "location", "label", ["subexpr", "t", ["inventory.labels.location"], [], ["loc", [null, [9, 54], [9, 85]]]], "list", ["subexpr", "@mut", [["get", "warehouseList", ["loc", [null, [9, 91], [9, 104]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.location", ["loc", [null, [9, 115], [9, 129]]]]], [], []], "className", "col-sm-5"], ["loc", [null, [9, 6], [9, 152]]]], ["inline", "select-or-typeahead", [], ["property", "aisleLocation", "label", ["subexpr", "t", ["inventory.labels.aisle_location"], [], ["loc", [null, [10, 59], [10, 96]]]], "list", ["subexpr", "@mut", [["get", "aisleLocationList", ["loc", [null, [10, 102], [10, 119]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.aisleLocation", ["loc", [null, [10, 130], [10, 149]]]]], [], []], "className", "col-sm-5"], ["loc", [null, [10, 6], [10, 172]]]], ["inline", "t", ["inventory.labels.gift"], [], ["loc", [null, [12, 37], [12, 66]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["inventory.labels.gift"], [], ["loc", [null, [13, 28], [13, 55]]]], "property", "giftInKind"], ["loc", [null, [13, 8], [13, 79]]]], ["inline", "t", ["inventory.labels.invoice_line_item"], [], ["loc", [null, [18, 32], [18, 74]]]], ["inline", "inventory-typeahead", [], ["class", "col-sm-7 required test-inv-item", "property", "inventoryItemTypeAhead", "label", ["subexpr", "t", ["inventory.labels.inventory_item"], [], ["loc", [null, [25, 18], [25, 55]]]], "content", ["subexpr", "@mut", [["get", "inventoryList", ["loc", [null, [26, 20], [26, 33]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedInventoryItem", ["loc", [null, [27, 22], [27, 43]]]]], [], []], "showQuantity", false], ["loc", [null, [22, 10], [29, 12]]]], ["inline", "em-input", [], ["property", "quantity", "label", ["subexpr", "t", ["labels.quantity"], [], ["loc", [null, [30, 47], [30, 68]]]], "class", "col-sm-2 required test-inv-quantity"], ["loc", [null, [30, 10], [30, 114]]]], ["inline", "t", ["inventory.labels.unit"], [], ["loc", [null, [32, 41], [32, 70]]]], ["block", "if", [["get", "showDistributionUnit", ["loc", [null, [33, 18], [33, 38]]]]], [], 0, null, ["loc", [null, [33, 12], [35, 19]]]], ["inline", "em-input", [], ["property", "purchaseCost", "label", ["subexpr", "t", ["inventory.labels.purchase_cost"], [], ["loc", [null, [37, 51], [37, 87]]]], "class", "col-sm-2 required test-inv-cost"], ["loc", [null, [37, 10], [37, 129]]]], ["inline", "em-input", [], ["property", "vendorItemNo", "label", ["subexpr", "t", ["inventory.labels.vendor_item_number"], [], ["loc", [null, [40, 51], [40, 92]]]], "class", "col-sm-4"], ["loc", [null, [40, 10], [40, 111]]]], ["inline", "em-input", [], ["property", "lotNumber", "label", ["subexpr", "t", ["inventory.labels.serial_number"], [], ["loc", [null, [41, 48], [41, 84]]]], "class", "col-sm-4"], ["loc", [null, [41, 10], [41, 103]]]], ["inline", "date-picker", [], ["property", "expirationDate", "label", ["subexpr", "t", ["inventory.labels.expiration_date"], [], ["loc", [null, [42, 56], [42, 94]]]], "minDate", "now", "class", "col-sm-2"], ["loc", [null, [42, 10], [42, 127]]]], ["element", "action", ["addInventoryItem"], [], ["loc", [null, [46, 46], [46, 75]]]], ["inline", "t", ["inventory.labels.add"], [], ["loc", [null, [47, 59], [47, 87]]]], ["block", "if", [["get", "model.invoiceItems", ["loc", [null, [54, 10], [54, 28]]]]], [], 1, null, ["loc", [null, [54, 4], [106, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 108,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/batch/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [107, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 109,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/batch/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [108, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/delete/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _emberI18n, _hospitalrunControllersAbstractDeleteController) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    title: (0, _emberI18n.translationMacro)('inventory.labels.delete_item')
  });
});
define("hospitalrun/inventory/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" \n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["inventory.messages.delete"], ["name", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [8, 41], [8, 51]]]]], [], []]], ["loc", [null, [8, 4], [8, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/return-to', 'hospitalrun/mixins/unit-types', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventoryTypeList, _hospitalrunMixinsReturnTo, _hospitalrunMixinsUnitTypes, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventoryTypeList['default'], _hospitalrunMixinsReturnTo['default'], _hospitalrunMixinsUnitTypes['default'], _hospitalrunMixinsUserSession['default'], {
    inventory: _ember['default'].inject.controller(),
    savingNewItem: false,

    canAddPurchase: (function () {
      return this.currentUserCan('add_inventory_purchase');
    }).property(),

    canAdjustLocation: function canAdjustLocation() {
      return this.currentUserCan('adjust_inventory_location');
    },

    canDeletePurchase: (function () {
      return this.currentUserCan('delete_inventory_purchase');
    }).property(),

    warehouseList: _ember['default'].computed.alias('inventory.warehouseList'),
    aisleLocationList: _ember['default'].computed.alias('inventory.aisleLocationList'),
    inventoryTypeList: _ember['default'].computed.alias('inventory.inventoryTypeList.value'),
    inventoryUnitList: _ember['default'].computed.alias('inventory.inventoryUnitList.value'),
    vendorList: _ember['default'].computed.alias('inventory.vendorList'),
    database: _ember['default'].inject.service(),

    lookupListsToUpdate: [{
      name: 'aisleLocationList', // Name of property containing lookup list
      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'aisle_location_list' // Id of the lookup list to update
    }, {
      name: 'vendorList', // Name of property containing lookup list
      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'vendor_list' // Id of the lookup list to update
    }, {
      name: 'warehouseList', // Name of property containing lookup list
      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'warehouse_list' // Id of the lookup list to update
    }],

    canEditQuantity: (function () {
      return this.get('model.isNew');
    }).property('model.isNew'),

    haveTransactions: (function () {
      var transactions = this.get('transactions');
      return transactions !== null;
    }).property('transactions.[]'),

    locationQuantityTotal: (function () {
      var locations = this.get('model.locations');
      var total = locations.reduce(function (previousValue, location) {
        return previousValue + parseInt(location.get('quantity'));
      }, 0);
      return total;
    }).property('model.locations'),

    /**
     * Check to see if the total quantity by location matches the quantity calculated on the item
     * @return {boolean} true if there is a discrepency;otherwise false.
     */
    quantityDiscrepency: (function () {
      var locationQuantityTotal = this.get('locationQuantityTotal'),
          quantity = this.get('model.quantity');
      return !_ember['default'].isEmpty(locationQuantityTotal) && !_ember['default'].isEmpty(quantity) && locationQuantityTotal !== quantity;
    }).property('locationQuantityTotal', 'model.quantity'),

    /**
     * Get the difference in quantity between the total quantity by location and the quantity on the item.
     * @return {int} the difference.
     */
    quantityDifferential: (function () {
      var locationQuantityTotal = this.get('locationQuantityTotal'),
          quantity = this.get('model.quantity');
      return Math.abs(locationQuantityTotal - quantity);
    }).property('locationQuantityTotal', 'model.quantity'),

    originalQuantityUpdated: (function () {
      var isNew = this.get('model.isNew'),
          quantity = this.get('model.originalQuantity');
      if (isNew && !_ember['default'].isEmpty(quantity)) {
        this.set('model.quantity', quantity);
      }
    }).observes('model.isNew', 'model.originalQuantity'),

    showTransactions: (function () {
      var transactions = this.get('transactions');
      return !_ember['default'].isEmpty(transactions);
    }).property('transactions.[]'),

    transactions: null,

    updateCapability: 'add_inventory_item',

    actions: {
      adjustItems: function adjustItems(inventoryLocation) {
        var adjustmentQuantity = parseInt(inventoryLocation.get('adjustmentQuantity')),
            inventoryItem = this.get('model'),
            transactionType = inventoryLocation.get('transactionType'),
            request = this.get('store').createRecord('inv-request', {
          adjustPurchases: true,
          dateCompleted: inventoryLocation.get('dateCompleted'),
          expenseAccount: inventoryLocation.get('expenseAccount'),
          inventoryItem: inventoryItem,
          quantity: adjustmentQuantity,
          transactionType: transactionType,
          reason: inventoryLocation.get('reason'),
          deliveryAisle: inventoryLocation.get('aisleLocation'),
          deliveryLocation: inventoryLocation.get('location')
        });
        request.set('inventoryLocations', [inventoryLocation]);
        var increment = false;
        if (transactionType === 'Adjustment (Add)' || transactionType === 'Return') {
          increment = true;
        }
        request.set('markAsConsumed', true);
        // Make sure inventory item is resolved first.
        request.get('inventoryItem').then((function () {
          this.send('fulfillRequest', request, true, increment, true);
        }).bind(this));
      },

      deletePurchase: function deletePurchase(purchase, deleteFromLocation, expire) {
        var purchases = this.get('model.purchases'),
            quantityDeleted = purchase.get('currentQuantity');
        if (expire) {
          purchase.set('expired', true);
          purchase.save();
        } else {
          purchases.removeObject(purchase);
          purchase.destroyRecord();
        }
        if (!_ember['default'].isEmpty(deleteFromLocation)) {
          deleteFromLocation.decrementProperty('quantity', quantityDeleted);
          deleteFromLocation.save();
        }
        this.get('model').updateQuantity();
        this.send('update', true);
        this.send('closeModal');
      },

      editNewItem: function editNewItem() {
        this.send('editItem', this.get('model.id'));
      },

      showAdjustment: function showAdjustment(inventoryLocation) {
        inventoryLocation.setProperties({
          dateCompleted: new Date(),
          adjustmentItem: this.get('model'),
          adjustmentQuantity: '',
          reason: '',
          transferItem: null,
          transactionType: 'Adjustment (Add)'
        });
        this.send('openModal', 'inventory.adjust', inventoryLocation);
      },

      showTransfer: function showTransfer(inventoryLocation) {
        inventoryLocation.set('adjustmentQuantity');
        inventoryLocation.set('transferItem', this.get('model'));
        inventoryLocation.set('dateCompleted', new Date());
        this.send('openModal', 'inventory.transfer', inventoryLocation);
      },

      transferItems: function transferItems(inventoryLocation) {
        var inventoryItem = this.get('model'),
            request = this.get('store').createRecord('inv-request', {
          adjustPurchases: false,
          dateCompleted: inventoryLocation.get('dateCompleted'),
          inventoryItem: inventoryItem,
          quantity: inventoryLocation.get('adjustmentQuantity'),
          deliveryAisle: inventoryLocation.get('transferAisleLocation'),
          deliveryLocation: inventoryLocation.get('transferLocation'),
          transactionType: 'Transfer'
        });
        this.transferToLocation(inventoryItem, inventoryLocation).then((function () {
          inventoryLocation.setProperties({
            transferItem: null,
            transferLocation: null,
            transferAisleLocation: null,
            adjustmentQuantity: null
          });
          request.set('locationsAffected', [{
            name: inventoryLocation.get('locationName'),
            quantity: request.get('quantity')
          }]);
          request.get('inventoryItem').then((function () {
            // Make sure relationships are resolved before saving
            this._saveRequest(request);
          }).bind(this));
        }).bind(this));
      },

      updatePurchase: function updatePurchase(purchase, updateQuantity) {
        if (updateQuantity) {
          this.get('model').updateQuantity();
          this.send('update', true);
        }
        this.send('closeModal');
      }
    },

    _completeBeforeUpdate: function _completeBeforeUpdate(sequence, resolve, reject) {
      var sequenceValue = null,
          friendlyId = sequence.get('prefix'),
          promises = [],
          model = this.get('model'),
          newPurchase = model.getProperties('aisleLocation', 'dateReceived', 'purchaseCost', 'lotNumber', 'expirationDate', 'giftInKind', 'invoiceNo', 'location', 'originalQuantity', 'quantityGroups', 'vendor', 'vendorItemNo'),
          quantity = this.get('model.originalQuantity');
      if (!_ember['default'].isEmpty(quantity)) {
        newPurchase.currentQuantity = quantity;
        newPurchase.inventoryItem = this.get('model.id');
        var purchase = this.get('store').createRecord('inv-purchase', newPurchase);
        promises.push(purchase.save());
        this.get('model.purchases').addObject(purchase);
        promises.push(this.newPurchaseAdded(this.get('model'), purchase));
      }
      sequence.incrementProperty('value', 1);
      sequenceValue = sequence.get('value');
      if (sequenceValue < 100000) {
        friendlyId += String('00000' + sequenceValue).slice(-5);
      } else {
        friendlyId += sequenceValue;
      }
      model.set('friendlyId', friendlyId);
      promises.push(sequence.save());
      _ember['default'].RSVP.all(promises, 'All before update done for inventory item').then(function () {
        resolve();
      }, function (error) {
        reject(error);
      });
    },

    _findSequence: function _findSequence(inventoryType, resolve, reject) {
      var sequenceFinder = new _ember['default'].RSVP.Promise((function (resolve) {
        this._checkNextSequence(resolve, inventoryType, 0);
      }).bind(this));
      sequenceFinder.then((function (prefixChars) {
        var store = this.get('store');
        var newSequence = store.push(store.normalize('sequence', {
          id: 'inventory_' + inventoryType,
          prefix: inventoryType.toLowerCase().substr(0, prefixChars),
          value: 0
        }));
        this._completeBeforeUpdate(newSequence, resolve, reject);
      }).bind(this));
    },

    _findSequenceByPrefix: function _findSequenceByPrefix(inventoryType, prefixChars) {
      var database = this.get('database');
      var sequenceQuery = {
        key: inventoryType.toLowerCase().substr(0, prefixChars)
      };
      return database.queryMainDB(sequenceQuery, 'sequence_by_prefix');
    },

    _checkNextSequence: function _checkNextSequence(resolve, inventoryType, prefixChars) {
      prefixChars++;
      this._findSequenceByPrefix(inventoryType, prefixChars).then((function (records) {
        if (_ember['default'].isEmpty(records.rows)) {
          resolve(prefixChars);
        } else {
          this._checkNextSequence(resolve, inventoryType, prefixChars);
        }
      }).bind(this), function () {
        resolve(prefixChars);
      });
    },

    /**
     * Saves the specified request, then updates the inventory item and closes the modal.
     */
    _saveRequest: function _saveRequest(request) {
      request.set('status', 'Completed');
      request.set('completedBy', request.getUserName());
      request.save().then((function () {
        this.send('update', true);
        this.send('closeModal');
        this.getTransactions();
      }).bind(this));
    },

    getTransactions: function getTransactions() {
      var inventoryId = this.get('model.id');
      this.set('transactions', null);
      this.store.query('inv-request', {
        options: {
          endkey: [inventoryId, 'Completed', 0],
          startkey: [inventoryId, 'Completed', 9999999999999],
          descending: true
        },
        mapReduce: 'inventory_request_by_item'
      }).then((function (transactions) {
        this.set('transactions', transactions);
      }).bind(this));
    },

    beforeUpdate: function beforeUpdate() {
      if (this.get('model.isNew')) {
        var model = this.get('model'),
            inventoryType = model.get('inventoryType');
        return new _ember['default'].RSVP.Promise((function (resolve, reject) {
          model.validate().then((function () {
            if (model.get('isValid')) {
              this.set('savingNewItem', true);
              this.store.find('sequence', 'inventory_' + inventoryType).then((function (sequence) {
                this._completeBeforeUpdate(sequence, resolve, reject);
              }).bind(this), (function () {
                this._findSequence(inventoryType, resolve, reject);
              }).bind(this));
            } else {
              this.send('showDisabledDialog');
              reject('invalid model');
            }
          }).bind(this))['catch']((function () {
            this.send('showDisabledDialog');
          }).bind(this));
        }).bind(this));
      } else {
        return _ember['default'].RSVP.Promise.resolve();
      }
    },

    afterUpdate: function afterUpdate() {
      var afterUpdateAction = null;
      if (this.get('savingNewItem')) {
        afterUpdateAction = 'editNewItem';
        this.set('savingNewItem', false);
      }
      this.displayAlert('Inventory Item Saved', 'The inventory item has been saved.', afterUpdateAction);
    }
  });
});
define('hospitalrun/inventory/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/inventory-id'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n, _hospitalrunMixinsInventoryId) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsInventoryId['default'], {
    editTitle: (0, _emberI18n.translationMacro)('inventory.labels.edit_item'),
    modelName: 'inventory',
    newTitle: (0, _emberI18n.translationMacro)('inventory.labels.new_item'),

    actions: {
      adjustItems: function adjustItems(inventoryLocation) {
        this.controller.send('adjustItems', inventoryLocation);
      },

      doneFulfillRequest: function doneFulfillRequest() {
        this.controller.getTransactions();
      },

      deletePurchase: function deletePurchase(purchase, deleteFromLocation) {
        this.controller.send('deletePurchase', purchase, deleteFromLocation);
      },

      editNewItem: function editNewItem() {
        this.controller.send('editNewItem');
      },

      expirePurchase: function expirePurchase(purchase, deleteFromLocation) {
        this.controller.send('deletePurchase', purchase, deleteFromLocation, true);
      },

      transferItems: function transferItems(inventoryLocation) {
        this.controller.send('transferItems', inventoryLocation);
      },

      updatePurchase: function updatePurchase(purchase, updateQuantity) {
        this.controller.send('updatePurchase', purchase, updateQuantity);
      }
    },

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        dateReceived: new Date()
      });
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      controller.getTransactions();
    }
  });
});
define("hospitalrun/inventory/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h3");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["inventory.labels.purchase_info"], [], ["loc", [null, [5, 10], [5, 48]]]], ["inline", "partial", ["inv-purchase"], [], ["loc", [null, [6, 6], [6, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 6
                  },
                  "end": {
                    "line": 17,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/inventory/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "alert alert-danger alert-dismissible");
                dom.setAttribute(el1, "role", "alert");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("button");
                dom.setAttribute(el2, "type", "button");
                dom.setAttribute(el2, "class", "close");
                dom.setAttribute(el2, "data-dismiss", "alert");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "aria-hidden", "true");
                var el4 = dom.createTextNode("×");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "sr-only");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("p");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "glyphicon glyphicon-warning-sign");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("p");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element12 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(dom.childAt(element12, [1, 1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element12, [3]), 3, 3);
                morphs[2] = dom.createMorphAt(dom.childAt(element12, [5]), 0, 0);
                return morphs;
              },
              statements: [["inline", "t", ["buttons.close"], [], ["loc", [null, [10, 128], [10, 149]]]], ["inline", "t", ["inventory.messages.quantity"], ["quantity", ["subexpr", "@mut", [["get", "model.quantity", ["loc", [null, [13, 55], [13, 69]]]]], [], []], "locationQuantity", ["subexpr", "@mut", [["get", "locationQuantityTotal", ["loc", [null, [13, 87], [13, 108]]]]], [], []]], ["loc", [null, [13, 12], [13, 110]]]], ["inline", "t", ["inventory.messages.adjust"], ["difference", ["subexpr", "@mut", [["get", "quantityDifferential", ["loc", [null, [15, 56], [15, 76]]]]], [], []]], ["loc", [null, [15, 13], [15, 78]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 8
                  },
                  "end": {
                    "line": 22,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/inventory/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-primary align-right");
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "octicon octicon-plus");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element11 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element11);
                morphs[1] = dom.createMorphAt(element11, 2, 2);
                return morphs;
              },
              statements: [["element", "action", ["showAddPurchase", ["get", "this", ["loc", [null, [21, 81], [21, 85]]]]], [], ["loc", [null, [21, 54], [21, 87]]]], ["inline", "t", ["inventory.titles.add_purchase"], [], ["loc", [null, [21, 131], [21, 168]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 45,
                      "column": 14
                    },
                    "end": {
                      "line": 47,
                      "column": 14
                    }
                  },
                  "moduleName": "hospitalrun/inventory/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["inventory.labels.gift_in_kind_yes"], [], ["loc", [null, [46, 16], [46, 57]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 47,
                      "column": 14
                    },
                    "end": {
                      "line": 49,
                      "column": 14
                    }
                  },
                  "moduleName": "hospitalrun/inventory/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["inventory.labels.gift_in_kind_no"], [], ["loc", [null, [48, 16], [48, 56]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 8
                  },
                  "end": {
                    "line": 56,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/inventory/edit/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element10 = dom.childAt(fragment, [1]);
                var morphs = new Array(11);
                morphs[0] = dom.createAttrMorph(element10, 'class');
                morphs[1] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element10, [5]), 0, 0);
                morphs[4] = dom.createMorphAt(dom.childAt(element10, [7]), 0, 0);
                morphs[5] = dom.createMorphAt(dom.childAt(element10, [9]), 0, 0);
                morphs[6] = dom.createMorphAt(dom.childAt(element10, [11]), 1, 1);
                morphs[7] = dom.createMorphAt(dom.childAt(element10, [13]), 0, 0);
                morphs[8] = dom.createMorphAt(dom.childAt(element10, [15]), 0, 0);
                morphs[9] = dom.createMorphAt(dom.childAt(element10, [17]), 0, 0);
                morphs[10] = dom.createMorphAt(dom.childAt(element10, [19]), 0, 0);
                return morphs;
              },
              statements: [["attribute", "class", ["subexpr", "if", [["get", "purchase.expired", ["loc", [null, [38, 25], [38, 41]]]], "warning"], [], ["loc", [null, [38, 20], [38, 53]]]]], ["inline", "date-format", [["get", "purchase.dateReceived", ["loc", [null, [39, 30], [39, 51]]]]], [], ["loc", [null, [39, 16], [39, 53]]]], ["content", "purchase.purchaseCost", ["loc", [null, [40, 16], [40, 41]]]], ["content", "purchase.costPerUnit", ["loc", [null, [41, 16], [41, 40]]]], ["content", "purchase.originalQuantity", ["loc", [null, [42, 16], [42, 45]]]], ["content", "purchase.currentQuantity", ["loc", [null, [43, 16], [43, 44]]]], ["block", "if", [["get", "purchase.giftInKind", ["loc", [null, [45, 20], [45, 39]]]]], [], 0, 1, ["loc", [null, [45, 14], [49, 21]]]], ["content", "purchase.lotNumber", ["loc", [null, [51, 16], [51, 38]]]], ["inline", "date-format", [["get", "purchase.expirationDate", ["loc", [null, [52, 30], [52, 53]]]]], [], ["loc", [null, [52, 16], [52, 55]]]], ["content", "purchase.vendor", ["loc", [null, [53, 16], [53, 35]]]], ["content", "purchase.invoiceNo", ["loc", [null, [54, 16], [54, 38]]]]],
              locals: ["purchase"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h3");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1, "class", "table");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tr");
              dom.setAttribute(el2, "class", "table-header");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element13 = dom.childAt(fragment, [2]);
              var element14 = dom.childAt(fragment, [4]);
              var element15 = dom.childAt(element14, [1]);
              var morphs = new Array(14);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(element13, 1, 1);
              morphs[2] = dom.createMorphAt(element13, 3, 3);
              morphs[3] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element15, [3]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element15, [5]), 0, 0);
              morphs[6] = dom.createMorphAt(dom.childAt(element15, [7]), 0, 0);
              morphs[7] = dom.createMorphAt(dom.childAt(element15, [9]), 0, 0);
              morphs[8] = dom.createMorphAt(dom.childAt(element15, [11]), 0, 0);
              morphs[9] = dom.createMorphAt(dom.childAt(element15, [13]), 0, 0);
              morphs[10] = dom.createMorphAt(dom.childAt(element15, [15]), 0, 0);
              morphs[11] = dom.createMorphAt(dom.childAt(element15, [17]), 0, 0);
              morphs[12] = dom.createMorphAt(dom.childAt(element15, [19]), 0, 0);
              morphs[13] = dom.createMorphAt(element14, 3, 3);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "if", [["get", "quantityDiscrepency", ["loc", [null, [8, 12], [8, 31]]]]], [], 0, null, ["loc", [null, [8, 6], [17, 13]]]], ["inline", "t", ["inventory.labels.purchases"], [], ["loc", [null, [19, 8], [19, 42]]]], ["block", "if", [["get", "canAddPurchase", ["loc", [null, [20, 14], [20, 28]]]]], [], 1, null, ["loc", [null, [20, 8], [22, 15]]]], ["inline", "t", ["inventory.labels.date_received"], [], ["loc", [null, [26, 14], [26, 52]]]], ["inline", "t", ["inventory.labels.purchase_cost"], [], ["loc", [null, [27, 14], [27, 52]]]], ["inline", "t", ["inventory.labels.cost_per_unit"], [], ["loc", [null, [28, 14], [28, 52]]]], ["inline", "t", ["inventory.labels.original_quantity"], [], ["loc", [null, [29, 14], [29, 56]]]], ["inline", "t", ["inventory.labels.current_quantity"], [], ["loc", [null, [30, 14], [30, 55]]]], ["inline", "t", ["inventory.labels.gift"], [], ["loc", [null, [31, 14], [31, 43]]]], ["inline", "t", ["inventory.labels.serial_number"], [], ["loc", [null, [32, 14], [32, 52]]]], ["inline", "t", ["inventory.labels.expiration_date"], [], ["loc", [null, [33, 14], [33, 54]]]], ["inline", "t", ["inventory.labels.vendor"], [], ["loc", [null, [34, 14], [34, 45]]]], ["inline", "t", ["inventory.labels.invoice_number"], [], ["loc", [null, [35, 14], [35, 53]]]], ["block", "each", [["get", "model.purchases", ["loc", [null, [37, 16], [37, 31]]]]], [], 2, null, ["loc", [null, [37, 8], [56, 17]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 66,
                    "column": 10
                  },
                  "end": {
                    "line": 68,
                    "column": 10
                  }
                },
                "moduleName": "hospitalrun/inventory/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("th");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["inline", "t", ["labels.action"], [], ["loc", [null, [67, 16], [67, 37]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 76,
                        "column": 14
                      },
                      "end": {
                        "line": 81,
                        "column": 14
                      }
                    },
                    "moduleName": "hospitalrun/inventory/edit/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("td");
                    var el2 = dom.createTextNode("\n                  ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("button");
                    dom.setAttribute(el2, "class", "btn btn-primary neutral");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                  ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("button");
                    dom.setAttribute(el2, "class", "btn btn-primary neutral");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element4 = dom.childAt(fragment, [1]);
                    var element5 = dom.childAt(element4, [1]);
                    var element6 = dom.childAt(element4, [3]);
                    var morphs = new Array(4);
                    morphs[0] = dom.createElementMorph(element5);
                    morphs[1] = dom.createMorphAt(element5, 0, 0);
                    morphs[2] = dom.createElementMorph(element6);
                    morphs[3] = dom.createMorphAt(element6, 0, 0);
                    return morphs;
                  },
                  statements: [["element", "action", ["showAdjustment", ["get", "location", ["loc", [null, [78, 84], [78, 92]]]]], [], ["loc", [null, [78, 58], [78, 94]]]], ["inline", "t", ["inventory.labels.adjust"], [], ["loc", [null, [78, 95], [78, 126]]]], ["element", "action", ["showTransfer", ["get", "location", ["loc", [null, [79, 82], [79, 90]]]]], [], ["loc", [null, [79, 58], [79, 92]]]], ["inline", "t", ["inventory.labels.transfer"], [], ["loc", [null, [79, 93], [79, 126]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 71,
                      "column": 10
                    },
                    "end": {
                      "line": 83,
                      "column": 10
                    }
                  },
                  "moduleName": "hospitalrun/inventory/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("tr");
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element7 = dom.childAt(fragment, [1]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
                  morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
                  morphs[2] = dom.createMorphAt(dom.childAt(element7, [5]), 0, 0);
                  morphs[3] = dom.createMorphAt(element7, 7, 7);
                  return morphs;
                },
                statements: [["content", "location.location", ["loc", [null, [73, 18], [73, 39]]]], ["content", "location.aisleLocation", ["loc", [null, [74, 18], [74, 44]]]], ["content", "location.quantity", ["loc", [null, [75, 18], [75, 39]]]], ["block", "if", [["get", "canAdjustLocation", ["loc", [null, [76, 20], [76, 37]]]]], [], 0, null, ["loc", [null, [76, 14], [81, 21]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 70,
                    "column": 8
                  },
                  "end": {
                    "line": 84,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/inventory/edit/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "location.quantity", ["loc", [null, [71, 16], [71, 33]]]]], [], 0, null, ["loc", [null, [71, 10], [83, 17]]]]],
              locals: ["location"],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 105,
                            "column": 20
                          },
                          "end": {
                            "line": 107,
                            "column": 20
                          }
                        },
                        "moduleName": "hospitalrun/inventory/edit/template.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                      ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("strong");
                        var el2 = dom.createComment("");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode(" ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("br");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(2);
                        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "t", ["inventory.edit.reason"], [], ["loc", [null, [106, 30], [106, 59]]]], ["content", "transaction.reason", ["loc", [null, [106, 69], [106, 91]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child1 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 108,
                            "column": 20
                          },
                          "end": {
                            "line": 110,
                            "column": 20
                          }
                        },
                        "moduleName": "hospitalrun/inventory/edit/template.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                      ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("strong");
                        var el2 = dom.createComment("");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode(" ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(2);
                        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "t", ["inventory.edit.returned"], [], ["loc", [null, [109, 30], [109, 61]]]], ["content", "transaction.deliveryDetails", ["loc", [null, [109, 71], [109, 102]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child2 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 110,
                            "column": 20
                          },
                          "end": {
                            "line": 112,
                            "column": 20
                          }
                        },
                        "moduleName": "hospitalrun/inventory/edit/template.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                      ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("strong");
                        var el2 = dom.createComment("");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode(" ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(2);
                        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "t", ["inventory.edit.location"], [], ["loc", [null, [111, 30], [111, 61]]]], ["content", "transaction.deliveryDetails", ["loc", [null, [111, 71], [111, 102]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 104,
                          "column": 18
                        },
                        "end": {
                          "line": 113,
                          "column": 18
                        }
                      },
                      "moduleName": "hospitalrun/inventory/edit/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(2);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "if", [["get", "transaction.haveReason", ["loc", [null, [105, 26], [105, 48]]]]], [], 0, null, ["loc", [null, [105, 20], [107, 27]]]], ["block", "if", [["get", "transaction.patient", ["loc", [null, [108, 26], [108, 45]]]]], [], 1, 2, ["loc", [null, [108, 20], [112, 27]]]]],
                    locals: [],
                    templates: [child0, child1, child2]
                  };
                })();
                var child1 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 118,
                            "column": 20
                          },
                          "end": {
                            "line": 120,
                            "column": 20
                          }
                        },
                        "moduleName": "hospitalrun/inventory/edit/template.hbs"
                      },
                      isEmpty: false,
                      arity: 1,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                      ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("br");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["content", "location.name", ["loc", [null, [119, 22], [119, 39]]]]],
                      locals: ["location"],
                      templates: []
                    };
                  })();
                  var child1 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 121,
                            "column": 20
                          },
                          "end": {
                            "line": 123,
                            "column": 20
                          }
                        },
                        "moduleName": "hospitalrun/inventory/edit/template.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                      ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("strong");
                        var el2 = dom.createComment("");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode(" ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(2);
                        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "t", ["inventory.edit.prescription"], [], ["loc", [null, [122, 30], [122, 65]]]], ["content", "transaction.deliveryDetails", ["loc", [null, [122, 75], [122, 106]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child2 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 123,
                            "column": 20
                          },
                          "end": {
                            "line": 125,
                            "column": 20
                          }
                        },
                        "moduleName": "hospitalrun/inventory/edit/template.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                      ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("strong");
                        var el2 = dom.createComment("");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode(" ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(2);
                        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "t", ["inventory.edit.delivered"], [], ["loc", [null, [124, 30], [124, 62]]]], ["content", "transaction.deliveryDetails", ["loc", [null, [124, 72], [124, 103]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 114,
                          "column": 18
                        },
                        "end": {
                          "line": 126,
                          "column": 18
                        }
                      },
                      "moduleName": "hospitalrun/inventory/edit/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("strong");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode(" ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("br");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("strong");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode(" ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("br");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("strong");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(7);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                      morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                      morphs[2] = dom.createMorphAt(dom.childAt(fragment, [6]), 0, 0);
                      morphs[3] = dom.createMorphAt(fragment, 8, 8, contextualElement);
                      morphs[4] = dom.createMorphAt(dom.childAt(fragment, [11]), 0, 0);
                      morphs[5] = dom.createMorphAt(fragment, 13, 13, contextualElement);
                      morphs[6] = dom.createMorphAt(fragment, 14, 14, contextualElement);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["inventory.edit.cost"], [], ["loc", [null, [115, 28], [115, 55]]]], ["content", "transaction.costPerUnit", ["loc", [null, [115, 65], [115, 92]]]], ["inline", "t", ["inventory.edit.quantity"], [], ["loc", [null, [116, 28], [116, 59]]]], ["content", "transaction.quantityAtCompletion", ["loc", [null, [116, 69], [116, 105]]]], ["inline", "t", ["inventory.edit.pulled"], [], ["loc", [null, [117, 28], [117, 57]]]], ["block", "each", [["get", "transaction.locationsAffected", ["loc", [null, [118, 28], [118, 57]]]]], [], 0, null, ["loc", [null, [118, 20], [120, 29]]]], ["block", "if", [["get", "transaction.patient", ["loc", [null, [121, 26], [121, 45]]]]], [], 1, 2, ["loc", [null, [121, 20], [125, 27]]]]],
                    locals: [],
                    templates: [child0, child1, child2]
                  };
                })();
                var child2 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.4.6",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 129,
                            "column": 20
                          },
                          "end": {
                            "line": 131,
                            "column": 20
                          }
                        },
                        "moduleName": "hospitalrun/inventory/edit/template.hbs"
                      },
                      isEmpty: false,
                      arity: 1,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                      ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement("br");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["content", "location.name", ["loc", [null, [130, 22], [130, 39]]]]],
                      locals: ["location"],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 127,
                          "column": 18
                        },
                        "end": {
                          "line": 133,
                          "column": 18
                        }
                      },
                      "moduleName": "hospitalrun/inventory/edit/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("strong");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("                    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("strong");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode(" ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(4);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                      morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                      morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
                      morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                      return morphs;
                    },
                    statements: [["inline", "t", ["inventory.edit.transferred_from"], [], ["loc", [null, [128, 28], [128, 67]]]], ["block", "each", [["get", "transaction.locationsAffected", ["loc", [null, [129, 28], [129, 57]]]]], [], 0, null, ["loc", [null, [129, 20], [131, 29]]]], ["inline", "t", ["inventory.edit.transferred_to"], [], ["loc", [null, [132, 28], [132, 65]]]], ["content", "transaction.deliveryDetails", ["loc", [null, [132, 75], [132, 106]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 97,
                        "column": 12
                      },
                      "end": {
                        "line": 136,
                        "column": 12
                      }
                    },
                    "moduleName": "hospitalrun/inventory/edit/template.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("tr");
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createTextNode("\n");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("                ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var element1 = dom.childAt(element0, [9]);
                    var morphs = new Array(7);
                    morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
                    morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
                    morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
                    morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
                    morphs[4] = dom.createMorphAt(element1, 1, 1);
                    morphs[5] = dom.createMorphAt(element1, 2, 2);
                    morphs[6] = dom.createMorphAt(element1, 3, 3);
                    return morphs;
                  },
                  statements: [["inline", "date-format", [["get", "transaction.dateCompleted", ["loc", [null, [99, 34], [99, 59]]]]], [], ["loc", [null, [99, 20], [99, 61]]]], ["content", "transaction.quantity", ["loc", [null, [100, 20], [100, 44]]]], ["content", "transaction.transactionType", ["loc", [null, [101, 20], [101, 51]]]], ["content", "transaction.expenseAccount", ["loc", [null, [102, 20], [102, 50]]]], ["block", "if", [["get", "transaction.isAdjustment", ["loc", [null, [104, 24], [104, 48]]]]], [], 0, null, ["loc", [null, [104, 18], [113, 25]]]], ["block", "if", [["get", "transaction.isFulfillment", ["loc", [null, [114, 24], [114, 49]]]]], [], 1, null, ["loc", [null, [114, 18], [126, 25]]]], ["block", "if", [["get", "transaction.isTransfer", ["loc", [null, [127, 24], [127, 46]]]]], [], 2, null, ["loc", [null, [127, 18], [133, 25]]]]],
                  locals: ["transaction"],
                  templates: [child0, child1, child2]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 96,
                      "column": 10
                    },
                    "end": {
                      "line": 137,
                      "column": 10
                    }
                  },
                  "moduleName": "hospitalrun/inventory/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "each", [["get", "transactions", ["loc", [null, [97, 20], [97, 32]]]]], [], 0, null, ["loc", [null, [97, 12], [136, 21]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 137,
                      "column": 10
                    },
                    "end": {
                      "line": 141,
                      "column": 10
                    }
                  },
                  "moduleName": "hospitalrun/inventory/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("tr");
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "colspan", "4");
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "glyphicon glyphicon-refresh glyphicon-refresh-animate");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 2, 2);
                  return morphs;
                },
                statements: [["inline", "t", ["inventory.messages.loading"], [], ["loc", [null, [139, 106], [139, 140]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 86,
                    "column": 6
                  },
                  "end": {
                    "line": 143,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/inventory/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("h3");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("table");
                dom.setAttribute(el1, "class", "table");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("tr");
                dom.setAttribute(el2, "class", "table-header");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [3]);
                var element3 = dom.childAt(element2, [1]);
                var morphs = new Array(7);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
                morphs[4] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
                morphs[5] = dom.createMorphAt(dom.childAt(element3, [9]), 0, 0);
                morphs[6] = dom.createMorphAt(element2, 3, 3);
                return morphs;
              },
              statements: [["inline", "t", ["inventory.labels.transactions"], [], ["loc", [null, [87, 12], [87, 49]]]], ["inline", "t", ["inventory.labels.date_completed"], [], ["loc", [null, [90, 16], [90, 55]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [91, 16], [91, 39]]]], ["inline", "t", ["inventory.labels.transaction"], [], ["loc", [null, [92, 16], [92, 52]]]], ["inline", "t", ["inventory.labels.expense"], [], ["loc", [null, [93, 16], [93, 48]]]], ["inline", "t", ["inventory.labels.details"], [], ["loc", [null, [94, 16], [94, 48]]]], ["block", "if", [["get", "haveTransactions", ["loc", [null, [96, 16], [96, 32]]]]], [], 0, 1, ["loc", [null, [96, 10], [141, 17]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 59,
                  "column": 4
                },
                "end": {
                  "line": 144,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("h3");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1, "class", "table");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tr");
              dom.setAttribute(el2, "class", "table-header");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("th");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [3]);
              var element9 = dom.childAt(element8, [1]);
              var morphs = new Array(7);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element9, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(element9, 7, 7);
              morphs[5] = dom.createMorphAt(element8, 3, 3);
              morphs[6] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["inventory.labels.locations"], [], ["loc", [null, [60, 10], [60, 44]]]], ["inline", "t", ["inventory.labels.location"], [], ["loc", [null, [63, 14], [63, 47]]]], ["inline", "t", ["inventory.labels.aisle_location"], [], ["loc", [null, [64, 14], [64, 53]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [65, 14], [65, 37]]]], ["block", "if", [["get", "canAdjustLocation", ["loc", [null, [66, 16], [66, 33]]]]], [], 0, null, ["loc", [null, [66, 10], [68, 17]]]], ["block", "each", [["get", "model.locations", ["loc", [null, [70, 16], [70, 31]]]]], [], 1, null, ["loc", [null, [70, 8], [84, 17]]]], ["block", "if", [["get", "showTransactions", ["loc", [null, [86, 12], [86, 28]]]]], [], 2, null, ["loc", [null, [86, 6], [143, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 145,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["inventory-basic"], [], ["loc", [null, [3, 4], [3, 33]]]], ["block", "if", [["get", "model.isNew", ["loc", [null, [4, 10], [4, 21]]]]], [], 0, 1, ["loc", [null, [4, 4], [58, 11]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [59, 14], [59, 25]]]]], [], 2, null, ["loc", [null, [59, 4], [144, 15]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 146,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [145, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 147,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [146, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {
    startKey: [],
    canAdd: (function () {
      return this.currentUserCan('add_inventory_request');
    }).property(),

    canFulfill: (function () {
      return this.currentUserCan('fulfill_inventory');
    }).property()
  });
});
define('hospitalrun/inventory/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {
    modelName: 'inv-request',
    newButtonAction: (function () {
      if (this.currentUserCan('add_inventory_request')) {
        return 'newRequest';
      } else {
        return null;
      }
    }).property(),
    newButtonText: (0, _emberI18n.translationMacro)('buttons.new_request_plus'),
    pageTitle: (0, _emberI18n.translationMacro)('navigation.subnav.requests'),

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var itemId = this._getPouchIdFromItem(item);
      return ['Requested', null, itemId];
    },

    _modelQueryParams: function _modelQueryParams() {
      var maxValue = this.get('maxValue');
      return {
        options: {
          startkey: ['Requested', null, null],
          endkey: ['Requested', maxValue, maxValue]
        },
        mapReduce: 'inventory_request_by_status'
      };
    },

    actions: {
      fulfill: function fulfill(item) {
        item.set('dateCompleted', new Date());
        this.transitionTo('inventory.request', item);
      }
    }
  });
});
define("hospitalrun/inventory/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/inventory/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [10, 14], [10, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 10
                  },
                  "end": {
                    "line": 23,
                    "column": 10
                  }
                },
                "moduleName": "hospitalrun/inventory/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("button");
                dom.setAttribute(el2, "class", "btn btn-primary");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element2);
                morphs[1] = dom.createMorphAt(element2, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["fulfill", ["get", "request", ["loc", [null, [21, 65], [21, 72]]]]], [], ["loc", [null, [21, 46], [21, 74]]]], ["inline", "t", ["labels.fulfill"], [], ["loc", [null, [21, 75], [21, 97]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/inventory/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
              morphs[4] = dom.createMorphAt(element3, 9, 9);
              return morphs;
            },
            statements: [["content", "request.inventoryItem.name", ["loc", [null, [15, 14], [15, 44]]]], ["content", "request.quantity", ["loc", [null, [16, 14], [16, 34]]]], ["inline", "date-format", [["get", "request.dateRequested", ["loc", [null, [17, 28], [17, 49]]]]], [], ["loc", [null, [17, 14], [17, 51]]]], ["content", "request.requestedBy", ["loc", [null, [18, 14], [18, 37]]]], ["block", "if", [["get", "canFulfill", ["loc", [null, [19, 16], [19, 26]]]]], [], 0, null, ["loc", [null, [19, 10], [23, 17]]]]],
            locals: ["request"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element5, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(element5, 9, 9);
            morphs[5] = dom.createMorphAt(element4, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.name"], [], ["loc", [null, [5, 12], [5, 31]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [6, 12], [6, 35]]]], ["inline", "t", ["labels.requested_on"], [], ["loc", [null, [7, 12], [7, 39]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [8, 12], [8, 39]]]], ["block", "if", [["get", "canFulfill", ["loc", [null, [9, 14], [9, 24]]]]], [], 0, null, ["loc", [null, [9, 8], [11, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [13, 14], [13, 19]]]]], [], 1, null, ["loc", [null, [13, 6], [25, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 47
                },
                "end": {
                  "line": 29,
                  "column": 143
                }
              },
              "moduleName": "hospitalrun/inventory/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["newRequest"], [], ["loc", [null, [29, 73], [29, 96]]]], ["inline", "t", ["inventory.messages.create_request"], [], ["loc", [null, [29, 98], [29, 139]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 2
              },
              "end": {
                "line": 31,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["inventory.messages.no_requests"], [], ["loc", [null, [29, 9], [29, 47]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [29, 53], [29, 59]]]]], [], 0, null, ["loc", [null, [29, 47], [29, 150]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [31, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [32, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/listing/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {
    canAddItem: (function () {
      return this.currentUserCan('add_inventory_item');
    }).property(),

    canAddPurchase: (function () {
      return this.currentUserCan('add_inventory_purchase');
    }).property(),

    canDeleteItem: (function () {
      return this.currentUserCan('delete_inventory_item');
    }).property(),

    startKey: []
  });
});
define('hospitalrun/inventory/listing/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {
    modelName: 'inventory',
    newButtonAction: (function () {
      if (this.currentUserCan('add_inventory_item')) {
        return 'newItem';
      } else {
        return null;
      }
    }).property(),
    newButtonText: (0, _emberI18n.translationMacro)('buttons.new_item'),
    pageTitle: (0, _emberI18n.translationMacro)('inventory.labels.items'),

    _modelQueryParams: function _modelQueryParams() {
      return {
        mapReduce: 'inventory_by_name'
      };
    },

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var inventoryId = this._getPouchIdFromItem(item);
      return [item.get('name'), inventoryId];
    }

  });
});
define("hospitalrun/inventory/listing/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 98
                }
              },
              "moduleName": "hospitalrun/inventory/listing/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["labels.id"], [], ["loc", [null, [5, 81], [5, 98]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 94
                }
              },
              "moduleName": "hospitalrun/inventory/listing/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["labels.name"], [], ["loc", [null, [6, 75], [6, 94]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 103
                }
              },
              "moduleName": "hospitalrun/inventory/listing/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["labels.type"], [], ["loc", [null, [7, 84], [7, 103]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 8,
                  "column": 102
                }
              },
              "moduleName": "hospitalrun/inventory/listing/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["labels.quantity"], [], ["loc", [null, [8, 79], [8, 102]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 6
                },
                "end": {
                  "line": 10,
                  "column": 114
                }
              },
              "moduleName": "hospitalrun/inventory/listing/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["inventory.labels.xref"], [], ["loc", [null, [10, 85], [10, 114]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 23,
                      "column": 12
                    },
                    "end": {
                      "line": 25,
                      "column": 12
                    }
                  },
                  "moduleName": "hospitalrun/inventory/listing/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element4);
                  morphs[1] = dom.createMorphAt(element4, 0, 0);
                  return morphs;
                },
                statements: [["element", "action", ["showAddPurchase", ["get", "inventory", ["loc", [null, [24, 73], [24, 82]]]]], ["bubbles", false], ["loc", [null, [24, 46], [24, 99]]]], ["inline", "t", ["buttons.add"], [], ["loc", [null, [24, 100], [24, 119]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 26,
                      "column": 12
                    },
                    "end": {
                      "line": 28,
                      "column": 12
                    }
                  },
                  "moduleName": "hospitalrun/inventory/listing/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default neutral");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element3);
                  morphs[1] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["element", "action", ["editItem", ["get", "inventory", ["loc", [null, [27, 74], [27, 83]]]]], ["bubbles", false], ["loc", [null, [27, 54], [27, 100]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [27, 101], [27, 120]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 29,
                      "column": 12
                    },
                    "end": {
                      "line": 31,
                      "column": 12
                    }
                  },
                  "moduleName": "hospitalrun/inventory/listing/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default warning");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "octicon octicon-x");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element2);
                  morphs[1] = dom.createMorphAt(element2, 2, 2);
                  return morphs;
                },
                statements: [["element", "action", ["deleteItem", ["get", "inventory", ["loc", [null, [30, 76], [30, 85]]]]], ["bubbles", false], ["loc", [null, [30, 54], [30, 102]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [30, 143], [30, 165]]]]],
                locals: [],
                templates: []
              };
            })();
            var child3 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 32,
                      "column": 12
                    },
                    "end": {
                      "line": 32,
                      "column": 124
                    }
                  },
                  "moduleName": "hospitalrun/inventory/listing/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["buttons.barcode"], [], ["loc", [null, [32, 101], [32, 124]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 35,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/inventory/listing/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                dom.setAttribute(el1, "class", "clickable");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var element6 = dom.childAt(element5, [7]);
                var element7 = dom.childAt(element5, [13]);
                var morphs = new Array(12);
                morphs[0] = dom.createElementMorph(element5);
                morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
                morphs[4] = dom.createMorphAt(element6, 0, 0);
                morphs[5] = dom.createMorphAt(element6, 2, 2);
                morphs[6] = dom.createMorphAt(dom.childAt(element5, [9]), 0, 0);
                morphs[7] = dom.createMorphAt(dom.childAt(element5, [11]), 0, 0);
                morphs[8] = dom.createMorphAt(element7, 1, 1);
                morphs[9] = dom.createMorphAt(element7, 2, 2);
                morphs[10] = dom.createMorphAt(element7, 3, 3);
                morphs[11] = dom.createMorphAt(element7, 5, 5);
                return morphs;
              },
              statements: [["element", "action", ["editItem", ["get", "inventory", ["loc", [null, [15, 32], [15, 41]]]]], [], ["loc", [null, [15, 12], [15, 43]]]], ["content", "inventory.friendlyId", ["loc", [null, [16, 14], [16, 38]]]], ["content", "inventory.name", ["loc", [null, [17, 14], [17, 32]]]], ["content", "inventory.inventoryType", ["loc", [null, [18, 14], [18, 41]]]], ["content", "inventory.quantity", ["loc", [null, [19, 14], [19, 36]]]], ["content", "inventory.distributionUnit", ["loc", [null, [19, 37], [19, 67]]]], ["content", "inventory.displayLocations", ["loc", [null, [20, 14], [20, 44]]]], ["content", "inventory.crossReference", ["loc", [null, [21, 14], [21, 42]]]], ["block", "if", [["get", "canAddPurchase", ["loc", [null, [23, 18], [23, 32]]]]], [], 0, null, ["loc", [null, [23, 12], [25, 19]]]], ["block", "if", [["get", "canAddItem", ["loc", [null, [26, 18], [26, 28]]]]], [], 1, null, ["loc", [null, [26, 12], [28, 19]]]], ["block", "if", [["get", "canDeleteItem", ["loc", [null, [29, 18], [29, 31]]]]], [], 2, null, ["loc", [null, [29, 12], [31, 19]]]], ["block", "link-to", ["inventory.barcode", ["get", "inventory", ["loc", [null, [32, 43], [32, 52]]]]], ["class", "btn btn-default neutral", "bubbles", false], 3, null, ["loc", [null, [32, 12], [32, 136]]]]],
              locals: [],
              templates: [child0, child1, child2, child3]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/listing/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "unless", [["get", "inventory.isNew", ["loc", [null, [14, 16], [14, 31]]]]], [], 0, null, ["loc", [null, [14, 6], [35, 17]]]]],
            locals: ["inventory"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 38,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/listing/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1]);
            var element9 = dom.childAt(element8, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(element9, 1, 1);
            morphs[1] = dom.createMorphAt(element9, 3, 3);
            morphs[2] = dom.createMorphAt(element9, 5, 5);
            morphs[3] = dom.createMorphAt(element9, 7, 7);
            morphs[4] = dom.createMorphAt(dom.childAt(element9, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(element9, 11, 11);
            morphs[6] = dom.createMorphAt(dom.childAt(element9, [13]), 0, 0);
            morphs[7] = dom.createMorphAt(element8, 3, 3);
            return morphs;
          },
          statements: [["block", "sortable-column", [], ["sortBy", "friendlyId", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [5, 54], [5, 62]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [5, 71], [5, 78]]]]], [], []]], 0, null, ["loc", [null, [5, 6], [5, 118]]]], ["block", "sortable-column", [], ["sortBy", "name", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [6, 48], [6, 56]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [6, 65], [6, 72]]]]], [], []]], 1, null, ["loc", [null, [6, 6], [6, 114]]]], ["block", "sortable-column", [], ["sortBy", "inventoryType", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [7, 57], [7, 65]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [7, 74], [7, 81]]]]], [], []]], 2, null, ["loc", [null, [7, 6], [7, 123]]]], ["block", "sortable-column", [], ["sortBy", "quantity", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [8, 52], [8, 60]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [8, 69], [8, 76]]]]], [], []]], 3, null, ["loc", [null, [8, 6], [8, 122]]]], ["inline", "t", ["inventory.labels.location"], [], ["loc", [null, [9, 10], [9, 43]]]], ["block", "sortable-column", [], ["sortBy", "crossReference", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [10, 58], [10, 66]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [10, 75], [10, 82]]]]], [], []]], 4, null, ["loc", [null, [10, 6], [10, 134]]]], ["inline", "t", ["labels.actions"], [], ["loc", [null, [11, 10], [11, 32]]]], ["block", "each", [["get", "model", ["loc", [null, [13, 12], [13, 17]]]]], [], 5, null, ["loc", [null, [13, 4], [36, 13]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 41
                },
                "end": {
                  "line": 40,
                  "column": 131
                }
              },
              "moduleName": "hospitalrun/inventory/listing/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["newItem"], [], ["loc", [null, [40, 72], [40, 92]]]], ["inline", "t", ["messages.create_new_record"], [], ["loc", [null, [40, 93], [40, 127]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/listing/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["inline", "t", ["messages.no_items_found"], [], ["loc", [null, [40, 9], [40, 40]]]], ["block", "if", [["get", "canAddItem", ["loc", [null, [40, 47], [40, 57]]]]], [], 0, null, ["loc", [null, [40, 41], [40, 138]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/listing/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [42, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/listing/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [43, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/purchase/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/unit-types'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUnitTypes) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUnitTypes['default'], {
    inventoryController: _ember['default'].inject.controller('inventory'),
    cancelAction: 'closeModal',

    canEditQuantity: (function () {
      var originalQuantity = this.get('model.originalQuantity'),
          currentQuantity = this.get('model.currentQuantity');
      if (currentQuantity < originalQuantity) {
        return false;
      }
      return true;
    }).property('model.currentQuantity', 'model.originalQuantity'),

    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),
    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),
    inventoryUnitList: _ember['default'].computed.alias('inventoryController.inventoryUnitList.value'),
    vendorList: _ember['default'].computed.alias('inventoryController.vendorList'),

    lookupListsToUpdate: [{
      name: 'aisleLocationList', // Name of property containing lookup list
      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'aisle_location_list' // Id of the lookup list to update
    }, {
      name: 'vendorList', // Name of property containing lookup list
      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'vendor_list' // Id of the lookup list to update
    }, {
      name: 'warehouseList', // Name of property containing lookup list
      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'warehouse_list' // Id of the lookup list to update
    }],

    newPurchase: false,

    updateQuantity: false,

    updateCapability: 'add_inventory_purchase',

    title: (function () {
      var i18n = this.get('i18n');
      var isNew = this.get('model.isNew');
      if (isNew) {
        return i18n.t('inventory.titles.add_purchase');
      }
      return i18n.t('inventory.titles.edit_purchase');
    }).property('model.isNew'),

    beforeUpdate: function beforeUpdate() {
      var isNew = this.get('model.isNew'),
          changedAttributes = this.get('model').changedAttributes();
      if (changedAttributes.originalQuantity) {
        this.set('model.currentQuantity', this.get('model.originalQuantity'));
        if (!isNew) {
          this.set('updateQuantity', true);
        }
      }
      if (isNew) {
        this.set('newPurchase', true);
      }
      return _ember['default'].RSVP.Promise.resolve();
    },

    afterUpdate: function afterUpdate(record) {
      if (this.get('newPurchase')) {
        this.send('addPurchase', record);
      } else {
        this.send('updatePurchase', record, true);
      }
    }
  });
});
define("hospitalrun/inventory/purchase/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/purchase/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["inv-purchase"], [], ["loc", [null, [7, 4], [7, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/purchase/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 2], [8, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/purchase/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [9, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/quick-add/controller', ['exports', 'hospitalrun/inventory/edit/controller', 'ember-i18n'], function (exports, _hospitalrunInventoryEditController, _emberI18n) {
  exports['default'] = _hospitalrunInventoryEditController['default'].extend({
    title: (0, _emberI18n.translationMacro)('inventory.titles.inventory_item'),

    updateCapability: 'add_inventory_item',

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      }
    },

    beforeUpdate: function beforeUpdate() {
      if (this.get('model.skipSavePurchase')) {
        this.set('model.quantity', null);
      }
      return this._super();
    },

    afterUpdate: function afterUpdate(record) {
      this.send('addedNewInventoryItem', record);
    }
  });
});
define("hospitalrun/inventory/quick-add/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/quick-add/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["inventory-basic"], [], ["loc", [null, [8, 4], [8, 33]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/quick-add/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-warning");
          dom.setAttribute(el1, "role", "alert");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["inventory.messages.item_not_found"], ["item", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [6, 93], [6, 103]]]]], [], []]], ["loc", [null, [6, 48], [6, 105]]]], ["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [7, 2], [9, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/quick-add/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "t", ["inventory.titles.quick_add_title"], [], ["loc", [null, [3, 10], [3, 48]]]], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/rank-select/component', ['exports', 'ember', 'hospitalrun/utils/select-values', 'ember-computed'], function (exports, _ember, _hospitalrunUtilsSelectValues, _emberComputed) {
  exports['default'] = _ember['default'].Component.extend({
    rankOptions: [],
    prompt: ' ',
    'class': 'col-sm-2 test-inv-rank',

    options: (0, _emberComputed['default'])('rankOptions', function () {
      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('rankOptions'));
    }),

    init: function init() {
      this._super.apply(this, arguments);

      // set available options
      this.set('rankOptions', _ember['default'].A(['A', 'B', 'C']));
    }
  });
});
define("hospitalrun/inventory/rank-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/rank-select/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "em-select", [], ["label", ["subexpr", "t", ["inventory.labels.rank"], [], ["loc", [null, [2, 8], [2, 35]]]], "property", ["subexpr", "@mut", [["get", "property", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "content", ["subexpr", "@mut", [["get", "options", ["loc", [null, [4, 10], [4, 17]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [5, 8], [5, 13]]]]], [], []], "prompt", ["subexpr", "@mut", [["get", "prompt", ["loc", [null, [6, 9], [6, 15]]]]], [], []]], ["loc", [null, [1, 0], [7, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/inventory/reports/controller', ['exports', 'hospitalrun/controllers/abstract-report-controller', 'ember', 'hospitalrun/mixins/inventory-adjustment-types', 'hospitalrun/mixins/location-name', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/number-format', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractReportController, _ember, _hospitalrunMixinsInventoryAdjustmentTypes, _hospitalrunMixinsLocationName, _hospitalrunMixinsModalHelper, _hospitalrunMixinsNumberFormat, _hospitalrunUtilsSelectValues) {
  exports['default'] = _hospitalrunControllersAbstractReportController['default'].extend(_hospitalrunMixinsLocationName['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsInventoryAdjustmentTypes['default'], {
    inventoryController: _ember['default'].inject.controller('inventory'),
    effectiveDate: null,
    endDate: null,
    expenseCategories: _ember['default'].computed(function () {
      var i18n = this.get('i18n');
      return [i18n.t('inventory.labels.inventory_consumed'), i18n.t('inventory.labels.gift_usage'), i18n.t('inventory.labels.inventory_obsolence')];
    }),
    expenseMap: null,
    filterLocation: null,
    grandCost: 0,
    grandQuantity: 0,
    locationSummary: null,
    reportType: 'daysLeft',
    startDate: null,

    database: _ember['default'].inject.service(),
    warehouseList: _ember['default'].computed.map('inventoryController.warehouseList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),
    reportColumns: _ember['default'].computed(function () {
      var i18n = this.get('i18n');
      return {
        date: {
          label: i18n.t('labels.date'),
          include: true,
          property: 'date'
        },
        id: {
          label: i18n.t('labels.id'),
          include: true,
          property: 'inventoryItem.friendlyId'
        },
        name: {
          label: i18n.t('inventory.labels.name'),
          include: true,
          property: 'inventoryItem.name'
        },
        transactionType: {
          label: i18n.t('inventory.labels.adjustment_type'),
          include: false,
          property: 'transactionType'
        },
        expenseAccount: {
          label: i18n.t('inventory.labels.expense'),
          include: false,
          property: 'expenseAccount'
        },
        description: {
          label: i18n.t('labels.description'),
          include: false,
          property: 'inventoryItem.description'
        },
        type: {
          label: i18n.t('labels.type'),
          include: true,
          property: 'inventoryItem.inventoryType'
        },
        xref: {
          label: i18n.t('inventory.labels.cross_reference'),
          include: false,
          property: 'inventoryItem.crossReference'
        },
        reorder: {
          label: i18n.t('inventory.labels.reorder_point'),
          include: false,
          property: 'inventoryItem.reorderPoint',
          format: '_numberFormat'
        },
        price: {
          label: i18n.t('inventory.labels.sale_price_per_unit'),
          include: false,
          property: 'inventoryItem.price',
          format: '_numberFormat'
        },
        quantity: {
          label: i18n.t('labels.quantity'),
          include: true,
          property: 'quantity',
          format: '_numberFormat'
        },
        consumedPerDay: {
          label: i18n.t('inventory.labels.consumption_rate'),
          include: false,
          property: 'consumedPerDay'
        },
        daysLeft: {
          label: i18n.t('inventory.labels.days_left'),
          include: false,
          property: 'daysLeft'
        },
        unit: {
          label: i18n.t('inventory.labels.distribution_unit'),
          include: true,
          property: 'inventoryItem.distributionUnit'
        },
        unitcost: {
          label: i18n.t('inventory.labels.unit_cost'),
          include: true,
          property: 'unitCost',
          format: '_numberFormat'
        },
        total: {
          label: i18n.t('inventory.labels.total_cost'),
          include: true,
          property: 'totalCost',
          format: '_numberFormat'
        },
        gift: {
          label: i18n.t('inventory.labels.gift'),
          include: true,
          property: 'giftInKind'
        },
        locations: {
          label: i18n.t('inventory.labels.locations'),
          include: true,
          property: 'locations',
          format: '_addLocationColumn'
        },
        aisle: {
          label: i18n.t('inventory.labels.aisle'),
          include: false,
          property: 'locations',
          format: '_addAisleColumn'
        },
        vendor: {
          label: i18n.t('inventory.labels.vendor'),
          include: false,
          property: 'vendors'
        }
      };
    }),
    reportTypes: _ember['default'].computed(function () {
      var i18n = this.get('i18n');
      return [{
        name: i18n.t('inventory.reports.days_supply'),
        value: 'daysLeft'
      }, {
        name: i18n.t('inventory.reports.adjustment'),
        value: 'detailedAdjustment'
      }, {
        name: i18n.t('inventory.reports.purchase_detail'),
        value: 'detailedPurchase'
      }, {
        name: i18n.t('inventory.reports.stock_usage_detail'),
        value: 'detailedUsage'
      }, {
        name: i18n.t('inventory.reports.stock_transfer_detail'),
        value: 'detailedTransfer'
      }, {
        name: i18n.t('inventory.reports.expense_detail'),
        value: 'detailedExpense'
      }, {
        name: i18n.t('inventory.reports.expiration'),
        value: 'expiration'
      }, {
        name: i18n.t('inventory.reports.inv_location'),
        value: 'byLocation'
      }, {
        name: i18n.t('inventory.reports.inv_valuation'),
        value: 'valuation'
      }, {
        name: i18n.t('inventory.reports.expense_sum'),
        value: 'summaryExpense'
      }, {
        name: i18n.t('inventory.reports.purchase_sum'),
        value: 'summaryPurchase'
      }, {
        name: i18n.t('inventory.reports.stock_usage_sum'),
        value: 'summaryUsage'
      }, {
        name: i18n.t('inventory.reports.stock_transfer_sum'),
        value: 'summaryTransfer'
      }, {
        name: i18n.t('inventory.reports.finance'),
        value: 'summaryFinance'
      }];
    }),

    hideLocationFilter: (function () {
      var reportType = this.get('reportType');
      return reportType === 'summaryFinance';
    }).property('reportType'),

    includeDate: (function () {
      var reportType = this.get('reportType');
      if (!_ember['default'].isEmpty(reportType) && reportType.indexOf('detailed') === 0) {
        this.set('reportColumns.date.include', true);
        return true;
      } else {
        this.set('reportColumns.date.include', false);
        return false;
      }
    }).property('reportType'),

    includeDaysLeft: (function () {
      var reportType = this.get('reportType');
      if (reportType === 'daysLeft') {
        this.set('reportColumns.consumedPerDay.include', true);
        this.set('reportColumns.daysLeft.include', true);
        return true;
      } else {
        this.set('reportColumns.consumedPerDay.include', false);
        this.set('reportColumns.daysLeft.include', false);
        return false;
      }
    }).property('reportType'),

    includeCostFields: (function () {
      var reportType = this.get('reportType');
      if (reportType === 'detailedTransfer' || reportType === 'summaryTransfer' || reportType === 'daysLeft') {
        this.set('reportColumns.total.include', false);
        this.set('reportColumns.unitcost.include', false);
        return false;
      } else {
        this.set('reportColumns.total.include', true);
        this.set('reportColumns.unitcost.include', true);
        return true;
      }
    }).property('reportType'),

    includeExpenseAccount: (function () {
      var reportType = this.get('reportType');
      switch (reportType) {
        case 'detailedAdjustment':
        case 'detailedTransfer':
        case 'detailedUsage':
          {
            return true;
          }
        case 'detailedExpense':
          {
            this.set('reportColumns.expenseAccount.include', true);
            return true;
          }
        default:
          {
            this.set('reportColumns.expenseAccount.include', false);
            return false;
          }
      }
    }).property('reportType'),

    includeTransactionType: (function () {
      var reportType = this.get('reportType');
      if (reportType === 'detailedAdjustment') {
        this.set('reportColumns.transactionType.include', true);
        return true;
      } else {
        this.set('reportColumns.transactionType.include', false);
        return false;
      }
    }).property('reportType'),

    showEffectiveDate: (function () {
      var reportType = this.get('reportType');
      if (reportType === 'valuation' || reportType === 'byLocation') {
        this.set('startDate', null);
        if (_ember['default'].isEmpty(this.get('endDate'))) {
          this.set('endDate', new Date());
        }
        return true;
      } else {
        if (_ember['default'].isEmpty(this.get('startDate'))) {
          this.set('startDate', new Date());
        }
        return false;
      }
    }).property('reportType'),

    useFieldPicker: (function () {
      var reportType = this.get('reportType');
      return reportType !== 'expiration' && reportType !== 'summaryFinance';
    }).property('reportType'),

    _addAisleColumn: function _addAisleColumn(locations) {
      if (!_ember['default'].isEmpty(locations)) {
        return locations.map(function (location) {
          if (location.name.indexOf(':') > -1) {
            return location.name.split(':')[1];
          }
        });
      }
    },

    _addLocationColumn: function _addLocationColumn(locations) {
      if (!_ember['default'].isEmpty(locations)) {
        var returnLocations = [];
        locations.forEach((function (location) {
          var formattedName;
          if (location.name.indexOf('From:') === 0) {
            formattedName = location.name;
          } else {
            formattedName = this._getWarehouseLocationName(location.name);
          }
          if (!returnLocations.contains(formattedName)) {
            returnLocations.push(formattedName);
          }
        }).bind(this));
        return returnLocations;
      }
    },

    _addReportRow: function _addReportRow(row, skipNumberFormatting, reportColumns, rowAction) {
      if (_ember['default'].isEmpty(rowAction) && !_ember['default'].isEmpty(row.inventoryItem) && !_ember['default'].isEmpty(row.inventoryItem.id)) {
        var inventoryId = this.get('database').getEmberId(row.inventoryItem.id);
        rowAction = {
          action: 'viewInventory',
          model: inventoryId
        };
      }
      this._super(row, skipNumberFormatting, reportColumns, rowAction);
    },

    _addTotalsRow: function _addTotalsRow(label, summaryCost, summaryQuantity) {
      if (summaryQuantity > 0) {
        this._addReportRow({
          totalCost: label + this._numberFormat(summaryCost),
          quantity: label + this._numberFormat(summaryQuantity),
          unitCost: label + this._numberFormat(summaryCost / summaryQuantity)
        }, true);
      }
    },

    /**
     * Adjust the specified location by the specified quantity
     * @param {array} locations the list of locations to adjust from
     * @param {string} locationName the name of the location to adjust
     * @param {integer} quantity the quantity to adjust.
     * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.
     */
    _adjustLocation: function _adjustLocation(locations, locationName, quantity, increment) {
      var locationToUpdate = locations.findBy('name', locationName);
      if (_ember['default'].isEmpty(locationToUpdate)) {
        locationToUpdate = {
          name: locationName,
          quantity: 0
        };
        locations.push(locationToUpdate);
      }
      if (increment) {
        locationToUpdate.quantity += quantity;
      } else {
        locationToUpdate.quantity -= quantity;
      }
    },

    /**
     * Adjust the specified purchase by the specified quantity.
     * @param {array} purchases the list of purchases to adjust from.
     * @param {string} purchaseId the id of the purchase to adjust.
     * @param {integer} quantity the quantity to adjust.
     * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.
     */
    _adjustPurchase: function _adjustPurchase(purchases, purchaseId, quantity, increment) {
      var purchaseToAdjust = purchases.findBy('id', purchaseId);
      if (!_ember['default'].isEmpty(purchaseToAdjust)) {
        var calculatedQuantity = purchaseToAdjust.calculatedQuantity;
        if (increment) {
          calculatedQuantity += quantity;
        } else {
          calculatedQuantity -= quantity;
        }
        purchaseToAdjust.calculatedQuantity = calculatedQuantity;
      }
    },

    _calculateCosts: function _calculateCosts(inventoryPurchases, row) {
      // Calculate quantity and cost per unit for the row
      if (!_ember['default'].isEmpty(inventoryPurchases)) {
        inventoryPurchases.forEach((function (purchase) {
          var costPerUnit = this._calculateCostPerUnit(purchase),
              quantity = purchase.calculatedQuantity;
          row.quantity += purchase.calculatedQuantity;
          row.totalCost += quantity * costPerUnit;
        }).bind(this));
      }
      if (row.totalCost === 0 || row.quantity === 0) {
        row.unitCost = 0;
      } else {
        row.unitCost = row.totalCost / row.quantity;
      }
      return row;
    },

    _calculateUsage: function _calculateUsage(inventoryPurchases, row) {
      // Calculate quantity and cost per unit for the row
      if (!_ember['default'].isEmpty(inventoryPurchases)) {
        inventoryPurchases.forEach((function (purchase) {
          var costPerUnit = this._calculateCostPerUnit(purchase),
              quantity = purchase.calculatedQuantity;
          row.quantity -= purchase.calculatedQuantity;
          row.totalCost -= quantity * costPerUnit;
        }).bind(this));
      }
      if (row.totalCost === 0 || row.quantity === 0) {
        row.unitCost = 0;
      } else {
        row.unitCost = row.totalCost / row.quantity;
      }
      return row;
    },

    _calculateCostPerUnit: function _calculateCostPerUnit(purchase) {
      var purchaseCost = purchase.purchaseCost,
          quantity = parseInt(purchase.originalQuantity);
      if (_ember['default'].isEmpty(purchaseCost) || _ember['default'].isEmpty(quantity)) {
        return 0;
      }
      return Number((purchaseCost / quantity).toFixed(2));
    },

    _findInventoryItems: function _findInventoryItems(queryParams, view, inventoryList, childName) {
      if (_ember['default'].isEmpty(inventoryList)) {
        inventoryList = {};
      }
      var database = this.get('database');
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        database.queryMainDB(queryParams, view).then((function (inventoryChildren) {
          var inventoryKeys = Object.keys(inventoryList),
              inventoryIds = [];
          if (!_ember['default'].isEmpty(inventoryChildren.rows)) {
            inventoryChildren.rows.forEach(function (child) {
              if (child.doc.inventoryItem && !inventoryKeys.contains(child.doc.inventoryItem)) {
                inventoryIds.push(database.getPouchId(child.doc.inventoryItem, 'inventory'));
                inventoryKeys.push(child.doc.inventoryItem);
              }
            });
          }
          this._getInventoryItems(inventoryIds, inventoryList).then(function (inventoryMap) {
            // Link inventory children to inventory items
            inventoryChildren.rows.forEach(function (child) {
              var childItem = inventoryMap[child.doc.inventoryItem];
              if (!_ember['default'].isEmpty(childItem)) {
                if (childName !== 'purchaseObjects' || childItem.purchases.contains(child.doc.id)) {
                  var itemChildren = childItem[childName];
                  if (_ember['default'].isEmpty(itemChildren)) {
                    itemChildren = [];
                  }
                  itemChildren.push(child.doc);
                  childItem[childName] = itemChildren;
                }
              }
            });
            resolve(inventoryMap);
          }, reject);
        }).bind(this), reject);
      }).bind(this));
    },

    _findInventoryItemsByPurchase: function _findInventoryItemsByPurchase(reportTimes, inventoryMap) {
      return this._findInventoryItems({
        startkey: [reportTimes.startTime, 'invPurchase_'],
        endkey: [reportTimes.endTime, 'invPurchase_￿'],
        include_docs: true
      }, 'inventory_purchase_by_date_received', inventoryMap, 'purchaseObjects');
    },

    _findInventoryItemsByRequest: function _findInventoryItemsByRequest(reportTimes, inventoryMap) {
      return this._findInventoryItems({
        startkey: ['Completed', reportTimes.startTime, 'invRequest_'],
        endkey: ['Completed', reportTimes.endTime, 'invRequest_￿'],
        include_docs: true
      }, 'inventory_request_by_status', inventoryMap, 'requestObjects');
    },

    _finishExpenseReport: function _finishExpenseReport(reportType) {
      var expenseCategories = this.get('expenseCategories'),
          expenseMap = this.get('expenseMap');
      var i18n = this.get('i18n');
      expenseCategories.forEach((function (category) {
        var categoryTotal = 0,
            expenseAccountName,
            totalLabel;
        this._addReportRow({
          inventoryItem: {
            name: i18n.t('inventory.reports.rows.expenses_for') + category
          }
        });
        expenseMap[category].expenseAccounts.forEach((function (expenseAccount) {
          if (reportType === 'detailedExpense') {
            expenseAccount.reportRows.forEach((function (row) {
              this._addReportRow(row);
            }).bind(this));
          }
          if (_ember['default'].isEmpty(expenseAccount.name)) {
            expenseAccountName = i18n.t('inventory.reports.rows.no_account');
          } else {
            expenseAccountName = expenseAccount.name;
          }
          totalLabel = i18n.t('inventory.reports.rows.subtotal_for', { category: category, account: expenseAccountName });
          this._addReportRow({
            totalCost: totalLabel + this._numberFormat(expenseAccount.total)
          }, true);
          categoryTotal += expenseAccount.total;
        }).bind(this));
        totalLabel = i18n.t('inventory.reports.rows.total_for', { 'var': category });
        this._addReportRow({
          totalCost: totalLabel + this._numberFormat(categoryTotal)
        }, true);
        this.incrementProperty('grandCost', categoryTotal);
      }).bind(this));
      this._addReportRow({
        totalCost: i18n.t('inventory.reports.rows.total') + this._numberFormat(this.get('grandCost'))
      }, true);
    },

    _finishLocationReport: function _finishLocationReport() {
      var currentLocation = '',
          locationCost = 0,
          locationSummary = this.get('locationSummary'),
          parentLocation = '',
          parentCount = 0,
          i18n = this.get('i18n');
      locationSummary = locationSummary.sortBy('name');
      locationSummary.forEach((function (location) {
        parentLocation = this._getWarehouseLocationName(location.name);
        var label = i18n.t('inventory.reports.rows.total_for', { 'var': currentLocation });
        if (currentLocation !== parentLocation) {
          this._addTotalsRow(label, locationCost, parentCount);
          parentCount = 0;
          locationCost = 0;
          currentLocation = parentLocation;
        }
        if (this._includeLocation(parentLocation)) {
          for (var id in location.items) {
            if (location.items[id].quantity > 0) {
              this._addReportRow({
                giftInKind: location.items[id].giftInKind,
                inventoryItem: location.items[id].item,
                quantity: location.items[id].quantity,
                locations: [{
                  name: location.name
                }],
                totalCost: location.items[id].totalCost,
                unitCost: location.items[id].unitCost
              });
              parentCount += this._getValidNumber(location.items[id].quantity);
              locationCost += this._getValidNumber(location.items[id].totalCost);
              this.incrementProperty('grandCost', this._getValidNumber(location.items[id].totalCost));
              this.incrementProperty('grandQuantity', this._getValidNumber(location.items[id].quantity));
            }
          }
        }
      }).bind(this));
      if (parentCount > 0) {
        this._addTotalsRow(i18n.t('inventory.reports.rows.total_for', { 'var': parentLocation }), locationCost, parentCount);
      }
    },

    _generateExpirationReport: function _generateExpirationReport() {
      var grandQuantity = 0,
          database = this.get('database'),
          reportRows = this.get('reportRows'),
          reportTimes = this._getDateQueryParams();
      database.queryMainDB({
        startkey: [reportTimes.startTime, 'invPurchase_'],
        endkey: [reportTimes.endTime, 'invPurchase_￿'],
        include_docs: true
      }, 'inventory_purchase_by_expiration_date').then((function (inventoryPurchases) {
        var purchaseDocs = [],
            inventoryIds = [];

        inventoryPurchases.rows.forEach((function (purchase) {
          if (purchase.doc.currentQuantity > 0 && !_ember['default'].isEmpty(purchase.doc.expirationDate)) {
            purchaseDocs.push(purchase.doc);
            inventoryIds.push(database.getPouchId(purchase.doc.inventoryItem, 'inventory'));
          }
        }).bind(this));
        this._getInventoryItems(inventoryIds).then((function (inventoryMap) {
          var i18n = this.get('i18n');
          purchaseDocs.forEach((function (purchase) {
            var currentQuantity = purchase.currentQuantity,
                expirationDate = new Date(purchase.expirationDate),
                inventoryItem = inventoryMap[purchase.inventoryItem];
            if (inventoryItem && this._includeLocation(purchase.location)) {
              reportRows.addObject([inventoryItem.friendlyId, inventoryItem.name, currentQuantity, inventoryItem.distributionUnit, moment(expirationDate).format('l'), this.formatLocationName(purchase.location, purchase.aisleLocation)]);
              grandQuantity += currentQuantity;
            }
          }).bind(this));
          reportRows.addObject(['', '', i18n.t('inventory.reports.rows.total') + grandQuantity, '', '']);
          this.set('showReportResults', true);
          this.set('reportHeaders', [i18n.t('labels.id'), i18n.t('labels.name'), i18n.t('inventory.labels.current_quantity'), i18n.t('inventory.labels.distribution_unit'), i18n.t('inventory.labels.expiration_date'), i18n.t('inventory.labels.location')]);
          this._generateExport();
          this._setReportTitle();
          this.closeProgressModal();
        }).bind(this));
      }).bind(this));
    },

    _generateFinancialSummaryReport: function _generateFinancialSummaryReport() {
      var reportTimes = this._getDateQueryParams();
      /*
      step 1: find the valuation as of start date,
      meaning that we need to exchange the end date to be the start date and then tabulate the value
      */
      this._calculateBeginningBalance(reportTimes).then((function (beginningBalance) {
        this._generateSummaries(reportTimes).then((function (inventoryAdjustment) {
          var i = this._numberFormat(beginningBalance + inventoryAdjustment);
          var i18n = this.get('i18n');
          if (beginningBalance + inventoryAdjustment < 0) {
            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balance_end'), '', '(' + i + ')']);
          } else {
            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balance_end'), '', i]);
          }
          this.set('showReportResults', true);
          this.set('reportHeaders', [i18n.t('inventory.reports.rows.category'), i18n.t('labels.type'), i18n.t('inventory.labels.total')]);
          this._generateExport();
          this._setReportTitle();
          this.closeProgressModal();
        }).bind(this), (function (err) {
          this._notifyReportError(this.get('i18n').t('inventory.reports.rows.err_in_fin_sum') + err);
        }).bind(this));
      }).bind(this));
    },

    _generateSummaries: function _generateSummaries(reportTimes) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var adjustedValue = 0;
        var i18n = this.get('i18n');
        /*
        cycle through each purchase and request from the beginning of time until startTime
        to determine the total value of inventory as of that date/time.
        */
        this._findInventoryItemsByRequest(reportTimes, {}).then((function (inventoryMap) {
          this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then((function (inventoryMap) {
            var purchaseSummary = {},
                consumed = {},
                gikConsumed = {},
                adjustments = {};
            this.adjustmentTypes.forEach(function (adjustmentType) {
              adjustments[adjustmentType.type] = [];
            });
            Object.keys(inventoryMap).forEach((function (key) {
              if (_ember['default'].isEmpty(key) || _ember['default'].isEmpty(inventoryMap[key])) {
                // If the inventory item has been deleted, ignore it.
                return;
              }
              var item = inventoryMap[key];

              if (!_ember['default'].isEmpty(item.purchaseObjects)) {
                item.purchaseObjects.forEach((function (purchase) {
                  purchaseSummary[item.inventoryType] = this._getValidNumber(purchaseSummary[item.inventoryType]) + this._getValidNumber(purchase.purchaseCost);
                }).bind(this));
              }
              if (!_ember['default'].isEmpty(item.requestObjects)) {
                item.requestObjects.forEach((function (request) {
                  // we have three categories here: consumed, gik consumed, and adjustments
                  if (request.adjustPurchases) {
                    if (request.transactionType === 'Fulfillment') {
                      if (request.giftInKind) {
                        gikConsumed[item.inventoryType] = this._getValidNumber(gikConsumed[item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);
                      } else {
                        consumed[item.inventoryType] = this._getValidNumber(consumed[item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);
                      }
                    } else {
                      adjustments[request.transactionType][item.inventoryType] = this._getValidNumber(adjustments[request.transactionType][item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);
                    }
                  }
                }).bind(this));
              }
            }).bind(this));
            // write the purchase rows
            if (Object.keys(purchaseSummary).length > 0) {
              var purchaseTotal = 0;
              this.get('reportRows').addObject([i18n.t('inventory.labels.purchases'), '', '']);
              Object.keys(purchaseSummary).forEach((function (key) {
                var i = this._getValidNumber(purchaseSummary[key]);
                purchaseTotal += i;
                this.get('reportRows').addObject(['', key, this._numberFormat(i)]);
              }).bind(this));
              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.total_purchases'), '', this._numberFormat(purchaseTotal)]);
              adjustedValue += purchaseTotal;
            }
            // write the consumed rows
            if (Object.keys(consumed).length > 0 || Object.keys(gikConsumed).length > 0) {
              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed'), '', '']);
              var overallValue = 0;
              if (Object.keys(consumed).length > 0) {
                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed_puchases'), '', '']);
                var consumedTotal = 0;
                Object.keys(consumed).forEach((function (key) {
                  var i = this._getValidNumber(consumed[key]);
                  consumedTotal += i;
                  this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);
                }).bind(this));
                overallValue += consumedTotal;
                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed_purchases_total'), '', '(' + this._numberFormat(consumedTotal) + ')']);
              }
              if (Object.keys(gikConsumed).length > 0) {
                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed_gik'), '', '']);
                var gikTotal = 0;
                Object.keys(gikConsumed).forEach((function (key) {
                  var i = this._getValidNumber(gikConsumed[key]);
                  gikTotal += i;
                  this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);
                }).bind(this));
                overallValue += gikTotal;
                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed_gik_total'), '', '(' + this._numberFormat(gikTotal) + ')']);
              }
              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed_total'), '', '(' + this._numberFormat(overallValue) + ')']);
              adjustedValue -= overallValue;
            }
            // write the adjustment rows
            var adjustmentTotal = 0;
            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustments'), '', '']);
            Object.keys(adjustments).forEach((function (adjustmentT) {
              if (Object.keys(adjustments[adjustmentT]).length > 0) {
                this.get('reportRows').addObject([adjustmentT, '', '']);
                Object.keys(adjustments[adjustmentT]).forEach((function (key) {
                  var i = this._getValidNumber(adjustments[adjustmentT][key]);
                  if (adjustmentT === 'Adjustment (Add)' || adjustmentT === 'Return') {
                    adjustmentTotal += i;
                    this.get('reportRows').addObject(['', key, this._numberFormat(i)]);
                  } else {
                    adjustmentTotal -= i;
                    this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);
                  }
                }).bind(this));
              }
            }).bind(this));
            if (adjustmentTotal < 0) {
              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustments_total'), '', '(' + this._numberFormat(adjustmentTotal) + ')']);
            } else {
              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustments_total'), '', this._numberFormat(adjustmentTotal)]);
            }

            adjustedValue += adjustmentTotal;
            resolve(adjustedValue);
          }).bind(this), reject);
        }).bind(this), reject);
      }).bind(this));
    },

    _calculateBeginningBalance: function _calculateBeginningBalance(reportTimes) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var startingValueReportTimes = {
          startTime: null,
          endTime: reportTimes.startTime
        },
            beginningBalance = 0;
        var i18n = this.get('i18n');
        /*
        cycle through each purchase and request from the beginning of time until startTime
        to determine the total value of inventory as of that date/time.
        */
        this._findInventoryItemsByRequest(startingValueReportTimes, {}).then((function (inventoryMap) {
          this._findInventoryItemsByPurchase(startingValueReportTimes, inventoryMap).then((function (inventoryMap) {
            Object.keys(inventoryMap).forEach((function (key) {
              if (_ember['default'].isEmpty(key) || _ember['default'].isEmpty(inventoryMap[key])) {
                // If the inventory item has been deleted, ignore it.
                return;
              }
              var item = inventoryMap[key],
                  inventoryPurchases = item.purchaseObjects,
                  inventoryRequests = item.requestObjects,
                  row = {
                inventoryItem: item,
                quantity: 0,
                unitCost: 0,
                totalCost: 0
              };
              if (!_ember['default'].isEmpty(inventoryPurchases)) {
                // Setup intial locations for an inventory item
                inventoryPurchases.forEach(function (purchase) {
                  var purchaseQuantity = purchase.originalQuantity;
                  purchase.calculatedQuantity = purchaseQuantity;
                });
              }
              if (!_ember['default'].isEmpty(inventoryRequests)) {
                inventoryRequests.forEach((function (request) {
                  var adjustPurchases = request.adjustPurchases,
                      increment = false,
                      purchases = request.purchasesAffected,
                      transactionType = request.transactionType;
                  increment = transactionType === 'Adjustment (Add)' || transactionType === 'Return';
                  if (adjustPurchases) {
                    if (!_ember['default'].isEmpty(purchases) && !_ember['default'].isEmpty(inventoryPurchases)) {
                      // Loop through purchase(s) on request and adjust corresponding inventory purchases
                      purchases.forEach((function (purchaseInfo) {
                        this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);
                      }).bind(this));
                    }
                  }
                }).bind(this));
              }
              if (!_ember['default'].isEmpty(inventoryPurchases)) {
                row = this._calculateCosts(inventoryPurchases, row);
                beginningBalance += this._getValidNumber(row.totalCost);
              }
            }).bind(this));
            if (beginningBalance < 0) {
              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balance_begin'), '', '(' + this._numberFormat(beginningBalance) + ')']);
            } else {
              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balance_begin'), '', this._numberFormat(beginningBalance)]);
            }
            resolve(beginningBalance);
          }).bind(this), reject);
        }).bind(this), reject);
      }).bind(this));
    },

    _generateInventoryReport: function _generateInventoryReport() {
      this.set('grandCost', 0);
      this.set('grandQuantity', 0);
      this.set('locationSummary', []);
      var dateDiff,
          locationSummary = this.get('locationSummary'),
          reportType = this.get('reportType'),
          reportTimes = this._getDateQueryParams(),
          i18n = this.get('i18n');
      if (reportType === 'daysLeft') {
        var endDate = this.get('endDate'),
            startDate = this.get('startDate');
        if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {
          this.closeProgressModal();
          return;
        } else {
          dateDiff = moment(endDate).diff(startDate, 'days');
        }
      }
      this._findInventoryItemsByRequest(reportTimes, {}).then((function (inventoryMap) {
        this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then((function (inventoryMap) {
          // Loop through each inventory item, looking at the requests and purchases to determine
          // state of inventory at effective date
          Object.keys(inventoryMap).forEach((function (key) {
            if (_ember['default'].isEmpty(inventoryMap[key])) {
              // If the inventory item has been deleted, ignore it.
              return;
            }
            var item = inventoryMap[key],
                inventoryPurchases = item.purchaseObjects,
                inventoryRequests = item.requestObjects,
                row = {
              giftInKind: 'N',
              inventoryItem: item,
              quantity: 0,
              unitCost: 0,
              totalCost: 0,
              locations: [],
              vendors: []
            };
            if (!_ember['default'].isEmpty(inventoryPurchases)) {
              // Setup intial locations for an inventory item
              inventoryPurchases.forEach((function (purchase) {
                var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation),
                    purchaseQuantity = purchase.originalQuantity;
                purchase.calculatedQuantity = purchaseQuantity;
                if (purchase.giftInKind === true) {
                  row.giftInKind = 'Y';
                }
                if (!_ember['default'].isEmpty(purchase.vendor)) {
                  if (!row.vendors.contains(purchase.vendor)) {
                    row.vendors.push(purchase.vendor);
                  }
                }
                this._adjustLocation(row.locations, locationName, purchaseQuantity, true);
              }).bind(this));
            }

            if (!_ember['default'].isEmpty(inventoryRequests)) {
              inventoryRequests.forEach((function (request) {
                var adjustPurchases = request.adjustPurchases,
                    increment = false,
                    locations = request.locationsAffected,
                    purchases = request.purchasesAffected,
                    transactionType = request.transactionType;

                increment = transactionType === 'Adjustment (Add)' || transactionType === 'Return';
                if (adjustPurchases) {
                  if (!_ember['default'].isEmpty(purchases) && !_ember['default'].isEmpty(inventoryPurchases)) {
                    // Loop through purchase(s) on request and adjust corresponding inventory purchases
                    purchases.forEach((function (purchaseInfo) {
                      this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);
                    }).bind(this));
                  }
                } else if (transactionType === 'Transfer') {
                  // Increment the delivery location
                  var locationName = this.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle);
                  this._adjustLocation(row.locations, locationName, request.quantity, true);
                }
                // Loop through locations to adjust location quantity
                locations.forEach((function (locationInfo) {
                  this._adjustLocation(row.locations, locationInfo.name, locationInfo.quantity, increment);
                }).bind(this));
              }).bind(this));
            }

            var summaryCost = 0,
                summaryQuantity = 0;

            switch (reportType) {
              case 'byLocation':
                {
                  row.locations.forEach((function (location) {
                    var locationToUpdate = locationSummary.findBy('name', this._getWarehouseLocationName(location.name));
                    if (_ember['default'].isEmpty(locationToUpdate)) {
                      locationToUpdate = _ember['default'].copy(location);
                      locationToUpdate.items = {};
                      locationSummary.push(locationToUpdate);
                    } else {
                      locationToUpdate.quantity += this._getValidNumber(location.quantity);
                    }
                    var costData = this._calculateCosts(inventoryPurchases, {
                      quantity: 0,
                      totalCost: 0
                    });
                    locationToUpdate.items[item.id] = {
                      item: item,
                      quantity: this._getValidNumber(location.quantity),
                      giftInKind: row.giftInKind,
                      totalCost: this._getValidNumber(costData.unitCost) * this._getValidNumber(location.quantity),
                      unitCost: this._getValidNumber(costData.unitCost)
                    };
                  }).bind(this));
                  break;
                }
              case 'daysLeft':
                {
                  if (!_ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {
                    var consumedQuantity = inventoryRequests.reduce((function (previousValue, request) {
                      if (request.transactionType === 'Fulfillment') {
                        return previousValue += this._getValidNumber(request.quantity);
                      } else {
                        return previousValue;
                      }
                    }).bind(this), 0);
                    row.quantity = this._getValidNumber(item.quantity);
                    if (consumedQuantity > 0) {
                      row.consumedPerDay = this._numberFormat(consumedQuantity / dateDiff, true);
                      row.daysLeft = this._numberFormat(row.quantity / row.consumedPerDay);
                    } else {
                      if (consumedQuantity === 0) {
                        row.consumedPerDay = '0';
                      } else {
                        row.consumedPerDay = '?' + consumedQuantity;
                      }
                      row.daysLeft = '?';
                    }
                    this._addReportRow(row);
                  }
                  break;
                }
              case 'detailedAdjustment':
              case 'detailedTransfer':
              case 'detailedUsage':
              case 'detailedExpense':
              case 'summaryExpense':
                {
                  if (!_ember['default'].isEmpty(inventoryRequests)) {
                    inventoryRequests.forEach((function (request) {
                      if (this._includeTransaction(reportType, request.transactionType) && this._hasIncludedLocation(request.locationsAffected)) {
                        var deliveryLocation = this.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle),
                            locations = [],
                            num = this._getValidNumber(request.quantity),
                            totalCost = this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit);
                        locations = request.locationsAffected.map((function (location) {
                          if (reportType === 'detailedTransfer') {
                            return {
                              name: i18n.t('inventory.reports.rows.transfer2', { source: location.name, target: deliveryLocation }).toString()
                            };
                          } else {
                            return {
                              name: i18n.t('inventory.reports.rows.transfer1', { quantity: num, location: location.name }).toString()
                            };
                          }
                        }).bind(this));
                        var reportRow = {
                          date: moment(new Date(request.dateCompleted)).format('l'),
                          expenseAccount: request.expenseAccount,
                          giftInKind: row.giftInKind,
                          inventoryItem: row.inventoryItem,
                          quantity: request.quantity,
                          transactionType: request.transactionType,
                          locations: locations,
                          unitCost: request.costPerUnit,
                          totalCost: totalCost
                        };
                        if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {
                          this._updateExpenseMap(request, reportRow);
                        } else {
                          this._addReportRow(reportRow);
                          summaryQuantity += this._getValidNumber(request.quantity);
                          summaryCost += this._getValidNumber(totalCost);
                        }
                      }
                    }).bind(this));
                    if (reportType !== 'detailedExpense' && reportType !== 'summaryExpense') {
                      this._addTotalsRow(i18n.t('inventory.reports.rows.subtotal'), summaryCost, summaryQuantity);
                      this.incrementProperty('grandCost', summaryCost);
                      this.incrementProperty('grandQuantity', summaryQuantity);
                    }
                  }
                  break;
                }
              case 'summaryTransfer':
              case 'summaryUsage':
                {
                  if (!_ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {
                    row.quantity = inventoryRequests.reduce((function (previousValue, request) {
                      if (this._includeTransaction(reportType, request.transactionType)) {
                        var totalCost = this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit);
                        summaryCost += totalCost;
                        return previousValue += this._getValidNumber(request.quantity);
                      } else {
                        return previousValue;
                      }
                    }).bind(this), 0);
                    if (row.quantity > 0) {
                      row.totalCost = summaryCost;
                      row.unitCost = summaryCost / row.quantity;
                      this._addReportRow(row);
                      this.incrementProperty('grandCost', summaryCost);
                      this.incrementProperty('grandQuantity', row.quantity);
                    }
                  }
                  break;
                }
              case 'detailedPurchase':
                {
                  if (!_ember['default'].isEmpty(inventoryPurchases)) {
                    inventoryPurchases.forEach((function (purchase) {
                      if (this._includeLocation(purchase.location)) {
                        var giftInKind = 'N';
                        if (purchase.giftInKind === true) {
                          giftInKind = 'Y';
                        }
                        this._addReportRow({
                          date: moment(new Date(purchase.dateReceived)).format('l'),
                          giftInKind: giftInKind,
                          inventoryItem: row.inventoryItem,
                          quantity: purchase.originalQuantity,
                          unitCost: purchase.costPerUnit,
                          totalCost: purchase.purchaseCost,
                          locations: [{
                            name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)
                          }]
                        });
                        summaryCost += this._getValidNumber(purchase.purchaseCost);
                        summaryQuantity += this._getValidNumber(purchase.originalQuantity);
                      }
                    }).bind(this));
                    this._addTotalsRow(i18n.t('inventory.reports.rows.subtotal'), summaryCost, summaryQuantity);
                    this.incrementProperty('grandCost', summaryCost);
                    this.incrementProperty('grandQuantity', summaryQuantity);
                  }
                  break;
                }
              case 'summaryPurchase':
                {
                  if (!_ember['default'].isEmpty(inventoryPurchases)) {
                    row.locations = [];
                    row.quantity = inventoryPurchases.reduce((function (previousValue, purchase) {
                      summaryCost += this._getValidNumber(purchase.purchaseCost);
                      var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation);
                      if (!row.locations.findBy('name', locationName)) {
                        row.locations.push({
                          name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)
                        });
                      }
                      return previousValue += this._getValidNumber(purchase.originalQuantity);
                    }).bind(this), 0);
                    if (this._hasIncludedLocation(row.locations)) {
                      row.unitCost = summaryCost / row.quantity;
                      row.totalCost = summaryCost;
                      this._addReportRow(row);
                      this.incrementProperty('grandCost', summaryCost);
                      this.incrementProperty('grandQuantity', row.quantity);
                    }
                  }
                  break;
                }
              case 'valuation':
                {
                  if (!_ember['default'].isEmpty(inventoryPurchases) && this._hasIncludedLocation(row.locations)) {
                    this._calculateCosts(inventoryPurchases, row);
                    this.incrementProperty('grandCost', this._getValidNumber(row.totalCost));
                    this.incrementProperty('grandQuantity', this._getValidNumber(row.quantity));
                    this._addReportRow(row);
                  }
                  break;
                }
            }
          }).bind(this));
          switch (reportType) {
            case 'detailedExpense':
            case 'summaryExpense':
              {
                this._finishExpenseReport(reportType);
                break;
              }
            case 'byLocation':
              {
                this._finishLocationReport();
                this._addTotalsRow(i18n.t('inventory.reports.rows.total'), this.get('grandCost'), this.get('grandQuantity'));
                break;
              }
            default:
              {
                this._addTotalsRow(i18n.t('inventory.reports.rows.total'), this.get('grandCost'), this.get('grandQuantity'));
              }
          }
          this._finishReport();
        }).bind(this), (function (err) {
          this._notifyReportError(i18n.t('inventory.reports.rows.err_in_find_pur') + err);
        }).bind(this));
      }).bind(this), (function (err) {
        this._notifyReportError(i18n.t('inventory.reports.rows.err_in_find_pur') + err);
      }).bind(this));
    },

    _getDateQueryParams: function _getDateQueryParams() {
      var endDate = this.get('endDate'),
          endTime = this.get('maxValue'),
          startDate = this.get('startDate'),
          startTime;
      if (!_ember['default'].isEmpty(endDate)) {
        endTime = moment(endDate).endOf('day').toDate().getTime();
      }
      if (!_ember['default'].isEmpty(startDate)) {
        startTime = moment(startDate).startOf('day').toDate().getTime();
      }
      return {
        endTime: endTime,
        startTime: startTime
      };
    },

    _getInventoryItems: function _getInventoryItems(inventoryIds, inventoryMap) {
      var database = this.get('database');
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        if (_ember['default'].isEmpty(inventoryMap)) {
          inventoryMap = {};
        }
        database.queryMainDB({
          keys: inventoryIds,
          include_docs: true
        }).then(function (inventoryItems) {
          inventoryItems.rows.forEach(function (inventoryItem) {
            if (inventoryItem.doc) {
              inventoryMap[inventoryItem.doc.id] = inventoryItem.doc;
            }
          });
          resolve(inventoryMap);
        }, reject);
      });
    },

    /**
     * Pull the warehouse name out of a formatted location name that (may) include the aisle location
     * @param {string} locationName the formatted location name.
     * @return {string} the warehouse name.
     */
    _getWarehouseLocationName: function _getWarehouseLocationName(locationName) {
      var returnLocation = '';
      if (locationName.indexOf(':') > -1) {
        returnLocation = locationName.split(':')[0].trim();
      } else {
        returnLocation = locationName;
      }
      return returnLocation;
    },

    /**
     * Determines if any of the passed in location objects match the currently filtered location
     * @param {array} locations list of location objects to check.
     * @return {boolean} true if any of the locations match the filter; otherwise false.
     */
    _hasIncludedLocation: function _hasIncludedLocation(locations) {
      var hasIncludedLocation = false;
      locations.forEach((function (location) {
        var locationName = this._getWarehouseLocationName(location.name);
        if (this._includeLocation(locationName)) {
          hasIncludedLocation = true;
        }
      }).bind(this));
      return hasIncludedLocation;
    },

    /**
     * Determine if the specified location should be included in the report
     * @param {string} location the location to check for inclusion
     * @return {boolean} true if the location should be included.
     */
    _includeLocation: function _includeLocation(location) {
      var filterLocation = this.get('filterLocation');
      return _ember['default'].isEmpty(filterLocation) || location === filterLocation;
    },

    /**
     * Given a report type and a transaction type determine if the transaction should
     * be included in the report.
     * @param {string} reportType the report type
     * @param {string} transactionType the transaction type
     * @return {boolean} true if the transaction should be included.
     */
    _includeTransaction: function _includeTransaction(reportType, transactionType) {
      var detailed = reportType.indexOf('detailed') === 0,
          includeForReportType;
      if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {
        return true;
      }
      switch (transactionType) {
        case 'Fulfillment':
          {
            if (detailed) {
              includeForReportType = 'detailedUsage';
            } else {
              includeForReportType = 'summaryUsage';
            }
            break;
          }
        case 'Transfer':
          {
            if (detailed) {
              includeForReportType = 'detailedTransfer';
            } else {
              includeForReportType = 'summaryTransfer';
            }
            break;
          }
        default:
          {
            if (detailed) {
              includeForReportType = 'detailedAdjustment';
            } else {
              includeForReportType = 'summaryAdjustment';
            }
          }
      }
      return reportType === includeForReportType;
    },

    _updateExpenseMap: function _updateExpenseMap(request, reportRow) {
      var categoryToUpdate,
          expenseAccountToUpdate,
          expenseMap = this.get('expenseMap'),
          isGiftInKind = reportRow.giftInKind === 'Y',
          increment = true,
          transactionValue;

      switch (request.transactionType) {
        case 'Fulfillment':
        case 'Return':
          {
            if (isGiftInKind) {
              categoryToUpdate = expenseMap['Gift In Kind Usage'];
            } else {
              categoryToUpdate = expenseMap['Inventory Consumed'];
            }
            if (request.transactionType === 'Return') {
              increment = false;
            }
            break;
          }
        case 'Adjustment (Add)':
        case 'Adjustment (Remove)':
        case 'Return To Vendor':
        case 'Write Off':
          {
            categoryToUpdate = expenseMap['Inventory Obsolence'];
            if (request.transactionType === 'Adjustment (Add)') {
              increment = false;
            }
            break;
          }
      }
      if (!_ember['default'].isEmpty(categoryToUpdate)) {
        expenseAccountToUpdate = categoryToUpdate.expenseAccounts.findBy('name', request.expenseAccount);
        if (_ember['default'].isEmpty(expenseAccountToUpdate)) {
          expenseAccountToUpdate = {
            name: request.expenseAccount,
            total: 0,
            reportRows: []
          };
          categoryToUpdate.expenseAccounts.push(expenseAccountToUpdate);
        }
        expenseAccountToUpdate.reportRows.push(reportRow);
        transactionValue = this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit);
        if (increment) {
          categoryToUpdate.total += transactionValue;
          expenseAccountToUpdate.total += transactionValue;
        } else {
          categoryToUpdate.total = categoryToUpdate.total - transactionValue;
          expenseAccountToUpdate.total = expenseAccountToUpdate.total - transactionValue;
          reportRow.totalCost = reportRow.totalCost * -1;
        }
      }
    },

    actions: {
      generateReport: function generateReport() {
        var endDate = this.get('endDate'),
            reportRows = this.get('reportRows'),
            reportType = this.get('reportType'),
            startDate = this.get('startDate');
        if (_ember['default'].isEmpty(startDate) && _ember['default'].isEmpty(endDate)) {
          return;
        }
        reportRows.clear();
        this.showProgressModal();
        switch (reportType) {
          case 'expiration':
            {
              this._generateExpirationReport();
              break;
            }
          case 'summaryFinance':
            {
              this._generateFinancialSummaryReport();
              break;
            }
          case 'detailedExpense':
          case 'summaryExpense':
            {
              var expenseCategories = this.get('expenseCategories'),
                  expenseMap = {};
              expenseCategories.forEach(function (category) {
                expenseMap[category] = {
                  total: 0,
                  expenseAccounts: []
                };
              });
              this.set('expenseMap', expenseMap);
              this._generateInventoryReport();
              break;
            }
          default:
            {
              this._generateInventoryReport();
              break;
            }
        }
      },

      viewInventory: function viewInventory(id) {
        this.store.find('inventory', id).then((function (item) {
          item.set('returnTo', 'inventory.reports');
          this.transitionToRoute('inventory.edit', item);
        }).bind(this));
      }
    }
  });
});
define('hospitalrun/inventory/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    pageTitle: (0, _emberI18n.translationMacro)('inventory.titles.inventory_report'),

    // No model for reports; data gets retrieved when report is run.
    model: function model() {
      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));
    }

  });
});
define("hospitalrun/inventory/reports/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 16
              },
              "end": {
                "line": 22,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/inventory/reports/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-select", [], ["class", "col-xs-6", "label", ["subexpr", "t", ["inventory.labels.location"], [], ["loc", [null, [18, 55], [18, 86]]]], "property", "filterLocation", "content", ["subexpr", "@mut", [["get", "warehouseList", ["loc", [null, [19, 58], [19, 71]]]]], [], []], "prompt", " "], ["loc", [null, [18, 20], [21, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 16
              },
              "end": {
                "line": 27,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/inventory/reports/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "date-picker", [], ["property", "endDate", "label", ["subexpr", "t", ["inventory.labels.date_effective"], [], ["loc", [null, [26, 59], [26, 96]]]], "class", "col-sm-4"], ["loc", [null, [26, 20], [26, 115]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 16
              },
              "end": {
                "line": 30,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/inventory/reports/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "date-picker", [], ["property", "startDate", "label", ["subexpr", "t", ["inventory.labels.date_start"], [], ["loc", [null, [28, 61], [28, 94]]]], "class", "col-sm-4 test-start-date"], ["loc", [null, [28, 20], [28, 129]]]], ["inline", "date-picker", [], ["property", "endDate", "label", ["subexpr", "t", ["inventory.labels.date_end"], [], ["loc", [null, [29, 59], [29, 90]]]], "class", "col-sm-4 test-end-date"], ["loc", [null, [29, 20], [29, 123]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 20
                },
                "end": {
                  "line": 38,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/inventory/reports/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.date.label", ["loc", [null, [37, 44], [37, 68]]]]], [], []], "property", "reportColumns.date.include", "class", "col-xs-2"], ["loc", [null, [37, 24], [37, 125]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 48,
                  "column": 20
                },
                "end": {
                  "line": 51,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/inventory/reports/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.total.label", ["loc", [null, [49, 44], [49, 69]]]]], [], []], "property", "reportColumns.total.include", "class", "col-xs-2"], ["loc", [null, [49, 24], [49, 127]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.unitcost.label", ["loc", [null, [50, 44], [50, 72]]]]], [], []], "property", "reportColumns.unitcost.include", "class", "col-xs-2"], ["loc", [null, [50, 24], [50, 133]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 20
                },
                "end": {
                  "line": 55,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/inventory/reports/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.consumedPerDay.label", ["loc", [null, [53, 44], [53, 78]]]]], [], []], "property", "reportColumns.consumedPerDay.include", "class", "col-xs-2"], ["loc", [null, [53, 24], [53, 145]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.daysLeft.label", ["loc", [null, [54, 44], [54, 72]]]]], [], []], "property", "reportColumns.daysLeft.include", "class", "col-xs-2"], ["loc", [null, [54, 24], [54, 133]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 70,
                  "column": 20
                },
                "end": {
                  "line": 72,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/inventory/reports/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.expenseAccount.label", ["loc", [null, [71, 44], [71, 78]]]]], [], []], "property", "reportColumns.expenseAccount.include", "class", "col-xs-2"], ["loc", [null, [71, 24], [71, 145]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 74,
                  "column": 20
                },
                "end": {
                  "line": 76,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/inventory/reports/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.transactionType.label", ["loc", [null, [75, 44], [75, 79]]]]], [], []], "property", "reportColumns.transactionType.include", "class", "col-xs-2"], ["loc", [null, [75, 24], [75, 147]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 12
              },
              "end": {
                "line": 78,
                "column": 12
              }
            },
            "moduleName": "hospitalrun/inventory/reports/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h3");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [3]);
            var element5 = dom.childAt(fragment, [5]);
            var element6 = dom.childAt(fragment, [7]);
            var element7 = dom.childAt(fragment, [9]);
            var morphs = new Array(19);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element4, 3, 3);
            morphs[2] = dom.createMorphAt(element4, 5, 5);
            morphs[3] = dom.createMorphAt(element4, 7, 7);
            morphs[4] = dom.createMorphAt(element4, 9, 9);
            morphs[5] = dom.createMorphAt(element4, 11, 11);
            morphs[6] = dom.createMorphAt(element5, 3, 3);
            morphs[7] = dom.createMorphAt(element5, 5, 5);
            morphs[8] = dom.createMorphAt(element5, 7, 7);
            morphs[9] = dom.createMorphAt(element5, 8, 8);
            morphs[10] = dom.createMorphAt(element5, 10, 10);
            morphs[11] = dom.createMorphAt(element6, 3, 3);
            morphs[12] = dom.createMorphAt(element6, 5, 5);
            morphs[13] = dom.createMorphAt(element6, 7, 7);
            morphs[14] = dom.createMorphAt(element6, 9, 9);
            morphs[15] = dom.createMorphAt(element6, 11, 11);
            morphs[16] = dom.createMorphAt(element7, 3, 3);
            morphs[17] = dom.createMorphAt(element7, 5, 5);
            morphs[18] = dom.createMorphAt(element7, 7, 7);
            return morphs;
          },
          statements: [["inline", "t", ["inventory.reports.fields"], [], ["loc", [null, [33, 20], [33, 52]]]], ["block", "if", [["get", "includeDate", ["loc", [null, [36, 26], [36, 37]]]]], [], 0, null, ["loc", [null, [36, 20], [38, 27]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.id.label", ["loc", [null, [39, 40], [39, 62]]]]], [], []], "property", "reportColumns.id.include", "class", "col-xs-2"], ["loc", [null, [39, 20], [39, 117]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.name.label", ["loc", [null, [40, 40], [40, 64]]]]], [], []], "property", "reportColumns.name.include", "class", "col-xs-2"], ["loc", [null, [40, 20], [40, 121]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.description.label", ["loc", [null, [41, 40], [41, 71]]]]], [], []], "property", "reportColumns.description.include", "class", "col-xs-2"], ["loc", [null, [41, 20], [41, 135]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.type.label", ["loc", [null, [42, 40], [42, 64]]]]], [], []], "property", "reportColumns.type.include", "class", "col-xs-2"], ["loc", [null, [42, 20], [42, 121]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.quantity.label", ["loc", [null, [46, 40], [46, 68]]]]], [], []], "property", "reportColumns.quantity.include", "class", "col-xs-2"], ["loc", [null, [46, 20], [46, 129]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.unit.label", ["loc", [null, [47, 40], [47, 64]]]]], [], []], "property", "reportColumns.unit.include", "class", "col-xs-2"], ["loc", [null, [47, 20], [47, 121]]]], ["block", "if", [["get", "includeCostFields", ["loc", [null, [48, 26], [48, 43]]]]], [], 1, null, ["loc", [null, [48, 20], [51, 27]]]], ["block", "if", [["get", "includeDaysLeft", ["loc", [null, [52, 26], [52, 41]]]]], [], 2, null, ["loc", [null, [52, 20], [55, 27]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.price.label", ["loc", [null, [56, 40], [56, 65]]]]], [], []], "property", "reportColumns.price.include", "class", "col-xs-2"], ["loc", [null, [56, 20], [56, 123]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.reorder.label", ["loc", [null, [60, 40], [60, 67]]]]], [], []], "property", "reportColumns.reorder.include", "class", "col-xs-2"], ["loc", [null, [60, 20], [60, 127]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.gift.label", ["loc", [null, [61, 40], [61, 64]]]]], [], []], "property", "reportColumns.gift.include", "class", "col-xs-2"], ["loc", [null, [61, 20], [61, 121]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.locations.label", ["loc", [null, [62, 40], [62, 69]]]]], [], []], "property", "reportColumns.locations.include", "class", "col-xs-2"], ["loc", [null, [62, 20], [62, 131]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.aisle.label", ["loc", [null, [63, 40], [63, 65]]]]], [], []], "property", "reportColumns.aisle.include", "class", "col-xs-2"], ["loc", [null, [63, 20], [63, 123]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.xref.label", ["loc", [null, [64, 40], [64, 64]]]]], [], []], "property", "reportColumns.xref.include", "class", "col-xs-2"], ["loc", [null, [64, 20], [64, 121]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.vendor.label", ["loc", [null, [69, 40], [69, 66]]]]], [], []], "property", "reportColumns.vendor.include", "class", "col-xs-2"], ["loc", [null, [69, 20], [69, 125]]]], ["block", "if", [["get", "includeExpenseAccount", ["loc", [null, [70, 26], [70, 47]]]]], [], 3, null, ["loc", [null, [70, 20], [72, 27]]]], ["block", "if", [["get", "includeTransactionType", ["loc", [null, [74, 26], [74, 48]]]]], [], 4, null, ["loc", [null, [74, 20], [76, 27]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/inventory/reports/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group col-xs-6");
          var el3 = dom.createTextNode("\n                  ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label");
          dom.setAttribute(el3, "for", "report-type");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                  ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var element9 = dom.childAt(element8, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element9, 3, 3);
          morphs[2] = dom.createMorphAt(element8, 3, 3);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["inventory.reports.report_type"], [], ["loc", [null, [6, 65], [6, 102]]]], ["inline", "select-list", [], ["action", ["subexpr", "action", [["subexpr", "mut", [["get", "reportType", ["loc", [null, [8, 40], [8, 50]]]]], [], ["loc", [null, [8, 35], [8, 51]]]]], [], ["loc", [null, [8, 27], [8, 52]]]], "class", "form-control", "content", ["subexpr", "@mut", [["get", "reportTypes", ["loc", [null, [10, 28], [10, 39]]]]], [], []], "id", "report-type", "optionValuePath", "value", "optionLabelPath", "name", "value", ["subexpr", "@mut", [["get", "reportType", ["loc", [null, [14, 26], [14, 36]]]]], [], []]], ["loc", [null, [7, 18], [15, 20]]]], ["block", "unless", [["get", "hideLocationFilter", ["loc", [null, [17, 26], [17, 44]]]]], [], 0, null, ["loc", [null, [17, 16], [22, 27]]]], ["block", "if", [["get", "showEffectiveDate", ["loc", [null, [25, 22], [25, 39]]]]], [], 1, 2, ["loc", [null, [25, 16], [30, 23]]]], ["block", "if", [["get", "useFieldPicker", ["loc", [null, [32, 18], [32, 32]]]]], [], 3, null, ["loc", [null, [32, 12], [78, 19]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 94,
                "column": 20
              },
              "end": {
                "line": 98,
                "column": 20
              }
            },
            "moduleName": "hospitalrun/inventory/reports/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "reportHeader", ["loc", [null, [96, 28], [96, 44]]]]],
          locals: ["reportHeader"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 0
            },
            "end": {
              "line": 108,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/reports/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          dom.setAttribute(el4, "class", "table-header");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-footer");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "target", "_blank");
          dom.setAttribute(el3, "download", "report.csv");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [3, 1]);
          var element3 = dom.childAt(element0, [5, 1]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element1, 0, 0);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[3] = dom.createMorphAt(element2, 3, 3);
          morphs[4] = dom.createAttrMorph(element3, 'href');
          morphs[5] = dom.createMorphAt(element3, 0, 0);
          return morphs;
        },
        statements: [["content", "reportTitle", ["loc", [null, [89, 36], [89, 51]]]], ["inline", "nav-paging", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [89, 80], [89, 95]]]]], [], []]], ["loc", [null, [89, 51], [89, 98]]]], ["block", "each", [["get", "reportHeaders", ["loc", [null, [94, 28], [94, 41]]]]], [], 0, null, ["loc", [null, [94, 20], [98, 29]]]], ["inline", "partial", ["report-rows"], [], ["loc", [null, [100, 16], [100, 41]]]], ["attribute", "href", ["get", "csvExport", ["loc", [null, [104, 22], [104, 31]]]]], ["inline", "t", ["inventory.reports.export"], [], ["loc", [null, [104, 96], [104, 128]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 109,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/reports/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-primary");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-footer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "btn btn-default");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element10 = dom.childAt(fragment, [0]);
        var element11 = dom.childAt(element10, [3, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element10, [1]), 1, 1);
        morphs[1] = dom.createElementMorph(element11);
        morphs[2] = dom.createMorphAt(element11, 0, 0);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "this", ["loc", [null, [3, 25], [3, 29]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [3, 8], [80, 20]]]], ["element", "action", ["generateReport"], [], ["loc", [null, [83, 40], [83, 67]]]], ["inline", "t", ["inventory.reports.generate"], [], ["loc", [null, [83, 68], [83, 102]]]], ["block", "if", [["get", "showReportResults", ["loc", [null, [86, 6], [86, 23]]]]], [], 1, null, ["loc", [null, [86, 0], [108, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('hospitalrun/inventory/request/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _ember) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventorySelection['default'], {
    inventoryController: _ember['default'].inject.controller('inventory'),
    inventoryItems: null,
    cancelAction: 'allRequests',

    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),
    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),
    expenseAccountList: _ember['default'].computed.alias('inventoryController.expenseAccountList'),

    inventoryList: (function () {
      var inventoryItems = this.get('inventoryItems');
      if (!_ember['default'].isEmpty(inventoryItems)) {
        var mappedItems = inventoryItems.map(function (item) {
          return item.doc;
        });
        return mappedItems;
      }
    }).property('inventoryItems.[]'),

    lookupListsToUpdate: [{
      name: 'expenseAccountList', // Name of property containing lookup list
      property: 'model.expenseAccount', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'expense_account_list' // Id of the lookup list to update
    }, {
      name: 'aisleLocationList', // Name of property containing lookup list
      property: 'model.deliveryAisle', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'aisle_location_list' // Id of the lookup list to update
    }, {
      name: 'warehouseList', // Name of property containing lookup list
      property: 'model.deliveryLocation', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'warehouse_list' // Id of the lookup list to update
    }],

    canFulfill: (function () {
      var requestedItems = this.get('model.requestedItems');
      return _ember['default'].isEmpty(requestedItems) && this.currentUserCan('fulfill_inventory');
    }).property('model.requestedItems.[]'),

    isFulfilling: (function () {
      var canFulfill = this.get('canFulfill'),
          isRequested = this.get('isRequested'),
          fulfillRequest = this.get('model.shouldFulfillRequest'),
          isFulfilling = canFulfill && (isRequested || fulfillRequest);
      if (isFulfilling) {
        if (_ember['default'].isEmpty(this.get('model.dateCompleted'))) {
          this.set('model.dateCompleted', new Date());
        }
      } else {
        this.set('model.dateCompleted');
      }
      return isFulfilling;
    }).property('isRequested', 'model.shouldFulfillRequest'),

    isRequested: (function () {
      var status = this.get('model.status');
      return status === 'Requested';
    }).property('model.status'),

    quantityLabel: (function () {
      var selectedInventoryItem = this.get('selectedInventoryItem');
      if (_ember['default'].isEmpty(selectedInventoryItem)) {
        return this.get('i18n').t('labels.quantity').toString();
      } else {
        return this.get('i18n').t('inventory.labels.quantity', { unit: selectedInventoryItem.distributionUnit }).toString();
      }
    }).property('selectedInventoryItem'),

    showRequestedItems: (function () {
      var requestedItems = this.get('model.requestedItems');
      return !_ember['default'].isEmpty(requestedItems);
    }).property('model.requestedItems.[]'),

    updateViaFulfillRequest: false,

    updateButtonText: (function () {
      if (this.get('isFulfilling')) {
        return this.get('i18n').t('buttons.fulfill');
      } else if (this.get('model.isNew')) {
        return this.get('i18n').t('buttons.add');
      } else {
        return this.get('i18n').t('buttons.update');
      }
    }).property('model.isNew', 'isFulfilling'),

    updateCapability: 'add_inventory_request',

    actions: {
      addInventoryItem: function addInventoryItem() {
        var model = this.get('model'),
            inventoryItem = model.get('inventoryItem'),
            requestedItems = model.get('requestedItems'),
            quantity = model.get('quantity');
        model.validate().then((function () {
          if (model.get('isValid') && !_ember['default'].isEmpty(inventoryItem) && !_ember['default'].isEmpty(quantity)) {
            var requestedItem = _ember['default'].Object.create({
              item: inventoryItem.get('content'),
              quantity: quantity
            });
            requestedItems.addObject(requestedItem);
            model.set('inventoryItem');
            model.set('inventoryItemTypeAhead');
            model.set('quantity');
            this.set('selectedInventoryItem');
          }
        }).bind(this))['catch'](_ember['default'].K);
      },

      allRequests: function allRequests() {
        this.transitionToRoute('inventory.index');
      },

      removeItem: function removeItem(removeInfo) {
        var requestedItems = this.get('model.requestedItems'),
            item = removeInfo.itemToRemove;
        requestedItems.removeObject(item);
        this.send('closeModal');
      },

      showRemoveItem: function showRemoveItem(item) {
        var message = this.get('i18n').t('inventory.messages.remove_item_request'),
            model = _ember['default'].Object.create({
          itemToRemove: item
        }),
            title = this.get('i18n').t('inventory.titles.remove_item');
        this.displayConfirm(title, message, 'removeItem', model);
      },

      /**
       * Update the model and perform the before update and after update
       * @param skipAfterUpdate boolean (optional) indicating whether or not
       * to skip the afterUpdate call.
       */
      update: function update(skipAfterUpdate) {
        this.beforeUpdate().then((function () {
          var updateViaFulfillRequest = this.get('updateViaFulfillRequest');
          if (updateViaFulfillRequest) {
            this.updateLookupLists();
            this.performFulfillRequest(this.get('model'), false, false, true).then(this.afterUpdate.bind(this));
          } else {
            var isNew = this.get('model.isNew'),
                requestedItems = this.get('model.requestedItems');
            if (isNew && !_ember['default'].isEmpty(requestedItems)) {
              var baseModel = this.get('model'),
                  propertiesToCopy = baseModel.getProperties(['dateRequested', 'deliveryAisle', 'deliveryLocation', 'expenseAccount', 'requestedBy', 'status']),
                  inventoryPromises = [],
                  newModels = [],
                  savePromises = [];
              if (!_ember['default'].isEmpty(this.get('model.inventoryItem')) && !_ember['default'].isEmpty(this.get('model.quantity'))) {
                savePromises.push(baseModel.save());
              }
              requestedItems.forEach((function (requestedItem) {
                propertiesToCopy.inventoryItem = requestedItem.get('item');
                propertiesToCopy.quantity = requestedItem.get('quantity');
                var modelToSave = this.get('store').createRecord('inv-request', propertiesToCopy);
                inventoryPromises.push(modelToSave.get('inventoryItem'));
                newModels.push(modelToSave);
              }).bind(this));
              _ember['default'].RSVP.all(inventoryPromises, 'Get inventory items for inventory requests').then((function () {
                newModels.forEach(function (newModel) {
                  savePromises.push(newModel.save());
                });
                _ember['default'].RSVP.all(savePromises, 'Save batch inventory requests').then((function () {
                  this.updateLookupLists();
                  this.afterUpdate();
                }).bind(this));
              }).bind(this));
            } else {
              this.get('model').save().then((function (record) {
                this.updateLookupLists();
                if (!skipAfterUpdate) {
                  this.afterUpdate(record);
                }
              }).bind(this));
            }
          }
        }).bind(this));
      }
    },

    afterUpdate: function afterUpdate() {
      var updateViaFulfillRequest = this.get('updateViaFulfillRequest');
      if (updateViaFulfillRequest) {
        this.displayAlert(this.get('i18n').t('inventory.titles.request_fulfilled'), this.get('i18n').t('inventory.messages.request_fulfilled'), 'allRequests');
      } else {
        this.displayAlert(this.get('i18n').t('inventory.titles.request_updated'), this.get('i18n').t('inventory.messages.request_updated'));
      }
    },

    beforeUpdate: function beforeUpdate() {
      if (this.get('isFulfilling')) {
        this.set('updateViaFulfillRequest', true);
      } else {
        this.set('updateViaFulfillRequest', false);
      }
      if (this.get('model.isNew')) {
        this.set('model.dateRequested', new Date());
        this.set('model.requestedBy', this.get('model').getUserName());
        if (!this.get('isFulfilling')) {
          this.set('model.status', 'Requested');
        }
      }
      return _ember['default'].RSVP.resolve();
    }
  });
});
// inventory-locations mixin is needed for fulfill-request mixin!
define('hospitalrun/inventory/request/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({
    editTitle: (0, _emberI18n.translationMacro)('inventory.titles.edit_request'),
    modelName: 'inv-request',
    newTitle: (0, _emberI18n.translationMacro)('inventory.titles.add_request'),
    database: _ember['default'].inject.service(),
    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        transactionType: 'Request',
        requestedItems: []
      });
    },

    actions: {
      allRequests: function allRequests(model) {
        this.controller.send('allRequests', model);
      },

      removeItem: function removeItem(model) {
        this.controller.send('removeItem', model);
      }
    },

    /**
     * Lazily load inventory items so that it doesn't impact performance.
     */
    setupController: function setupController(controller, model) {
      this._super(controller, model);
      var inventoryQuery = {
        startkey: 'inventory_',
        endkey: 'inventory_￿',
        include_docs: true
      };
      this.get('database').queryMainDB(inventoryQuery).then(function (result) {
        controller.set('inventoryItems', result.rows);
      });
    }
  });
});
define("hospitalrun/inventory/request/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 16,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/request/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1]);
              var element8 = dom.childAt(fragment, [3]);
              var element9 = dom.childAt(fragment, [5]);
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["inventory.labels.item"], [], ["loc", [null, [5, 37], [5, 66]]]], ["content", "model.inventoryItem.name", ["loc", [null, [6, 39], [6, 67]]]], ["inline", "t", ["inventory.labels.quantity_requested"], [], ["loc", [null, [9, 37], [9, 80]]]], ["content", "model.quantity", ["loc", [null, [10, 39], [10, 57]]]], ["inline", "t", ["inventory.labels.quantity_on_hand"], [], ["loc", [null, [13, 37], [13, 78]]]], ["content", "model.inventoryItem.quantity", ["loc", [null, [14, 39], [14, 71]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 58,
                      "column": 10
                    }
                  },
                  "moduleName": "hospitalrun/inventory/request/template.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("tr");
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createTextNode("\n                ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "class", "col-xs-2");
                  var el3 = dom.createTextNode("\n                ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "input-group");
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "input-group-addon");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  var el3 = dom.createTextNode("\n                ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("button");
                  dom.setAttribute(el3, "class", "btn btn-default warning");
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("span");
                  dom.setAttribute(el4, "class", "octicon octicon-x");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element0, [5, 1]);
                  var morphs = new Array(5);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
                  morphs[1] = dom.createMorphAt(element1, 1, 1);
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
                  morphs[3] = dom.createElementMorph(element2);
                  morphs[4] = dom.createMorphAt(element2, 3, 3);
                  return morphs;
                },
                statements: [["content", "requestedItem.item.name", ["loc", [null, [44, 16], [44, 43]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "requestedItem.quantity", ["loc", [null, [48, 53], [48, 75]]]]], [], []]], ["loc", [null, [48, 18], [48, 78]]]], ["content", "requestedItem.item.distributionUnit", ["loc", [null, [49, 49], [49, 88]]]], ["element", "action", ["showRemoveItem", ["get", "requestedItem", ["loc", [null, [53, 82], [53, 95]]]]], ["bubbles", false], ["loc", [null, [53, 56], [53, 112]]]], ["inline", "t", ["buttons.remove"], [], ["loc", [null, [54, 58], [54, 80]]]]],
                locals: ["requestedItem"],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 33,
                    "column": 6
                  },
                  "end": {
                    "line": 60,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/inventory/request/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("h3");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("table");
                dom.setAttribute(el1, "class", "table");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("tr");
                dom.setAttribute(el2, "class", "table-header");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("th");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [3]);
                var element4 = dom.childAt(element3, [1]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
                morphs[4] = dom.createMorphAt(element3, 3, 3);
                return morphs;
              },
              statements: [["inline", "t", ["inventory.labels.requested_items"], [], ["loc", [null, [34, 12], [34, 52]]]], ["inline", "t", ["labels.name"], [], ["loc", [null, [37, 16], [37, 35]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [38, 16], [38, 39]]]], ["inline", "t", ["labels.action"], [], ["loc", [null, [39, 16], [39, 37]]]], ["block", "each", [["get", "model.requestedItems", ["loc", [null, [41, 18], [41, 38]]]]], [], 0, null, ["loc", [null, [41, 10], [58, 19]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 61,
                    "column": 6
                  },
                  "end": {
                    "line": 66,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/inventory/request/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "form-group");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("label");
                dom.setAttribute(el2, "class", "control-label");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["inventory.labels.fulfill_request"], [], ["loc", [null, [63, 39], [63, 79]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["inventory.labels.fulfill_request"], [], ["loc", [null, [65, 28], [65, 66]]]], "property", "shouldFulfillRequest"], ["loc", [null, [65, 8], [65, 100]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 4
                },
                "end": {
                  "line": 67,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/request/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group col-sm-1");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "control-label");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("h4");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "glyphicon glyphicon-plus");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var element6 = dom.childAt(element5, [5, 3, 1]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(element5, 1, 1);
              morphs[1] = dom.createMorphAt(element5, 3, 3);
              morphs[2] = dom.createElementMorph(element6);
              morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "inventory-typeahead", [], ["class", "col-sm-8 test-inv-item", "property", "inventoryItemTypeAhead", "label", ["subexpr", "t", ["inventory.labels.inventory_item"], [], ["loc", [null, [21, 16], [21, 53]]]], "content", ["subexpr", "@mut", [["get", "inventoryList", ["loc", [null, [22, 18], [22, 31]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedInventoryItem", ["loc", [null, [23, 20], [23, 41]]]]], [], []]], ["loc", [null, [18, 8], [24, 10]]]], ["inline", "em-input", [], ["property", "quantity", "label", ["subexpr", "@mut", [["get", "quantityLabel", ["loc", [null, [25, 45], [25, 58]]]]], [], []], "class", "col-sm-3 test-inv-quantity"], ["loc", [null, [25, 8], [25, 95]]]], ["element", "action", ["addInventoryItem"], [], ["loc", [null, [29, 51], [29, 80]]]], ["block", "if", [["get", "showRequestedItems", ["loc", [null, [33, 12], [33, 30]]]]], [], 0, null, ["loc", [null, [33, 6], [60, 13]]]], ["block", "if", [["get", "canFulfill", ["loc", [null, [61, 12], [61, 22]]]]], [], 1, null, ["loc", [null, [61, 6], [66, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 83,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/inventory/request/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5, 1]), 0, 0);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["inline", "date-picker", [], ["property", "dateCompleted", "label", ["subexpr", "t", ["labels.date_completed"], [], ["loc", [null, [73, 53], [73, 80]]]], "class", "col-sm-4"], ["loc", [null, [73, 8], [73, 99]]]], ["inline", "inventory-location-picker", [], ["label", ["subexpr", "t", ["inventory.labels.pull_from"], [], ["loc", [null, [75, 40], [75, 72]]]], "quantityRequested", ["subexpr", "@mut", [["get", "model.quantity", ["loc", [null, [75, 91], [75, 105]]]]], [], []], "locationList", ["subexpr", "@mut", [["get", "model.inventoryItem.availableLocations", ["loc", [null, [76, 21], [76, 59]]]]], [], []], "selectedLocations", ["subexpr", "@mut", [["get", "model.inventoryLocations", ["loc", [null, [77, 26], [77, 50]]]]], [], []]], ["loc", [null, [75, 6], [78, 8]]]], ["inline", "t", ["inventory.labels.consume_purchases"], [], ["loc", [null, [80, 37], [80, 79]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["inventory.labels.mark_as_consumed"], [], ["loc", [null, [82, 26], [82, 65]]]], "property", "markAsConsumed"], ["loc", [null, [82, 6], [82, 93]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 84,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/request/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isRequested", ["loc", [null, [3, 10], [3, 21]]]]], [], 0, 1, ["loc", [null, [3, 4], [67, 11]]]], ["inline", "select-or-typeahead", [], ["property", "deliveryLocation", "label", ["subexpr", "t", ["inventory.labels.delivery_location"], [], ["loc", [null, [68, 60], [68, 100]]]], "list", ["subexpr", "@mut", [["get", "warehouseList", ["loc", [null, [68, 106], [68, 119]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.deliveryLocation", ["loc", [null, [68, 130], [68, 152]]]]], [], []], "class", "test-delivery-location"], ["loc", [null, [68, 4], [68, 185]]]], ["inline", "select-or-typeahead", [], ["property", "deliveryAisle", "label", ["subexpr", "t", ["inventory.labels.delivery_aisle"], [], ["loc", [null, [69, 57], [69, 94]]]], "list", ["subexpr", "@mut", [["get", "aisleLocationList", ["loc", [null, [69, 100], [69, 117]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.deliveryAisle", ["loc", [null, [69, 128], [69, 147]]]]], [], []], "class", "test-delivery-aisle"], ["loc", [null, [69, 4], [69, 177]]]], ["inline", "select-or-typeahead", [], ["property", "expenseAccount", "label", ["subexpr", "t", ["inventory.labels.bill_to"], [], ["loc", [null, [70, 58], [70, 88]]]], "list", ["subexpr", "@mut", [["get", "expenseAccountList", ["loc", [null, [70, 94], [70, 112]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.expenseAccount", ["loc", [null, [70, 123], [70, 143]]]]], [], []], "class", "test-bill-to"], ["loc", [null, [70, 4], [70, 166]]]], ["block", "if", [["get", "isFulfilling", ["loc", [null, [71, 10], [71, 22]]]]], [], 2, null, ["loc", [null, [71, 4], [83, 11]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 85,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/request/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [84, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 15
          }
        },
        "moduleName": "hospitalrun/inventory/request/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [85, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryId, _hospitalrunMixinsInventoryLocations) {
  // inventory-locations mixin is needed for fulfill-request mixin!
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryId['default'], _hospitalrunMixinsInventoryLocations['default'], {
    addCapability: 'add_inventory_item',
    additionalButtons: (function () {
      if (this.currentUserCan(this.get('addCapability'))) {
        return [{
          buttonAction: 'newInventoryBatch',
          buttonText: '+ inventory received',
          'class': 'btn btn-primary'
        }];
      }
    }).property(),

    additionalModels: [{
      name: 'aisleLocationList',
      findArgs: ['lookup', 'aisle_location_list']
    }, {
      name: 'expenseAccountList',
      findArgs: ['lookup', 'expense_account_list']
    }, {
      name: 'inventoryTypeList',
      findArgs: ['lookup', 'inventory_types']
    }, {
      name: 'inventoryUnitList',
      findArgs: ['lookup', 'unit_types']
    }, {
      name: 'warehouseList',
      findArgs: ['lookup', 'warehouse_list']
    }, {
      name: 'vendorList',
      findArgs: ['lookup', 'vendor_list']
    }],

    currentItem: null,
    moduleName: 'inventory',

    newButtonText: '+ new request',
    sectionTitle: 'Inventory',

    actions: {
      addPurchase: function addPurchase(newPurchase) {
        var currentItem = this.get('currentItem'),
            purchases = currentItem.get('purchases');
        purchases.addObject(newPurchase);
        this.newPurchaseAdded(currentItem, newPurchase).then((function () {
          currentItem.updateQuantity();
          currentItem.save().then((function () {
            this.send('closeModal');
          }).bind(this));
        }).bind(this));
      },

      newInventoryBatch: function newInventoryBatch() {
        if (this.currentUserCan(this.get('addCapability'))) {
          this.transitionTo('inventory.batch', 'new');
        }
      },

      newRequest: function newRequest() {
        this.transitionTo('inventory.request', 'new');
      },

      allItems: function allItems() {
        this.transitionTo('inventory.listing');
      },

      showAddPurchase: function showAddPurchase(inventoryItem) {
        var newPurchase = this.get('store').createRecord('inv-purchase', {
          dateReceived: new Date(),
          distributionUnit: inventoryItem.get('distributionUnit'),
          inventoryItem: inventoryItem.get('id')
        });
        this.set('currentItem', inventoryItem);
        this.send('openModal', 'inventory.purchase.edit', newPurchase);
      }
    }
  });
});
define('hospitalrun/inventory/search/controller', ['exports', 'hospitalrun/inventory/listing/controller'], function (exports, _hospitalrunInventoryListingController) {
  exports['default'] = _hospitalrunInventoryListingController['default'].extend();
});
define('hospitalrun/inventory/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {
  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({
    moduleName: 'inventory',
    searchKeys: [{
      name: 'crossReference',
      type: 'contains'
    }, {
      name: 'description',
      type: 'fuzzy'
    }, {
      name: 'friendlyId',
      type: 'contains'
    }, {
      name: 'name',
      type: 'fuzzy'
    }],
    searchModel: 'inventory'
  });
});
define("hospitalrun/inventory/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/search/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["inventory/listing"], [], ["loc", [null, [2, 4], [2, 35]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 19
          }
        },
        "moduleName": "hospitalrun/inventory/search/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "search-listing", [], ["newButtonText", ["subexpr", "t", ["inventory.labels.new_item"], [], ["loc", [null, [1, 32], [1, 63]]]], "allButtonText", ["subexpr", "t", ["inventory.labels.all_inventory"], [], ["loc", [null, [1, 78], [1, 114]]]]], 0, null, ["loc", [null, [1, 0], [3, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/inventory/transfer/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({
    inventoryController: _ember['default'].inject.controller('inventory'),

    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),
    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),

    lookupListsToUpdate: [{
      name: 'aisleLocationList', // Name of property containing lookup list
      property: 'model.transferAisleLocation', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'aisle_location_list' // Id of the lookup list to update
    }, {
      name: 'warehouseList', // Name of property containing lookup list
      property: 'model.transferLocation', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'warehouse_list' // Id of the lookup list to update
    }],

    title: (0, _emberI18n.translationMacro)('inventory.titles.transfer'),
    updateButtonText: (0, _emberI18n.translationMacro)('inventory.labels.transfer'),
    updateButtonAction: 'transfer',
    updateCapability: 'adjust_inventory_location',

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      transfer: function transfer() {
        this.updateLookupLists();
        this.send('transferItems', this.get('model'), true);
      }
    }
  });
});
define("hospitalrun/inventory/transfer/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/inventory/transfer/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "form-control-static");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "form-control-static");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "class", "form-control-static");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var morphs = new Array(10);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
            morphs[6] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[7] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            morphs[8] = dom.createMorphAt(dom.childAt(fragment, [11]), 1, 1);
            morphs[9] = dom.createMorphAt(dom.childAt(fragment, [13]), 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["inventory.labels.item"], [], ["loc", [null, [8, 35], [8, 64]]]], ["content", "model.transferItem.name", ["loc", [null, [9, 37], [9, 64]]]], ["inline", "t", ["inventory.labels.transfer_from"], [], ["loc", [null, [12, 35], [12, 73]]]], ["content", "model.locationName", ["loc", [null, [13, 37], [13, 59]]]], ["inline", "t", ["inventory.labels.quantity_available"], [], ["loc", [null, [16, 35], [16, 78]]]], ["content", "model.quantity", ["loc", [null, [17, 37], [17, 55]]]], ["inline", "select-or-typeahead", [], ["class", "required", "property", "transferLocation", "label", ["subexpr", "t", ["inventory.labels.transfer_to"], [], ["loc", [null, [19, 77], [19, 111]]]], "list", ["subexpr", "@mut", [["get", "warehouseList", ["loc", [null, [19, 117], [19, 130]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.transferLocation", ["loc", [null, [19, 141], [19, 163]]]]], [], []]], ["loc", [null, [19, 4], [19, 166]]]], ["inline", "select-or-typeahead", [], ["property", "transferAisleLocation", "label", ["subexpr", "t", ["inventory.labels.transfer_to_aisle"], [], ["loc", [null, [20, 65], [20, 105]]]], "list", ["subexpr", "@mut", [["get", "aisleLocationList", ["loc", [null, [20, 111], [20, 128]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.transferAisleLocation", ["loc", [null, [20, 139], [20, 166]]]]], [], []]], ["loc", [null, [20, 4], [20, 169]]]], ["inline", "em-input", [], ["property", "adjustmentQuantity", "label", ["subexpr", "t", ["labels.quantity"], [], ["loc", [null, [22, 53], [22, 74]]]], "class", "col-sm-3 required"], ["loc", [null, [22, 6], [22, 102]]]], ["inline", "date-picker", [], ["property", "dateCompleted", "label", ["subexpr", "t", ["inventory.labels.date_tranferred"], [], ["loc", [null, [25, 51], [25, 89]]]], "class", "col-sm-4 required"], ["loc", [null, [25, 6], [25, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/inventory/transfer/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 2], [27, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/inventory/transfer/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [28, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/invoices/add-line-item/controller', ['exports', 'hospitalrun/mixins/billing-categories', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, _hospitalrunMixinsBillingCategories, _ember, _hospitalrunMixinsIsUpdateDisabled) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsBillingCategories['default'], _hospitalrunMixinsIsUpdateDisabled['default'], {
    invoiceController: _ember['default'].inject.controller('invoices'),

    billingCategoryList: _ember['default'].computed.alias('invoiceController.billingCategoryList'),
    editController: _ember['default'].inject.controller('invoices/edit'),
    title: 'Add Line Item',
    updateButtonText: 'Add',
    updateButtonAction: 'add',
    showUpdateButton: true,

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      add: function add() {
        this.get('model').save().then((function (record) {
          this.get('editController').send('addLineItem', record);
        }).bind(this));
      }
    },

    billingCategories: (function () {
      var defaultBillingCategories = this.get('defaultBillingCategories'),
          billingCategoryList = this.get('billingCategoryList');
      if (_ember['default'].isEmpty(billingCategoryList)) {
        return _ember['default'].Object.create({ value: defaultBillingCategories });
      } else {
        return billingCategoryList;
      }
    }).property('billingCategoryList', 'defaultBillingCategories')

  });
});
define("hospitalrun/invoices/add-line-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/invoices/add-line-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["property", "name", "label", ["subexpr", "t", ["labels.name"], [], ["loc", [null, [7, 37], [7, 54]]]], "class", "required"], ["loc", [null, [7, 4], [7, 73]]]], ["inline", "select-or-typeahead", [], ["property", "category", "className", "required", "label", ["subexpr", "t", ["labels.category"], [], ["loc", [null, [9, 12], [9, 33]]]], "list", ["subexpr", "@mut", [["get", "billingCategories", ["loc", [null, [9, 39], [9, 56]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.category", ["loc", [null, [10, 16], [10, 30]]]]], [], []]], ["loc", [null, [8, 4], [11, 6]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/invoices/add-line-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 2], [12, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/invoices/add-line-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [13, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/invoices/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    title: 'Delete Invoice'
  });
});
define("hospitalrun/invoices/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 46
              }
            },
            "moduleName": "hospitalrun/invoices/delete/template.hbs"
          },
          isEmpty: true,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/invoices/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 3, 3);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 2], [6, 58]]]], ["inline", "t", ["billing.alerts.delete_item"], ["item", ["subexpr", "@mut", [["get", "model.displayInvoiceNumber", ["loc", [null, [9, 44], [9, 70]]]]], [], []]], ["loc", [null, [9, 6], [9, 72]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/invoices/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/invoices/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/publish-statuses', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsNumberFormat, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsPublishStatuses, _hospitalrunUtilsSelectValues) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPublishStatuses['default'], {
    invoiceController: _ember['default'].inject.controller('invoices'),
    expenseAccountList: _ember['default'].computed.alias('invoiceController.expenseAccountList.value'),
    patientList: _ember['default'].computed.alias('invoiceController.patientList'),
    pharmacyCharges: [],
    pricingProfiles: _ember['default'].computed.map('invoiceController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),
    supplyCharges: [],
    updateCapability: 'add_invoice',
    wardCharges: [],

    additionalButtons: (function () {
      var buttons = [],
          isValid = this.get('model.isValid'),
          status = this.get('model.status');
      if (isValid && status === 'Draft') {
        buttons.push({
          'class': 'btn btn-default default',
          buttonAction: 'finalizeInvoice',
          buttonIcon: 'glyphicon glyphicon-ok',
          buttonText: 'Invoice Ready'
        });
      }
      buttons.push({
        'class': 'btn btn-default neutral',
        buttonAction: 'printInvoice',
        buttonIcon: 'glyphicon glyphicon-print',
        buttonText: 'Print'
      });
      return buttons;
    }).property('model.isValid', 'model.status'),

    canAddCharge: (function () {
      return this.currentUserCan('add_charge');
    }).property(),

    canAddPayment: (function () {
      return this.currentUserCan('add_payment');
    }).property(),

    pharmacyExpenseAccount: (function () {
      var expenseAccountList = this.get('expenseAccountList');
      if (!_ember['default'].isEmpty(expenseAccountList)) {
        var account = expenseAccountList.find(function (value) {
          if (value.toLowerCase().indexOf('pharmacy') > -1) {
            return true;
          }
        });
        return account;
      }
    }).property('expenseAccountList.value'),

    actions: {
      addItemCharge: function addItemCharge(lineItem) {
        var details = lineItem.get('details');
        var detail = this.store.createRecord('line-item-detail', {
          id: PouchDB.utils.uuid()
        });
        details.addObject(detail);
      },

      addLineItem: function addLineItem(lineItem) {
        var lineItems = this.get('model.lineItems');
        lineItems.addObject(lineItem);
        this.send('update', true);
        this.send('closeModal');
      },

      deleteCharge: function deleteCharge(deleteInfo) {
        this._deleteObject(deleteInfo.itemToDelete, deleteInfo.deleteFrom);
      },

      deleteLineItem: function deleteLineItem(deleteInfo) {
        this._deleteObject(deleteInfo.itemToDelete, this.get('model.lineItems'));
      },

      finalizeInvoice: function finalizeInvoice() {
        var currentInvoice = this.get('model'),
            invoicePayments = currentInvoice.get('payments'),
            paymentsToSave = [];
        currentInvoice.get('patient.payments').then((function (patientPayments) {
          patientPayments.forEach((function (payment) {
            var invoice = payment.get('invoice');
            if (_ember['default'].isEmpty(invoice)) {
              payment.set('invoice', currentInvoice);
              paymentsToSave.push(payment.save());
              invoicePayments.addObject(payment);
            }
          }).bind(this));
          _ember['default'].RSVP.all(paymentsToSave).then((function () {
            this.set('model.status', 'Billed');
            this.send('update');
          }).bind(this));
        }).bind(this));
      },

      printInvoice: function printInvoice() {
        this.transitionToRoute('print.invoice', this.get('model'));
      },

      removePayment: function removePayment(removeInfo) {
        var payments = this.get('model.payments'),
            payment = removeInfo.itemToRemove;
        payment.set('invoice');
        payments.removeObject(removeInfo.itemToRemove);
        this.send('update', true);
        this.send('closeModal');
      },

      showAddLineItem: function showAddLineItem() {
        var newLineItem = this.store.createRecord('billing-line-item', {
          id: PouchDB.utils.uuid()
        });
        this.send('openModal', 'invoices.add-line-item', newLineItem);
      },

      showDeleteItem: function showDeleteItem(itemToDelete, deleteFrom) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deleteCharge',
          deleteFrom: deleteFrom,
          title: 'Delete Charge',
          message: 'Are you sure you want to delete ' + itemToDelete.get('name') + '?',
          itemToDelete: itemToDelete,
          updateButtonAction: 'confirm',
          updateButtonText: 'Ok'
        }));
      },

      showDeleteLineItem: function showDeleteLineItem(item) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deleteLineItem',
          title: 'Delete Line Item',
          message: 'Are you sure you want to delete ' + item.get('name') + '?',
          itemToDelete: item,
          updateButtonAction: 'confirm',
          updateButtonText: 'Ok'
        }));
      },

      showRemovePayment: function showRemovePayment(payment) {
        var message = 'Are you sure you want to remove this payment from this invoice?',
            model = _ember['default'].Object.create({
          itemToRemove: payment
        }),
            title = 'Remove Payment';
        this.displayConfirm(title, message, 'removePayment', model);
      },

      toggleDetails: function toggleDetails(item) {
        item.toggleProperty('showDetails');
      }
    },

    changePaymentProfile: (function () {
      var patient = this.get('model.patient'),
          paymentProfile = this.get('model.paymentProfile');
      if (!_ember['default'].isEmpty(patient) && _ember['default'].isEmpty(paymentProfile)) {
        this.set('model.paymentProfile', patient.get('paymentProfile'));
      }
    }).observes('model.patient'),

    paymentProfileChanged: (function () {
      var discountPercentage = this._getValidNumber(this.get('model.paymentProfile.discountPercentage')),
          originalPaymentProfileId = this.get('model.originalPaymentProfileId'),
          profileId = this.get('model.paymentProfile.id');
      if (profileId !== originalPaymentProfileId) {
        var lineItems = this.get('model.lineItems');
        lineItems.forEach((function (lineItem) {
          var details = lineItem.get('details'),
              lineDiscount = 0;
          details.forEach((function (detail) {
            var pricingOverrides = detail.get('pricingItem.pricingOverrides');
            if (!_ember['default'].isEmpty(pricingOverrides)) {
              var pricingOverride = pricingOverrides.findBy('profile.id', profileId);
              if (!_ember['default'].isEmpty(pricingOverride)) {
                _ember['default'].set(detail, 'price', pricingOverride.get('price'));
              }
            }
          }).bind(this));
          if (discountPercentage > 0) {
            var lineTotal = lineItem.get('total');
            lineDiscount = this._numberFormat(discountPercentage / 100 * lineTotal, true);
            lineItem.set('discount', lineDiscount);
          }
        }).bind(this));
        this.set('model.originalPaymentProfileId', profileId);
      }
    }).observes('model.paymentProfile'),

    visitChanged: (function () {
      var visit = this.get('model.visit'),
          lineItems = this.get('model.lineItems');
      if (!_ember['default'].isEmpty(visit) && _ember['default'].isEmpty(lineItems)) {
        this.set('model.originalPaymentProfileId');
        var promises = this.resolveVisitChildren();
        _ember['default'].RSVP.allSettled(promises, 'Resolved visit children before generating invoice').then((function (results) {
          var chargePromises = this._resolveVisitDescendents(results, 'charges');
          if (!_ember['default'].isEmpty(chargePromises)) {
            var promiseLabel = 'Reloaded charges before generating invoice';
            _ember['default'].RSVP.allSettled(chargePromises, promiseLabel).then((function (chargeResults) {
              var pricingPromises = [];
              chargeResults.forEach(function (result) {
                if (!_ember['default'].isEmpty(result.value)) {
                  var pricingItem = result.value.get('pricingItem');
                  if (!_ember['default'].isEmpty(pricingItem)) {
                    pricingPromises.push(pricingItem.reload());
                  }
                }
              });
              promiseLabel = 'Reloaded pricing items before generating invoice';
              _ember['default'].RSVP.allSettled(pricingPromises, promiseLabel).then((function () {
                this._generateLineItems(visit, results);
                this.paymentProfileChanged();
              }).bind(this));
            }).bind(this));
          } else {
            this._generateLineItems(visit, results);
            this.paymentProfileChanged();
          }
        }).bind(this), function (err) {
          console.log('Error resolving visit children', err);
        });
      }
    }).observes('model.visit'),

    _addPharmacyCharge: function _addPharmacyCharge(charge, medicationItemName) {
      var _this = this;

      return charge.getMedicationDetails(medicationItemName).then(function (medicationDetails) {
        var quantity = charge.get('quantity');
        var pharmacyCharges = _this.get('pharmacyCharges');
        var pharmacyExpenseAccount = _this.get('pharmacyExpenseAccount');
        var pharmacyCharge = _this.store.createRecord('line-item-detail', {
          id: PouchDB.utils.uuid(),
          name: medicationDetails.name,
          quantity: quantity,
          price: medicationDetails.price,
          department: 'Pharmacy',
          expenseAccount: pharmacyExpenseAccount
        });
        pharmacyCharges.addObject(pharmacyCharge);
      });
    },

    _addSupplyCharge: function _addSupplyCharge(charge, department) {
      var supplyCharges = this.get('supplyCharges'),
          supplyCharge = this._createChargeItem(charge, department);
      supplyCharges.addObject(supplyCharge);
    },

    _createChargeItem: function _createChargeItem(charge, department) {
      var chargeItem = this.store.createRecord('line-item-detail', {
        id: PouchDB.utils.uuid(),
        name: charge.get('pricingItem.name'),
        expenseAccount: charge.get('pricingItem.expenseAccount'),
        quantity: charge.get('quantity'),
        price: charge.get('pricingItem.price'),
        department: department,
        pricingItem: charge.get('pricingItem')
      });
      return chargeItem;
    },

    /**
     * Remove the specified object from the specified list, update the model and close the modal.
     * @param objectToDelete {object} - the object to remove
     * @param deleteFrom {Array} - the array to remove the object from.
     */
    _deleteObject: function _deleteObject(objectToDelete, deleteFrom) {
      deleteFrom.removeObject(objectToDelete);
      if (!objectToDelete.get('isNew')) {
        objectToDelete.destroyRecord();
      }
      this.send('update', true);
      this.send('closeModal');
    },

    _mapWardCharge: function _mapWardCharge(charge) {
      return this._createChargeItem(charge, 'Ward');
    },

    _completeBeforeUpdate: function _completeBeforeUpdate(sequence, resolve, reject) {
      var invoiceId = 'inv',
          sequenceValue;
      sequence.incrementProperty('value', 1);
      sequenceValue = sequence.get('value');
      if (sequenceValue < 100000) {
        invoiceId += String('00000' + sequenceValue).slice(-5);
      } else {
        invoiceId += sequenceValue;
      }
      this.set('model.id', invoiceId);
      sequence.save().then(resolve, reject);
    },

    _generateLineItems: function _generateLineItems(visit, visitChildren) {
      var _this2 = this;

      var endDate = visit.get('endDate'),
          imaging = visitChildren[0].value,
          labs = visitChildren[1].value,
          lineDetail,
          lineItem,
          lineItems = this.get('model.lineItems'),
          medication = visitChildren[2].value,
          procedures = visitChildren[3].value,
          startDate = visit.get('startDate'),
          visitCharges = visit.get('charges');
      this.setProperties({
        pharmacyCharges: [],
        supplyCharges: [],
        wardCharges: []
      });
      if (!_ember['default'].isEmpty(endDate) && !_ember['default'].isEmpty(startDate)) {
        endDate = moment(endDate);
        startDate = moment(startDate);
        var stayDays = endDate.diff(startDate, 'days');
        if (stayDays > 1) {
          lineDetail = this.store.createRecord('line-item-detail', {
            id: PouchDB.utils.uuid(),
            name: 'Days',
            quantity: stayDays
          });
          lineItem = this.store.createRecord('billing-line-item', {
            id: PouchDB.utils.uuid(),
            category: 'Hospital Charges',
            name: 'Room/Accomodation'
          });
          lineItem.get('details').addObject(lineDetail);
          lineItems.addObject(lineItem);
        }
      }

      var pharmacyChargePromises = [];
      medication.forEach((function (medicationItem) {
        pharmacyChargePromises.push(this._addPharmacyCharge(medicationItem, 'inventoryItem'));
      }).bind(this));

      this.set('wardCharges', visitCharges.map(this._mapWardCharge.bind(this)));

      procedures.forEach((function (procedure) {
        var charges = procedure.get('charges');
        charges.forEach((function (charge) {
          if (charge.get('medicationCharge')) {
            pharmacyChargePromises.push(this._addPharmacyCharge(charge, 'medication'));
          } else {
            this._addSupplyCharge(charge, 'O.R.');
          }
        }).bind(this));
      }).bind(this));

      labs.forEach((function (lab) {
        if (!_ember['default'].isEmpty(lab.get('labType'))) {
          this._addSupplyCharge(_ember['default'].Object.create({
            pricingItem: lab.get('labType'),
            quantity: 1
          }), 'Lab');
        }
        lab.get('charges').forEach((function (charge) {
          this._addSupplyCharge(charge, 'Lab');
        }).bind(this));
      }).bind(this));

      imaging.forEach((function (imaging) {
        if (!_ember['default'].isEmpty(imaging.get('imagingType'))) {
          this._addSupplyCharge(_ember['default'].Object.create({
            pricingItem: imaging.get('imagingType'),
            quantity: 1
          }), 'Imaging');
        }
        imaging.get('charges').forEach((function (charge) {
          this._addSupplyCharge(charge, 'Imaging');
        }).bind(this));
      }).bind(this));

      _ember['default'].RSVP.all(pharmacyChargePromises).then(function () {
        lineItem = _this2.store.createRecord('billing-line-item', {
          id: PouchDB.utils.uuid(),
          name: 'Pharmacy',
          category: 'Hospital Charges'
        });
        lineItem.get('details').addObjects(_this2.get('pharmacyCharges'));
        lineItems.addObject(lineItem);

        lineItem = _this2.store.createRecord('billing-line-item', {
          id: PouchDB.utils.uuid(),
          name: 'X-ray/Lab/Supplies',
          category: 'Hospital Charges'
        });
        lineItem.get('details').addObjects(_this2.get('supplyCharges'));
        lineItems.addObject(lineItem);

        lineItem = _this2.store.createRecord('billing-line-item', {
          id: PouchDB.utils.uuid(),
          name: 'Ward Items',
          category: 'Hospital Charges'
        });
        lineItem.get('details').addObjects(_this2.get('wardCharges'));
        lineItems.addObject(lineItem);

        lineItem = _this2.store.createRecord('billing-line-item', {
          id: PouchDB.utils.uuid(),
          name: 'Physical Therapy',
          category: 'Hospital Charges'
        });
        lineItems.addObject(lineItem);

        lineItem = _this2.store.createRecord('billing-line-item', {
          id: PouchDB.utils.uuid(),
          name: 'Others/Misc',
          category: 'Hospital Charges'
        });
        lineItems.addObject(lineItem);

        _this2.send('update', true);
      });
    },

    _resolveVisitDescendents: function _resolveVisitDescendents(results, childNameToResolve) {
      var promises = [];
      results.forEach(function (result) {
        if (!_ember['default'].isEmpty(result.value)) {
          result.value.forEach(function (record) {
            var children = record.get(childNameToResolve);
            if (!_ember['default'].isEmpty(children)) {
              children.forEach(function (child) {
                // Make sure children are fully resolved
                promises.push(child.reload());
              });
            }
          });
        }
      });
      return promises;
    },

    beforeUpdate: function beforeUpdate() {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var lineItems = this.get('model.lineItems'),
            savePromises = [];
        lineItems.forEach((function (lineItem) {
          lineItem.get('details').forEach((function (detail) {
            savePromises.push(detail.save());
          }).bind(this));
          savePromises.push(lineItem.save());
        }).bind(this));
        _ember['default'].RSVP.all(savePromises, 'Saved invoice children before saving invoice').then((function () {
          if (this.get('model.isNew')) {
            this.store.find('sequence', 'invoice').then((function (sequence) {
              this._completeBeforeUpdate(sequence, resolve, reject);
            }).bind(this), (function () {
              var store = this.get('store');
              var newSequence = store.push(store.normalize('sequence', {
                id: 'invoice',
                value: 0
              }));
              this._completeBeforeUpdate(newSequence, resolve, reject);
            }).bind(this));
          } else {
            resolve();
          }
        }).bind(this), reject);
      }).bind(this));
    },

    afterUpdate: function afterUpdate() {
      var message = 'The invoice record has been saved.';
      this.displayAlert('Invoice Saved', message);
    }
  });
});
define('hospitalrun/invoices/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({
    editTitle: 'Edit Invoice',
    modelName: 'invoice',
    newTitle: 'New Invoice',

    actions: {
      deleteCharge: function deleteCharge(model) {
        this.controller.send('deleteCharge', model);
      },

      deleteLineItem: function deleteLineItem(model) {
        this.controller.send('deleteLineItem', model);
      },

      removePayment: function removePayment(model) {
        this.controller.send('removePayment', model);
      }
    },

    afterModel: function afterModel(model) {
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var lineItems = model.get('lineItems'),
            promises = [];
        lineItems.forEach(function (lineItem) {
          promises.push(lineItem.reload());
        });
        _ember['default'].RSVP.all(promises, 'Reload billing line items for invoice').then(function (results) {
          var detailPromises = [];
          results.forEach(function (result) {
            result.get('details').forEach(function (detail) {
              detailPromises.push(detail.reload());
            });
          });
          _ember['default'].RSVP.all(detailPromises, 'Reload billing line item details for invoice').then(resolve, reject);
        }, reject);
      });
    },

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        billDate: new Date(),
        status: 'Draft'
      });
    },

    setupController: function setupController(controller, model) {
      model.set('originalPaymentProfileId', model.get('paymentProfile.id'));
      this._super(controller, model);
      var lineItems = model.get('lineItems'),
          promises = [];
      lineItems.forEach(function (lineItem) {
        lineItem.get('details').forEach(function (detail) {
          var pricingItem = detail.get('pricingItem');
          if (!_ember['default'].isEmpty(pricingItem)) {
            promises.push(pricingItem.reload());
          }
        });
      });
    }
  });
});
define("hospitalrun/invoices/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/invoices/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-summary", [], ["patient", ["subexpr", "@mut", [["get", "model.patient", ["loc", [null, [4, 32], [4, 45]]]]], [], []], "returnTo", "invoices.edit", "returnToContext", ["subexpr", "@mut", [["get", "model.id", ["loc", [null, [4, 87], [4, 95]]]]], [], []], "disablePatientLink", ["subexpr", "@mut", [["get", "model.isNew", ["loc", [null, [4, 115], [4, 126]]]]], [], []]], ["loc", [null, [4, 6], [4, 129]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 12,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/invoices/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group col-xs-2");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element17 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element17, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.invoice_id"], [], ["loc", [null, [9, 17], [9, 42]]]], ["content", "model.id", ["loc", [null, [10, 41], [10, 53]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/invoices/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-typeahead", [], ["property", "patientTypeAhead", "label", ["subexpr", "t", ["labels.patient"], [], ["loc", [null, [15, 62], [15, 82]]]], "content", ["subexpr", "@mut", [["get", "patientList", ["loc", [null, [15, 91], [15, 102]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedPatient", ["loc", [null, [15, 113], [15, 128]]]]], [], []], "class", "col-xs-4 required invoice-patient"], ["loc", [null, [15, 8], [15, 172]]]], ["inline", "em-select", [], ["class", "col-xs-4 required invoice-visit", "label", ["subexpr", "t", ["labels.visit"], [], ["loc", [null, [16, 66], [16, 84]]]], "property", "visit", "content", ["subexpr", "@mut", [["get", "patientVisitsForSelect", ["loc", [null, [17, 37], [17, 59]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.visitDescription", "selected", ["subexpr", "@mut", [["get", "model.visit", ["loc", [null, [19, 21], [19, 32]]]]], [], []], "prompt", "Please select a visit"], ["loc", [null, [16, 8], [21, 10]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 6
                },
                "end": {
                  "line": 27,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/invoices/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group col-xs-3");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element16 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element16, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.visit"], [], ["loc", [null, [24, 17], [24, 37]]]], ["content", "model.visit.visitDescription", ["loc", [null, [25, 41], [25, 73]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 41,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/invoices/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element18 = dom.childAt(fragment, [2]);
            var element19 = dom.childAt(fragment, [4]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(element18, 1, 1);
            morphs[2] = dom.createMorphAt(element18, 3, 3);
            morphs[3] = dom.createMorphAt(element18, 5, 5);
            morphs[4] = dom.createMorphAt(element19, 1, 1);
            morphs[5] = dom.createMorphAt(element19, 3, 3);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "unless", [["get", "model.isNew", ["loc", [null, [3, 14], [3, 25]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 15]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [7, 16], [7, 27]]]]], [], 1, null, ["loc", [null, [7, 6], [12, 17]]]], ["inline", "date-picker", [], ["property", "billDate", "label", ["subexpr", "t", ["labels.bill_date"], [], ["loc", [null, [13, 46], [13, 68]]]], "class", "col-xs-2"], ["loc", [null, [13, 6], [13, 87]]]], ["block", "if", [["get", "model.isNew", ["loc", [null, [14, 12], [14, 23]]]]], [], 2, 3, ["loc", [null, [14, 6], [27, 13]]]], ["inline", "em-input", [], ["property", "externalInvoiceNumber", "label", ["subexpr", "t", ["billing.labels.external_invoice_number"], [], ["loc", [null, [30, 56], [30, 100]]]], "class", "col-xs-3 external-invoice-no"], ["loc", [null, [30, 6], [30, 139]]]], ["inline", "em-select", [], ["label", ["subexpr", "t", ["billing.labels.payment_profile"], [], ["loc", [null, [31, 24], [31, 60]]]], "property", "paymentProfile", "content", ["subexpr", "@mut", [["get", "pricingProfiles", ["loc", [null, [33, 16], [33, 31]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.name", "class", "col-xs-3", "prompt", " ", "selected", ["subexpr", "@mut", [["get", "model.paymentProfile", ["loc", [null, [38, 17], [38, 37]]]]], [], []]], ["loc", [null, [31, 6], [39, 8]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 47,
                "column": 10
              },
              "end": {
                "line": 49,
                "column": 10
              }
            },
            "moduleName": "hospitalrun/invoices/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary align-right");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "octicon octicon-plus");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element15 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element15);
            morphs[1] = dom.createMorphAt(element15, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["showAddLineItem"], ["bubbles", false], ["loc", [null, [48, 56], [48, 99]]]], ["inline", "t", ["buttons.add_line_item"], [], ["loc", [null, [48, 142], [48, 171]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 98,
                    "column": 18
                  },
                  "end": {
                    "line": 102,
                    "column": 18
                  }
                },
                "moduleName": "hospitalrun/invoices/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-default warning");
                var el2 = dom.createTextNode("\n                      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "octicon octicon-x");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element9 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element9);
                morphs[1] = dom.createMorphAt(element9, 2, 2);
                return morphs;
              },
              statements: [["element", "action", ["showDeleteLineItem", ["get", "item", ["loc", [null, [99, 90], [99, 94]]]]], ["bubbles", false], ["loc", [null, [99, 60], [99, 111]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [100, 61], [100, 83]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 113,
                      "column": 20
                    },
                    "end": {
                      "line": 117,
                      "column": 20
                    }
                  },
                  "moduleName": "hospitalrun/invoices/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-primary");
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "octicon octicon-plus");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element7 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element7);
                  morphs[1] = dom.createMorphAt(element7, 2, 2);
                  return morphs;
                },
                statements: [["element", "action", ["addItemCharge", ["get", "item", ["loc", [null, [114, 79], [114, 83]]]]], [], ["loc", [null, [114, 54], [114, 85]]]], ["inline", "t", ["admin.roles.capability.add_charge"], [], ["loc", [null, [115, 66], [115, 107]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 149,
                        "column": 22
                      },
                      "end": {
                        "line": 153,
                        "column": 22
                      }
                    },
                    "moduleName": "hospitalrun/invoices/edit/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default warning");
                    var el2 = dom.createTextNode("\n                          ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "octicon octicon-x");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element5 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element5);
                    morphs[1] = dom.createMorphAt(element5, 2, 2);
                    return morphs;
                  },
                  statements: [["element", "action", ["showDeleteItem", ["get", "detail", ["loc", [null, [150, 90], [150, 96]]]], ["get", "item.details", ["loc", [null, [150, 97], [150, 109]]]]], ["bubbles", false], ["loc", [null, [150, 64], [150, 126]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [151, 65], [151, 87]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 120,
                      "column": 16
                    },
                    "end": {
                      "line": 156,
                      "column": 16
                    }
                  },
                  "moduleName": "hospitalrun/invoices/edit/template.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("tr");
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "colspan", "2");
                  dom.setAttribute(el2, "class", "col-xs-6 input-group");
                  var el3 = dom.createTextNode("\n                        ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "class", "col-xs-1");
                  var el3 = dom.createTextNode("\n                      ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "form-group");
                  var el4 = dom.createTextNode("\n                        ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "class", "col-xs-1");
                  var el3 = dom.createTextNode("\n                      ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "form-group");
                  var el4 = dom.createTextNode("\n                        ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "class", "col-xs-1");
                  var el3 = dom.createTextNode("\n                      ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "form-group");
                  var el4 = dom.createTextNode("\n                        ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "class", "col-xs-1 text-right");
                  var el3 = dom.createTextNode("\n                      ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("td");
                  dom.setAttribute(el2, "class", "col-xs-2");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                  ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element6 = dom.childAt(fragment, [1]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
                  morphs[1] = dom.createMorphAt(dom.childAt(element6, [3, 1]), 1, 1);
                  morphs[2] = dom.createMorphAt(dom.childAt(element6, [5, 1]), 1, 1);
                  morphs[3] = dom.createMorphAt(dom.childAt(element6, [7, 1]), 1, 1);
                  morphs[4] = dom.createMorphAt(dom.childAt(element6, [9]), 1, 1);
                  morphs[5] = dom.createMorphAt(dom.childAt(element6, [11]), 1, 1);
                  return morphs;
                },
                statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "detail.name", ["loc", [null, [123, 59], [123, 70]]]]], [], []]], ["loc", [null, [123, 24], [123, 73]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "detail.quantity", ["loc", [null, [127, 59], [127, 74]]]]], [], []]], ["loc", [null, [127, 24], [127, 77]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "detail.price", ["loc", [null, [132, 59], [132, 71]]]]], [], []]], ["loc", [null, [132, 24], [132, 74]]]], ["inline", "select-list", [], ["class", "form-control", "content", ["subexpr", "@mut", [["get", "expenseAccountList", ["loc", [null, [139, 34], [139, 52]]]]], [], []], "value", ["subexpr", "@mut", [["get", "detail.expenseAccount", ["loc", [null, [140, 32], [140, 53]]]]], [], []], "action", ["subexpr", "action", [["subexpr", "mut", [["get", "detail.expenseAccount", ["loc", [null, [141, 46], [141, 67]]]]], [], ["loc", [null, [141, 41], [141, 68]]]]], [], ["loc", [null, [141, 33], [141, 69]]]]], ["loc", [null, [137, 24], [142, 26]]]], ["inline", "number-format", [["get", "detail.amountOwed", ["loc", [null, [146, 38], [146, 55]]]]], [], ["loc", [null, [146, 22], [146, 57]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [149, 28], [149, 40]]]]], [], 0, null, ["loc", [null, [149, 22], [153, 29]]]]],
                locals: ["detail"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 105,
                    "column": 14
                  },
                  "end": {
                    "line": 157,
                    "column": 14
                  }
                },
                "moduleName": "hospitalrun/invoices/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("th");
                dom.setAttribute(el2, "colspan", "2");
                dom.setAttribute(el2, "class", "col-xs-6");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("th");
                dom.setAttribute(el2, "class", "col-xs-1");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("th");
                dom.setAttribute(el2, "class", "col-xs-1");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("th");
                dom.setAttribute(el2, "class", "col-xs-1");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("th");
                dom.setAttribute(el2, "class", "col-xs-1 text-right");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("th");
                dom.setAttribute(el2, "class", "col-xs-2");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                  ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element8 = dom.childAt(fragment, [1]);
                var morphs = new Array(7);
                morphs[0] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element8, [5]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element8, [7]), 0, 0);
                morphs[4] = dom.createMorphAt(dom.childAt(element8, [9]), 0, 0);
                morphs[5] = dom.createMorphAt(dom.childAt(element8, [11]), 1, 1);
                morphs[6] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["labels.name"], [], ["loc", [null, [107, 51], [107, 70]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [108, 39], [108, 62]]]], ["inline", "t", ["labels.price"], [], ["loc", [null, [109, 39], [109, 59]]]], ["inline", "t", ["labels.expense_to"], [], ["loc", [null, [110, 39], [110, 64]]]], ["inline", "t", ["labels.total"], [], ["loc", [null, [111, 50], [111, 70]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [113, 26], [113, 38]]]]], [], 0, null, ["loc", [null, [113, 20], [117, 27]]]], ["block", "each", [["get", "item.details", ["loc", [null, [120, 24], [120, 36]]]]], [], 1, null, ["loc", [null, [120, 16], [156, 25]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 69,
                  "column": 12
                },
                "end": {
                  "line": 158,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/invoices/edit/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "col-xs-5");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "input-group");
              var el4 = dom.createTextNode("\n                      ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              var el5 = dom.createTextNode(" ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                      ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("strong");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "col-xs-1 text-right");
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "col-xs-1");
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "form-group");
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                  ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "col-xs-1");
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "form-group");
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                  ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "col-xs-1");
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "form-group");
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                  ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "col-xs-1 text-right");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "col-xs-2");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element10 = dom.childAt(fragment, [1]);
              var element11 = dom.childAt(element10, [1, 1]);
              var element12 = dom.childAt(element11, [1]);
              var morphs = new Array(10);
              morphs[0] = dom.createAttrMorph(element12, 'class');
              morphs[1] = dom.createElementMorph(element12);
              morphs[2] = dom.createMorphAt(dom.childAt(element11, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
              morphs[4] = dom.createMorphAt(dom.childAt(element10, [5, 1]), 1, 1);
              morphs[5] = dom.createMorphAt(dom.childAt(element10, [7, 1]), 1, 1);
              morphs[6] = dom.createMorphAt(dom.childAt(element10, [9, 1]), 1, 1);
              morphs[7] = dom.createMorphAt(dom.childAt(element10, [11]), 0, 0);
              morphs[8] = dom.createMorphAt(dom.childAt(element10, [13]), 1, 1);
              morphs[9] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["input-group-addon glyphicon ", ["subexpr", "if", [["get", "item.showDetails", ["loc", [null, [73, 68], [73, 84]]]], "glyphicon-minus", "glyphicon-plus"], [], ["loc", [null, [73, 63], [73, 121]]]]]]], ["element", "action", ["toggleDetails", ["get", "item", ["loc", [null, [74, 49], [74, 53]]]]], ["bubbles", false], ["loc", [null, [74, 24], [74, 70]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "item.name", ["loc", [null, [75, 65], [75, 74]]]]], [], []]], ["loc", [null, [75, 30], [75, 77]]]], ["inline", "number-format", [["get", "item.total", ["loc", [null, [79, 34], [79, 44]]]]], [], ["loc", [null, [79, 18], [79, 46]]]], ["inline", "input", [], ["class", "form-control text-right", "value", ["subexpr", "@mut", [["get", "item.discount", ["loc", [null, [83, 66], [83, 79]]]]], [], []]], ["loc", [null, [83, 20], [83, 82]]]], ["inline", "input", [], ["class", "form-control text-right", "value", ["subexpr", "@mut", [["get", "item.nationalInsurance", ["loc", [null, [88, 66], [88, 88]]]]], [], []]], ["loc", [null, [88, 20], [88, 91]]]], ["inline", "input", [], ["class", "form-control text-right", "value", ["subexpr", "@mut", [["get", "item.privateInsurance", ["loc", [null, [93, 66], [93, 87]]]]], [], []]], ["loc", [null, [93, 20], [93, 90]]]], ["inline", "number-format", [["get", "item.amountOwed", ["loc", [null, [96, 64], [96, 79]]]]], [], ["loc", [null, [96, 48], [96, 81]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [98, 24], [98, 36]]]]], [], 0, null, ["loc", [null, [98, 18], [102, 25]]]], ["block", "if", [["get", "item.showDetails", ["loc", [null, [105, 20], [105, 36]]]]], [], 1, null, ["loc", [null, [105, 14], [157, 21]]]]],
            locals: ["item"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 10
              },
              "end": {
                "line": 170,
                "column": 10
              }
            },
            "moduleName": "hospitalrun/invoices/edit/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element13 = dom.childAt(fragment, [5]);
            var element14 = dom.childAt(element13, [1, 1]);
            var morphs = new Array(9);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(element14, 0, 0);
            morphs[3] = dom.createMorphAt(element14, 2, 2);
            morphs[4] = dom.createMorphAt(dom.childAt(element13, [3]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element13, [5]), 0, 0);
            morphs[6] = dom.createMorphAt(dom.childAt(element13, [7]), 0, 0);
            morphs[7] = dom.createMorphAt(dom.childAt(element13, [9]), 0, 0);
            morphs[8] = dom.createMorphAt(dom.childAt(element13, [11]), 0, 0);
            return morphs;
          },
          statements: [["content", "categoryGroup.category", ["loc", [null, [66, 24], [66, 50]]]], ["block", "each", [["get", "categoryGroup.items", ["loc", [null, [69, 20], [69, 39]]]]], [], 0, null, ["loc", [null, [69, 12], [158, 21]]]], ["inline", "t", ["labels.total"], [], ["loc", [null, [161, 24], [161, 44]]]], ["content", "categoryGroup.category", ["loc", [null, [161, 45], [161, 71]]]], ["inline", "number-format", [["get", "categoryGroup.total", ["loc", [null, [163, 53], [163, 72]]]]], [], ["loc", [null, [163, 37], [163, 74]]]], ["inline", "number-format", [["get", "categoryGroup.discount", ["loc", [null, [164, 53], [164, 75]]]]], [], ["loc", [null, [164, 37], [164, 77]]]], ["inline", "number-format", [["get", "categoryGroup.nationalInsurance", ["loc", [null, [165, 53], [165, 84]]]]], [], ["loc", [null, [165, 37], [165, 86]]]], ["inline", "number-format", [["get", "categoryGroup.privateInsurance", ["loc", [null, [166, 53], [166, 83]]]]], [], ["loc", [null, [166, 37], [166, 85]]]], ["inline", "number-format", [["get", "categoryGroup.amountOwed", ["loc", [null, [167, 53], [167, 77]]]]], [], ["loc", [null, [167, 37], [167, 80]]]]],
          locals: ["categoryGroup"],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 216,
                "column": 8
              },
              "end": {
                "line": 218,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/invoices/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary align-right");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "octicon octicon-plus");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element4);
            morphs[1] = dom.createMorphAt(element4, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["showAddPayment", ["get", "model", ["loc", [null, [217, 80], [217, 85]]]]], ["bubbles", false], ["loc", [null, [217, 54], [217, 102]]]], ["inline", "t", ["admin.roles.capability.add_payment"], [], ["loc", [null, [217, 145], [217, 187]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 239,
                    "column": 14
                  },
                  "end": {
                    "line": 243,
                    "column": 14
                  }
                },
                "moduleName": "hospitalrun/invoices/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-default warning");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "octicon octicon-x");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 2, 2);
                return morphs;
              },
              statements: [["element", "action", ["showRemovePayment", ["get", "payment", ["loc", [null, [240, 85], [240, 92]]]]], ["bubbles", false], ["loc", [null, [240, 56], [240, 109]]]], ["inline", "t", ["buttons.remove"], [], ["loc", [null, [241, 57], [241, 79]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 236,
                  "column": 12
                },
                "end": {
                  "line": 245,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/invoices/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "btn btn-default neutral");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(element1, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createMorphAt(element2, 0, 0);
              morphs[2] = dom.createMorphAt(element1, 3, 3);
              return morphs;
            },
            statements: [["element", "action", ["showEditPayment", ["get", "payment", ["loc", [null, [238, 81], [238, 88]]]]], ["bubbles", false], ["loc", [null, [238, 54], [238, 106]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [238, 107], [238, 126]]]], ["block", "if", [["get", "payment.canRemovePayment", ["loc", [null, [239, 20], [239, 44]]]]], [], 0, null, ["loc", [null, [239, 14], [243, 21]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 230,
                "column": 8
              },
              "end": {
                "line": 247,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/invoices/edit/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createElementMorph(element3);
            morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
            morphs[5] = dom.createMorphAt(element3, 9, 9);
            return morphs;
          },
          statements: [["element", "action", ["showEditPayment", ["get", "payment", ["loc", [null, [231, 41], [231, 48]]]]], [], ["loc", [null, [231, 14], [231, 50]]]], ["inline", "date-format", [["get", "payment.datePaid", ["loc", [null, [232, 30], [232, 46]]]]], [], ["loc", [null, [232, 16], [232, 48]]]], ["content", "payment.amount", ["loc", [null, [233, 16], [233, 34]]]], ["content", "payment.paymentType", ["loc", [null, [234, 16], [234, 39]]]], ["content", "payment.notes", ["loc", [null, [235, 16], [235, 33]]]], ["block", "if", [["get", "canAddPayment", ["loc", [null, [236, 18], [236, 31]]]]], [], 0, null, ["loc", [null, [236, 12], [245, 19]]]]],
          locals: ["payment"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 251,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/invoices/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "class", "form-inline");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel detail-section");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "panel-heading");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h3");
          dom.setAttribute(el4, "class", "panel-title");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "panel-body detail-section-content");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("table");
          dom.setAttribute(el4, "class", "table");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("tr");
          dom.setAttribute(el5, "class", "table-header");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("th");
          dom.setAttribute(el6, "class", "col-xs-5");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("th");
          dom.setAttribute(el6, "class", "col-xs-1 text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("th");
          dom.setAttribute(el6, "class", "col-xs-1 text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("th");
          dom.setAttribute(el6, "class", "col-xs-1 text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("th");
          dom.setAttribute(el6, "class", "col-xs-1 text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("th");
          dom.setAttribute(el6, "class", "col-xs-1 text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("th");
          dom.setAttribute(el6, "class", "col-xs-2 text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("tr");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          var el7 = dom.createTextNode("\n              ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("strong");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "class", "text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "class", "text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "class", "text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "class", "text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "class", "text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("tr");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          var el7 = dom.createTextNode("\n              ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("strong");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "colspan", "4");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "class", "text-right");
          var el7 = dom.createTextNode("-");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("tr");
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          var el7 = dom.createTextNode("\n              ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("strong");
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          var el8 = dom.createTextNode(" ");
          dom.appendChild(el7, el8);
          var el8 = dom.createComment("");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "colspan", "4");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.setAttribute(el6, "class", "text-right");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("td");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel detail-section");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body detail-section-content");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel detail-section");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body detail-section-content");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          dom.setAttribute(el4, "class", "table-header");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element20 = dom.childAt(fragment, [2, 1]);
          var element21 = dom.childAt(element20, [1, 1]);
          var element22 = dom.childAt(element20, [3, 1]);
          var element23 = dom.childAt(element22, [1]);
          var element24 = dom.childAt(element22, [5]);
          var element25 = dom.childAt(element22, [7]);
          var element26 = dom.childAt(element22, [9]);
          var element27 = dom.childAt(element26, [1, 1]);
          var element28 = dom.childAt(fragment, [4]);
          var element29 = dom.childAt(fragment, [6]);
          var element30 = dom.childAt(element29, [1, 1]);
          var element31 = dom.childAt(element29, [3, 1]);
          var element32 = dom.childAt(element31, [1]);
          var morphs = new Array(32);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(element21, 1, 1);
          morphs[2] = dom.createMorphAt(element21, 3, 3);
          morphs[3] = dom.createMorphAt(dom.childAt(element23, [1]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element23, [3]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element23, [5]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element23, [7]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element23, [9]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element23, [11]), 0, 0);
          morphs[9] = dom.createMorphAt(dom.childAt(element23, [13]), 0, 0);
          morphs[10] = dom.createMorphAt(element22, 3, 3);
          morphs[11] = dom.createMorphAt(dom.childAt(element24, [1, 1]), 0, 0);
          morphs[12] = dom.createMorphAt(dom.childAt(element24, [3]), 0, 0);
          morphs[13] = dom.createMorphAt(dom.childAt(element24, [5]), 0, 0);
          morphs[14] = dom.createMorphAt(dom.childAt(element24, [7]), 0, 0);
          morphs[15] = dom.createMorphAt(dom.childAt(element24, [9]), 0, 0);
          morphs[16] = dom.createMorphAt(dom.childAt(element24, [11]), 0, 0);
          morphs[17] = dom.createMorphAt(dom.childAt(element25, [1, 1]), 0, 0);
          morphs[18] = dom.createMorphAt(dom.childAt(element25, [5]), 1, 1);
          morphs[19] = dom.createMorphAt(element27, 0, 0);
          morphs[20] = dom.createMorphAt(element27, 2, 2);
          morphs[21] = dom.createMorphAt(dom.childAt(element26, [5]), 0, 0);
          morphs[22] = dom.createMorphAt(dom.childAt(element28, [1, 1]), 1, 1);
          morphs[23] = dom.createMorphAt(dom.childAt(element28, [3]), 1, 1);
          morphs[24] = dom.createMorphAt(element30, 1, 1);
          morphs[25] = dom.createMorphAt(element30, 3, 3);
          morphs[26] = dom.createMorphAt(dom.childAt(element32, [1]), 0, 0);
          morphs[27] = dom.createMorphAt(dom.childAt(element32, [3]), 0, 0);
          morphs[28] = dom.createMorphAt(dom.childAt(element32, [5]), 0, 0);
          morphs[29] = dom.createMorphAt(dom.childAt(element32, [7]), 0, 0);
          morphs[30] = dom.createMorphAt(dom.childAt(element32, [9]), 0, 0);
          morphs[31] = dom.createMorphAt(element31, 3, 3);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [41, 14]]]], ["inline", "t", ["labels.line_items"], [], ["loc", [null, [46, 10], [46, 35]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [47, 16], [47, 28]]]]], [], 1, null, ["loc", [null, [47, 10], [49, 17]]]], ["inline", "t", ["labels.description"], [], ["loc", [null, [55, 33], [55, 59]]]], ["inline", "t", ["billing.labels.actual_charges"], [], ["loc", [null, [56, 44], [56, 81]]]], ["inline", "t", ["labels.discount"], [], ["loc", [null, [57, 44], [57, 67]]]], ["inline", "t", ["billing.labels.phil_health"], [], ["loc", [null, [58, 44], [58, 78]]]], ["inline", "t", ["billing.labels.hmo_com"], [], ["loc", [null, [59, 44], [59, 74]]]], ["inline", "t", ["labels.excess"], [], ["loc", [null, [60, 44], [60, 65]]]], ["inline", "t", ["labels.action"], [], ["loc", [null, [61, 44], [61, 65]]]], ["block", "each", [["get", "model.lineItemsByCategory", ["loc", [null, [63, 18], [63, 43]]]]], [], 2, null, ["loc", [null, [63, 10], [170, 19]]]], ["inline", "t", ["labels.total"], [], ["loc", [null, [173, 22], [173, 42]]]], ["inline", "number-format", [["get", "model.total", ["loc", [null, [175, 51], [175, 62]]]]], [], ["loc", [null, [175, 35], [175, 64]]]], ["inline", "number-format", [["get", "model.discount", ["loc", [null, [176, 51], [176, 65]]]]], [], ["loc", [null, [176, 35], [176, 67]]]], ["inline", "number-format", [["get", "model.nationalInsurance", ["loc", [null, [177, 51], [177, 74]]]]], [], ["loc", [null, [177, 35], [177, 76]]]], ["inline", "number-format", [["get", "model.privateInsurance", ["loc", [null, [178, 51], [178, 73]]]]], [], ["loc", [null, [178, 35], [178, 75]]]], ["inline", "number-format", [["get", "model.patientResponsibility", ["loc", [null, [179, 51], [179, 78]]]]], [], ["loc", [null, [179, 35], [179, 80]]]], ["inline", "t", ["billing.labels.payments_deposits"], [], ["loc", [null, [184, 22], [184, 62]]]], ["inline", "number-format", [["get", "model.paidTotal", ["loc", [null, [187, 52], [187, 67]]]]], [], ["loc", [null, [187, 36], [187, 69]]]], ["inline", "t", ["labels.grand"], [], ["loc", [null, [192, 22], [192, 42]]]], ["inline", "t", ["labels.total"], [], ["loc", [null, [192, 43], [192, 63]]]], ["inline", "number-format", [["get", "model.remainingBalance", ["loc", [null, [195, 51], [195, 73]]]]], [], ["loc", [null, [195, 35], [195, 75]]]], ["inline", "t", ["labels.remarks"], [], ["loc", [null, [205, 8], [205, 30]]]], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "model.remarks", ["loc", [null, [209, 44], [209, 57]]]]], [], []]], ["loc", [null, [209, 6], [209, 59]]]], ["inline", "t", ["labels.payments"], [], ["loc", [null, [215, 8], [215, 31]]]], ["block", "if", [["get", "canAddPayment", ["loc", [null, [216, 14], [216, 27]]]]], [], 3, null, ["loc", [null, [216, 8], [218, 15]]]], ["inline", "t", ["labels.date"], [], ["loc", [null, [224, 14], [224, 33]]]], ["inline", "t", ["labels.amount"], [], ["loc", [null, [225, 14], [225, 35]]]], ["inline", "t", ["labels.type"], [], ["loc", [null, [226, 14], [226, 33]]]], ["inline", "t", ["labels.notes"], [], ["loc", [null, [227, 14], [227, 34]]]], ["inline", "t", ["labels.action"], [], ["loc", [null, [228, 14], [228, 35]]]], ["block", "each", [["get", "model.payments", ["loc", [null, [230, 16], [230, 30]]]]], [], 4, null, ["loc", [null, [230, 8], [247, 17]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 252,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/invoices/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [251, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/invoices/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({
    addPermission: 'add_invoice',
    deletePermission: 'delete_invoice',
    canAddPayment: (function () {
      return this.currentUserCan('add_payment');
    }).property(),
    startKey: [],
    queryParams: ['startKey', 'status']
  });
});
define('hospitalrun/invoices/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    modelName: 'invoice',
    pageTitle: 'Invoice Listing',

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var billDateAsTime = item.get('billDateAsTime'),
          id = this._getPouchIdFromItem(item),
          searchStatus = item.get('status');
      return [searchStatus, billDateAsTime, id];
    },

    _modelQueryParams: function _modelQueryParams(params) {
      var queryParams,
          maxId = this._getMaxPouchId(),
          maxValue = this.get('maxValue'),
          minId = this._getMinPouchId(),
          searchStatus = params.status;
      if (_ember['default'].isEmpty(searchStatus)) {
        searchStatus = 'Billed';
      }
      this.set('pageTitle', searchStatus + ' Invoices');
      queryParams = {
        options: {
          startkey: [searchStatus, null, minId],
          endkey: [searchStatus, maxValue, maxId]
        },
        mapReduce: 'invoice_by_status'
      };

      if (searchStatus === 'All') {
        delete queryParams.options.startkey;
        delete queryParams.options.endkey;
      }
      return queryParams;
    },

    queryParams: {
      startKey: { refreshModel: true },
      status: { refreshModel: true }
    }
  });
});
define("hospitalrun/invoices/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/invoices/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [12, 14], [12, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 26,
                        "column": 16
                      },
                      "end": {
                        "line": 30,
                        "column": 16
                      }
                    },
                    "moduleName": "hospitalrun/invoices/index/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default neutral");
                    var el2 = dom.createTextNode("\n                    ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "octicon octicon-plus");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                  ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element4 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element4);
                    morphs[1] = dom.createMorphAt(element4, 3, 3);
                    return morphs;
                  },
                  statements: [["element", "action", ["showAddPayment", ["get", "invoice", ["loc", [null, [27, 84], [27, 91]]]]], ["bubbles", false], ["loc", [null, [27, 58], [27, 108]]]], ["inline", "t", ["admin.roles.capability.add_payment"], [], ["loc", [null, [28, 63], [28, 105]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 31,
                        "column": 16
                      },
                      "end": {
                        "line": 33,
                        "column": 16
                      }
                    },
                    "moduleName": "hospitalrun/invoices/index/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default neutral");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element3);
                    morphs[1] = dom.createMorphAt(element3, 0, 0);
                    return morphs;
                  },
                  statements: [["element", "action", ["editItem", ["get", "invoice", ["loc", [null, [32, 78], [32, 85]]]]], ["bubbles", false], ["loc", [null, [32, 58], [32, 102]]]], ["inline", "t", ["buttons.edit"], [], ["loc", [null, [32, 103], [32, 123]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 34,
                        "column": 16
                      },
                      "end": {
                        "line": 36,
                        "column": 16
                      }
                    },
                    "moduleName": "hospitalrun/invoices/index/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default warning");
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "octicon octicon-x");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element2 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element2);
                    morphs[1] = dom.createMorphAt(element2, 2, 2);
                    return morphs;
                  },
                  statements: [["element", "action", ["deleteItem", ["get", "invoice", ["loc", [null, [35, 80], [35, 87]]]]], ["bubbles", false], ["loc", [null, [35, 58], [35, 104]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [35, 145], [35, 167]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 25,
                      "column": 14
                    },
                    "end": {
                      "line": 37,
                      "column": 14
                    }
                  },
                  "moduleName": "hospitalrun/invoices/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "canAddPayment", ["loc", [null, [26, 22], [26, 35]]]]], [], 0, null, ["loc", [null, [26, 16], [30, 23]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [31, 22], [31, 28]]]]], [], 1, null, ["loc", [null, [31, 16], [33, 23]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [34, 22], [34, 31]]]]], [], 2, null, ["loc", [null, [34, 16], [36, 23]]]]],
                locals: [],
                templates: [child0, child1, child2]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 12
                  },
                  "end": {
                    "line": 38,
                    "column": 12
                  }
                },
                "moduleName": "hospitalrun/invoices/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "showActions", ["loc", [null, [25, 20], [25, 31]]]]], [], 0, null, ["loc", [null, [25, 14], [37, 21]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/invoices/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              dom.setAttribute(el1, "class", "clickable");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "invoice-number");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" - ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("br");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var element6 = dom.childAt(element5, [7]);
              var morphs = new Array(10);
              morphs[0] = dom.createElementMorph(element5);
              morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(element6, 0, 0);
              morphs[5] = dom.createMorphAt(element6, 2, 2);
              morphs[6] = dom.createMorphAt(element6, 5, 5);
              morphs[7] = dom.createMorphAt(dom.childAt(element5, [9]), 0, 0);
              morphs[8] = dom.createMorphAt(dom.childAt(element5, [11]), 0, 0);
              morphs[9] = dom.createMorphAt(dom.childAt(element5, [13]), 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["editItem", ["get", "invoice", ["loc", [null, [16, 32], [16, 39]]]]], [], ["loc", [null, [16, 12], [16, 41]]]], ["content", "invoice.displayInvoiceNumber", ["loc", [null, [17, 37], [17, 69]]]], ["inline", "date-format", [["get", "invoice.billDate", ["loc", [null, [18, 28], [18, 44]]]]], [], ["loc", [null, [18, 14], [18, 46]]]], ["content", "invoice.status", ["loc", [null, [19, 14], [19, 32]]]], ["content", "invoice.patient.displayName", ["loc", [null, [20, 14], [20, 45]]]], ["content", "invoice.patient.displayPatientId", ["loc", [null, [20, 48], [20, 84]]]], ["content", "invoice.visit.primaryDiagnosis", ["loc", [null, [20, 89], [20, 123]]]], ["content", "invoice.total", ["loc", [null, [21, 14], [21, 31]]]], ["content", "invoice.remainingBalance", ["loc", [null, [22, 14], [22, 42]]]], ["block", "unless", [["get", "invoice.paidFlag", ["loc", [null, [24, 22], [24, 38]]]]], [], 0, null, ["loc", [null, [24, 12], [38, 23]]]]],
            locals: ["invoice"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/invoices/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1]);
            var element8 = dom.childAt(element7, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element8, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element8, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element8, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element8, [11]), 0, 0);
            morphs[6] = dom.createMorphAt(element8, 13, 13);
            morphs[7] = dom.createMorphAt(element7, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.number"], [], ["loc", [null, [5, 12], [5, 33]]]], ["inline", "t", ["labels.bill_date"], [], ["loc", [null, [6, 12], [6, 36]]]], ["inline", "t", ["labels.status"], [], ["loc", [null, [7, 12], [7, 33]]]], ["inline", "t", ["labels.patient"], [], ["loc", [null, [8, 12], [8, 34]]]], ["inline", "t", ["labels.total"], [], ["loc", [null, [9, 12], [9, 32]]]], ["inline", "t", ["labels.balance_due"], [], ["loc", [null, [10, 12], [10, 38]]]], ["block", "if", [["get", "showActions", ["loc", [null, [11, 14], [11, 25]]]]], [], 0, null, ["loc", [null, [11, 8], [13, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [15, 14], [15, 19]]]]], [], 1, null, ["loc", [null, [15, 6], [41, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 2
              },
              "end": {
                "line": 47,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/invoices/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "href", "#");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var element1 = dom.childAt(element0, [2]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element0, 0, 0);
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["inline", "t", ["billing.alerts.no_invoice_found"], [], ["loc", [null, [45, 9], [45, 48]]]], ["element", "action", ["newItem"], [], ["loc", [null, [45, 61], [45, 81]]]], ["inline", "t", ["billing.buttons.create_invoice"], [], ["loc", [null, [45, 82], [45, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/invoices/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [47, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/invoices/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [48, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/invoices/payment/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsPatientSubmodule) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {
    cancelAction: 'closeModal',
    findPatientVisits: false,
    invoiceController: _ember['default'].inject.controller('invoices'),
    newPayment: false,

    expenseAccountList: _ember['default'].computed.alias('invoiceController.expenseAccountList'),
    patientList: _ember['default'].computed.alias('invoiceController.patientList'),

    _finishUpdate: function _finishUpdate(message, title) {
      this.send('closeModal');
      this.displayAlert(title, message);
    },

    currentPatient: (function () {
      var type = this.get('model.paymentType');
      if (type === 'Deposit') {
        return this.get('model.patient');
      } else {
        return this.get('model.invoice.patient');
      }
    }).property('model.patient', 'model.paymentType', 'model.invoice.patient'),

    title: (function () {
      var isNew = this.get('model.isNew'),
          type = this.get('model.paymentType');
      if (isNew) {
        return 'Add ' + type;
      } else {
        return 'Edit ' + type;
      }
    }).property('model.isNew', 'model.paymentType'),

    selectPatient: (function () {
      var isNew = this.get('model.isNew'),
          type = this.get('model.paymentType');
      return isNew && type === 'Deposit';
    }).property('model.isNew', 'model.paymentType'),

    beforeUpdate: function beforeUpdate() {
      if (this.get('model.isNew')) {
        this.set('newPayment', true);
      } else {
        this.set('newPayment', false);
      }
      var patient = this.get('currentPatient');
      this.set('model.charityPatient', patient.get('patientType') === 'Charity');
      return _ember['default'].RSVP.resolve();
    },

    afterUpdate: function afterUpdate() {
      this.get('model').save().then((function (record) {
        if (this.get('newPayment')) {
          var patient = this.get('currentPatient');
          patient.get('payments').then((function (payments) {
            payments.addObject(record);
            patient.save().then((function () {
              if (record.get('paymentType') === 'Deposit') {
                var message = 'A deposit of ' + record.get('amount') + ' was added for patient ' + patient.get('displayName');
                this._finishUpdate(message, 'Deposit Added');
              } else {
                var invoice = this.get('model.invoice');
                invoice.addPayment(record);
                invoice.save().then((function () {
                  var message = 'A payment of ' + record.get('amount') + ' was added to invoice ' + invoice.get('id');
                  this._finishUpdate(message, 'Payment Added');
                }).bind(this));
              }
            }).bind(this));
          }).bind(this));
        } else {
          this.send('closeModal');
        }
      }).bind(this));
    }
  });
});
define("hospitalrun/invoices/payment/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 9,
                    "column": 6
                  },
                  "end": {
                    "line": 11,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/invoices/payment/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "patient-typeahead", [], ["property", "patientTypeAhead", "label", ["subexpr", "t", ["labels.patient"], [], ["loc", [null, [10, 62], [10, 82]]]], "content", ["subexpr", "@mut", [["get", "patientList", ["loc", [null, [10, 91], [10, 102]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedPatient", ["loc", [null, [10, 113], [10, 128]]]]], [], []], "class", "required payment-patient"], ["loc", [null, [10, 8], [10, 163]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 6
                  },
                  "end": {
                    "line": 16,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/invoices/payment/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "form-group");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("label");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("p");
                dom.setAttribute(el2, "class", "form-control-static");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
                return morphs;
              },
              statements: [["inline", "t", ["labels.patient"], [], ["loc", [null, [13, 17], [13, 39]]]], ["content", "model.invoice.patient.displayName", ["loc", [null, [14, 41], [14, 78]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/invoices/payment/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "selectPatient", ["loc", [null, [9, 12], [9, 25]]]]], [], 0, 1, ["loc", [null, [9, 6], [16, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/invoices/payment/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.isNew", ["loc", [null, [8, 10], [8, 21]]]]], [], 0, null, ["loc", [null, [8, 4], [17, 11]]]], ["inline", "em-input", [], ["property", "amount", "label", ["subexpr", "t", ["labels.amount"], [], ["loc", [null, [18, 39], [18, 58]]]], "class", "required payment-amount"], ["loc", [null, [18, 4], [18, 92]]]], ["inline", "date-picker", [], ["property", "datePaid", "label", ["subexpr", "t", ["labels.date_paid"], [], ["loc", [null, [19, 44], [19, 66]]]], "maxDate", "now", "class", "required"], ["loc", [null, [19, 4], [19, 99]]]], ["inline", "select-or-typeahead", [], ["property", "expenseAccount", "label", ["subexpr", "t", ["labels.credit_to"], [], ["loc", [null, [20, 58], [20, 80]]]], "list", ["subexpr", "@mut", [["get", "expenseAccountList", ["loc", [null, [20, 86], [20, 104]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.expenseAccount", ["loc", [null, [20, 115], [20, 135]]]]], [], []]], ["loc", [null, [20, 4], [20, 138]]]], ["inline", "em-text", [], ["property", "notes", "label", ["subexpr", "t", ["labels.notes"], [], ["loc", [null, [21, 37], [21, 55]]]]], ["loc", [null, [21, 4], [21, 57]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/invoices/payment/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [7, 2], [22, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/invoices/payment/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []], "updateButtonClass", "update-payment-btn"], 0, null, ["loc", [null, [1, 0], [23, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/invoices/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/patient-list-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsModalHelper, _hospitalrunMixinsPatientListRoute) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsPatientListRoute['default'], {
    addCapability: 'add_invoice',
    currentScreenTitle: 'Invoices',
    editTitle: 'Edit Invoice',
    newTitle: 'New Invoice',
    moduleName: 'invoices',
    newButtonText: '+ new invoice',
    sectionTitle: 'Invoices',

    additionalButtons: (function () {
      if (this.currentUserCan('add_payment')) {
        return [{
          'class': 'btn btn-default',
          buttonText: '+ add deposit',
          buttonAction: 'showAddDeposit'
        }];
      }
    }).property(),

    additionalModels: [{
      name: 'billingCategoryList',
      findArgs: ['lookup', 'billing_categories']
    }, {
      name: 'expenseAccountList',
      findArgs: ['lookup', 'expense_account_list']
    }, {
      name: 'pricingProfiles',
      findArgs: ['price-profile']
    }],

    actions: {
      showAddDeposit: function showAddDeposit() {
        var payment = this.store.createRecord('payment', {
          paymentType: 'Deposit',
          datePaid: new Date()
        });
        this.send('openModal', 'invoices.payment', payment);
      },

      showAddPayment: function showAddPayment(invoice) {
        var payment = this.store.createRecord('payment', {
          invoice: invoice,
          paymentType: 'Payment',
          datePaid: new Date()
        });
        this.send('openModal', 'invoices.payment', payment);
      },

      showEditPayment: function showEditPayment(payment) {
        if (this.currentUserCan('add_payment')) {
          this.send('openModal', 'invoices.payment', payment);
        }
      }
    },

    subActions: (function () {
      var actions = [{
        text: 'Billed',
        linkTo: 'invoices.index',
        statusQuery: 'Billed'
      }];
      if (this.currentUserCan('add_invoice')) {
        actions.push({
          text: 'Drafts',
          linkTo: 'invoices.index',
          statusQuery: 'Draft'
        });
        actions.push({
          text: 'All Invoices',
          linkTo: 'invoices.index',
          statusQuery: 'All'
        });
      }
      actions.push({
        text: 'Paid',
        linkTo: 'invoices.index',
        statusQuery: 'Paid'
      });
      return actions;
    }).property()

  });
});
define('hospitalrun/invoices/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {
  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({
    moduleName: 'invoices',
    searchKeys: [{
      name: 'externalInvoiceNumber',
      type: 'contains'
    }, {
      name: 'patientInfo',
      type: 'contains'
    }],
    searchModel: 'invoice'
  });
});
define("hospitalrun/invoices/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/invoices/search/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["invoices/index"], [], ["loc", [null, [2, 4], [2, 32]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 19
          }
        },
        "moduleName": "hospitalrun/invoices/search/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "search-listing", [], ["newButtonText", "New Invoice", "allButtonText", "All Invoices"], 0, null, ["loc", [null, [1, 0], [3, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {
  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({
    labsEdit: _ember['default'].inject.controller('labs/edit'),
    cancelAction: 'closeModal',
    newPricingItem: false,
    requestingController: _ember['default'].computed.alias('controllers.labs/edit'),
    pricingList: _ember['default'].computed.alias('controllers.labs/edit.chargesPricingList')
  });
});
define("hospitalrun/labs/charge/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/labs/charge/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["procedures/charge"], [], ["loc", [null, [6, 2], [6, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/charge/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [7, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({
    startKey: [],
    showActions: false
  });
});
define('hospitalrun/labs/completed/labs-completed-list-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tr'
  });
});
define("hospitalrun/labs/completed/labs-completed-list-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/completed/labs-completed-list-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "requested-date");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "lab-date");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "patient");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "requested-by");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "lab-type");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "result");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "notes");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [10]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [12]), 0, 0);
        return morphs;
      },
      statements: [["inline", "date-format", [["get", "lab.requestedDate", ["loc", [null, [1, 41], [1, 58]]]]], [], ["loc", [null, [1, 27], [1, 60]]]], ["inline", "date-format", [["get", "lab.labDate", ["loc", [null, [2, 35], [2, 46]]]]], [], ["loc", [null, [2, 21], [2, 48]]]], ["content", "lab.patient.displayName", ["loc", [null, [3, 20], [3, 47]]]], ["content", "lab.requestedBy", ["loc", [null, [4, 25], [4, 44]]]], ["content", "lab.labType.name", ["loc", [null, [5, 21], [5, 41]]]], ["content", "lab.result", ["loc", [null, [6, 19], [6, 33]]]], ["content", "lab.notes", ["loc", [null, [7, 18], [7, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/labs/completed/route', ['exports', 'hospitalrun/labs/index/route', 'ember-i18n'], function (exports, _hospitalrunLabsIndexRoute, _emberI18n) {
  exports['default'] = _hospitalrunLabsIndexRoute['default'].extend({
    pageTitle: (0, _emberI18n.translationMacro)('labs.completed_title'),
    searchStatus: 'Completed'
  });
});
define("hospitalrun/labs/completed/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 15,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/labs/completed/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "labs/completed/labs-completed-list-item", [], ["lab", ["subexpr", "@mut", [["get", "lab", ["loc", [null, [14, 54], [14, 57]]]]], [], []]], ["loc", [null, [14, 8], [14, 59]]]]],
            locals: ["lab"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/labs/completed/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element1, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element1, [11]), 0, 0);
            morphs[6] = dom.createMorphAt(dom.childAt(element1, [13]), 0, 0);
            morphs[7] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.date_requested"], [], ["loc", [null, [5, 12], [5, 41]]]], ["inline", "t", ["labels.date_completed"], [], ["loc", [null, [6, 12], [6, 41]]]], ["inline", "t", ["labels.patient"], [], ["loc", [null, [7, 12], [7, 34]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [8, 12], [8, 39]]]], ["inline", "t", ["labs.labels.lab_type"], [], ["loc", [null, [9, 12], [9, 40]]]], ["inline", "t", ["labels.results"], [], ["loc", [null, [10, 12], [10, 34]]]], ["inline", "t", ["labels.notes"], [], ["loc", [null, [11, 12], [11, 32]]]], ["block", "each", [["get", "model", ["loc", [null, [13, 14], [13, 19]]]]], [], 0, null, ["loc", [null, [13, 6], [15, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/labs/completed/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", ["labs.messages.no_completed"], [], ["loc", [null, [19, 9], [19, 43]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/labs/completed/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], 0, 1, ["loc", [null, [2, 2], [21, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/completed/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [22, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {
    title: (0, _emberI18n.translationMacro)('labs.delete_title'),

    actions: {
      'delete': function _delete() {
        this.removeChildFromVisit(this.get('model'), 'labs').then((function () {
          this.get('model').destroyRecord().then((function () {
            this.send('closeModal');
          }).bind(this));
        }).bind(this));
      }
    }
  });
});
define("hospitalrun/labs/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/labs/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["labs.messages.confirm_deletion"], [], ["loc", [null, [8, 4], [8, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {
    labsController: _ember['default'].inject.controller('labs'),
    chargePricingCategory: 'Lab',
    chargeRoute: 'labs.charge',
    selectedLabType: null,

    canComplete: (function () {
      var isNew = this.get('model.isNew'),
          labTypeName = this.get('model.labTypeName'),
          selectedLabType = this.get('selectedLabType');
      if (isNew && (_ember['default'].isEmpty(labTypeName) || _ember['default'].isArray(selectedLabType) && selectedLabType.length > 1)) {
        return false;
      } else {
        return this.currentUserCan('complete_lab');
      }
    }).property('selectedLabType.[]', 'model.labTypeName'),

    actions: {
      completeLab: function completeLab() {
        this.set('model.status', 'Completed');
        this.get('model').validate().then((function () {
          if (this.get('model.isValid')) {
            this.set('model.labDate', new Date());
            this.send('update');
          }
        }).bind(this))['catch'](_ember['default'].K);
      },

      /**
       * Update the model and perform the before update and after update
       */
      update: function update() {
        if (this.get('model.isNew')) {
          var newLab = this.get('model'),
              selectedLabType = this.get('selectedLabType');
          if (_ember['default'].isEmpty(this.get('model.status'))) {
            this.set('model.status', 'Requested');
          }
          this.set('model.requestedBy', newLab.getUserName());
          this.set('model.requestedDate', new Date());
          if (_ember['default'].isEmpty(selectedLabType)) {
            this.saveNewPricing(this.get('model.labTypeName'), 'Lab', 'model.labType').then((function () {
              this.addChildToVisit(newLab, 'labs', 'Lab').then((function () {
                this.saveModel();
              }).bind(this));
            }).bind(this));
          } else {
            this.getSelectedPricing('selectedLabType').then((function (pricingRecords) {
              if (_ember['default'].isArray(pricingRecords)) {
                this.createMultipleRequests(pricingRecords, 'labType', 'labs', 'Lab');
              } else {
                this.set('model.labType', pricingRecords);
                this.addChildToVisit(newLab, 'labs', 'Lab').then((function () {
                  this.saveModel();
                }).bind(this));
              }
            }).bind(this));
          }
        } else {
          this.saveModel();
        }
      }
    },

    additionalButtons: (function () {
      var canComplete = this.get('canComplete'),
          isValid = this.get('model.isValid'),
          i18n = this.get('i18n');
      if (isValid && canComplete) {
        return [{
          buttonAction: 'completeLab',
          buttonIcon: 'glyphicon glyphicon-ok',
          'class': 'btn btn-primary on-white',
          buttonText: i18n.t('buttons.complete')
        }];
      }
    }).property('canComplete', 'model.isValid'),

    pricingTypeForObjectType: 'Lab Procedure',
    pricingTypes: _ember['default'].computed.alias('labsController.labPricingTypes'),

    pricingList: null, // This gets filled in by the route

    updateCapability: 'add_lab',

    afterUpdate: function afterUpdate(saveResponse, multipleRecords) {
      var i18n = this.get('i18n'),
          afterDialogAction,
          alertMessage,
          alertTitle;
      if (this.get('model.status') === 'Completed') {
        alertTitle = i18n.t('labs.alerts.request_completed_title');
        alertMessage = i18n.t('labs.alerts.request_completed_message');
      } else {
        alertTitle = i18n.t('labs.alerts.request_saved_title');
        alertMessage = i18n.t('labs.alerts.request_saved_message');
      }
      if (multipleRecords) {
        afterDialogAction = this.get('cancelAction');
      }
      this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);
      this.set('model.selectPatient', false);
    }

  });
});
define('hospitalrun/labs/edit/route', ['exports', 'ember', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'hospitalrun/mixins/patient-list-route', 'ember-i18n'], function (exports, _ember, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _hospitalrunMixinsPatientListRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], _hospitalrunMixinsPatientListRoute['default'], {
    editTitle: (0, _emberI18n.translationMacro)('labs.edit_title'),
    modelName: 'lab',
    newTitle: (0, _emberI18n.translationMacro)('labs.new_title'),
    pricingCategory: 'Lab',

    actions: {
      returnToAllItems: function returnToAllItems() {
        this.controller.send('returnToAllItems');
      }
    },

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        selectPatient: true,
        requestDate: moment().startOf('day').toDate()
      });
    }
  });
});
define("hospitalrun/labs/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/labs/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-typeahead", [], ["property", "patientTypeAhead", "label", ["subexpr", "t", ["labels.patient"], [], ["loc", [null, [4, 60], [4, 80]]]], "content", ["subexpr", "@mut", [["get", "patientList", ["loc", [null, [4, 89], [4, 100]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedPatient", ["loc", [null, [4, 111], [4, 126]]]]], [], []], "class", "required test-patient-name"], ["loc", [null, [4, 6], [4, 163]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/labs/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-summary", [], ["patient", ["subexpr", "@mut", [["get", "model.patient", ["loc", [null, [6, 32], [6, 45]]]]], [], []], "returnTo", "labs.edit", "returnToContext", ["subexpr", "@mut", [["get", "model.id", ["loc", [null, [6, 83], [6, 91]]]]], [], []], "disablePatientLink", ["subexpr", "@mut", [["get", "model.isNew", ["loc", [null, [6, 111], [6, 122]]]]], [], []]], ["loc", [null, [6, 6], [6, 125]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/labs/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-select", [], ["class", "col-xs-3 required test-visit-type", "label", ["subexpr", "t", ["labels.visit"], [], ["loc", [null, [10, 68], [10, 86]]]], "property", "visit", "content", ["subexpr", "@mut", [["get", "patientVisitsForSelect", ["loc", [null, [11, 35], [11, 57]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.visitDescription", "prompt", ["subexpr", "t", ["labs.labels.add_new_visit"], [], ["loc", [null, [13, 17], [13, 48]]]], "selected", ["subexpr", "@mut", [["get", "model.visit", ["loc", [null, [14, 19], [14, 30]]]]], [], []]], ["loc", [null, [10, 8], [15, 10]]]], ["inline", "checkbox-or-typeahead", [], ["property", "labTypeName", "label", ["subexpr", "t", ["labs.labels.lab_type"], [], ["loc", [null, [18, 14], [18, 40]]]], "list", ["subexpr", "@mut", [["get", "objectTypeList", ["loc", [null, [18, 46], [18, 60]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedLabType", ["loc", [null, [19, 18], [19, 33]]]]], [], []], "optionLabelPath", "name", "typeAheadType", "pricing", "className", "required test-lab-type", "prompt", " ", "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [24, 14], [24, 19]]]]], [], []]], ["loc", [null, [17, 6], [25, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/labs/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group col-xs-3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group col-xs-6");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-group col-xs-9");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element0, [3]);
              var element3 = dom.childAt(element0, [5]);
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.visit"], [], ["loc", [null, [29, 17], [29, 37]]]], ["content", "model.visit.visitDate", ["loc", [null, [30, 41], [30, 66]]]], ["inline", "t", ["labs.labels.lab_type"], [], ["loc", [null, [33, 17], [33, 45]]]], ["content", "model.labType.name", ["loc", [null, [34, 41], [34, 63]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [37, 17], [37, 44]]]], ["content", "model.requestedBy", ["loc", [null, [38, 41], [38, 62]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/labs/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-input", [], ["property", "result", "label", ["subexpr", "t", ["labels.result"], [], ["loc", [null, [43, 41], [43, 60]]]], "class", "test-result-input"], ["loc", [null, [43, 6], [43, 88]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 46,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/labs/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.selectPatient", ["loc", [null, [3, 10], [3, 29]]]]], [], 0, 1, ["loc", [null, [3, 4], [7, 11]]]], ["block", "if", [["get", "model.isNew", ["loc", [null, [8, 10], [8, 21]]]]], [], 2, 3, ["loc", [null, [8, 4], [41, 11]]]], ["block", "if", [["get", "canComplete", ["loc", [null, [42, 10], [42, 21]]]]], [], 4, null, ["loc", [null, [42, 4], [44, 11]]]], ["inline", "em-text", [], ["property", "notes", "label", ["subexpr", "t", ["labels.notes"], [], ["loc", [null, [45, 37], [45, 55]]]], "rows", 3], ["loc", [null, [45, 4], [45, 65]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/labs/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [46, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 48,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [47, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {
    startKey: [],
    addPermission: 'add_lab'
  });
});
define('hospitalrun/labs/index/labs-edit-button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'button',
    classNames: ['btn', 'btn-default', 'neutral']
  });
});
define("hospitalrun/labs/index/labs-edit-button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 47
            }
          },
          "moduleName": "hospitalrun/labs/index/labs-edit-button/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["labels.edit"], [], ["loc", [null, [1, 28], [1, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/index/labs-edit-button/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "link-to", ["labs.edit", ["get", "lab", ["loc", [null, [1, 23], [1, 26]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 59]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/index/labs-list-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tr',
    classNames: ['clickable'],

    click: function click() {
      this.sendAction('action', this.lab);
    }
  });
});
define("hospitalrun/labs/index/labs-list-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/labs/index/labs-list-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "labs/index/labs-edit-button", [], ["lab", ["subexpr", "@mut", [["get", "lab", ["loc", [null, [9, 40], [9, 43]]]]], [], []]], ["loc", [null, [9, 6], [9, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 1
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/labs/index/labs-list-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "canEdit", ["loc", [null, [8, 10], [8, 17]]]]], [], 0, null, ["loc", [null, [8, 4], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/index/labs-list-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "requested-date");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "patient");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "requested-by");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "lab-type");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "notes");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 0, 0);
        morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "date-format", [["get", "lab.requestedDate", ["loc", [null, [1, 41], [1, 58]]]]], [], ["loc", [null, [1, 27], [1, 60]]]], ["content", "lab.patient.displayName", ["loc", [null, [2, 20], [2, 47]]]], ["content", "lab.requestedBy", ["loc", [null, [3, 25], [3, 44]]]], ["content", "lab.labType.name", ["loc", [null, [4, 21], [4, 41]]]], ["content", "lab.notes", ["loc", [null, [5, 18], [5, 31]]]], ["block", "if", [["get", "showActions", ["loc", [null, [6, 7], [6, 18]]]]], [], 0, null, ["loc", [null, [6, 1], [12, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    modelName: 'lab',
    pageTitle: (0, _emberI18n.translationMacro)('labs.requests_title'),
    searchStatus: 'Requested',

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var labDateAsTime = item.get('labDateAsTime'),
          id = this._getPouchIdFromItem(item),
          requestedDateAsTime = item.get('requestedDateAsTime'),
          searchStatus = this.get('searchStatus');
      return [searchStatus, requestedDateAsTime, labDateAsTime, id];
    },

    _modelQueryParams: function _modelQueryParams() {
      var maxId = this._getMaxPouchId(),
          maxValue = this.get('maxValue'),
          minId = this._getMinPouchId(),
          searchStatus = this.get('searchStatus');
      return {
        options: {
          startkey: [searchStatus, null, null, minId],
          endkey: [searchStatus, maxValue, maxValue, maxId]
        },
        mapReduce: 'lab_by_status'
      };
    }
  });
});
define("hospitalrun/labs/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/labs/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [11, 14], [11, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 6
                },
                "end": {
                  "line": 20,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/labs/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "labs/index/labs-list-item", [], ["lab", ["subexpr", "@mut", [["get", "lab", ["loc", [null, [16, 14], [16, 17]]]]], [], []], "action", "editItem", "showActions", ["subexpr", "@mut", [["get", "showActions", ["loc", [null, [18, 22], [18, 33]]]]], [], []], "canEdit", ["subexpr", "@mut", [["get", "canEdit", ["loc", [null, [19, 18], [19, 25]]]]], [], []]], ["loc", [null, [15, 8], [19, 27]]]]],
            locals: ["lab"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/labs/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1]);
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element3, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(element3, 11, 11);
            morphs[6] = dom.createMorphAt(element2, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.date_requested"], [], ["loc", [null, [5, 12], [5, 41]]]], ["inline", "t", ["labels.patient"], [], ["loc", [null, [6, 12], [6, 34]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [7, 12], [7, 39]]]], ["inline", "t", ["labs.labels.lab_type"], [], ["loc", [null, [8, 12], [8, 40]]]], ["inline", "t", ["labels.notes"], [], ["loc", [null, [9, 12], [9, 32]]]], ["block", "if", [["get", "showActions", ["loc", [null, [10, 14], [10, 25]]]]], [], 0, null, ["loc", [null, [10, 8], [12, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [14, 14], [14, 19]]]]], [], 1, null, ["loc", [null, [14, 6], [20, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 46
                },
                "end": {
                  "line": 24,
                  "column": 136
                }
              },
              "moduleName": "hospitalrun/labs/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["newItem"], [], ["loc", [null, [24, 72], [24, 92]]]], ["inline", "t", ["labs.messages.create_new_record"], [], ["loc", [null, [24, 93], [24, 132]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/labs/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["inline", "t", ["labs.messages.no_items_found"], [], ["loc", [null, [24, 9], [24, 45]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [24, 52], [24, 58]]]]], [], 0, null, ["loc", [null, [24, 46], [24, 143]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/labs/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [26, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/labs/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [27, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/labs/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({
    addCapability: 'add_lab',
    additionalModels: [{
      name: 'labPricingTypes',
      findArgs: ['lookup', 'lab_pricing_types']
    }],
    allowSearch: false,
    moduleName: 'labs',
    newButtonText: (0, _emberI18n.translationMacro)('labs.buttons.new_button'),
    sectionTitle: (0, _emberI18n.translationMacro)('labs.section_title')
  });
});
define('hospitalrun/locales/de/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'Was möchten Sie tun?'
    },
    navigation: {
      imaging: 'Bildgebung',
      inventory: 'Inventar',
      patients: 'Patienten',
      appointments: 'Termine',
      medication: 'Medikation',
      labs: 'Labore',
      billing: 'Abrechnung',
      administration: 'Administration',
      subnav: {
        requests: 'Anfragen',
        items: 'Einheiten',
        completed: 'Erledigt',
        new_request: 'Neue Anfrage',
        inventory_received: 'Eingeganges Inventar',
        reports: 'Berichte',
        patient_listing: 'Patietenliste',
        new_patient: 'Neuer Patient',
        this_week: 'Diese Woche',
        today: 'Heute',
        search: 'Suche',
        add_appointment: 'Termin eintragen',
        dispense: 'Verabreichen',
        return_medication: 'Medikamente zurückgeben',
        invoices: 'Rechnungen',
        new_invoice: 'Neue Rechnung',
        prices: 'Kosten',
        price_profiles: 'Preisprofile',
        lookup_lists: 'Nachschlagelisten',
        address_fields: 'Adressfelder',
        load_db: 'Datenbank laden',
        users: 'Benutzer',
        new_user: 'Neuer Benutzer'
      },
      actions: {
        logout: 'Abmelden',
        login: 'Anmelden'
      },
      about: 'Über HospitalRun'
    },
    user: {
      plus_new_user: '+ Neuer Benutzer',
      users_page_tile: 'Benutzerliste'
    },
    admin: {
      address_options: 'Adressoptionen',
      lookup_lists: 'Nachschlagelisten',
      load_db: 'Datenbank laden',
      users: 'Benutzer',
      address: {
        address1_label: 'Adresse 1 Kennzeichen',
        address2_label: 'Adresse 2 Kennzeichen',
        address3_label: 'Adresse 3 Kennzeichen',
        address4_label: 'Adresse 4 Kennzeichen',
        include1_label: 'Einbezug 1 Kennzeichen',
        include2_label: 'Einbezug 2 Kennzeichen',
        include3_label: 'Einbezug 3 Kennzeichen',
        include4_label: 'Einbezug 4 Kennzeichen',
        titles: {
          options_saved: 'Optionen gespeichert'
        },
        messages: {
          address_saved: 'Die Adressoptionen wurden gespeichert'
        }
      },
      lookup: {
        anesthesia_types: 'Anästhesiearten',
        anesthesiologists: 'Anästhesiologe',
        billing_categories: 'Abrechnungskategorien',
        clinic_list: 'Kliniken',
        country_list: 'Länder',
        diagnosis_list: 'Diagnosen',
        cpt_code_list: 'CPT Codes',
        expense_account_list: 'Ausgabekonten',
        aisle_location_list: 'Gänge-Verzeichnis',
        warehouse_list: 'Warenhaus',
        inventory_types: 'Inventartypen',
        imaging_pricing_types: 'Bildgebungs-Preiskategorien',
        lab_pricing_types: 'Labor-Preiskategorien',
        patient_status_list: 'Patientenstatus',
        physician_list: 'Ärzte',
        procedure_list: 'Abläufe',
        procedure_locations: 'Ablaufs-Orte',
        procedure_pricing_types: 'Ablaufs-Preiskategorien',
        radiologists: 'Radiologen',
        unit_types: 'Einheiten',
        vendor_list: 'Anbieter',
        visit_location_list: 'Einsatzorte',
        visit_types: 'Besuchsarten',
        ward_pricing_types: 'Krankenstations-Preistypen'
      }
    },
    labels: {
      name: 'Name',
      patient: 'Patient',
      quantity: 'Anzahl',
      requested_on: 'Angefragt am',
      date_requested: 'Anfragedatum',
      date_completed: 'Abschlussdatum',
      requested_by: 'Angefragt von',
      fulfill: 'Ausführen',
      actions: 'Aktionen',
      action: 'Aktion',
      notes: 'Notizen',
      edit: 'Bearbeiten',
      imaging_type: 'Bildgebungsart',
      result: 'Ergebnis',
      results: 'Ergebnisse',
      visit: 'Besuch',
      requests: 'Anfragen',
      completed: 'Erledigt',
      id: 'Id-Nr',
      sex: 'Geschlecht',
      age: 'Alter',
      username: 'Username',
      email: 'E-Mail',
      role: 'Rolle',
      'delete': 'Entfernen',
      user_can_add_new_value: 'Benutzer kann neue Werte hinzufügen',
      value: 'Wert',
      lookup_type: 'Nachschlagebereich',
      import_file: 'Datei importieren',
      file_load_successful: 'Datei erfolgreich geladen',
      file_to_Load: 'Datei laden',
      start_time: 'Startzeit',
      end_time: 'Endzeit',
      doc_read: 'Dokument gelesen',
      doc_written: 'Dokument geschrieben',
      display_name: 'Angezeigter Name',
      password: 'Passwort',
      edit_user: 'Benutzer bearbeiten',
      new_user: 'Neuer Benutzer',
      delete_user: 'Benutzer löschen'
    },
    messages: {
      no_items_found: 'Keine Einträge gefunden.',
      create_new_record: 'Neuen Eintrag erstellen?',
      create_new_user: 'Neuen Benutzer hinzufügen?',
      no_users_found: 'Keine Benutzer gefunden.',
      are_you_sure_delete: 'Wollen Sie den Benutzer {{user}} sicher löschen?',
      user_has_been_saved: 'Der Benutzer wurde gespeichert.',
      user_saved: 'Benutzer gespeichert'
    },
    buttons: {
      complete: 'Abschließen',
      cancel: 'Abbrechen',
      return_button: 'Zurück',
      add: 'Hinzufügen',
      update: 'Aktualisieren',
      ok: 'Okay',
      'delete': 'Entfernen',
      new_user: 'Neuer Benutzer',
      add_value: 'Wert hinzufügen',
      'import': 'Importieren',
      load_file: 'Datei laden'
    },
    login: {
      messages: {
        sign_in: 'Bitte anmelden',
        error: 'Benutzername oder Passwort falsch.'
      },
      labels: {
        password: 'Passwort',
        username: 'Benutzername',
        sign_in: 'Anmelden'
      }
    },
    inventory: {
      messages: {
        no_requests: 'Keine Anfragen gefunden.',
        create_request: 'Neue Anfrage erstellen?'
      }
    },
    imaging: {
      page_title: 'Anfrage zur Bildgebung',
      section_title: 'Bildgebung',
      buttons: {
        new_button: '+ Neue Bildgebung'
      },
      labels: {
        radiologist: 'Radiologe',
        add_new_visit: '--Neuen Besuch hinzufügen--'
      },
      messages: {
        no_completed: 'Keine erledigten Einträge gefunden.'
      },
      titles: {
        completed_imaging: 'Erledigte Bildgebung',
        edit_title: 'Bildgebungs-Anfrage bearbeiten',
        new_title: 'Neue Bildgebungs-Anfrage'
      },
      alerts: {
        completed_title: 'Bildgebungs-Anfrage gestellt',
        completed_message: 'Die Anfrage zur Bildgebung wurde abgeschlossen.',
        saved_title: 'Bildgebungs-Anfrage gespeichert',
        saved_message: 'Die Anfrage zur Bildgebung wurde gespeichert.'
      }
    }
  };
});
define("hospitalrun/locales/en/config", ["exports"], function (exports) {
  // Ember-I18n includes configuration for common locales. Most users
  // can safely delete this file. Use it if you need to override behavior
  // for a locale or define behavior for a locale that Ember-I18n
  // doesn't know about.
  exports["default"] = {
    // rtl: [true|FALSE],
    //
    // pluralForm: function(count) {
    //   if (count === 0) { return 'zero'; }
    //   if (count === 1) { return 'one'; }
    //   if (count === 2) { return 'two'; }
    //   if (count < 5) { return 'few'; }
    //   if (count >= 5) { return 'many'; }
    //   return 'other';
    // }
  };
});
define('hospitalrun/locales/en/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'What would you like to do?'
    },
    navigation: {
      imaging: 'Imaging',
      inventory: 'Inventory',
      patients: 'Patients',
      appointments: 'Appointments',
      medication: 'Medication',
      labs: 'Labs',
      billing: 'Billing',
      administration: 'Administration',
      subnav: {
        requests: 'Requests',
        items: 'Items',
        completed: 'Completed',
        new_request: 'New Request',
        inventory_received: 'Inventory Received',
        reports: 'Reports',
        patient_listing: 'Patient Listing',
        new_patient: 'New Patient',
        this_week: 'This Week',
        today: 'Today',
        search: 'Search',
        add_appointment: 'Add Appointment',
        dispense: 'Dispense',
        return_medication: 'Return Medication',
        invoices: 'Invoices',
        new_invoice: 'New Invoice',
        prices: 'Prices',
        price_profiles: 'Price Profiles',
        lookup_lists: 'Lookup Lists',
        address_fields: 'Address Fields',
        load_db: 'Load DB',
        users: 'Users',
        new_user: 'New User',
        admitted_patients: 'Admitted Patients',
        missed: 'Missed',
        user_roles: 'User Roles'
      },
      actions: {
        logout: 'Logout',
        login: 'Login'
      },
      about: 'About HospitalRun'
    },
    user: {
      plus_new_user: '+ new user',
      users_page_tile: 'User Listing'
    },
    admin: {
      address_options: 'Address Options',
      lookup_lists: 'Lookup Lists',
      load_db: 'Load DB',
      user_roles: 'User Roles',
      users: 'Users',
      address: {
        address1_label: 'Address 1 Label',
        address2_label: 'Address 2 Label',
        address3_label: 'Address 3 Label',
        address4_label: 'Address 4 Label',
        include1_label: 'Include 1 Label',
        include2_label: 'Include 2 Label',
        include3_label: 'Include 3 Label',
        include4_label: 'Include 4 Label',
        titles: {
          options_saved: 'Options Saved'
        },
        messages: {
          address_saved: 'The address options have been saved'
        },

        new_title: 'Address Options',
        edit_title: 'Address Options',
        address_label: 'Address'
      },
      loaddb: {
        progress_message: 'Please wait while your database is loaded.',
        progress_title: 'Loading Database',
        display_alert_title: 'Select File To Load',
        display_alert_message: 'Please select file to load.',
        error_display_alert_title: 'Error Loading',
        error_display_alert_message: 'The database could not be imported. The error was: {{error}}',
        edit_title: 'Load DB'
      },
      lookup: {
        delete_value_inventory_type_medication_title: 'Cannot Delete Medication',
        delete_value_inventory_type_medication_message: 'The Medication inventory type cannot be deleted because it is needed for the Medication module.',
        delete_value_lab_pricing_type_procedure_title: 'Cannot Delete Lab Pricing Type',
        delete_value_lab_pricing_type_procedure_message: 'The Lab Procedure pricing type cannot be deleted because it is needed for the Labs module.',
        delete_value_imaging_pricing_type_procedure_title: 'Cannot Delete Imaging Pricing Type',
        delete_value_imaging_pricing_type_procedure_message: 'The Imaging Procedure pricing type cannot be deleted because it is needed for the Imaging module.',
        delete_value_visit_type_admission_title: 'Cannot Delete Admission Visit Type',
        delete_value_visit_type_admission_message: 'The Admission Visit type cannot be deleted because it is needed for the Visits module.',
        delete_value_visit_type_imaging_title: 'Cannot Delete Imaging Visit Type',
        delete_value_visit_type_imaging_message: 'The Imaging Visit type cannot be deleted because it is needed for the Imaging module.',
        delete_value_visit_type_lab_title: 'Cannot Delete Lab Visit Type',
        delete_value_visit_type_lab_message: 'The Lab Visit type cannot be deleted because it is needed for the Lab module.',
        delete_value_visit_type_pharmacy_title: 'Cannot Delete Pharmacy Visit Type',
        delete_value_visit_type_pharmacy_message: 'The Lab Visit type cannot be deleted because it is needed for the Medication module.',
        alert_import_list_title: 'Select File To Import',
        alert_import_list_message: 'Please select file to import.',
        alert_import_list_save_title: 'List Imported',
        alert_import_list_save_message: 'The lookup list has been imported.',
        alert_import_list_update_title: 'List Saved',
        alert_import_list_update_message: 'The lookup list has been saved.',
        page_title: 'Lookup Lists',
        edit: {
          template: {
            add_title: 'Add Value',
            edit_title: 'Edit Value',
            update_button_text_add: 'Add',
            update_button_text_update: 'Update',
            label_title: 'Value'
          }
        },
        anesthesia_types: 'Anesthesia Types',
        anesthesiologists: 'Anesthesiologists',
        billing_categories: 'Billing Categories',
        clinic_list: 'Clinic Locations',
        country_list: 'Countries',
        diagnosis_list: 'Diagnoses',
        cpt_code_list: 'CPT Codes',
        expense_account_list: 'Expense Accounts',
        aisle_location_list: 'Inventory Aisle Locations',
        warehouse_list: 'Inventory Locations',
        inventory_types: 'Inventory Types',
        imaging_pricing_types: 'Imaging Pricing Types',
        lab_pricing_types: 'Lab Pricing Types',
        patient_status_list: 'Patient Status List',
        physician_list: 'Physicians',
        procedure_list: 'Procedures',
        procedure_locations: 'Procedures Locations',
        procedure_pricing_types: 'Procedure Pricing Types',
        radiologists: 'Radiologists',
        unit_types: 'Unit Types',
        vendor_list: 'Vendor',
        visit_location_list: 'Visit Locations',
        visit_types: 'Visit Types',
        ward_pricing_types: 'Ward Pricing Types'
      },
      roles: {
        capability: {
          admin: 'Administration',
          load_db: 'Load Database',
          update_config: 'Update Configurations',
          appointments: 'Appointments',
          add_appointment: 'Add Appointment',
          billing: 'Billing',
          add_charge: 'Add Charge',
          add_pricing: 'Add Pricing',
          add_pricing_profile: 'Add Pricing Profile',
          add_invoice: 'Add Invoice',
          add_payment: 'Add Payment',
          delete_invoice: 'Delete Invoice',
          delete_pricing: 'Delete Pricing',
          delete_pricing_profile: 'Delete Pricing Profile',
          edit_invoice: 'Edit Invoice',
          invoices: 'Invoices',
          override_invoice: 'Override Invoice',
          pricing: 'Pricing',
          patients: 'Patients',
          add_diagnosis: 'Add Diagnosis',
          add_photo: 'Add Photo',
          add_patient: 'Add Patient',
          add_visit: 'Add Visit',
          add_vitals: 'Add Vitals',
          admit_patient: 'Admit Patient',
          delete_photo: 'Delete Photo',
          delete_patient: 'Delete Patient',
          delete_appointment: 'Delete Appointment',
          delete_diagnosis: 'Delete Diagnosis',
          delete_procedure: 'Delete Procedure',
          delete_socialwork: 'Delete Social Work',
          delete_vitals: 'Delete Vitals',
          delete_visit: 'Delete Visit',
          discharge_patient: 'Discharge Patient',
          patient_reports: 'Patient Reports',
          visits: 'Visits',
          medication: 'Medication',
          add_medication: 'Add Medication',
          delete_medication: 'Delete Medication',
          fulfill_medication: 'Fulfill Medication',
          labs: 'Labs',
          add_lab: 'Add Lab',
          complete_lab: 'Complete Lab',
          delete_lab: 'Delete Lab',
          imaging: 'Imaging',
          add_imaging: 'Add Imaging',
          complete_imaging: 'Complete Imaging',
          delete_imaging: 'Delete Imaging',
          inventory: 'Inventory',
          add_inventory_request: 'Add Inventory Request',
          add_inventory_item: 'Add Inventory Item',
          add_inventory_purchase: 'Add Inventory Purchase',
          adjust_inventory_location: 'Adjust Inventory Location',
          delete_inventory_item: 'Delete Inventory Item',
          fulfill_inventory: 'Fulfill Inventory',
          user_roles: 'User Roles'
        },
        messages: {
          role_saved: 'The {{roleName}} role has been saved.'
        },
        titles: {
          role_saved: 'Role Saved'
        }
      }
    },
    labels: {
      cptcode: 'CPT Code',
      loading: 'Loading',
      name: 'Name',
      patient: 'Patient',
      prescriber: 'Prescriber',
      quantity: 'Quantity',
      requested_on: 'Requested On',
      date: 'Date',
      date_of_birth: 'Date of Birth',
      date_of_birth_short: 'DoB',
      date_requested: 'Date Requested',
      date_completed: 'Date Completed',
      description: 'Description',
      requested_by: 'Requested By',
      fulfill: 'Fulfill',
      fulfill_request: 'Fulfill Request',
      fulfill_request_now: 'Fulfill Request Now',
      actions: 'Actions',
      action: 'Action',
      notes: 'Notes',
      edit: 'Edit',
      image_orders: 'Image Orders',
      lab_orders: 'Lab Orders',
      patient_history: 'Patient History',
      imaging_type: 'Imaging Type',
      result: 'Result',
      results: 'Results',
      visit: 'Visit',
      requests: 'Requests',
      completed: 'Completed',
      id: 'Id',
      on: 'on',
      type: 'Type',
      sex: 'Sex',
      age: 'Age',
      username: 'Username',
      email: 'Email',
      role: 'Role',
      'delete': 'Delete',
      user_can_add_new_value: 'User Can Add New Values',
      value: 'Value',
      lookup_type: 'Lookup Type',
      import_file: 'Import File',
      file_load_successful: 'File To Load Successful',
      file_to_Load: 'File Load',
      start_time: 'Start Time',
      start_date: 'Start Date',
      end_time: 'End Time',
      end_date: 'End Date',
      doc_read: 'Docs Read',
      doc_written: 'Docs Written',
      display_name: 'Display Name',
      password: 'Password',
      edit_user: 'Edit User',
      new_user: 'New User',
      delete_user: 'Delete User',
      medication: 'Medication',
      status: 'Status',
      add_new_outpatient_visit: '--Add New Outpatient Visit--',
      prescription: 'Prescription',
      prescription_date: 'Prescription Date',
      bill_to: 'Bill To',
      pull_from: 'Pull From',
      fulfilled: 'Fulfilled',
      delete_request: 'Delete Request',
      location: 'Location',
      provider: 'Provider',
      'with': 'With',
      all_day: 'All Day',
      physician: 'Physician',
      assisting: 'Assisting',
      anesthesia: 'Anesthesia',
      procedures: 'Procedures',
      number: 'Number',
      bill_date: 'Bill Date',
      balance_due: 'Balance Due',
      amount: 'Amount',
      date_paid: 'Date Paid',
      credit_to: 'Credit To',
      invoice_id: 'Invoice ID',
      line_items: 'Line Items',
      discount: 'Discount',
      excess: 'Excess',
      price: 'Price',
      total: 'Total',
      expense_to: 'Expense To',
      grand: 'Grand',
      remarks: 'Remarks',
      payments: 'Payments',
      category: 'Category',
      department: 'Department'
    },
    messages: {
      no_items_found: 'No items found.',
      no_history_available: 'No history available.',
      create_new_record: 'Create a new record?',
      create_new_user: 'Create a new user?',
      no_users_found: 'No users found.',
      are_you_sure_delete: 'Are you sure you wish to delete the user {{user}}?',
      user_has_been_saved: 'The user has been saved.',
      user_saved: 'User Saved',
      on_behalf_of: 'on behalf of',
      new_patient_has_to_be_created: 'A new patient needs to be created...Please wait..',
      no_notes_available: 'No additional clinical notes are available for this visit.',
      sorry: 'Sorry, something went wrong...'
    },
    alerts: {
      please_wait: 'Please Wait'
    },
    buttons: {
      complete: 'Complete',
      cancel: 'Cancel',
      close: 'Close',
      return_button: 'Return',
      barcode: 'Barcode',
      add: 'Add',
      update: 'Update',
      ok: 'Ok',
      fulfill: 'Fulfill',
      remove: 'Remove',
      'delete': 'Delete',
      new_user: 'New User',
      add_value: 'Add Value',
      new_note: 'New Note',
      'import': 'Import',
      load_file: 'Load File',
      new_request: 'New Request',
      all_requests: 'All Requests',
      dispense: 'Dispense',
      new_item: '+ new item',
      new_request_plus: '+ new request',
      add_visit: 'Add Visit',
      search: 'Search',
      edit: 'Edit',
      add_line_item: 'Add Line Item'
    },
    login: {
      messages: {
        sign_in: 'please sign in',
        error: 'Username or password is incorrect.'
      },
      labels: {
        password: 'Password',
        username: 'Username',
        sign_in: 'Sign in'
      }
    },
    inventory: {
      edit: {
        cost: 'Cost Per Unit:',
        delivered: 'Delievered To:',
        location: 'Location Adjusted:',
        prescription: 'Prescription For:',
        pulled: 'Pulled From:',
        quantity: 'Quantity at Completion:',
        reason: 'Reason:',
        returned: 'Returned from Patient:',
        transferred_from: 'Transferred From:',
        transferred_to: 'Transferred To:'
      },
      labels: {
        action: 'Action',
        add: 'Add',
        adjust: 'Adjust',
        adjustment_date: 'Adjustment Date',
        adjustment_for: 'Adjustment For',
        adjustment_type: 'Adjustment Type',
        aisle: 'Aisle',
        aisle_location: 'Aisle Location',
        all_inventory: 'All Inventory',
        bill_to: 'Bill To',
        consume_purchases: 'Consume Purchases',
        consumption_rate: 'Consumption Rate',
        cost: 'Cost',
        cost_per_unit: 'Cost per Unit',
        cross_reference: 'Cross Reference',
        current_quantity: 'Current Quantity',
        date_completed: 'Date Completed',
        date_effective: 'Effective Date',
        date_end: 'End Date',
        date_start: 'Start Date',
        date_received: 'Date Received',
        date_tranferred: 'Date Transferred',
        days_left: 'Days Left',
        delivery_aisle: 'Delivery Aisle',
        delivery_location: 'Delivery Location',
        distribution_unit: 'Distribution Unit',
        delete_item: 'Delete Item',
        details: 'Details',
        edit_item: 'Edit Item',
        expense: 'Expense To',
        expiration_date: 'Expiration Date',
        fulfill_request: 'Fulfill Request',
        fulfill_request_now: 'Fulfill Request Now',
        gift: 'Gift in Kind',
        gift_usage: 'Gift in Kind Usage',
        gift_in_kind_no: 'N',
        gift_in_kind_yes: 'Y',
        inventory_consumed: 'Inventory Consumed',
        inventory_item: 'Inventory Item',
        inventory_obsolence: 'Inventory Obsolence',
        invoice_items: 'Invoice Items',
        invoice_line_item: 'Invoice Line Item',
        invoice_number: 'Invoice Number',
        item: 'Item',
        items: 'Items',
        item_number: 'Item Number',
        location: 'Location',
        locations: 'Locations',
        name: 'Name',
        mark_as_consumed: 'Mark as Consumed',
        new_item: 'New Item',
        all_items: 'All Items',
        original_quantity: 'Original Quantity',
        print: 'Print',
        print_barcode: 'Print Barcode',
        printer: 'Printer',
        pull_from: 'Pull From',
        purchases: 'Purchases',
        purchase_cost: 'Purchase Cost',
        purchase_info: 'Purchase Information',
        quantity: 'Quantity ({{unit}})',
        quantity_available: 'Quantity Available',
        quantity_on_hand: 'Quantity on Hand',
        quantity_requested: 'Quantity Requested',
        rank: 'Rank',
        reason: 'Reason',
        remove: 'Remove',
        reorder_point: 'Reorder Point',
        requested_items: 'Requested Items',
        sale_price_per_unit: 'Sale Price per Unit',
        save: 'Save',
        serial_number: 'Serial/Lot Number',
        total: 'Total',
        total_cost: 'Total Cost',
        total_received: 'Total Received: {{total}}',
        transaction: 'Transaction',
        transactions: 'Transactions',
        transfer: 'Transfer',
        transfer_from: 'Transfer From',
        transfer_to: 'Transfer To Location',
        transfer_to_aisle: 'Transfer to Aisle Location',
        unit: 'Unit',
        unit_cost: 'Unit Cost',
        vendor: 'Vendor',
        vendor_item_number: 'Vendor Item Number',
        xref: 'XRef'
      },
      messages: {
        adjust: 'Please adjust the quantities on the appropriate location(s) to account for the difference of {{difference}}.',
        create_request: 'Create a new request?',
        'delete': 'Are you sure you wish to delete {{name}}?',
        item_not_found: 'The inventory item <strong>{{item}}</strong> could not be found.<br>If you would like to create a new inventory item, fill in the information below.<br>Otherwise, press the Cancel button to return.',
        loading: 'Loading transactions ...',
        purchase_saved: 'The inventory purchases have been successfully saved.',
        no_requests: 'No requests found.',
        no_items: 'No items found.',
        quantity: 'The total quantity of <strong>({{quantity}})</strong> does not match the total quantity in the locations <strong>({{locationQuantity}})</strong>.',
        remove_item: 'Are you sure you want to remove this item from this invoice?',
        remove_item_request: 'Are you sure you want to remove this item from this request?',
        request_fulfilled: 'The inventory request has been fulfilled.',
        request_updated: 'The inventory request has been updated.',
        warning: 'Please fill in required fields (marked with *) and correct the errors before adding.'
      },
      reports: {
        rows: {
          adjustments: 'Adjustments',
          adjustments_total: 'Total Adjustments',
          balance_begin: 'Beginning Balance',
          balance_end: 'Ending Balance',
          category: 'Category',
          consumed: 'Consumed',
          consumed_gik: 'GiK Consumed',
          consumed_gik_total: 'Total GiK Consumed',
          consumed_puchases: 'Purchases Consumed',
          consumed_purchases_total: 'Total Purchases Consumed',
          consumed_total: 'Total Consumed',
          err_in_fin_sum: 'Error in _generateFinancialSummaryReport: ',
          err_in_find_pur: 'Error in _findInventoryItemsByPurchase: ',
          err_in_find_req: 'Error in _findInventoryItemsByRequest: ',
          expenses_for: 'Expenses For: ',
          no_account: '(No Account)',
          subtotal: 'Subtotal: ',
          subtotal_for: 'Subtotal for {{category}} - {{account}}: ',
          total: 'Total: ',
          total_for: 'Total for {{var}}: ',
          total_purchases: 'Total Purchases',
          transfer1: '{{quantity}} from {{location}}',
          trasnfer2: 'From: {{source}} To: {{target}}'
        },
        adjustment: 'Detailed Adjustment',
        days_supply: 'Days Supply Left In Stock',
        expense_detail: 'Detailed Expenses',
        expense_sum: 'Summary Expenses',
        expiration: 'Expiration Date',
        'export': 'Export Report',
        fields: 'Fields to Include',
        finance: 'Finance Summary',
        generate: 'Generate Report',
        inv_location: 'Inventory By Location',
        inv_valuation: 'Inventory Valuation',
        purchase_detail: 'Detailed Purchase',
        purchase_sum: 'Summary Purchase',
        report_type: 'Report Type',
        stock_transfer_detail: 'Detailed Stock Transfer',
        stock_transfer_sum: 'Summary Stock Transfer',
        stock_usage_detail: 'Detailed Stock Usage',
        stock_usage_sum: 'Summary Stock Usage'
      },
      titles: {
        add_purchase: 'Add Purchase',
        add_request: 'New Request',
        adjustment: 'Adjustment',
        edit_purchase: 'Edit Purchase',
        edit_request: 'Edit Request',
        inventory_item: 'New Inventory Item',
        inventory_report: 'Inventory Report',
        purchase_saved: 'Inventory Purchases Saved',
        quick_add_title: 'New Inventory Item',
        remove_item: 'Remove Item',
        request_fulfilled: 'Request Fulfilled',
        request_updated: 'Request Updated',
        transfer: 'Transfer Items',
        warning: 'Warning!!!!!'
      }
    },
    imaging: {
      page_title: 'Imaging Requests',
      section_title: 'Imaging',
      buttons: {
        new_button: '+ new imaging'
      },
      labels: {
        radiologist: 'Radiologist',
        add_new_visit: '--Add New Visit--'
      },
      messages: {
        no_completed: 'No completed items found.'
      },
      titles: {
        completed_imaging: 'Completed Imaging',
        edit_title: 'Edit Imaging Request',
        new_title: 'New Imaging Request'
      },
      alerts: {
        completed_title: 'Imaging Request Completed',
        completed_message: 'The imaging request has been completed.',
        saved_title: 'Imaging Request Saved',
        saved_message: 'The imaging request has been saved.'
      }
    },
    medication: {
      page_title: 'Medication Requests',
      section_title: 'Medication',
      return_medication: 'Return Medication',
      buttons: {
        dispense_medication: 'dispense medication',
        new_button: '+ new request',
        return_medication: 'return medication'
      },
      titles: {
        completed_medication: 'Completed Medication',
        edit_medication_request: 'Edit Medication Request',
        new_medication_request: 'New Medication Request'
      },
      messages: {
        create_new: 'Create a new medication request?',
        confirm_deletion: 'Are you sure you wish to delete this medication request?'
      },
      labels: {
        refills: 'Refills',
        quantity_requested: 'Quantity Requested',
        quantity_dispensed: 'Quantity Dispensed',
        quantity_distributed: 'Quantity Distributed',
        quantity_to_return: 'Quantity To Return',
        return_location: 'Return Location',
        return_aisle: 'Return Aisle',
        return_reason: 'Return Reason/Notes',
        adjustment_date: 'Adjustment Date',
        credit_to_account: 'Credit To Account'
      },
      alerts: {
        returned_title: 'Medication Returned',
        returned_message: 'The medication has been marked as returned.',
        saved_title: 'Medication Request Saved',
        saved_message: 'The medication record has been saved.',
        fulfilled_title: 'Medication Request Fulfilled'
      }
    },
    appointments: {
      current_screen_title: 'Appointment List',
      edit_title: 'Edit Appointment',
      new_title: 'New Appointment',
      section_title: 'Appointments',
      this_week: 'Appointments This Week',
      missed: 'Missed Appointments',
      search_title: 'Search Appointments',
      today_title: 'Today\'s Appointments',
      messages: {
        delete_appointment_message: 'Are you sure you wish to delete this appointment?',
        end_time_later_than_start: 'Please select an end time later than the start time.'
      },
      buttons: {
        new_button: '+ new appointment'
      }
    },
    visits: {
      edit: {
        actions: 'Actions',
        edit: 'Edit',
        date: 'Date',
        authored_by: 'Authored By',
        note: 'Note',
        notes: 'Notes',
        new_note: 'New Note',
        visit_information: 'Visit Information',
        new_appointment: 'New Appointment',
        add_diagnosis: 'Add Diagnosis',
        diagnosis: 'Diagnosis',
        'delete': 'Delete',
        procedure: 'Procedure',
        procedures: 'Procedures',
        new_procedure: 'New Procedure',
        labs: 'Labs',
        new_lab: 'New Lab',
        imaging: 'Imaging',
        new_imaging: 'New Imaging',
        medication: 'Medication',
        new_medication: 'New Medication'
      }
    },
    labs: {
      section_title: 'Labs',
      requests_title: 'Lab Requests',
      edit_title: 'Edit Lab Request',
      new_title: 'New Lab Request',
      delete_title: 'Delete Request',
      completed_title: 'Completed Labs',
      labels: {
        lab_type: 'Lab Type',
        add_new_visit: '--Add New Visit--'
      },
      messages: {
        no_items_found: 'No labs found.',
        create_new_record: 'Create a new record?',
        confirm_deletion: 'Are you sure you wish to delete this lab request?',
        no_completed: 'No completed items found.'
      },
      buttons: {
        new_button: '+ new lab'
      },
      alerts: {
        request_completed_title: 'Lab Request Completed',
        request_completed_message: 'The lab request has been completed.',
        request_saved_title: 'Lab Request Saved',
        request_saved_message: 'The lab request has been saved.'
      }
    },
    common: {
      actions: 'Actions'
    },
    patients: {
      titles: {
        add_contact: 'Add Contact',
        'delete': 'Delete Patient',
        'new': 'New Patient',
        edit: 'Edit Patient',
        patient: 'Patient Report',
        patient_listing: 'Patient Listing',
        patient_report: 'Patient Report',
        add_photo: 'Add Photo',
        edit_photo: 'Edit Photo',
        social_work: 'Expense',
        family_info: 'Family Info',
        delete_family_member: 'Delete Family Member',
        delete_expense: 'Delete Expense',
        delete_photo: 'Delete Photo',
        delete_contact: 'Delete Contact',
        saved_patient: 'Patient Saved'
      },
      messages: {
        are_you_sure_delete: 'Are you sure you want to delete this {{object}}?',
        delete_patient: 'Are you sure you wish to delete {{firstName}} {{lastName}}?',
        no_patients_found: 'No patients found.',
        saved_patient: 'The patient record for {{displayName}} has been saved.',
        not_found_quick_add: 'The patient <strong>{{patientFullName}}</strong> could not be found.  If you would like to create a new patient, fill in the information below.  Otherwise press the Cancel button to return.',
        create_new_patient: 'Create a new patient record?'
      },
      buttons: {
        back_to_patients: 'Back to Patient List',
        new_patient: '+ new patient'
      },
      labels: {
        admission_date: 'Admission Date',
        patient_days: 'Patient Days',
        discharge_date: 'Discharge Date',
        discharge: 'Discharge',
        admit: 'Admit',
        relationships: 'Relationships',
        phone: 'Phone',
        email: 'Email',
        first_name: 'First Name',
        last_name: 'Last Name',
        sex: 'Sex',
        dob: 'DOB',
        sources: 'Sources',
        costs: 'Costs',
        civil_status: 'Civil Status',
        relationship: 'Relationship To Patient',
        education: 'Education',
        occupation: 'Occupation',
        income: 'Income',
        insurance: 'Insurance',
        date_processed: 'Date Processed'
      },
      notes: {
        new_note: 'New Note for',
        update_note: 'Updating Note from',
        on_behalf_of_label: 'On Behalf Of',
        on_behalf_of_copy: 'on behalf of',
        please_select_a_visit: 'Please select a visit',
        note_label: 'Note'
      }
    },
    billing: {
      alerts: {
        no_invoice_found: 'No invoices found',
        delete_item: 'Are you sure you wish to delete <strong>{{item}}</strong>?',
        no_pricing_items: 'No pricing items found.',
        no_pricing_profiles: 'No pricing profiles found.'
      },
      buttons: {
        create_invoice: 'Create an invoice?',
        add_override: 'Add Override'
      },
      labels: {
        external_invoice_number: 'External Invoice #',
        payment_profile: 'Payment Profile',
        actual_charges: 'Actual Charges',
        phil_health: 'PhilHealth',
        hmo_com: 'HMO/COM',
        payments_deposits: 'Payments/Deposits',
        pricing_panel_overrides: 'Pricing profile overrides',
        pricing_profile: 'Pricing Profile',
        discount_amount: 'Discount Amount',
        discount_percentage: 'Discount Percentage'
      }
    },
    procedures: {
      titles: {
        add_charge_item: 'Add Charge Item',
        delete_charge_item: 'Edit Charge Item',
        medication_used: 'Medication Used',
        delete_medication_used: 'Delete Medication Used',
        add_medication_used: 'Add Medication Used',
        edit_medication_used: 'Edit Medication Used',
        edit: 'Edit Procedure',
        saved: 'Procedure Saved',
        'new': 'New Procedure'
      },
      lables: {
        medication_used: 'Medication Used'
      },
      messages: {
        delete_medication: 'Are you sure you want to delete this medication?'
      },
      buttons: {
        add_medication: 'Add Medication'
      }
    }
  };
});
define('hospitalrun/locales/es/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'Que deseas hacer?'
    },
    navigation: {
      imaging: 'Radiografia',
      inventory: 'Inventario',
      patients: 'Pacientes',
      appointments: 'Citas',
      medication: 'Recetas medicas',
      labs: 'Laboratorio',
      billing: 'Facturas',
      administration: 'Administracion',
      subnav: {
        requests: 'Pedidos',
        items: 'Items',
        completed: 'Completado',
        new_request: 'New pedido',
        inventory_received: 'Inventario recibido',
        reports: 'Reportes',
        patient_listing: 'Lista de pacientes',
        new_patient: 'Nuevo paciente',
        this_week: 'Esta semana',
        today: 'Hoy',
        search: 'Buscar',
        add_appointment: 'Nueva cita',
        dispense: 'Dispense',
        return_medication: 'Devolver medicamento',
        invoices: 'Facturas',
        new_invoice: 'Nueva factura',
        prices: 'Precios',
        price_profiles: 'Perfil de precios',
        lookup_lists: 'Lista de busuedas',
        address_fields: 'Campos de dirección',
        load_db: 'Cargar base de datos',
        users: 'Usuarios',
        new_user: 'Nuevo usuario',
        user_roles: 'Roles'
      },
      actions: {
        logout: 'Salir',
        login: 'Ingresar'
      },
      about: 'Información de HospitalRun'
    },
    user: {
      plus_new_user: '+ nuevo usuario',
      users_page_tile: 'Listado de usuarios'
    },
    admin: {
      address_options: 'Opciones de direcciones',
      lookup_lists: 'Lista de busqueda',
      load_db: 'Cargar Base de datos',
      user_roles: 'Roles',
      users: 'Usuarios',
      address: {
        address1_label: 'Texto direccion 1',
        address2_label: 'Texto direccion 2',
        address3_label: 'Texto direccion 3',
        address4_label: 'Texto direccion 4',
        include1_label: 'Incluir 1',
        include2_label: 'Incluir 2',
        include3_label: 'Incluir 3',
        include4_label: 'Incluir 4',
        titles: {
          options_saved: 'Opciones guardadas'
        },
        messages: {
          address_saved: 'las opciones de dirección han sido guardadas'
        },

        new_title: 'Opciones de dirección',
        edit_title: 'Opciones de dirección',
        address_label: 'Direcciones'
      },
      loaddb: {
        progress_message: 'Por favor espere mientras la base de datos es cargada.',
        progress_title: 'Cargando ase de datos',
        display_alert_title: 'Seleccione un archivo para cargar',
        display_alert_message: 'Por favor seleccione un archivo para ser cargado.',
        error_display_alert_title: 'Error cargando',
        error_display_alert_message: 'La base de datos no fue cargada el error fue: {{error}}',
        edit_title: 'Cargar bd'
      },
      lookup: {
        delete_value_inventory_type_medication_title: 'No se puede eliminar el medicamento',
        delete_value_inventory_type_medication_message: 'El tipo de inventario de medicamentos no se pueden eliminar porque se necesita para el módulo de medicación.',
        delete_value_lab_pricing_type_procedure_title: 'No se puede eliminar el tipo de precio',
        delete_value_lab_pricing_type_procedure_message: 'El tipo de precio Procedimiento Lab no se puede eliminar porque es necesaria para el módulo de laboratorios.',
        delete_value_imaging_pricing_type_procedure_title: 'No se puede eliminar el tipo de imagen',
        delete_value_imaging_pricing_type_procedure_message: 'No se puede eliminar porque es necesario para el modulo de radiografias',
        delete_value_visit_type_admission_title: 'No se puede eliminar admision tipo visita',
        delete_value_visit_type_admission_message: 'Tipo de visita es necesaria para el modulo de admisiones.',
        delete_value_visit_type_imaging_title: 'No se puede eliminar el tipo radiografia',
        delete_value_visit_type_imaging_message: 'No se puede eliminar por que es necesario para el modulo de radiografias.',
        delete_value_visit_type_lab_title: 'No se puede eliminar el tipo laboratorio',
        delete_value_visit_type_lab_message: 'Es necesario para el modulo de laboratorio.',
        delete_value_visit_type_pharmacy_title: 'No se puede eliminar el tipo farmacia',
        delete_value_visit_type_pharmacy_message: 'Es requerido por el modulo de recetas.',
        alert_import_list_title: 'Seleccione un archivo para importar',
        alert_import_list_message: 'Por favor seleccione un archivo para importar.',
        alert_import_list_save_title: 'Lista importada',
        alert_import_list_save_message: 'Lista de busqueda importada.',
        alert_import_list_update_title: 'Lista salvada',
        alert_import_list_update_message: 'La lista de busqueda ha sido salvada.',
        page_title: 'Listas de busqueda',
        edit: {
          template: {
            add_title: 'Adicionar valor',
            edit_title: 'Editar valor',
            update_button_text_add: 'Adicionar',
            update_button_text_update: 'Actualizar',
            label_title: 'Valor'
          }
        },
        anesthesia_types: 'Tipos de anestesia',
        anesthesiologists: 'Anestesiologo',
        billing_categories: 'Categorias de facturacion',
        clinic_list: 'Ubicacion de las clinicas',
        country_list: 'Paises',
        diagnosis_list: 'Diagnosticos',
        cpt_code_list: 'Codigos CPT',
        expense_account_list: 'Cuentas de gastos',
        aisle_location_list: 'Ubicacion de inventario de pasillo',
        warehouse_list: 'Ubicacciones de inventarios',
        inventory_types: 'Tipos de inventarios',
        imaging_pricing_types: 'Tipos de precios de radiografias',
        lab_pricing_types: 'Precios de laboratorio',
        patient_status_list: 'Lista de estado de pacientes',
        physician_list: 'Medicos',
        procedure_list: 'Procedimientos',
        procedure_locations: 'Ubicacion de los procedimientos',
        procedure_pricing_types: 'Tipos de procedimientos y precios',
        radiologists: 'Radiologo',
        unit_types: 'Tipos de unidad',
        vendor_list: 'Proveedor',
        visit_location_list: 'Lugares de visista',
        visit_types: 'Tipos de visita',
        ward_pricing_types: 'Tipos de las tarifas'
      },
      roles: {
        capability: {
          admin: 'Administracion',
          load_db: 'Cargar base de datos',
          update_config: 'Actualizar configuracion',
          appointments: 'Citas',
          add_appointment: 'Adicionar cita',
          billing: 'Facturacion',
          add_charge: 'Adicionar cargo (valor)',
          add_pricing: 'Adicionar precio',
          add_pricing_profile: 'Adicionar perfil de precios',
          add_invoice: 'Adicionar factura',
          add_payment: 'Adicionar pago',
          delete_invoice: 'Eliminar factura',
          delete_pricing: 'Eliminar precio',
          delete_pricing_profile: 'Eliminar perfil de precio',
          edit_invoice: 'Editar factura',
          invoices: 'Facturas',
          override_invoice: 'Sobreescribir factura',
          pricing: 'Precio',
          patients: 'Pacientes',
          add_diagnosis: 'Adicionar diagnostico',
          add_photo: 'Adicionar foto',
          add_patient: 'Adicionar paciente',
          add_visit: 'Adicionar visita',
          add_vitals: 'Adicionar partes vitales',
          admit_patient: 'Admitir paciente',
          delete_photo: 'Eliminar foto',
          delete_patient: 'Eliminar paciente',
          delete_appointment: 'Eliminar cita',
          delete_diagnosis: 'Eliminar diagnostico',
          delete_procedure: 'Eliminar procedimiento',
          delete_socialwork: 'Eliminar trabajo social',
          delete_vitals: 'Eliminar organo vital',
          delete_visit: 'Eliminar visita',
          discharge_patient: 'Descartar paciente',
          patient_reports: 'Reportes por paciente',
          visits: 'Visitas',
          medication: 'Medicación',
          add_medication: 'Adicionar medicación',
          delete_medication: 'Eliminar medicación',
          fulfill_medication: 'Cumplir la medicación',
          labs: 'Laboratorios',
          add_lab: 'Adicionar laboratorio',
          complete_lab: 'Completar laboratorio',
          delete_lab: 'Eliminar laboratorio',
          imaging: 'Radiografia',
          add_imaging: 'Adicionar radiografia',
          complete_imaging: 'Completar radiografia',
          delete_imaging: 'Eliminar radiografia',
          inventory: 'Inventario',
          add_inventory_request: 'Pedido de inventario',
          add_inventory_item: 'Adicionar elemento al inventario',
          add_inventory_purchase: 'Adicionar compra',
          adjust_inventory_location: 'Ajustar lugar elemento en el inventario',
          delete_inventory_item: 'Eliminar elemento del inventario',
          delete_inventory_purchase: 'Eliminar compra del inventario',
          fulfill_inventory: 'Cumplimiento de inventario',
          user_roles: 'Roles de usuario'
        },
        messages: {
          role_saved: 'El {{roleName}} rol ha sido salvado.'
        },
        titles: {
          role_saved: 'Role salvado'
        }
      }
    },
    labels: {
      cptcode: 'Codigo CPT',
      loading: 'Cargando',
      name: 'Nombre',
      patient: 'Paciente',
      quantity: 'Cantidada',
      requested_on: 'Pedido On',
      date: 'Fecha',
      date_of_birth: 'Fecha de nacimiento',
      date_of_birth_short: 'FDN',
      date_requested: 'Fecha de pedido',
      date_completed: 'Fecha completada',
      description: 'Descripción',
      requested_by: 'Pedido por|',
      fulfill: 'Cumplomiento',
      fulfill_request: 'Pedido de cumplimiento',
      fulfill_request_now: 'Pedido de cumplimiento ahora',
      actions: 'Acciones',
      action: 'Accion',
      notes: 'Notas',
      edit: 'Editar',
      image_orders: 'Ordenes de radiografias',
      lab_orders: 'Ordenes de laboratorio',
      patient_history: 'Historia del paciente',
      imaging_type: 'Tipo de radiografia',
      result: 'Resultado',
      results: 'Resultados',
      visit: 'Visita',
      requests: 'Pedido',
      completed: 'Completado',
      id: 'Id',
      on: 'on',
      type: 'Tipo',
      sex: 'Genero',
      age: 'Edad',
      username: 'Nombre de usuario',
      email: 'Email',
      role: 'Rol',
      'delete': 'Eliminar',
      user_can_add_new_value: 'Los usuarios pueden agregar nuevos valores',
      value: 'Valor',
      lookup_type: 'Tipo de busqueda',
      import_file: 'Importar archivo',
      file_load_successful: 'Archivo cargado exitosamente',
      file_to_Load: 'Archivo cargado',
      start_time: 'Hora de inicio',
      start_date: 'Fecha de inicio',
      end_time: 'Hora de finalización',
      end_date: 'Fecha final',
      doc_read: 'Leer documento',
      doc_written: 'Documento escrito',
      display_name: 'Nombre para mostrar',
      password: 'Contraseña',
      edit_user: 'Editar usuario',
      new_user: 'Nuevo usuario',
      delete_user: 'Eliminar usuario',
      medication: 'Medicación',
      status: 'Estado',
      add_new_outpatient_visit: '--Nueva visita a paciente externo--',
      prescription: 'Receta medica',
      prescription_date: 'Fecha de la receta medica',
      bill_to: 'Facturar a',
      pull_from: 'Traer de',
      fulfilled: 'Cumplido',
      delete_request: 'Eliminar pedido',
      location: 'Ubicacion',
      provider: 'Proveedor',
      'with': 'con',
      all_day: 'Todo el dia',
      physician: 'Médico',
      assisting: 'Asistencia',
      anesthesia: 'Anestesia',
      procedures: 'Procedimiento'
    },
    messages: {
      no_items_found: 'Elementos no encontrados.',
      no_history_available: 'Historia no disponible.',
      create_new_record: 'Crear un nuevo registro?',
      create_new_user: 'Crear un nuevo usuario?',
      no_users_found: 'Ningun usuario encontrado.',
      are_you_sure_delete: 'Estas seguro de eliminar este usuario {{user}}?',
      user_has_been_saved: 'El usuario ha sido salvado.',
      user_saved: 'Usuario salvado',
      on_behalf_of: 'a nombre de',
      new_patient_has_to_be_created: 'Un nuevo paciente debe ser creado...Por favor espere..',
      no_notes_available: 'No hay notas clínicas adicionales están disponibles para esta visita.',
      sorry: 'Lo sentimos, un error ha ocurrido...'
    },
    alerts: {
      please_wait: 'Por favor espere'
    },
    buttons: {
      complete: 'Completado',
      cancel: 'Cancelar',
      close: 'Cerrar',
      return_button: 'Regresar',
      barcode: 'Codigo de barras',
      add: 'Adicionar',
      update: 'Actualizar',
      ok: 'Ok',
      fulfill: 'Cumplimiento',
      remove: 'Remover',
      'delete': 'Eliminar',
      new_user: 'Nuevo usuario',
      add_value: 'Adicionar valor',
      new_note: 'Nueva nota',
      'import': 'Importar',
      load_file: 'Cargar archivo',
      new_request: 'Nueva solicitud',
      all_requests: 'Todas las solicitudes',
      dispense: 'Repartir',
      new_item: '+ nuevo elemento',
      new_request_plus: '+ nuevo pedido',
      add_visit: 'Adicionar visita',
      search: 'Buscar'
    },
    login: {
      messages: {
        sign_in: 'por favor ingrese',
        error: 'Nombre de usuario o clave incorrectos.'
      },
      labels: {
        password: 'Clave',
        username: 'Nombre de usuario',
        sign_in: 'Ingresar'
      }
    },
    inventory: {
      edit: {
        cost: 'Costo por unidad:',
        delivered: 'Enviado A:',
        location: 'Cambio de ubicación:',
        prescription: 'Recetado por:',
        pulled: 'Pulled From:',
        quantity: 'Quantity at Completion:',
        reason: 'Razón:',
        returned: 'Regresado al paciente:',
        transferred_from: 'Transferido a:',
        transferred_to: 'Transferido a:'
      },
      labels: {
        action: 'Acción',
        add: 'Adicionar',
        adjust: 'Adjustar',
        adjustment_date: 'Fecha de ajuste',
        adjustment_for: 'Ajustado para',
        adjustment_type: 'Tipo de ajuste',
        aisle: 'Pasillo',
        aisle_location: 'Ubicación pasillo',
        all_inventory: 'Todo el inventario',
        bill_to: 'Facturao a',
        consume_purchases: 'Consume Purchases',
        consumption_rate: 'Tasa de consumo',
        cost: 'Costo',
        cost_per_unit: 'Costo por Unidad',
        cross_reference: 'Referencia cruzada',
        current_quantity: 'Cantidad actual',
        date_completed: 'Fecha completado',
        date_effective: 'Gecha efectiva',
        date_end: 'Fecha final',
        date_start: 'Fecha inicial',
        date_received: 'Fecha recibido',
        date_tranferred: 'Fecha transferencia',
        days_left: 'Dias restantes',
        delivery_aisle: 'Enviado a pasillo',
        delivery_location: 'Ubicación del envio',
        distribution_unit: 'Unidad de distribución',
        delete_item: 'Eliminar elemento',
        details: 'Detalles',
        edit_item: 'Editar elemento',
        expense: 'Gastos a',
        expiration_date: 'Fecha de vencimiento',
        fulfill_request: 'Pedido de cumplimiento',
        fulfill_request_now: 'Pedido de incumplimiento para hoy',
        gift: 'Regalo en especie',
        gift_usage: 'Uso del regalo en especie',
        gift_in_kind_no: 'N',
        gift_in_kind_yes: 'Y',
        inventory_consumed: 'Inventario consumido',
        inventory_item: 'Elemento del inventario',
        inventory_obsolence: 'Obsolescencia de inventario',
        invoice_items: 'Articulos de factura',
        invoice_line_item: 'Elemento de la factura linea',
        invoice_number: 'Factura numero',
        item: 'Elemento',
        items: 'Elementos',
        item_number: 'Numero de elemento',
        location: 'Ubicación',
        locations: 'Ubicaciones',
        name: 'Nombre',
        mark_as_consumed: 'Marcar como consumido',
        new_item: 'Nuevo elemento',
        original_quantity: 'Cantidad original',
        print: 'Imprimir',
        print_barcode: 'Imprimir codigo de  barras',
        printer: 'Impresora',
        pull_from: 'Traido de',
        purchases: 'Compras',
        purchase_cost: 'Costo de compra',
        purchase_info: 'Informacion de la compra',
        quantity: 'Cantidad ({{unit}})',
        quantity_available: 'Cantidad disponible',
        quantity_on_hand: 'Cantidad a la mano',
        quantity_requested: 'Cantidad pedida',
        rank: 'Ranking',
        reason: 'Razón',
        remove: 'Remover',
        reorder_point: 'Reordenar punto',
        requested_items: 'Elementos solicitados',
        sale_price_per_unit: 'Costo de venta por unidad',
        save: 'Guardar',
        serial_number: 'Serial/Numero de lote',
        total: 'Total',
        total_cost: 'Costo total',
        total_received: 'Total Recivido: {{total}}',
        transaction: 'Transaccion',
        transactions: 'Transacciones',
        transfer: 'Translados',
        transfer_from: 'Translado desde',
        transfer_to: 'Translado a ubicación',
        transfer_to_aisle: 'Translado a pasillo',
        unit: 'Unidad',
        unit_cost: 'Unidad Costo',
        vendor: 'Proveedor',
        vendor_item_number: 'Proveedor numero de elemento',
        xref: 'XRef'
      },
      messages: {
        adjust: 'Por favor ajust las cantidades en la ubicación adecuada(s) la diferencia de la cuenta es {{difference}}.',
        create_request: 'Crear un nuevo pedido?',
        'delete': 'Estas seguro de eliminar {{name}}?',
        item_not_found: 'El elemento del inventario <strong>{{item}}</strong> no se pudo encontrar.<br>Si desea crear un nuevo elemento, Ingrese la información abajo.<br>De lo contrario opria cancelar para volver.',
        loading: 'Cargando transacciones ...',
        purchase_saved: 'La compra de inventario ha sido salvada.',
        no_requests: 'No se encontraron pedidos.',
        no_items: 'No se encontraron elementos.',
        quantity: 'La cantidad total <strong>({{quantity}})</strong> no encaja con la cantidad total en las ubicaciones <strong>({{locationQuantity}})</strong>.',
        remove_item: 'Esta seguro de eliminar este elemento de la factura?',
        remove_item_request: 'Seguro que quiere eliminar este elemento del pedido?',
        request_fulfilled: 'El pedido de inventario ha sido procesado.',
        request_updated: 'El pedido de inventario ha sido actualizado.',
        warning: 'Valide los campos requeridos (marcados con *) corrija los errores antes de adicionar.'
      },
      reports: {
        rows: {
          adjustments: 'Ajustes',
          adjustments_total: 'Ajustes totales',
          balance_begin: 'Balance inicial',
          balance_end: 'Balance Final',
          category: 'Categoria',
          consumed: 'Consumado',
          consumed_gik: 'GiK Consumido',
          consumed_gik_total: 'Total GiK Consumido',
          consumed_puchases: 'Total de lo comprado consumido',
          consumed_purchases_total: 'Total de lo comprado consumido',
          consumed_total: 'Total consumido',
          err_in_fin_sum: 'Error en _generateFinancialSummaryReport: ',
          err_in_find_pur: 'Error en _findInventoryItemsByPurchase: ',
          err_in_find_req: 'Error en _findInventoryItemsByRequest: ',
          expenses_for: 'Gatos para: ',
          no_account: '(No Cuenta)',
          subtotal: 'Subtotal: ',
          subtotal_for: 'Subtotal para {{category}} - {{account}}: ',
          total: 'Total: ',
          total_for: 'Total para {{var}}: ',
          total_purchases: 'Compras Totales',
          transfer1: '{{quantity}} de {{location}}',
          trasnfer2: 'De: {{source}} A: {{target}}'
        },
        adjustment: 'Ajuste detallado',
        days_supply: 'Dias de inventario restante',
        expense_detail: 'Gastos detallados',
        expense_sum: 'Resumen de gastos',
        expiration: 'Fecha de expiracion',
        'export': 'Exportar reporte',
        fields: 'Campos a incluir',
        finance: 'Resumen de finanzas',
        generate: 'Generar reporte',
        inv_location: 'Inventario por ubicacion',
        inv_valuation: 'Inventario por valoracion',
        purchase_detail: 'Compras detalladas',
        purchase_sum: 'Resumen de compras',
        report_type: 'Tipo de reporte',
        stock_transfer_detail: 'Detalle de traslado de stock',
        stock_transfer_sum: 'Resumen traslado de stock',
        stock_usage_detail: 'Detalle de uso de stock',
        stock_usage_sum: 'Resumen uso de stock'
      },
      titles: {
        add_purchase: 'Adicionar compra',
        add_request: 'Nuevo pedido',
        adjustment: 'Ajuste',
        edit_purchase: 'Editar compra',
        edit_request: 'Editar pedido',
        inventory_item: 'Nuevo elemento de inventario',
        inventory_report: 'Reporte de inventario',
        purchase_saved: 'Compras de inventario guardadas',
        quick_add_title: 'Nuevo elemento de inventario',
        remove_item: 'Remover elemento',
        request_fulfilled: 'Pedido cumplido',
        request_updated: 'Pedido actualizado',
        transfer: 'Trasladar elementos',
        warning: 'Peligro!!!!!'
      }
    },
    imaging: {
      page_title: 'Pedido de radriografia',
      section_title: 'Radiografias',
      buttons: {
        new_button: '+ new radiografia'
      },
      labels: {
        radiologist: 'Radiologo',
        add_new_visit: '--Adicionar nueva visita--'
      },
      messages: {
        no_completed: 'No de items encontrados.'
      },
      titles: {
        completed_imaging: 'Radiografia completada',
        edit_title: 'Pedido de edicion de radiografia',
        new_title: 'Nuevo pedido de radiografia'
      },
      alerts: {
        completed_title: 'Pedido de radiografia completado',
        completed_message: 'El pedido de radiografia ha sido completado.',
        saved_title: 'Pedido de radiografia salvado',
        saved_message: 'El pedido de radiografia ha sido guardado.'
      }
    },
    medication: {
      page_title: 'Pedido de medicación',
      section_title: 'Medication',
      return_medication: 'Retorno de medicación',
      buttons: {
        dispense_medication: 'dispensar medicación',
        new_button: '+ nuevo pedido',
        return_medication: 'debolver medicacion'
      },
      titles: {
        completed_medication: 'Medicacion completada',
        edit_medication_request: 'Editar pedido de medicacion',
        new_medication_request: 'Nuevo pedido de medicacion'
      },
      messages: {
        create_new: 'Crear un nuevo pedido de medicacion?',
        confirm_deletion: 'Estas seguro de eliminar este pedido de medicación?'
      },
      labels: {
        refills: 'Recargas',
        quantity_requested: 'Cantidad solicitada',
        quantity_dispensed: 'Cantidad dispensada',
        quantity_distributed: 'Cantidad distribuida',
        quantity_to_return: 'Cantidad a devolver',
        return_location: 'Retornar a ubicación',
        return_aisle: 'Devolve a pasillo',
        return_reason: 'Razon por la que se devuelve/Nota',
        adjustment_date: 'Fecha de ajuste',
        credit_to_account: 'Credito a cuenta'
      },
      alerts: {
        returned_title: 'Medicacion devuelta',
        returned_message: 'La medicacion ha sido marcada para devolver.',
        saved_title: 'Pedido de medicacion guardado',
        saved_message: 'La elemento de medicación ha sido guardado.',
        fulfilled_title: 'Pedido de medicación cumplido'
      }
    },
    appointments: {
      current_screen_title: 'Listado de citas',
      edit_title: 'Editar cita',
      new_title: 'Nueva cita',
      section_title: 'Citas',
      this_week: 'Citas esta semana',
      missed: 'Citas perdidas',
      search_title: 'Buscar citas',
      today_title: 'Citas para hoy',
      messages: {
        delete_appointment_message: 'Esta seguro de eliminar esta cita?',
        end_time_later_than_start: 'Seleccione una hora de finalizacion despues de la de inicio.'
      },
      buttons: {
        new_button: '+ nueva cita'
      }
    },
    visits: {
      edit: {
        actions: 'Actiones',
        edit: 'Editar',
        date: 'Fecha',
        authored_by: 'Escrito por',
        note: 'Nota',
        notes: 'Notas',
        new_note: 'Nueva nota',
        visit_information: 'Informacion de visita',
        new_appointment: 'Nuevas citas',
        add_diagnosis: 'Adicionar diagnostico',
        diagnosis: 'Diagnostico',
        'delete': 'Eliminar',
        procedure: 'Procedimiento',
        procedures: 'Procedimientos',
        new_procedure: 'Nuevo procedimiento',
        labs: 'Laboratorios',
        new_lab: 'New laboratorio',
        imaging: 'Radiografias',
        new_imaging: 'Nueva radiografia',
        medication: 'Medicacion',
        new_medication: 'Nueva mediicación'
      }
    },
    labs: {
      section_title: 'Laboratorios',
      requests_title: 'Pedido de laboratorio',
      edit_title: 'Editar pedido de laboratorio',
      new_title: 'Nuevo pedido de laboratorio',
      delete_title: 'Eliminar pedido',
      completed_title: 'Completar laboratorio',
      labels: {
        lab_type: 'Tipo de laboratorio',
        add_new_visit: '--Adicionar nueva visita--'
      },
      messages: {
        no_items_found: 'No boratorios encontrados.',
        create_new_record: 'Crear un registro?',
        confirm_deletion: 'Esta seguro de eliminar esta solicitud de laboratorio?',
        no_completed: 'No elementos completados encontrados.'
      },
      buttons: {
        new_button: '+ nuevo laboratorio'
      },
      alerts: {
        request_completed_title: 'Pedido de laboratorio competado',
        request_completed_message: 'El pedido de laboratorio ha sido completado.',
        request_saved_title: 'Silicitud de laboratorio guardado',
        request_saved_message: 'El pedido de laboratorio ha sido guardado.'
      }
    },
    common: {
      actions: 'Acciones'
    },
    patients: {
      notes: {
        on_behalf_of_label: 'A nombre de',
        on_behalf_of_copy: 'a nombre de',
        please_select_a_visit: 'Por favor seleccione una visista',
        note_label: 'Nota'
      }
    }
  };
});
define('hospitalrun/locales/es-CO/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'Que deseas hacer?'
    },
    navigation: {
      imaging: 'Radiografia',
      inventory: 'Inventario',
      patients: 'Pacientes',
      appointments: 'Citas',
      medication: 'Recetas medicas',
      labs: 'Laboratorio',
      billing: 'Facturas',
      administration: 'Administracion',
      subnav: {
        requests: 'Pedidos',
        items: 'Items',
        completed: 'Completado',
        new_request: 'New pedido',
        inventory_received: 'Inventario recibido',
        reports: 'Reportes',
        patient_listing: 'Lista de pacientes',
        new_patient: 'Nuevo paciente',
        this_week: 'Esta semana',
        today: 'Hoy',
        search: 'Buscar',
        add_appointment: 'Nueva cita',
        dispense: 'Dispense',
        return_medication: 'Devolver medicamento',
        invoices: 'Facturas',
        new_invoice: 'Nueva factura',
        prices: 'Precios',
        price_profiles: 'Perfil de precios',
        lookup_lists: 'Lista de busuedas',
        address_fields: 'Campos de dirección',
        load_db: 'Cargar base de datos',
        users: 'Usuarios',
        new_user: 'Nuevo usuario',
        user_roles: 'Roles'
      },
      actions: {
        logout: 'Salir',
        login: 'Ingresar'
      },
      about: 'Información de HospitalRun'
    },
    user: {
      plus_new_user: '+ nuevo usuario',
      users_page_tile: 'Listado de usuarios'
    },
    admin: {
      address_options: 'Opciones de direcciones',
      lookup_lists: 'Lista de busqueda',
      load_db: 'Cargar Base de datos',
      user_roles: 'Roles',
      users: 'Usuarios',
      address: {
        address1_label: 'Texto direccion 1',
        address2_label: 'Texto direccion 2',
        address3_label: 'Texto direccion 3',
        address4_label: 'Texto direccion 4',
        include1_label: 'Incluir 1',
        include2_label: 'Incluir 2',
        include3_label: 'Incluir 3',
        include4_label: 'Incluir 4',
        titles: {
          options_saved: 'Opciones guardadas'
        },
        messages: {
          address_saved: 'las opciones de dirección han sido guardadas'
        },

        new_title: 'Opciones de dirección',
        edit_title: 'Opciones de dirección',
        address_label: 'Direcciones'
      },
      loaddb: {
        progress_message: 'Por favor espere mientras la base de datos es cargada.',
        progress_title: 'Cargando ase de datos',
        display_alert_title: 'Seleccione un archivo para cargar',
        display_alert_message: 'Por favor seleccione un archivo para ser cargado.',
        error_display_alert_title: 'Error cargando',
        error_display_alert_message: 'La base de datos no fue cargada el error fue: {{error}}',
        edit_title: 'Cargar bd'
      },
      lookup: {
        delete_value_inventory_type_medication_title: 'No se puede eliminar el medicamento',
        delete_value_inventory_type_medication_message: 'El tipo de inventario de medicamentos no se pueden eliminar porque se necesita para el módulo de medicación.',
        delete_value_lab_pricing_type_procedure_title: 'No se puede eliminar el tipo de precio',
        delete_value_lab_pricing_type_procedure_message: 'El tipo de precio Procedimiento Lab no se puede eliminar porque es necesaria para el módulo de laboratorios.',
        delete_value_imaging_pricing_type_procedure_title: 'No se puede eliminar el tipo de imagen',
        delete_value_imaging_pricing_type_procedure_message: 'No se puede eliminar porque es necesario para el modulo de radiografias',
        delete_value_visit_type_admission_title: 'No se puede eliminar admision tipo visita',
        delete_value_visit_type_admission_message: 'Tipo de visita es necesaria para el modulo de admisiones.',
        delete_value_visit_type_imaging_title: 'No se puede eliminar el tipo radiografia',
        delete_value_visit_type_imaging_message: 'No se puede eliminar por que es necesario para el modulo de radiografias.',
        delete_value_visit_type_lab_title: 'No se puede eliminar el tipo laboratorio',
        delete_value_visit_type_lab_message: 'Es necesario para el modulo de laboratorio.',
        delete_value_visit_type_pharmacy_title: 'No se puede eliminar el tipo farmacia',
        delete_value_visit_type_pharmacy_message: 'Es requerido por el modulo de recetas.',
        alert_import_list_title: 'Seleccione un archivo para importar',
        alert_import_list_message: 'Por favor seleccione un archivo para importar.',
        alert_import_list_save_title: 'Lista importada',
        alert_import_list_save_message: 'Lista de busqueda importada.',
        alert_import_list_update_title: 'Lista salvada',
        alert_import_list_update_message: 'La lista de busqueda ha sido salvada.',
        page_title: 'Listas de busqueda',
        edit: {
          template: {
            add_title: 'Adicionar valor',
            edit_title: 'Editar valor',
            update_button_text_add: 'Adicionar',
            update_button_text_update: 'Actualizar',
            label_title: 'Valor'
          }
        },
        anesthesia_types: 'Tipos de anestesia',
        anesthesiologists: 'Anestesiologo',
        billing_categories: 'Categorias de facturacion',
        clinic_list: 'Ubicacion de las clinicas',
        country_list: 'Paises',
        diagnosis_list: 'Diagnosticos',
        cpt_code_list: 'Codigos CPT',
        expense_account_list: 'Cuentas de gastos',
        aisle_location_list: 'Ubicacion de inventario de pasillo',
        warehouse_list: 'Ubicacciones de inventarios',
        inventory_types: 'Tipos de inventarios',
        imaging_pricing_types: 'Tipos de precios de radiografias',
        lab_pricing_types: 'Precios de laboratorio',
        patient_status_list: 'Lista de estado de pacientes',
        physician_list: 'Medicos',
        procedure_list: 'Procedimientos',
        procedure_locations: 'Ubicacion de los procedimientos',
        procedure_pricing_types: 'Tipos de procedimientos y precios',
        radiologists: 'Radiologo',
        unit_types: 'Tipos de unidad',
        vendor_list: 'Proveedor',
        visit_location_list: 'Lugares de visista',
        visit_types: 'Tipos de visita',
        ward_pricing_types: 'Tipos de las tarifas'
      },
      roles: {
        capability: {
          admin: 'Administracion',
          load_db: 'Cargar base de datos',
          update_config: 'Actualizar configuracion',
          appointments: 'Citas',
          add_appointment: 'Adicionar cita',
          billing: 'Facturacion',
          add_charge: 'Adicionar cargo (valor)',
          add_pricing: 'Adicionar precio',
          add_pricing_profile: 'Adicionar perfil de precios',
          add_invoice: 'Adicionar factura',
          add_payment: 'Adicionar pago',
          delete_invoice: 'Eliminar factura',
          delete_pricing: 'Eliminar precio',
          delete_pricing_profile: 'Eliminar perfil de precio',
          edit_invoice: 'Editar factura',
          invoices: 'Facturas',
          override_invoice: 'Sobreescribir factura',
          pricing: 'Precio',
          patients: 'Pacientes',
          add_diagnosis: 'Adicionar diagnostico',
          add_photo: 'Adicionar foto',
          add_patient: 'Adicionar paciente',
          add_visit: 'Adicionar visita',
          add_vitals: 'Adicionar partes vitales',
          admit_patient: 'Admitir paciente',
          delete_photo: 'Eliminar foto',
          delete_patient: 'Eliminar paciente',
          delete_appointment: 'Eliminar cita',
          delete_diagnosis: 'Eliminar diagnostico',
          delete_procedure: 'Eliminar procedimiento',
          delete_socialwork: 'Eliminar trabajo social',
          delete_vitals: 'Eliminar organo vital',
          delete_visit: 'Eliminar visita',
          discharge_patient: 'Descartar paciente',
          patient_reports: 'Reportes por paciente',
          visits: 'Visitas',
          medication: 'Medicación',
          add_medication: 'Adicionar medicación',
          delete_medication: 'Eliminar medicación',
          fulfill_medication: 'Cumplir la medicación',
          labs: 'Laboratorios',
          add_lab: 'Adicionar laboratorio',
          complete_lab: 'Completar laboratorio',
          delete_lab: 'Eliminar laboratorio',
          imaging: 'Radiografia',
          add_imaging: 'Adicionar radiografia',
          complete_imaging: 'Completar radiografia',
          delete_imaging: 'Eliminar radiografia',
          inventory: 'Inventario',
          add_inventory_request: 'Pedido de inventario',
          add_inventory_item: 'Adicionar elemento al inventario',
          add_inventory_purchase: 'Adicionar compra',
          adjust_inventory_location: 'Ajustar lugar elemento en el inventario',
          delete_inventory_item: 'Eliminar elemento del inventario',
          delete_inventory_purchase: 'Eliminar compra del inventario',
          fulfill_inventory: 'Cumplimiento de inventario',
          user_roles: 'Roles de usuario'
        },
        messages: {
          role_saved: 'El {{roleName}} rol ha sido salvado.'
        },
        titles: {
          role_saved: 'Role salvado'
        }
      }
    },
    labels: {
      cptcode: 'Codigo CPT',
      loading: 'Cargando',
      name: 'Nombre',
      patient: 'Paciente',
      quantity: 'Cantidada',
      requested_on: 'Pedido On',
      date: 'Fecha',
      date_of_birth: 'Fecha de nacimiento',
      date_of_birth_short: 'FDN',
      date_requested: 'Fecha de pedido',
      date_completed: 'Fecha completada',
      description: 'Descripción',
      requested_by: 'Pedido por|',
      fulfill: 'Cumplomiento',
      fulfill_request: 'Pedido de cumplimiento',
      fulfill_request_now: 'Pedido de cumplimiento ahora',
      actions: 'Acciones',
      action: 'Accion',
      notes: 'Notas',
      edit: 'Editar',
      image_orders: 'Ordenes de radiografias',
      lab_orders: 'Ordenes de laboratorio',
      patient_history: 'Historia del paciente',
      imaging_type: 'Tipo de radiografia',
      result: 'Resultado',
      results: 'Resultados',
      visit: 'Visita',
      requests: 'Pedido',
      completed: 'Completado',
      id: 'Id',
      on: 'on',
      type: 'Tipo',
      sex: 'Genero',
      age: 'Edad',
      username: 'Nombre de usuario',
      email: 'Email',
      role: 'Rol',
      'delete': 'Eliminar',
      user_can_add_new_value: 'Los usuarios pueden agregar nuevos valores',
      value: 'Valor',
      lookup_type: 'Tipo de busqueda',
      import_file: 'Importar archivo',
      file_load_successful: 'Archivo cargado exitosamente',
      file_to_Load: 'Archivo cargado',
      start_time: 'Hora de inicio',
      start_date: 'Fecha de inicio',
      end_time: 'Hora de finalización',
      end_date: 'Fecha final',
      doc_read: 'Leer documento',
      doc_written: 'Documento escrito',
      display_name: 'Nombre para mostrar',
      password: 'Contraseña',
      edit_user: 'Editar usuario',
      new_user: 'Nuevo usuario',
      delete_user: 'Eliminar usuario',
      medication: 'Medicación',
      status: 'Estado',
      add_new_outpatient_visit: '--Nueva visita a paciente externo--',
      prescription: 'Receta medica',
      prescription_date: 'Fecha de la receta medica',
      bill_to: 'Facturar a',
      pull_from: 'Traer de',
      fulfilled: 'Cumplido',
      delete_request: 'Eliminar pedido',
      location: 'Ubicacion',
      provider: 'Proveedor',
      'with': 'con',
      all_day: 'Todo el dia',
      physician: 'Médico',
      assisting: 'Asistencia',
      anesthesia: 'Anestesia',
      procedures: 'Procedimiento'
    },
    messages: {
      no_items_found: 'Elementos no encontrados.',
      no_history_available: 'Historia no disponible.',
      create_new_record: 'Crear un nuevo registro?',
      create_new_user: 'Crear un nuevo usuario?',
      no_users_found: 'Ningun usuario encontrado.',
      are_you_sure_delete: 'Estas seguro de eliminar este usuario {{user}}?',
      user_has_been_saved: 'El usuario ha sido salvado.',
      user_saved: 'Usuario salvado',
      on_behalf_of: 'a nombre de',
      new_patient_has_to_be_created: 'Un nuevo paciente debe ser creado...Por favor espere..',
      no_notes_available: 'No hay notas clínicas adicionales están disponibles para esta visita.',
      sorry: 'Lo sentimos, un error ha ocurrido...'
    },
    alerts: {
      please_wait: 'Por favor espere'
    },
    buttons: {
      complete: 'Completado',
      cancel: 'Cancelar',
      close: 'Cerrar',
      return_button: 'Regresar',
      barcode: 'Codigo de barras',
      add: 'Adicionar',
      update: 'Actualizar',
      ok: 'Ok',
      fulfill: 'Cumplimiento',
      remove: 'Remover',
      'delete': 'Eliminar',
      new_user: 'Nuevo usuario',
      add_value: 'Adicionar valor',
      new_note: 'Nueva nota',
      'import': 'Importar',
      load_file: 'Cargar archivo',
      new_request: 'Nueva solicitud',
      all_requests: 'Todas las solicitudes',
      dispense: 'Repartir',
      new_item: '+ nuevo elemento',
      new_request_plus: '+ nuevo pedido',
      add_visit: 'Adicionar visita',
      search: 'Buscar'
    },
    login: {
      messages: {
        sign_in: 'por favor ingrese',
        error: 'Nombre de usuario o clave incorrectos.'
      },
      labels: {
        password: 'Clave',
        username: 'Nombre de usuario',
        sign_in: 'Ingresar'
      }
    },
    inventory: {
      edit: {
        cost: 'Costo por unidad:',
        delivered: 'Enviado A:',
        location: 'Cambio de ubicación:',
        prescription: 'Recetado por:',
        pulled: 'Pulled From:',
        quantity: 'Quantity at Completion:',
        reason: 'Razón:',
        returned: 'Regresado al paciente:',
        transferred_from: 'Transferido a:',
        transferred_to: 'Transferido a:'
      },
      labels: {
        action: 'Acción',
        add: 'Adicionar',
        adjust: 'Adjustar',
        adjustment_date: 'Fecha de ajuste',
        adjustment_for: 'Ajustado para',
        adjustment_type: 'Tipo de ajuste',
        aisle: 'Pasillo',
        aisle_location: 'Ubicación pasillo',
        all_inventory: 'Todo el inventario',
        bill_to: 'Facturao a',
        consume_purchases: 'Consume Purchases',
        consumption_rate: 'Tasa de consumo',
        cost: 'Costo',
        cost_per_unit: 'Costo por Unidad',
        cross_reference: 'Referencia cruzada',
        current_quantity: 'Cantidad actual',
        date_completed: 'Fecha completado',
        date_effective: 'Gecha efectiva',
        date_end: 'Fecha final',
        date_start: 'Fecha inicial',
        date_received: 'Fecha recibido',
        date_tranferred: 'Fecha transferencia',
        days_left: 'Dias restantes',
        delivery_aisle: 'Enviado a pasillo',
        delivery_location: 'Ubicación del envio',
        distribution_unit: 'Unidad de distribución',
        delete_item: 'Eliminar elemento',
        details: 'Detalles',
        edit_item: 'Editar elemento',
        expense: 'Gastos a',
        expiration_date: 'Fecha de vencimiento',
        fulfill_request: 'Pedido de cumplimiento',
        fulfill_request_now: 'Pedido de incumplimiento para hoy',
        gift: 'Regalo en especie',
        gift_usage: 'Uso del regalo en especie',
        gift_in_kind_no: 'N',
        gift_in_kind_yes: 'Y',
        inventory_consumed: 'Inventario consumido',
        inventory_item: 'Elemento del inventario',
        inventory_obsolence: 'Obsolescencia de inventario',
        invoice_items: 'Articulos de factura',
        invoice_line_item: 'Elemento de la factura linea',
        invoice_number: 'Factura numero',
        item: 'Elemento',
        items: 'Elementos',
        item_number: 'Numero de elemento',
        location: 'Ubicación',
        locations: 'Ubicaciones',
        name: 'Nombre',
        mark_as_consumed: 'Marcar como consumido',
        new_item: 'Nuevo elemento',
        original_quantity: 'Cantidad original',
        print: 'Imprimir',
        print_barcode: 'Imprimir codigo de  barras',
        printer: 'Impresora',
        pull_from: 'Traido de',
        purchases: 'Compras',
        purchase_cost: 'Costo de compra',
        purchase_info: 'Informacion de la compra',
        quantity: 'Cantidad ({{unit}})',
        quantity_available: 'Cantidad disponible',
        quantity_on_hand: 'Cantidad a la mano',
        quantity_requested: 'Cantidad pedida',
        rank: 'Ranking',
        reason: 'Razón',
        remove: 'Remover',
        reorder_point: 'Reordenar punto',
        requested_items: 'Elementos solicitados',
        sale_price_per_unit: 'Costo de venta por unidad',
        save: 'Guardar',
        serial_number: 'Serial/Numero de lote',
        total: 'Total',
        total_cost: 'Costo total',
        total_received: 'Total Recivido: {{total}}',
        transaction: 'Transaccion',
        transactions: 'Transacciones',
        transfer: 'Translados',
        transfer_from: 'Translado desde',
        transfer_to: 'Translado a ubicación',
        transfer_to_aisle: 'Translado a pasillo',
        unit: 'Unidad',
        unit_cost: 'Unidad Costo',
        vendor: 'Proveedor',
        vendor_item_number: 'Proveedor numero de elemento',
        xref: 'XRef'
      },
      messages: {
        adjust: 'Por favor ajust las cantidades en la ubicación adecuada(s) la diferencia de la cuenta es {{difference}}.',
        create_request: 'Crear un nuevo pedido?',
        'delete': 'Estas seguro de eliminar {{name}}?',
        item_not_found: 'El elemento del inventario <strong>{{item}}</strong> no se pudo encontrar.<br>Si desea crear un nuevo elemento, Ingrese la información abajo.<br>De lo contrario opria cancelar para volver.',
        loading: 'Cargando transacciones ...',
        purchase_saved: 'La compra de inventario ha sido salvada.',
        no_requests: 'No se encontraron pedidos.',
        no_items: 'No se encontraron elementos.',
        quantity: 'La cantidad total <strong>({{quantity}})</strong> no encaja con la cantidad total en las ubicaciones <strong>({{locationQuantity}})</strong>.',
        remove_item: 'Esta seguro de eliminar este elemento de la factura?',
        remove_item_request: 'Seguro que quiere eliminar este elemento del pedido?',
        request_fulfilled: 'El pedido de inventario ha sido procesado.',
        request_updated: 'El pedido de inventario ha sido actualizado.',
        warning: 'Valide los campos requeridos (marcados con *) corrija los errores antes de adicionar.'
      },
      reports: {
        rows: {
          adjustments: 'Ajustes',
          adjustments_total: 'Ajustes totales',
          balance_begin: 'Balance inicial',
          balance_end: 'Balance Final',
          category: 'Categoria',
          consumed: 'Consumado',
          consumed_gik: 'GiK Consumido',
          consumed_gik_total: 'Total GiK Consumido',
          consumed_puchases: 'Total de lo comprado consumido',
          consumed_purchases_total: 'Total de lo comprado consumido',
          consumed_total: 'Total consumido',
          err_in_fin_sum: 'Error en _generateFinancialSummaryReport: ',
          err_in_find_pur: 'Error en _findInventoryItemsByPurchase: ',
          err_in_find_req: 'Error en _findInventoryItemsByRequest: ',
          expenses_for: 'Gatos para: ',
          no_account: '(No Cuenta)',
          subtotal: 'Subtotal: ',
          subtotal_for: 'Subtotal para {{category}} - {{account}}: ',
          total: 'Total: ',
          total_for: 'Total para {{var}}: ',
          total_purchases: 'Compras Totales',
          transfer1: '{{quantity}} de {{location}}',
          trasnfer2: 'De: {{source}} A: {{target}}'
        },
        adjustment: 'Ajuste detallado',
        days_supply: 'Dias de inventario restante',
        expense_detail: 'Gastos detallados',
        expense_sum: 'Resumen de gastos',
        expiration: 'Fecha de expiracion',
        'export': 'Exportar reporte',
        fields: 'Campos a incluir',
        finance: 'Resumen de finanzas',
        generate: 'Generar reporte',
        inv_location: 'Inventario por ubicacion',
        inv_valuation: 'Inventario por valoracion',
        purchase_detail: 'Compras detalladas',
        purchase_sum: 'Resumen de compras',
        report_type: 'Tipo de reporte',
        stock_transfer_detail: 'Detalle de traslado de stock',
        stock_transfer_sum: 'Resumen traslado de stock',
        stock_usage_detail: 'Detalle de uso de stock',
        stock_usage_sum: 'Resumen uso de stock'
      },
      titles: {
        add_purchase: 'Adicionar compra',
        add_request: 'Nuevo pedido',
        adjustment: 'Ajuste',
        edit_purchase: 'Editar compra',
        edit_request: 'Editar pedido',
        inventory_item: 'Nuevo elemento de inventario',
        inventory_report: 'Reporte de inventario',
        purchase_saved: 'Compras de inventario guardadas',
        quick_add_title: 'Nuevo elemento de inventario',
        remove_item: 'Remover elemento',
        request_fulfilled: 'Pedido cumplido',
        request_updated: 'Pedido actualizado',
        transfer: 'Trasladar elementos',
        warning: 'Peligro!!!!!'
      }
    },
    imaging: {
      page_title: 'Pedido de radriografia',
      section_title: 'Radiografias',
      buttons: {
        new_button: '+ new radiografia'
      },
      labels: {
        radiologist: 'Radiologo',
        add_new_visit: '--Adicionar nueva visita--'
      },
      messages: {
        no_completed: 'No de items encontrados.'
      },
      titles: {
        completed_imaging: 'Radiografia completada',
        edit_title: 'Pedido de edicion de radiografia',
        new_title: 'Nuevo pedido de radiografia'
      },
      alerts: {
        completed_title: 'Pedido de radiografia completado',
        completed_message: 'El pedido de radiografia ha sido completado.',
        saved_title: 'Pedido de radiografia salvado',
        saved_message: 'El pedido de radiografia ha sido guardado.'
      }
    },
    medication: {
      page_title: 'Pedido de medicación',
      section_title: 'Medication',
      return_medication: 'Retorno de medicación',
      buttons: {
        dispense_medication: 'dispensar medicación',
        new_button: '+ nuevo pedido',
        return_medication: 'debolver medicacion'
      },
      titles: {
        completed_medication: 'Medicacion completada',
        edit_medication_request: 'Editar pedido de medicacion',
        new_medication_request: 'Nuevo pedido de medicacion'
      },
      messages: {
        create_new: 'Crear un nuevo pedido de medicacion?',
        confirm_deletion: 'Estas seguro de eliminar este pedido de medicación?'
      },
      labels: {
        refills: 'Recargas',
        quantity_requested: 'Cantidad solicitada',
        quantity_dispensed: 'Cantidad dispensada',
        quantity_distributed: 'Cantidad distribuida',
        quantity_to_return: 'Cantidad a devolver',
        return_location: 'Retornar a ubicación',
        return_aisle: 'Devolve a pasillo',
        return_reason: 'Razon por la que se devuelve/Nota',
        adjustment_date: 'Fecha de ajuste',
        credit_to_account: 'Credito a cuenta'
      },
      alerts: {
        returned_title: 'Medicacion devuelta',
        returned_message: 'La medicacion ha sido marcada para devolver.',
        saved_title: 'Pedido de medicacion guardado',
        saved_message: 'La elemento de medicación ha sido guardado.',
        fulfilled_title: 'Pedido de medicación cumplido'
      }
    },
    appointments: {
      current_screen_title: 'Listado de citas',
      edit_title: 'Editar cita',
      new_title: 'Nueva cita',
      section_title: 'Citas',
      this_week: 'Citas esta semana',
      missed: 'Citas perdidas',
      search_title: 'Buscar citas',
      today_title: 'Citas para hoy',
      messages: {
        delete_appointment_message: 'Esta seguro de eliminar esta cita?',
        end_time_later_than_start: 'Seleccione una hora de finalizacion despues de la de inicio.'
      },
      buttons: {
        new_button: '+ nueva cita'
      }
    },
    visits: {
      edit: {
        actions: 'Actiones',
        edit: 'Editar',
        date: 'Fecha',
        authored_by: 'Escrito por',
        note: 'Nota',
        notes: 'Notas',
        new_note: 'Nueva nota',
        visit_information: 'Informacion de visita',
        new_appointment: 'Nuevas citas',
        add_diagnosis: 'Adicionar diagnostico',
        diagnosis: 'Diagnostico',
        'delete': 'Eliminar',
        procedure: 'Procedimiento',
        procedures: 'Procedimientos',
        new_procedure: 'Nuevo procedimiento',
        labs: 'Laboratorios',
        new_lab: 'New laboratorio',
        imaging: 'Radiografias',
        new_imaging: 'Nueva radiografia',
        medication: 'Medicacion',
        new_medication: 'Nueva mediicación'
      }
    },
    labs: {
      section_title: 'Laboratorios',
      requests_title: 'Pedido de laboratorio',
      edit_title: 'Editar pedido de laboratorio',
      new_title: 'Nuevo pedido de laboratorio',
      delete_title: 'Eliminar pedido',
      completed_title: 'Completar laboratorio',
      labels: {
        lab_type: 'Tipo de laboratorio',
        add_new_visit: '--Adicionar nueva visita--'
      },
      messages: {
        no_items_found: 'No boratorios encontrados.',
        create_new_record: 'Crear un registro?',
        confirm_deletion: 'Esta seguro de eliminar esta solicitud de laboratorio?',
        no_completed: 'No elementos completados encontrados.'
      },
      buttons: {
        new_button: '+ nuevo laboratorio'
      },
      alerts: {
        request_completed_title: 'Pedido de laboratorio competado',
        request_completed_message: 'El pedido de laboratorio ha sido completado.',
        request_saved_title: 'Silicitud de laboratorio guardado',
        request_saved_message: 'El pedido de laboratorio ha sido guardado.'
      }
    },
    common: {
      actions: 'Acciones'
    },
    patients: {
      notes: {
        on_behalf_of_label: 'A nombre de',
        on_behalf_of_copy: 'a nombre de',
        please_select_a_visit: 'Por favor seleccione una visista',
        note_label: 'Nota'
      }
    }
  };
});
define('hospitalrun/locales/fr/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'Que voulez-vous faire?'
    },
    navigation: {
      imaging: 'Imagerie',
      inventory: 'Inventaire',
      patients: 'Patients',
      appointments: 'Rendez-vous',
      medication: 'Médicament',
      labs: 'Labos',
      billing: 'Facturation',
      administration: 'Administration',
      subnav: {
        requests: 'Demandes',
        items: 'Articles',
        completed: 'Traité',
        new_request: 'Nouvelle demande',
        inventory_received: 'Inventaire reçu',
        reports: 'Rapports',
        patient_listing: 'Liste des patients',
        new_patient: 'Nouveau patient',
        this_week: 'Cette semaine',
        today: 'Aujourd\'hui',
        search: 'Rechercher',
        add_appointment: 'Ajouter un rendez-vous',
        dispense: 'Dispenser',
        return_medication: 'Retourner un Médicament',
        invoices: 'Factures',
        new_invoice: 'Nouvelle facture',
        prices: 'Prix',
        price_profiles: 'Profils de prix',
        lookup_lists: 'Listes de référence',
        address_fields: 'Champs d\'adresse',
        load_db: 'Importer une BD',
        users: 'Utilisateurs',
        new_user: 'Nouvel utilisateur'
      },
      actions: {
        logout: 'Deconnexion',
        login: 'Connexion'
      },
      about: 'À propos de HospitalRun'
    },
    user: {
      plus_new_user: '+ nouvel utilisateur',
      users_page_tile: 'Liste des Utilisateurs'
    },
    admin: {
      address_options: 'Options d\'adresse',
      lookup_lists: 'Listes de référence',
      load_db: 'Importer une BD',
      users: 'Utilisateurs',
      address: {
        address1_label: 'Label de l\'adresse 1',
        address2_label: 'Label de l\'adresse 2',
        address3_label: 'Label de l\'adresse 3',
        address4_label: 'Label de l\'adresse 4',
        include1_label: 'Label de l\'include 1',
        include2_label: 'Label de l\'include 2',
        include3_label: 'Label de l\'include 3',
        include4_label: 'Label de l\'include 4',
        titles: {
          options_saved: 'Options enregistrées'
        },
        messages: {
          address_saved: 'Les options d\'adresse ont été enregistrées'
        },

        new_title: 'Options d\'adresse',
        edit_title: 'Options d\'adresse',
        address_label: 'Adresse'
      },
      loaddb: {
        progress_message: 'Veuillez patienter durant le chargement de la base de données.',
        progress_title: 'Chargement de la base de données en cours',
        display_alert_title: 'Sélectionner le fichier à télécharger.',
        display_alert_message: 'Veuillez sélectionner le fichier à télécharger.',
        error_display_alert_title: 'Erreur de chargement',
        error_display_alert_message: 'La base de données ne pouvait pas être importée. L\'erreur etait: {{error}}',
        edit_title: 'Importer une BD'
      },
      lookup: {
        delete_value_inventory_type_medication_title: 'Impossible de supprimer le médicament',
        delete_value_inventory_type_medication_message: 'Impossible de supprimer le type d\'inventaire de médicaments car il est requis par le module Médicament.',
        delete_value_lab_pricing_type_procedure_title: 'Impossible de supprimer le type de prix de Labo',
        delete_value_lab_pricing_type_procedure_message: 'Impossible de supprimer le type de prix de procédure de Labo car il est requis par le module Labos.',
        delete_value_imaging_pricing_type_procedure_title: 'Impossible de supprimer le type de prix d\'imagerie',
        delete_value_imaging_pricing_type_procedure_message: 'Impossible de supprimer le type de prix de procédure d\'imagerie car il est requis par le module Imagerie.',
        delete_value_visit_type_admission_title: 'Impossible de supprimer la visite de type Admission',
        delete_value_visit_type_admission_message: 'Impossible de supprimer la visite de type Admission car il est requis par le module Visites.',
        delete_value_visit_type_imaging_title: 'Impossible de supprimer la visite de type Imagerie',
        delete_value_visit_type_imaging_message: 'Impossible de supprimer la visite de type Imagerie car il est requis par le module Imagerie.',
        delete_value_visit_type_lab_title: 'Impossible de supprimer la visite de type Labo',
        delete_value_visit_type_lab_message: 'Impossible de supprimer la visite de type Labo car il est requis par le module Labo.',
        delete_value_visit_type_pharmacy_title: 'Impossible de supprimer la visite de type Pharmacie',
        delete_value_visit_type_pharmacy_message: 'Impossible de supprimer la visite de type Labo car il est requis par le module Médicament.',
        alert_import_list_title: 'Sélectionner le fichier à importer',
        alert_import_list_message: 'Veuillez sélectionner le fichier à importer.',
        alert_import_list_save_title: 'Liste importée',
        alert_import_list_save_message: 'La liste de référence a été importée.',
        alert_import_list_update_title: 'Liste enregistrée',
        alert_import_list_update_message: 'La liste de référence a été enregistrée.',
        page_title: 'Listes de référence',
        edit: {
          template: {
            add_title: 'Ajouter une valeur',
            edit_title: 'Modifier la valeur',
            update_button_text_add: 'Ajouter',
            update_button_text_update: 'Mettre à jour',
            label_title: 'Valeur'
          }
        },
        anesthesia_types: 'Types d\'Anesthésie',
        anesthesiologists: 'Anesthésiologistes',
        billing_categories: 'Catégories de facturation',
        clinic_list: 'Emplacements de la clinique',
        country_list: 'Pays',
        diagnosis_list: 'Diagnostics',
        cpt_code_list: 'Codes CPT',
        expense_account_list: 'Comptes de dépense',
        aisle_location_list: 'Emplacements de rayon d\'inventaire',
        warehouse_list: 'Emplacements d\'inventaire',
        inventory_types: 'Types d\'inventaire',
        imaging_pricing_types: 'Types de prix d\'imagerie',
        lab_pricing_types: 'Types de prix de labo',
        patient_status_list: 'Liste de statut de patient',
        physician_list: 'Médécins',
        procedure_list: 'Procédures',
        procedure_locations: 'Emplacements des procédures',
        procedure_pricing_types: 'Types de prix de procédure',
        radiologists: 'Radiologistes',
        unit_types: 'Types d\'unité',
        vendor_list: 'Fournisseur',
        visit_location_list: 'Emplacements de visite',
        visit_types: 'Types de visite',
        ward_pricing_types: 'Types de prix de service'
      }
    },
    labels: {
      cptcode: 'Code CPT',
      loading: 'Chargement',
      name: 'Nom',
      patient: 'Patient',
      quantity: 'Quantité',
      requested_on: 'Demandé le',
      date: 'Date',
      date_of_birth: 'Date de naissance',
      date_of_birth_short: 'DdN',
      date_requested: 'Date de demande',
      date_completed: 'Date de traitement',
      description: 'Description',
      requested_by: 'Demandé par',
      fulfill: 'Traiter',
      fulfill_request: 'Traiter la demande',
      fulfill_request_now: 'Traiter la demande maintenant',
      actions: 'Actions',
      action: 'Action',
      notes: 'Notes',
      edit: 'Modifier',
      image_orders: 'Demandes d\'imagerie',
      lab_orders: 'Demandes de labo',
      patient_history: 'Historique du patient',
      imaging_type: 'Type d\'imagerie',
      result: 'Resultat',
      results: 'Resultats',
      visit: 'Visite',
      requests: 'Demandes',
      completed: 'Traité',
      id: 'Id',
      on: 'sur',
      type: 'Type',
      sex: 'Sexe',
      age: 'Age',
      username: 'Nom d\'utilisateur',
      email: 'Email',
      role: 'Rôle',
      'delete': 'Supprimer',
      user_can_add_new_value: 'Utilisateur peut ajouter de nouvelles valeurs',
      value: 'Valeur',
      lookup_type: 'Type de référence',
      import_file: 'Importer un fichier',
      file_load_successful: 'Téléchargement reussi',
      file_to_Load: 'Téléchargement de fichier',
      start_time: 'Heure de debut',
      start_date: 'Date de debut',
      end_time: 'Heure de fin',
      end_date: 'Date de fin',
      doc_read: 'Documents lus',
      doc_written: 'Documents écrits',
      display_name: 'Nom à afficher',
      password: 'Mot de passe',
      edit_user: 'Modifier un utilisateur',
      new_user: 'Nouvel utilisateur',
      delete_user: 'Supprimer un utilisateur',
      medication: 'Médicament',
      status: 'Statut',
      add_new_outpatient_visit: '--Ajouter une nouvelle consultation externe--',
      prescription: 'Ordonnance',
      prescription_date: 'Date de prescription',
      bill_to: 'Facturer à',
      pull_from: 'Tirer de',
      fulfilled: 'Traité',
      delete_request: 'Supprimer la demande',
      location: 'Emplacement',
      provider: 'Fournisseur',
      'with': 'Avec',
      all_day: 'Toute la journée',
      physician: 'Médecin',
      assisting: 'Assistant',
      anesthesia: 'Anesthésie',
      procedures: 'Procédures'
    },
    messages: {
      no_items_found: 'Aucun article retrouvé.',
      no_history_available: 'Aucune historique disponible.',
      create_new_record: 'Créer un nouveau dossier?',
      create_new_user: 'Créer un nouvel utilisateur?',
      no_users_found: 'Aucun utilisateur retrouvé.',
      are_you_sure_delete: 'Êtes-vous sûr de vouloir supprimer l\'utilisateur {{user}}?',
      user_has_been_saved: 'L\'utilisateur a été enregistré.',
      user_saved: 'Utilisateur enregistré',
      on_behalf_of: 'de la part de',
      new_patient_has_to_be_created: 'Un nouveau patient doit être crée...Veuillez attendre...',
      no_notes_available: 'Aucune note clinique supplémentaire disponible pour cette visite.',
      sorry: 'Désolé, quelque chose a mal tourné ...'
    },
    alerts: {
      please_wait: 'Veuillez attendre'
    },
    buttons: {
      complete: 'Traiter',
      cancel: 'Annuler',
      close: 'Fermer',
      return_button: 'Retourner',
      barcode: 'Code barre',
      add: 'Ajouter',
      update: 'Mettre à jour',
      ok: 'Ok',
      fulfill: 'Traiter',
      remove: 'Retirer',
      'delete': 'Supprimer',
      new_user: 'Nouvel utilisateur',
      add_value: 'Ajouter une valeur',
      new_note: 'Nouvelle note',
      'import': 'Importer',
      load_file: 'Télécharger le fichier',
      new_request: 'Nouvelle demande',
      all_requests: 'Toutes les demandes',
      dispense: 'Dispenser',
      new_item: '+ nouvel article',
      new_request_plus: '+ nouvelle demande',
      add_visit: 'Ajouter une visite',
      search: 'Rechercher'
    },
    login: {
      messages: {
        sign_in: 'veuillez-vous connecter',
        error: 'Nom d\'utilisateur ou mot de passe est incorrect.'
      },
      labels: {
        password: 'Mot de passe',
        username: 'Nom d\'utilisateur',
        sign_in: 'Connexion'
      }
    },
    inventory: {
      edit: {
        cost: 'Coût par unité:',
        delivered: 'Livré à:',
        location: 'Emplacement ajusté:',
        prescription: 'Ordonnance pour:',
        pulled: 'Tiré de:',
        quantity: 'Quantité après traitement:',
        reason: 'Motif:',
        returned: 'Retourné par le patient:',
        transferred_from: 'Transféré de:',
        transferred_to: 'Transféré à:'
      },
      labels: {
        action: 'Action',
        add: 'Ajouter',
        adjust: 'Ajuster',
        adjustment_date: 'Date d\'ajustement',
        adjustment_for: 'Ajustement pour',
        adjustment_type: 'Type d\'ajustement',
        aisle: 'Rayon',
        aisle_location: 'Emplacement du rayon',
        all_inventory: 'Toute l\'inventaire',
        bill_to: 'Facturer à',
        consume_purchases: 'Utiliser les achats',
        consumption_rate: 'Taux d\'utilisation',
        cost: 'Coût',
        cost_per_unit: 'Coût par unité',
        cross_reference: 'Reference',
        current_quantity: 'Quantité actuelle',
        date_completed: 'Date de traitement',
        date_effective: 'Date d\'effet',
        date_end: 'Date de fin',
        date_start: 'Date de debut',
        date_received: 'Date de réception',
        date_tranferred: 'Date  de transfert',
        days_left: 'Nombre de jours restant',
        delivery_aisle: 'Rayon de livraison',
        delivery_location: 'Emplacement de livraison',
        distribution_unit: 'Unité de distribution',
        delete_item: 'Supprimer l\'article',
        details: 'Détails',
        edit_item: 'Modifier l\'article',
        expense: 'Dépenses pour',
        expiration_date: 'Date d\'expiration',
        fulfill_request: 'Traiter la demande',
        fulfill_request_now: 'Traiter la demande maintenant',
        gift: 'Don en nature',
        gift_usage: 'Utilisation de don en nature',
        gift_in_kind_no: 'N',
        gift_in_kind_yes: 'O',
        inventory_consumed: 'Inventaire utilisé',
        inventory_item: 'Article à inventorier',
        inventory_obsolence: 'Inventory Obsolence',
        invoice_items: 'Articles de facture',
        invoice_line_item: 'Article de facture',
        invoice_number: 'Numero de facture',
        item: 'Article',
        items: 'Articles',
        item_number: 'Numero d\'article',
        location: 'Emplacement',
        locations: 'Emplacements',
        name: 'Nom',
        mark_as_consumed: 'Marqué comme utilisé',
        new_item: 'Nouvel article',
        original_quantity: 'Quantité originale',
        print: 'Imprimer',
        print_barcode: 'Imprimer le code barre',
        printer: 'Imprimante',
        pull_from: 'Tirer de',
        purchases: 'Achats',
        purchase_cost: 'Coût d\'achat',
        purchase_info: 'Détails de l\'achat',
        quantity: 'Quantité ({{unit}})',
        quantity_available: 'Quantité disponible',
        quantity_on_hand: 'Quantité en main',
        quantity_requested: 'Quantité demandée',
        rank: 'Rang',
        reason: 'Motif',
        remove: 'Retirer',
        reorder_point: 'Point de commande',
        requested_items: 'Articles demandés',
        sale_price_per_unit: 'Prix de vente unitaire',
        save: 'Enregistrer',
        serial_number: 'Numéro de série / lot',
        total: 'Total',
        total_cost: 'Coût total',
        total_received: 'Total reçu: {{total}}',
        transaction: 'Transaction',
        transactions: 'Transactions',
        transfer: 'Transférer',
        transfer_from: 'Transféré de',
        transfer_to: 'Transférer à l\'emplacement',
        transfer_to_aisle: 'Transférer à l\'emplacement du rayon',
        unit: 'Unité',
        unit_cost: 'Coût unitaire',
        vendor: 'Fournisseur',
        vendor_item_number: 'Numéro d\'article fournisseur',
        xref: 'XRef'
      },
      messages: {
        adjust: 'Veuillez ajuster les quantités sur le ou les emplacement(s) appropriée(s) pour tenir compte de la différence de {{difference}}.',
        create_request: 'Créer une nouvelle demande?',
        'delete': 'Etes-vous sûr que vous souhaitez supprimer {{name}}?',
        item_not_found: 'L\'article d\'inventaire <strong>{{item}}</strong> ne pouvait pas être retrouvé.<br>Si vous voulez créer un nouvel article d\'inventaire, veuillez saisir les informations ci-dessous. <br>Sinon, appuyez sur le bouton Annuler pour retourner.',
        loading: 'Chargement des transactions en cours…',
        purchase_saved: 'Les achats d\'inventaire ont été enregistrés avec succès.',
        no_requests: 'Aucune demande retrouvée.',
        no_items: 'Aucun article retrouvé.',
        quantity: 'La quantité totale de <strong>({{quantity}})</strong> ne correspond pas à la quantité totale dans les emplacements <strong>({{locationQuantity}})</strong>.',
        remove_item: 'Etes-vous sûr de vouloir retirer cet article de cette facture?',
        remove_item_request: 'Etes-vous sûr de vouloir supprimer cet article de cette demande?',
        request_fulfilled: 'La demande d\'inventaire a été traitée.',
        request_updated: 'La demande d\'inventaire a été mis à jour.',
        warning: 'Veuillez remplir les champs obligatoires (marqués d\'un *) et corriger les erreurs avant d\'ajouter.'
      },
      reports: {
        rows: {
          adjustments: 'Ajustements',
          adjustments_total: 'Ajustements totaux',
          balance_begin: 'Solde d\'ouverture',
          balance_end: 'Solde de clôture',
          category: 'Catégorie',
          consumed: 'Utilisé',
          consumed_gik: 'GiK utilisé',
          consumed_gik_total: 'GiK total utilisé',
          consumed_puchases: 'Achats utilisés',
          consumed_purchases_total: 'Achats totaux utilisés',
          consumed_total: 'Total utilisé',
          err_in_fin_sum: 'Erreur dans _generateFinancialSummaryReport: ',
          err_in_find_pur: 'Erreur dans _findInventoryItemsByPurchase: ',
          err_in_find_req: 'Erreur dans _findInventoryItemsByRequest: ',
          expenses_for: 'Dépenses pour: ',
          no_account: '(Pas de compte)',
          subtotal: 'Sous-total: ',
          subtotal_for: 'Sous-total pour {{category}} - {{account}}: ',
          total: 'Total: ',
          total_for: 'Total pour {{var}}: ',
          total_purchases: 'Achats totaux',
          transfer1: '{{quantity}} de {{location}}',
          trasnfer2: 'De: {{source}} A: {{target}}'
        },
        adjustment: 'Ajustement détaillée',
        days_supply: 'Stock restant (en nombre de jours)',
        expense_detail: 'Détails des dépenses',
        expense_sum: 'Résumé des dépenses',
        expiration: 'Date d\'expiration',
        'export': 'Exporter un rapport',
        fields: 'Champs à inclure',
        finance: 'Résumé des finances',
        generate: 'Créer un rapport',
        inv_location: 'Inventaire par emplacement',
        inv_valuation: 'Valorisation de l\'inventaire',
        purchase_detail: 'Détails de l\'achat',
        purchase_sum: 'Résumé de l\'achat',
        report_type: 'Type de rapport',
        stock_transfer_detail: 'Transfert détaillé du stock',
        stock_transfer_sum: 'Résumé du transfert du stock',
        stock_usage_detail: 'Utilisation détaillée du stock',
        stock_usage_sum: 'Résumé de l\'utilisation du stock'
      },
      titles: {
        add_purchase: 'Ajouter un achat',
        add_request: 'Nouvelle demande',
        adjustment: 'Ajustement',
        edit_purchase: 'Modifier l\'achat',
        edit_request: 'Modifier la demande',
        inventory_item: 'Nouvel article d\'inventaire',
        inventory_report: 'Rapport d\'inventaire',
        purchase_saved: 'Achats d\'inventaire enregistrés',
        quick_add_title: 'Nouvel article d\'inventaire',
        remove_item: 'Retirer l\'article',
        request_fulfilled: 'Demande traitée',
        request_updated: 'Demande mis à jour',
        transfer: 'Transférer les articles',
        warning: 'Attention!!!!!'
      }
    },
    imaging: {
      page_title: 'Demandes d\'imagerie',
      section_title: 'Imagerie',
      buttons: {
        new_button: '+ nouvelle imagerie'
      },
      labels: {
        radiologist: 'Radiologiste',
        add_new_visit: '--Ajouter une nouvelle visite--'
      },
      messages: {
        no_completed: 'Aucun article traité retrouvé.'
      },
      titles: {
        completed_imaging: 'Imagerie traitée',
        edit_title: 'Modifier la demande d\'imagerie',
        new_title: 'Nouvelle demande d\'imagerie'
      },
      alerts: {
        completed_title: 'Demande d\'imagerie traitée',
        completed_message: 'La demande d\'imagerie a été traitée.',
        saved_title: 'Demande d\'imagerie enregistrée',
        saved_message: 'La demande d\'imagerie a été enregistrée.'
      }
    },
    medication: {
      page_title: 'Demandes de médicament',
      section_title: 'Médicament',
      return_medication: 'Retourner un médicament',
      buttons: {
        dispense_medication: 'dispenser un médicament',
        new_button: '+ nouvelle demande',
        return_medication: 'retourner un médicament'
      },
      titles: {
        completed_medication: 'Médicament traitée',
        edit_medication_request: 'Modifier une demande de médicament',
        new_medication_request: 'Nouvelle demande de médicament'
      },
      messages: {
        create_new: 'Créer une nouvelle demande de médicament?',
        confirm_deletion: 'Êtes-vous sûr de vouloir supprimer cette demande de médicaments?'
      },
      labels: {
        refills: 'Renouvellements',
        quantity_requested: 'Quantité demandé',
        quantity_dispensed: 'Quantité dispensé',
        quantity_distributed: 'Quantité distribué',
        quantity_to_return: 'Quantité à retourner',
        return_location: 'Emplacement de retour',
        return_aisle: 'Rayon de retour',
        return_reason: 'Motif/notes du retour',
        adjustment_date: 'Date d\'ajustement',
        credit_to_account: 'Créditer le compte'
      },
      alerts: {
        returned_title: 'Médicament retourné',
        returned_message: 'Le médicament a été marqué comme retourné.',
        saved_title: 'Demande de médicament enregistrée',
        saved_message: 'Le dossier de médicament a été enregistré.',
        fulfilled_title: 'Demande de médicament traitée'
      }
    },
    appointments: {
      current_screen_title: 'Liste des rendez-vous',
      edit_title: 'Modifier le rendez-vous',
      new_title: 'Nouveau rendez-vous',
      section_title: 'Rendez-vous',
      this_week: 'Rendez-vous de la semaine',
      search_title: 'Rechercher les rendez-vous',
      today_title: 'Rendez-vous d\'aujourd\'hui',
      messages: {
        delete_appointment_message: 'Etes-vous sûr de vouloir supprimer ce rendez-vous?',
        end_time_later_than_start: 'Veuillez sélectionnez une heure de fin plus tard que l\'heure de début.'
      },
      buttons: {
        new_button: '+ nouveau rendez-vous'
      }
    },
    visits: {
      edit: {
        actions: 'Actions',
        edit: 'Modifier',
        date: 'Date',
        authored_by: 'Crée par',
        note: 'Note',
        notes: 'Notes',
        new_note: 'Nouvelle note',
        visit_information: 'Détails de la visite',
        new_appointment: 'Nouveau rendez-vous',
        add_diagnosis: 'Ajoute un diagnostic',
        diagnosis: 'Diagnostic',
        'delete': 'Supprimer',
        procedure: 'Procédure',
        procedures: 'Procédures',
        new_procedure: 'Nouvelle procédure',
        labs: 'Labos',
        new_lab: 'Nouveau labo',
        imaging: 'Imagerie',
        new_imaging: 'Nouvelle imagerie',
        medication: 'Médicament',
        new_medication: 'Nouveau médicament'
      }
    },
    labs: {
      section_title: 'Labos',
      requests_title: 'Demandes de labo',
      edit_title: 'Modifier la demande de labo',
      new_title: 'Nouvelle demande de labo',
      delete_title: 'Supprimer la demande',
      completed_title: 'Labos traités',
      labels: {
        lab_type: 'Type de labo',
        add_new_visit: '--Ajouter une nouvelle visite--'
      },
      messages: {
        no_items_found: 'Aucun labo retrouvé.',
        create_new_record: 'Créer un nouveau dossier?',
        confirm_deletion: 'Etes-vous sûr de vouloir supprimer cette demande de labo?',
        no_completed: 'Aucun article traité retrouvé.'
      },
      buttons: {
        new_button: '+ nouveau labo'
      },
      alerts: {
        request_completed_title: 'Demande de labo traitée',
        request_completed_message: 'La demande de labo a été traitée.',
        request_saved_title: 'Demande de labo enregistrée',
        request_saved_message: 'La demande de labo a été enregistrée.'
      }
    },
    common: {
      actions: 'Actions'
    },
    patients: {
      notes: {
        on_behalf_of_label: 'De la part de',
        on_behalf_of_copy: 'de la part de',
        please_select_a_visit: 'Veuillez sélectionner une visite',
        note_label: 'Note'
      }
    }
  };
});
define('hospitalrun/locales/pt-BR/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'O que você gostaria de fazer?'
    },
    labels: {
      name: 'Nome',
      patient: 'Paciente',
      quantity: 'Quandidade',
      requested_on: 'Solicitado em',
      date_requested: 'Data da requisição',
      requested_by: 'Requisitado por',
      fulfill: 'Preencha',
      actions: 'Ações',
      action: 'Ação',
      notes: 'Notas',
      edit: 'Editar',
      imaging_type: 'Tipo de imagem',
      result: 'Resultdo',
      results: 'Resultados',
      visit: 'Visita',
      requests: 'Requisições',
      completed: 'Completo',
      id: 'Id',
      sex: 'Sexo',
      age: 'Idade'

    },
    messages: {
      no_items_found: 'Nenhum item encontrado',
      create_new_record: 'Criar uma nova gravação?'
    },
    buttons: {
      complete: 'Completo',
      cancel: 'Cencelar',
      return_button: 'Retornar',
      add: 'Adicionar',
      update: 'Atualizar',
      ok: 'Ok'
    },

    login: {
      messages: {
        sign_in: 'inscreva-se',
        error: 'Nome de usuário ou senha está incorreta.'
      },
      labels: {
        password: 'Senha',
        username: 'Usuario',
        sign_in: 'Entrar'
      }
    },
    inventory: {
      messages: {
        no_requests: 'Requisições não encontradas.',
        create_request: 'Criar uma nova requisição?'
      }
    },
    imaging: {
      page_title: 'Requisição de imagens',
      section_title: 'Imagem',
      buttons: {
        new_button: '+ nova imagem'
      },
      labels: {
        radiologist: 'Radiologista',
        add_new_visit: '--Adicionar novo visitante--'
      },
      messages: {
        no_completed: 'Nenhum item completo encontrado.'
      },
      titles: {
        completed_imaging: 'Imagem completa',
        edit_title: 'Requisição de edição de imagem',
        new_title: 'Nova requisição de imagem'
      },
      alerts: {
        completed_title: 'Requisição de imagem completa.',
        completed_message: 'A requisição de imagem esta completa.',
        saved_title: 'Requisição de imagem salva.',
        saved_message: 'A requisição de imagem foi salva.'
      }
    }
  };
});
define('hospitalrun/locales/ru/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'Что вы хотите сделать?'
    },
    labels: {
      name: 'Имя',
      patient: 'Пациент',
      quantity: 'Количество',
      requested_on: 'Запрошен',
      date_requested: 'Дата Запроса',
      date_completed: 'Дата Выполнения',
      requested_by: 'Запрошен',
      fulfill: 'Отправить',
      actions: 'Действия',
      action: 'Действие',
      notes: 'Заметки',
      edit: 'Редактировать',
      imaging_type: 'Тип визуализации',
      result: 'Результат',
      results: 'Результаты',
      visit: 'Осмотр',
      requests: 'Ожидающие',
      completed: 'Выполненые',
      id: 'Номер',
      sex: 'Пол',
      age: 'Возраст'
    },
    messages: {
      no_items_found: 'Ничего не найдено.',
      create_new_record: 'Создать новую запись?'
    },
    buttons: {
      complete: 'Готово',
      cancel: 'Отметить',
      return_button: 'Вернутся',
      add: 'Добавить',
      update: 'Обновить',
      ok: 'Ок'
    },
    login: {
      messages: {
        sign_in: 'войдите в систему',
        error: 'Неверное имя пользователя или пароль.'
      },
      labels: {
        password: 'Пароль',
        username: 'Имя пользователя',
        sign_in: 'Войти'
      }
    },
    inventory: {
      messages: {
        no_requests: 'Запросов не найдено.',
        create_request: 'Создать новый запрос?'
      }
    },
    imaging: {
      page_title: 'Запросы на визуализацию',
      section_title: 'Визуализация',
      buttons: {
        new_button: '+ новый запрос'
      },
      labels: {
        radiologist: 'Радиолог',
        add_new_visit: '--Добавить новый тип осмотра--'
      },
      messages: {
        no_completed: 'Не найдено выполненых запросов.'
      },
      titles: {
        completed_imaging: 'Выполненые запросы',
        edit_title: 'Редактировать запрос на визуализацию',
        new_title: 'Новый запрос на визуализацию'
      },
      alerts: {
        completed_title: 'Визуализация выполнена',
        completed_message: 'Запрос на визуализацию удовлетворён.',
        saved_title: 'Запрос сохранён',
        saved_message: 'Запрос на визуализацию сохранён.'
      }
    }
  };
});
define('hospitalrun/locales/tr/translations', ['exports'], function (exports) {
  exports['default'] = {
    dashboard: {
      title: 'Ne yapmak istersiniz?'
    },
    labels: {
      name: 'Ad',
      patient: 'Hasta',
      quantity: 'Miktar',
      requested_on: 'Açık Talep',
      date_requested: 'Talep Tarihi',
      date_completed: 'Bitiş tarihi',
      requested_by: 'Talep sahibi',
      fulfill: 'Fulfill',
      actions: 'İşlemler',
      action: 'İşlem',
      notes: 'Notlar',
      edit: 'Düzenle',
      imaging_type: 'Görüntüleme Tipi',
      result: 'Sonuç',
      results: 'Sonuçlar',
      visit: 'Ziyaret',
      requests: 'Talepler',
      completed: 'Tamamlandı',
      id: 'Id',
      sex: 'Cinsiyet',
      age: 'Yaş'
    },
    messages: {
      no_items_found: 'Hiçbir öğe bulunamadı.',
      create_new_record: 'Yeni bir kayıt oluştur?'
    },
    buttons: {
      complete: 'Bitir',
      cancel: 'Vazgeç',
      return_button: 'Geri Dön',
      add: 'Ekle',
      update: 'Güncelle',
      ok: 'Tamam'
    },
    login: {
      messages: {
        sign_in: 'GİRİŞ YAPIN',
        error: 'Kullanıcı adı veya parola hatalı.'
      },
      labels: {
        password: 'Parola',
        username: 'Kullanıcı Adı',
        sign_in: 'Giriş yap'
      }
    },
    inventory: {
      messages: {
        no_requests: 'Talep bulunamadı',
        create_request: 'Yeni talep oluştur?'
      }
    },
    imaging: {
      page_title: 'Görüntüleme talepleri',
      section_title: 'Görüntüleme',
      buttons: {
        new_button: '+ yeni görüntüleme'
      },
      labels: {
        radiologist: 'Radyolog',
        add_new_visit: '--Yeni Ziyaret Ekle--'
      },
      messages: {
        no_completed: 'Tamamlanmayan öğe bulunamadı.'
      },
      titles: {
        completed_imaging: 'Görüntüleme Tamamlandı',
        edit_title: 'Görüntüleme Talebini Düzenle',
        new_title: 'Yeni Görüntüleme Talebi'
      },
      alerts: {
        completed_title: 'Görüntüleme Talebi Tamamlandı',
        completed_message: 'Görüntüleme talebi başarıyla tamamlandı.',
        saved_title: 'Görüntüleme Talebi Kaydedildi',
        saved_message: 'Görüntüleme Talebi başarıyla kaydedildi.'
      }
    }
  };
});
define('hospitalrun/medication/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({
    showActions: false,
    startKey: []
  });
});
define('hospitalrun/medication/completed/route', ['exports', 'ember-i18n', 'hospitalrun/medication/index/route'], function (exports, _emberI18n, _hospitalrunMedicationIndexRoute) {
  exports['default'] = _hospitalrunMedicationIndexRoute['default'].extend({
    modelName: 'medication',
    pageTitle: (0, _emberI18n.translationMacro)('medication.titles.completed_medication'),
    searchStatus: 'Fulfilled'
  });
});
define("hospitalrun/medication/completed/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/medication/completed/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["medication/index"], [], ["loc", [null, [1, 0], [1, 30]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/medication/delete/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, _emberI18n, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {
    title: (0, _emberI18n.translationMacro)('labels.delete_request'),

    actions: {
      'delete': function _delete() {
        this.removeChildFromVisit(this.get('model'), 'medication').then((function () {
          this.get('model').destroyRecord().then((function () {
            this.send('closeModal');
          }).bind(this));
        }).bind(this));
      }
    }
  });
});
define("hospitalrun/medication/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/medication/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["medication.messages.confirm_deletion"], [], ["loc", [null, [8, 4], [8, 48]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/medication/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/medication/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _hospitalrunMixinsPatientId, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventorySelection['default'], _hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsPatientId['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsUserSession['default'], {
    medicationController: _ember['default'].inject.controller('medication'),
    newPatientId: null,

    expenseAccountList: _ember['default'].computed.alias('medicationController.expenseAccountList'),

    canFulfill: (function () {
      return this.currentUserCan('fulfill_medication');
    }).property(),

    isFulfilled: (function () {
      var status = this.get('model.status');
      return status === 'Fulfilled';
    }).property('model.status'),

    isFulfilling: (function () {
      var canFulfill = this.get('canFulfill'),
          isRequested = this.get('model.isRequested'),
          fulfillRequest = this.get('model.shouldFulfillRequest'),
          isFulfilling = canFulfill && (isRequested || fulfillRequest);
      this.get('model').set('isFulfilling', isFulfilling);
      return isFulfilling;
    }).property('canFulfill', 'model.isRequested', 'model.shouldFulfillRequest'),

    isFulfilledOrRequested: (function () {
      return this.get('isFulfilled') || this.get('model.isRequested');
    }).property('isFulfilled', 'model.isRequested'),

    prescriptionClass: (function () {
      var quantity = this.get('model.quantity');
      this.get('model').validate()['catch'](_ember['default'].K);
      if (_ember['default'].isEmpty(quantity)) {
        return 'required';
      }
    }).property('model.quantity'),

    quantityClass: (function () {
      var prescription = this.get('model.prescription'),
          returnClass = 'col-xs-3',
          isFulfilling = this.get('isFulfilling');
      if (isFulfilling || _ember['default'].isEmpty(prescription)) {
        returnClass += ' required';
      }
      return returnClass + ' test-quantity-input';
    }).property('isFulfilling', 'model.prescription'),

    quantityLabel: (function () {
      var i18n = this.get('i18n');
      var returnLabel = i18n.t('medication.labels.quantity_requested'),
          isFulfilled = this.get('isFulfilled'),
          isFulfilling = this.get('isFulfilling');
      if (isFulfilling) {
        returnLabel = i18n.t('medication.labels.quantity_dispensed');
      } else if (isFulfilled) {
        returnLabel = i18n.t('medication.labels.quantity_distributed');
      }
      return returnLabel;
    }).property('isFulfilled'),

    medicationList: [],
    updateCapability: 'add_medication',

    afterUpdate: function afterUpdate() {
      var i18n = this.get('i18n');
      var alertTitle,
          alertMessage,
          isFulfilled = this.get('isFulfilled');
      if (isFulfilled) {
        alertTitle = i18n.t('medication.alerts.fulfilled_title');
        alertMessage = 'The medication request has been fulfilled.';
        this.set('model.selectPatient', false);
      } else {
        alertTitle = i18n.t('medication.alerts.saved_title');
        alertMessage = i18n.t('medication.alerts.saved_message');
      }
      this.saveVisitIfNeeded(alertTitle, alertMessage);
    },

    _addNewPatient: function _addNewPatient() {
      var i18n = this.get('i18n');
      this.displayAlert(i18n.t('alerts.please_wait'), i18n.t('messages.new_patient_has_to_be_created'));
      this._getNewPatientId().then((function (friendlyId) {
        var patientTypeAhead = this.get('model.patientTypeAhead'),
            nameParts = patientTypeAhead.split(' '),
            patientDetails = {
          friendlyId: friendlyId,
          patientFullName: patientTypeAhead,
          requestingController: this
        },
            patient;
        if (nameParts.length >= 3) {
          patientDetails.firstName = nameParts[0];
          patientDetails.middleName = nameParts[1];
          patientDetails.lastName = nameParts.splice(2, nameParts.length).join(' ');
        } else if (nameParts.length === 2) {
          patientDetails.firstName = nameParts[0];
          patientDetails.lastName = nameParts[1];
        } else {
          patientDetails.firstName = patientTypeAhead;
        }
        patient = this.store.createRecord('patient', patientDetails);
        this.send('openModal', 'patients.quick-add', patient);
      }).bind(this));
    },

    _getNewPatientId: function _getNewPatientId() {
      var newPatientId = this.get('newPatientId');
      if (_ember['default'].isEmpty(newPatientId)) {
        return new _ember['default'].RSVP.Promise((function (resolve, reject) {
          this.generateFriendlyId().then((function (friendlyId) {
            this.set('newPatientId', friendlyId);
            resolve(friendlyId);
          }).bind(this), reject);
        }).bind(this));
      } else {
        return _ember['default'].RSVP.resolve(newPatientId);
      }
    },

    beforeUpdate: function beforeUpdate() {
      var isFulfilling = this.get('isFulfilling'),
          isNew = this.get('model.isNew');
      if (isNew || isFulfilling) {
        return new _ember['default'].RSVP.Promise((function (resolve, reject) {
          var newMedication = this.get('model');
          newMedication.validate().then((function () {
            if (newMedication.get('isValid')) {
              if (isNew) {
                if (_ember['default'].isEmpty(newMedication.get('patient'))) {
                  this._addNewPatient();
                  reject({
                    ignore: true,
                    message: 'creating new patient first'
                  });
                } else {
                  newMedication.set('medicationTitle', newMedication.get('inventoryItem.name'));
                  newMedication.set('priceOfMedication', newMedication.get('inventoryItem.price'));
                  newMedication.set('status', 'Requested');
                  newMedication.set('requestedBy', newMedication.getUserName());
                  newMedication.set('requestedDate', new Date());
                  this.addChildToVisit(newMedication, 'medication', 'Pharmacy').then((function () {
                    this.finishBeforeUpdate(isFulfilling, resolve);
                  }).bind(this), reject);
                }
              } else {
                this.finishBeforeUpdate(isFulfilling, resolve);
              }
            } else {
              this.send('showDisabledDialog');
              reject('invalid model');
            }
          }).bind(this))['catch']((function () {
            this.send('showDisabledDialog');
            reject('invalid model');
          }).bind(this));
        }).bind(this));
      } else {
        return _ember['default'].RSVP.resolve();
      }
    },

    finishBeforeUpdate: function finishBeforeUpdate(isFulfilling, resolve) {
      if (isFulfilling) {
        var inventoryLocations = this.get('model.inventoryLocations'),
            inventoryRequest = this.get('store').createRecord('inv-request', {
          expenseAccount: this.get('model.expenseAccount'),
          dateCompleted: new Date(),
          inventoryItem: this.get('model.inventoryItem'),
          inventoryLocations: inventoryLocations,
          quantity: this.get('model.quantity'),
          transactionType: 'Fulfillment',
          patient: this.get('model.patient'),
          markAsConsumed: true
        });
        this.performFulfillRequest(inventoryRequest, false, false, true).then((function () {
          this.set('model.status', 'Fulfilled');
          resolve();
        }).bind(this));
      } else {
        resolve();
      }
    },

    showUpdateButton: (function () {
      var isFulfilled = this.get('isFulfilled');
      if (isFulfilled) {
        return false;
      } else {
        return this._super();
      }
    }).property('updateCapability', 'isFulfilled'),

    updateButtonText: (function () {
      var i18n = this.get('i18n');
      if (this.get('model.hideFulfillRequest')) {
        return i18n.t('buttons.dispense');
      } else if (this.get('isFulfilling')) {
        return i18n.t('labels.fulfill');
      } else if (this.get('model.isNew')) {
        return i18n.t('buttons.add');
      } else {
        return i18n.t('buttons.update');
      }
    }).property('model.isNew', 'isFulfilling', 'model.hideFulfillRequest'),

    actions: {
      addedNewPatient: function addedNewPatient(record) {
        this.send('closeModal');
        this.set('model.patient', record);
        this.set('newPatientId');
        this.send('update');
      }
    }

  });
});
// inventory-locations mixin is needed for fulfill-request mixin!
define('hospitalrun/medication/edit/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/patient-list-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsPatientListRoute) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsPatientListRoute['default'], {
    editTitle: (0, _emberI18n.translationMacro)('medication.titles.edit_medication_request'),
    modelName: 'medication',
    newTitle: (0, _emberI18n.translationMacro)('medication.titles.new_medication_request'),
    database: _ember['default'].inject.service(),
    getNewData: function getNewData(params) {
      var idParam = this.get('idParam'),
          newData = {
        selectPatient: true,
        prescriptionDate: moment().startOf('day').toDate()
      };
      if (params[idParam] === 'dispense') {
        newData.shouldFulfillRequest = true;
        newData.hideFulfillRequest = true;
      }
      newData.id = PouchDB.utils.uuid();
      return _ember['default'].RSVP.resolve(newData);
    },

    model: function model(params) {
      var idParam = this.get('idParam');
      if (!_ember['default'].isEmpty(idParam) && params[idParam] === 'new' || params[idParam] === 'dispense') {
        return this._createNewRecord(params);
      } else {
        return this._super(params);
      }
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      var inventoryQuery = {
        key: 'Medication',
        include_docs: true
      };
      var inventoryItemId = model.get('inventoryItem.id'),
          patient = model.get('patient');
      if (_ember['default'].isEmpty(inventoryItemId)) {
        this.get('database').queryMainDB(inventoryQuery, 'inventory_by_type').then(function (result) {
          var medicationList = result.rows.map(function (medication) {
            return medication.doc;
          });
          controller.set('medicationList', medicationList);
        });
      }
      if (_ember['default'].isEmpty(patient)) {
        this._fetchPatientList(controller);
      }
    }
  });
});
// inventory-locations mixin is needed for fulfill-request mixin!
define("hospitalrun/medication/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-summary", [], ["patient", ["subexpr", "@mut", [["get", "model.patient", ["loc", [null, [4, 32], [4, 45]]]]], [], []], "returnTo", "medication.edit", "returnToContext", ["subexpr", "@mut", [["get", "model.id", ["loc", [null, [4, 89], [4, 97]]]]], [], []], "disablePatientLink", ["subexpr", "@mut", [["get", "model.isNew", ["loc", [null, [4, 117], [4, 128]]]]], [], []]], ["loc", [null, [4, 6], [4, 131]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 9,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "patient-typeahead", [], ["property", "patientTypeAhead", "label", ["subexpr", "t", ["labels.patient"], [], ["loc", [null, [8, 62], [8, 82]]]], "content", ["subexpr", "@mut", [["get", "patientList", ["loc", [null, [8, 91], [8, 102]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedPatient", ["loc", [null, [8, 113], [8, 128]]]]], [], []], "class", "col-xs-6 required test-patient-input"], ["loc", [null, [8, 8], [8, 175]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 6
                },
                "end": {
                  "line": 17,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-select", [], ["class", "col-xs-4 required test-add-visit", "label", ["subexpr", "t", ["labels.visit"], [], ["loc", [null, [11, 67], [11, 85]]]], "property", "visit", "content", ["subexpr", "@mut", [["get", "patientVisitsForSelect", ["loc", [null, [12, 35], [12, 57]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.visitDescription", "prompt", ["subexpr", "t", ["labels.add_new_outpatient_visit"], [], ["loc", [null, [14, 17], [14, 54]]]], "selected", ["subexpr", "@mut", [["get", "model.visit", ["loc", [null, [15, 19], [15, 30]]]]], [], []]], ["loc", [null, [11, 8], [16, 10]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group col-xs-3");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.visit"], [], ["loc", [null, [19, 17], [19, 37]]]], ["content", "model.visit.visitDescription", ["loc", [null, [20, 41], [20, 73]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.medication"], [], ["loc", [null, [26, 37], [26, 62]]]], ["content", "model.medicationName", ["loc", [null, [27, 39], [27, 63]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "inventory-typeahead", [], ["property", "inventoryItemTypeAhead", "label", ["subexpr", "t", ["labels.medication"], [], ["loc", [null, [30, 68], [30, 91]]]], "content", ["subexpr", "@mut", [["get", "medicationList", ["loc", [null, [30, 100], [30, 114]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedInventoryItem", ["loc", [null, [30, 125], [30, 146]]]]], [], []], "class", "required test-medication-input"], ["loc", [null, [30, 6], [30, 187]]]]],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2, "class", "form-control-static");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.prescriber"], [], ["loc", [null, [34, 37], [34, 62]]]], ["content", "model.requestedBy", ["loc", [null, [35, 39], [35, 60]]]]],
            locals: [],
            templates: []
          };
        })();
        var child7 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 41,
                    "column": 8
                  },
                  "end": {
                    "line": 43,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/medication/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "date-format", [["get", "model.prescriptionDate", ["loc", [null, [42, 24], [42, 46]]]]], [], ["loc", [null, [42, 10], [42, 48]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [3]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              morphs[2] = dom.createMorphAt(element1, 3, 3);
              morphs[3] = dom.createMorphAt(element1, 5, 5);
              return morphs;
            },
            statements: [["inline", "static-text", [], ["label", ["subexpr", "t", ["labels.prescription"], [], ["loc", [null, [39, 26], [39, 51]]]], "value", ["subexpr", "@mut", [["get", "model.prescription", ["loc", [null, [39, 58], [39, 76]]]]], [], []]], ["loc", [null, [39, 6], [39, 79]]]], ["block", "static-text", [], ["label", ["subexpr", "t", ["labels.prescription_date"], [], ["loc", [null, [41, 29], [41, 59]]]], "class", "col-xs-4"], 0, null, ["loc", [null, [41, 8], [43, 24]]]], ["inline", "static-text", [], ["label", ["subexpr", "@mut", [["get", "quantityLabel", ["loc", [null, [44, 28], [44, 41]]]]], [], []], "class", "col-xs-3", "value", ["subexpr", "@mut", [["get", "model.quantity", ["loc", [null, [44, 65], [44, 79]]]]], [], []]], ["loc", [null, [44, 8], [44, 82]]]], ["inline", "static-text", [], ["label", ["subexpr", "t", ["medication.labels.refills"], [], ["loc", [null, [45, 28], [45, 59]]]], "class", "col-xs-3", "value", ["subexpr", "@mut", [["get", "model.refills", ["loc", [null, [45, 83], [45, 96]]]]], [], []]], ["loc", [null, [45, 8], [45, 99]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child8 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 58,
                        "column": 10
                      },
                      "end": {
                        "line": 63,
                        "column": 10
                      }
                    },
                    "moduleName": "hospitalrun/medication/edit/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "form-group");
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("label");
                    dom.setAttribute(el2, "class", "control-label");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "t", ["labels.fulfill_request"], [], ["loc", [null, [60, 43], [60, 73]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["labels.fulfill_request_now"], [], ["loc", [null, [62, 32], [62, 64]]]], "property", "shouldFulfillRequest"], ["loc", [null, [62, 12], [62, 98]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 57,
                      "column": 8
                    },
                    "end": {
                      "line": 64,
                      "column": 8
                    }
                  },
                  "moduleName": "hospitalrun/medication/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "canFulfill", ["loc", [null, [58, 16], [58, 26]]]]], [], 0, null, ["loc", [null, [58, 10], [63, 17]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 56,
                    "column": 6
                  },
                  "end": {
                    "line": 65,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/medication/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "model.isNew", ["loc", [null, [57, 14], [57, 25]]]]], [], 0, null, ["loc", [null, [57, 8], [64, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 66,
                    "column": 6
                  },
                  "end": {
                    "line": 72,
                    "column": 6
                  }
                },
                "moduleName": "hospitalrun/medication/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "select-or-typeahead", [], ["property", "expenseAccount", "label", ["subexpr", "t", ["labels.bill_to"], [], ["loc", [null, [67, 62], [67, 82]]]], "list", ["subexpr", "@mut", [["get", "expenseAccountList", ["loc", [null, [67, 88], [67, 106]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.expenseAccount", ["loc", [null, [67, 117], [67, 137]]]]], [], []]], ["loc", [null, [67, 8], [67, 140]]]], ["inline", "inventory-location-picker", [], ["label", ["subexpr", "t", ["labels.pull_from"], [], ["loc", [null, [68, 42], [68, 64]]]], "quantityRequested", ["subexpr", "@mut", [["get", "model.quantity", ["loc", [null, [68, 83], [68, 97]]]]], [], []], "locationList", ["subexpr", "@mut", [["get", "model.inventoryItem.availableLocations", ["loc", [null, [69, 24], [69, 62]]]]], [], []], "selectedLocations", ["subexpr", "@mut", [["get", "model.inventoryLocations", ["loc", [null, [70, 28], [70, 52]]]]], [], []]], ["loc", [null, [68, 8], [71, 10]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 73,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [5]);
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
              morphs[2] = dom.createMorphAt(element0, 1, 1);
              morphs[3] = dom.createMorphAt(element0, 3, 3);
              morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 8, 8, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "em-text", [], ["property", "prescription", "label", ["subexpr", "t", ["labels.prescription"], [], ["loc", [null, [48, 46], [48, 71]]]], "rows", "3", "class", ["subexpr", "@mut", [["get", "prescriptionClass", ["loc", [null, [48, 86], [48, 103]]]]], [], []]], ["loc", [null, [48, 6], [48, 106]]]], ["inline", "date-picker", [], ["property", "prescriptionDate", "label", ["subexpr", "t", ["labels.prescription_date"], [], ["loc", [null, [50, 56], [50, 86]]]], "class", "col-sm-4"], ["loc", [null, [50, 8], [50, 105]]]], ["inline", "em-input", [], ["property", "quantity", "label", ["subexpr", "@mut", [["get", "quantityLabel", ["loc", [null, [53, 45], [53, 58]]]]], [], []], "class", ["subexpr", "@mut", [["get", "quantityClass", ["loc", [null, [53, 65], [53, 78]]]]], [], []]], ["loc", [null, [53, 8], [53, 81]]]], ["inline", "em-input", [], ["property", "refills", "label", ["subexpr", "t", ["medication.labels.refills"], [], ["loc", [null, [54, 44], [54, 75]]]], "class", "col-xs-3"], ["loc", [null, [54, 8], [54, 94]]]], ["block", "unless", [["get", "model.hideFulfillRequest", ["loc", [null, [56, 16], [56, 40]]]]], [], 0, null, ["loc", [null, [56, 6], [65, 17]]]], ["block", "if", [["get", "isFulfilling", ["loc", [null, [66, 12], [66, 24]]]]], [], 1, null, ["loc", [null, [66, 6], [72, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 74,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/medication/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [2]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            morphs[2] = dom.createMorphAt(element5, 2, 2);
            morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "model.selectPatient", ["loc", [null, [3, 14], [3, 33]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 15]]]], ["block", "if", [["get", "model.selectPatient", ["loc", [null, [7, 12], [7, 31]]]]], [], 1, null, ["loc", [null, [7, 6], [9, 13]]]], ["block", "if", [["get", "model.isNew", ["loc", [null, [10, 12], [10, 23]]]]], [], 2, 3, ["loc", [null, [10, 6], [22, 13]]]], ["block", "if", [["get", "isFulfilledOrRequested", ["loc", [null, [24, 10], [24, 32]]]]], [], 4, 5, ["loc", [null, [24, 4], [31, 11]]]], ["block", "if", [["get", "isFulfilledOrRequested", ["loc", [null, [32, 10], [32, 32]]]]], [], 6, null, ["loc", [null, [32, 4], [37, 11]]]], ["block", "if", [["get", "isFulfilled", ["loc", [null, [38, 10], [38, 21]]]]], [], 7, 8, ["loc", [null, [38, 4], [73, 11]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 75,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/medication/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [74, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 76,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/medication/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [75, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/medication/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {
    startKey: [],
    canAdd: (function () {
      return this.currentUserCan('add_medication');
    }).property(),

    showActions: (function () {
      return this.currentUserCan('fulfill_medication');
    }).property()
  });
});
define('hospitalrun/medication/index/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-index-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractIndexRoute) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    modelName: 'medication',
    pageTitle: (0, _emberI18n.translationMacro)('medication.page_title'),
    searchStatus: 'Requested',

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var prescriptionDateAsTime = item.get('prescriptionDateAsTime'),
          id = this._getPouchIdFromItem(item),
          requestedDateAsTime = item.get('requestedDateAsTime'),
          searchStatus = this.get('searchStatus');
      return [searchStatus, requestedDateAsTime, prescriptionDateAsTime, id];
    },

    _modelQueryParams: function _modelQueryParams() {
      var maxId = this._getMaxPouchId(),
          maxValue = this.get('maxValue'),
          minId = this._getMinPouchId(),
          searchStatus = this.get('searchStatus');
      return {
        options: {
          startkey: [searchStatus, null, null, minId],
          endkey: [searchStatus, maxValue, maxValue, maxId]
        },
        mapReduce: 'medication_by_status'
      };
    }
  });
});
define("hospitalrun/medication/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/medication/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [12, 14], [12, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 10
                  },
                  "end": {
                    "line": 27,
                    "column": 10
                  }
                },
                "moduleName": "hospitalrun/medication/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("button");
                dom.setAttribute(el2, "class", "btn btn-default");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element2);
                morphs[1] = dom.createMorphAt(element2, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["editItem", ["get", "medicationRequest", ["loc", [null, [25, 66], [25, 83]]]]], ["bubbles", false], ["loc", [null, [25, 46], [25, 100]]]], ["inline", "t", ["labels.fulfill"], [], ["loc", [null, [25, 101], [25, 123]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/medication/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              dom.setAttribute(el1, "class", "clickable");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(8);
              morphs[0] = dom.createElementMorph(element3);
              morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element3, [7]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element3, [9]), 0, 0);
              morphs[6] = dom.createMorphAt(dom.childAt(element3, [11]), 0, 0);
              morphs[7] = dom.createMorphAt(element3, 13, 13);
              return morphs;
            },
            statements: [["element", "action", ["editItem", ["get", "medicationRequest", ["loc", [null, [16, 32], [16, 49]]]]], [], ["loc", [null, [16, 12], [16, 51]]]], ["inline", "date-format", [["get", "medicationRequest.prescriptionDate", ["loc", [null, [17, 28], [17, 62]]]]], [], ["loc", [null, [17, 14], [17, 64]]]], ["content", "medicationRequest.patient.displayName", ["loc", [null, [18, 14], [18, 55]]]], ["content", "medicationRequest.requestedBy", ["loc", [null, [19, 14], [19, 47]]]], ["content", "medicationRequest.medicationName", ["loc", [null, [20, 14], [20, 50]]]], ["content", "medicationRequest.quantity", ["loc", [null, [21, 14], [21, 44]]]], ["content", "medicationRequest.status", ["loc", [null, [22, 14], [22, 42]]]], ["block", "if", [["get", "showActions", ["loc", [null, [23, 16], [23, 27]]]]], [], 0, null, ["loc", [null, [23, 10], [27, 17]]]]],
            locals: ["medicationRequest"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 31,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/medication/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element5, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element5, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element5, [11]), 0, 0);
            morphs[6] = dom.createMorphAt(element5, 13, 13);
            morphs[7] = dom.createMorphAt(element4, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.date"], [], ["loc", [null, [5, 12], [5, 31]]]], ["inline", "t", ["labels.patient"], [], ["loc", [null, [6, 12], [6, 34]]]], ["inline", "t", ["labels.prescriber"], [], ["loc", [null, [7, 12], [7, 37]]]], ["inline", "t", ["labels.medication"], [], ["loc", [null, [8, 12], [8, 37]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [9, 12], [9, 35]]]], ["inline", "t", ["labels.status"], [], ["loc", [null, [10, 12], [10, 33]]]], ["block", "if", [["get", "showActions", ["loc", [null, [11, 14], [11, 25]]]]], [], 0, null, ["loc", [null, [11, 8], [13, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [15, 14], [15, 19]]]]], [], 1, null, ["loc", [null, [15, 6], [29, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 41
                },
                "end": {
                  "line": 33,
                  "column": 130
                }
              },
              "moduleName": "hospitalrun/medication/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["newItem"], [], ["loc", [null, [33, 67], [33, 87]]]], ["inline", "t", ["medication.messages.create_new"], [], ["loc", [null, [33, 88], [33, 126]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/medication/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["inline", "t", ["messages.no_items_found"], [], ["loc", [null, [33, 9], [33, 40]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [33, 47], [33, 53]]]]], [], 0, null, ["loc", [null, [33, 41], [33, 137]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/medication/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], 0, 1, ["loc", [null, [2, 2], [35, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/medication/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [36, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/medication/return/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/utils/select-values'], function (exports, _emberI18n, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _hospitalrunMixinsPatientSubmodule, _hospitalrunUtilsSelectValues) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventorySelection['default'], _hospitalrunMixinsPatientSubmodule['default'], {
    medicationController: _ember['default'].inject.controller('medication'),
    medicationList: [],

    lookupListsToUpdate: [{
      name: 'aisleLocationList', // Name of property containing lookup list
      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'aisle_location_list' // Id of the lookup list to update
    }, {
      name: 'expenseAccountList', // Name of property containing lookup list
      property: 'model.expenseAccount', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'expense_account_list' // Id of the lookup list to update
    }, {
      name: 'warehouseList', // Name of property containing lookup list
      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list
      id: 'warehouse_list' // Id of the lookup list to update
    }],

    patientMedicationList: [],
    setNewMedicationList: false,

    aisleLocationList: _ember['default'].computed.alias('medicationController.aisleLocationList'),
    expenseAccountList: _ember['default'].computed.alias('medicationController.expenseAccountList'),
    warehouseList: _ember['default'].computed.alias('medicationController.warehouseList'),
    updateCapability: 'add_medication',

    medicationChanged: (function () {
      var medication = this.get('model.medication');
      if (!_ember['default'].isEmpty(medication)) {
        var inventoryItem = medication.get('inventoryItem');
        this.set('model.inventoryItemTypeAhead', inventoryItem.get('name') + ' - ' + inventoryItem.get('friendlyId'));
        this.set('model.inventoryItem', inventoryItem);
      } else {
        this.set('model.inventoryItem');
      }
      _ember['default'].run.later((function () {
        this.get('model').validate()['catch'](_ember['default'].K);
      }).bind(this));
    }).observes('model.medication'),

    patientVisitsChanged: (function () {
      var patientVisits = this.get('patientVisits');
      if (!_ember['default'].isEmpty(patientVisits)) {
        this.set('model.visit', patientVisits.get('firstObject'));
      }
    }).observes('patientVisits'),

    showPatientMedicationList: (function () {
      var patientMedicationList = this.get('patientMedicationList');
      this.get('patientMedication'); // Request patient medication be updated
      return !_ember['default'].isEmpty(patientMedicationList);
    }).property('patientMedicationList', 'model.patient', 'model.visit'),

    patientMedication: (function () {
      var setNewMedicationList = this.get('setNewMedicationList'),
          visit = this.get('model.visit');
      if (setNewMedicationList) {
        this.set('setNewMedicationList', false);
      } else if (!_ember['default'].isEmpty(visit)) {
        visit.get('medication').then((function (medication) {
          medication = medication.filterBy('status', 'Fulfilled');
          this.set('model.medication', medication.get('firstObject'));
          this.set('patientMedicationList', medication.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap));
          this.set('setNewMedicationList', true);
        }).bind(this));
      }
      return this.get('patientMedicationList');
    }).property('setNewMedicationList', 'model.patient', 'model.visit'),

    _finishUpdate: function _finishUpdate() {
      var aisle = this.get('model.deliveryAisle'),
          location = this.get('model.deliveryLocation'),
          inventoryItem = this.get('model.inventoryItem');

      // find location on inventoryItem
      this._findOrCreateLocation(inventoryItem, location, aisle).then((function (inventoryLocation) {
        this.set('model.adjustPurchases', true);
        this.set('model.inventoryLocations', [inventoryLocation]);
        this.set('model.markAsConsumed', true);
        // Make sure inventory item is resolved first.
        this.get('model.inventoryItem').then((function () {
          this.send('fulfillRequest', this.get('model'), false, true, true);
        }).bind(this));
      }).bind(this));
    },

    actions: {
      doneFulfillRequest: function doneFulfillRequest() {
        var i18n = this.get('i18n');
        this.updateLookupLists();
        this.displayAlert(i18n.t('medication.alerts.returned_title'), i18n.t('medication.alerts.returned_message'), 'allItems');
      },
      update: function update() {
        var medication = this.get('model.medication'),
            quantity = this.get('model.quantity');
        if (!_ember['default'].isEmpty(medication)) {
          medication.reload().then((function () {
            medication.decrementProperty('quantity', quantity);
            if (medication.get('quantity') < 0) {
              medication.set('quantity', 0);
            }
            medication.save().then(this._finishUpdate.bind(this));
          }).bind(this));
        } else {
          this._finishUpdate();
        }
      }
    },

    updateButtonText: (0, _emberI18n.translationMacro)('medication.return_medication')
  });
});
// inventory-locations mixin is needed for fulfill-request mixin!
define('hospitalrun/medication/return/route', ['exports', 'ember-i18n', 'hospitalrun/medication/edit/route', 'ember'], function (exports, _emberI18n, _hospitalrunMedicationEditRoute, _ember) {
  exports['default'] = _hospitalrunMedicationEditRoute['default'].extend({
    editTitle: (0, _emberI18n.translationMacro)('medication.return_medication'),
    modelName: 'inv-request',
    newTitle: (0, _emberI18n.translationMacro)('medication.return_medication'),
    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        dateCompleted: new Date(),
        selectPatient: true,
        transactionType: 'Return'
      });
    }
  });
});
define("hospitalrun/medication/return/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/return/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-select", [], ["class", "required", "label", ["subexpr", "t", ["labels.medication"], [], ["loc", [null, [4, 41], [4, 64]]]], "property", "medication", "content", ["subexpr", "@mut", [["get", "patientMedication", ["loc", [null, [5, 38], [5, 55]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.inventoryItem.name", "selected", ["subexpr", "@mut", [["get", "model.medication", ["loc", [null, [7, 17], [7, 33]]]]], [], []]], ["loc", [null, [4, 6], [8, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/medication/return/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "inventory-typeahead", [], ["property", "inventoryItemTypeAhead", "label", ["subexpr", "t", ["labels.medication"], [], ["loc", [null, [10, 68], [10, 91]]]], "content", ["subexpr", "@mut", [["get", "medicationList", ["loc", [null, [10, 100], [10, 114]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedInventoryItem", ["loc", [null, [10, 125], [10, 146]]]]], [], []], "class", "required test-medication-input", "showQuantity", false], ["loc", [null, [10, 6], [10, 207]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/medication/return/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [2]);
            var element1 = dom.childAt(fragment, [4]);
            var element2 = dom.childAt(fragment, [8]);
            var morphs = new Array(9);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            morphs[2] = dom.createMorphAt(element0, 3, 3);
            morphs[3] = dom.createMorphAt(element1, 1, 1);
            morphs[4] = dom.createMorphAt(element1, 3, 3);
            morphs[5] = dom.createMorphAt(element1, 5, 5);
            morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[7] = dom.createMorphAt(element2, 1, 1);
            morphs[8] = dom.createMorphAt(element2, 3, 3);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "showPatientMedicationList", ["loc", [null, [3, 10], [3, 35]]]]], [], 0, 1, ["loc", [null, [3, 4], [11, 11]]]], ["inline", "patient-typeahead", [], ["property", "patientTypeAhead", "label", ["subexpr", "t", ["labels.patient"], [], ["loc", [null, [13, 60], [13, 80]]]], "content", ["subexpr", "@mut", [["get", "patientList", ["loc", [null, [13, 89], [13, 100]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedPatient", ["loc", [null, [13, 111], [13, 126]]]]], [], []], "class", "col-xs-6"], ["loc", [null, [13, 6], [13, 145]]]], ["inline", "em-select", [], ["class", "col-xs-6", "label", ["subexpr", "t", ["labels.visit"], [], ["loc", [null, [14, 41], [14, 59]]]], "property", "visit", "content", ["subexpr", "@mut", [["get", "patientVisitsForSelect", ["loc", [null, [15, 33], [15, 55]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.visitDescription", "selected", ["subexpr", "@mut", [["get", "model.visit", ["loc", [null, [17, 17], [17, 28]]]]], [], []]], ["loc", [null, [14, 6], [18, 8]]]], ["inline", "em-input", [], ["property", "quantity", "label", ["subexpr", "t", ["medication.labels.quantity_to_return"], [], ["loc", [null, [21, 43], [21, 85]]]], "class", "col-xs-3 required test-medication-quantity"], ["loc", [null, [21, 6], [21, 138]]]], ["inline", "select-or-typeahead", [], ["property", "deliveryLocation", "label", ["subexpr", "t", ["medication.labels.return_location"], [], ["loc", [null, [22, 62], [22, 101]]]], "list", ["subexpr", "@mut", [["get", "warehouseList", ["loc", [null, [22, 107], [22, 120]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.location", ["loc", [null, [22, 131], [22, 145]]]]], [], []], "className", "col-xs-4"], ["loc", [null, [22, 6], [22, 168]]]], ["inline", "select-or-typeahead", [], ["property", "deliveryAisle", "label", ["subexpr", "t", ["medication.labels.return_aisle"], [], ["loc", [null, [23, 59], [23, 95]]]], "list", ["subexpr", "@mut", [["get", "aisleLocationList", ["loc", [null, [23, 101], [23, 118]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.aisleLocation", ["loc", [null, [23, 129], [23, 148]]]]], [], []], "className", "col-xs-4"], ["loc", [null, [23, 6], [23, 171]]]], ["inline", "em-text", [], ["property", "reason", "label", ["subexpr", "t", ["medication.labels.return_reason"], [], ["loc", [null, [25, 38], [25, 75]]]], "rows", "3"], ["loc", [null, [25, 4], [25, 86]]]], ["inline", "date-picker", [], ["property", "dateCompleted", "label", ["subexpr", "t", ["medication.labels.adjustment_date"], [], ["loc", [null, [27, 51], [27, 90]]]], "class", "col-sm-4"], ["loc", [null, [27, 6], [27, 109]]]], ["inline", "select-or-typeahead", [], ["property", "expenseAccount", "label", ["subexpr", "t", ["medication.labels.credit_to_account"], [], ["loc", [null, [28, 60], [28, 101]]]], "list", ["subexpr", "@mut", [["get", "expenseAccountList", ["loc", [null, [28, 107], [28, 125]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.expenseAccount", ["loc", [null, [28, 136], [28, 156]]]]], [], []], "className", "col-sm-8"], ["loc", [null, [28, 6], [28, 180]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/medication/return/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [30, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/medication/return/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [31, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/medication/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-module-route', 'ember'], function (exports, _emberI18n, _hospitalrunRoutesAbstractModuleRoute, _ember) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({
    addCapability: 'add_medication',
    moduleName: 'medication',
    newButtonText: (0, _emberI18n.translationMacro)('medication.buttons.new_button'),
    sectionTitle: (0, _emberI18n.translationMacro)('medication.section_title'),

    additionalButtons: (function () {
      var i18n = this.get('i18n');
      var additionalButtons = [];
      if (this.currentUserCan('fulfill_medication')) {
        additionalButtons.push({
          buttonIcon: 'octicon octicon-checklist',
          buttonAction: 'dispenseMedication',
          buttonText: i18n.t('medication.buttons.dispense_medication'),
          'class': 'btn btn-primary'
        });
      }
      if (this.currentUserCan(this.get('addCapability'))) {
        additionalButtons.push({
          buttonIcon: 'octicon octicon-mail-reply',
          buttonAction: 'returnMedication',
          buttonText: i18n.t('medication.buttons.return_medication'),
          'class': 'btn btn-primary'
        });
      }
      if (!_ember['default'].isEmpty(additionalButtons)) {
        return additionalButtons;
      }
    }).property(),

    additionalModels: [{
      name: 'aisleLocationList',
      findArgs: ['lookup', 'aisle_location_list']
    }, {
      name: 'expenseAccountList',
      findArgs: ['lookup', 'expense_account_list']
    }, {
      name: 'sexList',
      findArgs: ['lookup', 'sex']
    }, {
      name: 'warehouseList',
      findArgs: ['lookup', 'warehouse_list']
    }],

    actions: {
      dispenseMedication: function dispenseMedication() {
        if (this.currentUserCan('fulfill_medication')) {
          this.transitionTo('medication.edit', 'dispense');
        }
      },

      returnMedication: function returnMedication() {
        if (this.currentUserCan(this.get('addCapability'))) {
          this.transitionTo('medication.return', 'new');
        }
      }
    }
  });
});
define('hospitalrun/medication/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {
  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({
    moduleName: 'medication',
    searchKeys: [{
      name: 'prescription',
      type: 'contains'
    }],
    searchModel: 'medication'
  });
});
define("hospitalrun/medication/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/medication/search/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["medication/index"], [], ["loc", [null, [2, 4], [2, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 19
          }
        },
        "moduleName": "hospitalrun/medication/search/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "search-listing", [], ["newButtonText", ["subexpr", "t", ["buttons.new_request"], [], ["loc", [null, [1, 32], [1, 57]]]], "allButtonText", ["subexpr", "t", ["buttons.all_requests"], [], ["loc", [null, [1, 72], [1, 98]]]]], 0, null, ["loc", [null, [1, 0], [3, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/mixins/active-link', ['exports', 'ember-cli-active-link-wrapper/mixins/active-link'], function (exports, _emberCliActiveLinkWrapperMixinsActiveLink) {
  exports['default'] = _emberCliActiveLinkWrapperMixinsActiveLink['default'];
});
define('hospitalrun/mixins/appointment-statuses', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Mixin.create({
    appointmentStatusList: ['Scheduled', 'Canceled', 'Missed'],
    appointmentStatuses: _ember['default'].computed.map('appointmentStatusList', _hospitalrunUtilsSelectValues['default'].selectValuesMap),

    appointmentStatusesWithEmpty: (function () {
      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('appointmentStatusList'), true);
    }).property()
  });
});
define('hospitalrun/mixins/billing-categories', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    defaultBillingCategories: ['Hospital Charges']
  });
});
define('hospitalrun/mixins/blood-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Mixin.create({
    bloodTypes: ['A+', 'A-', 'AB-', 'AB+', 'B+', 'B-', 'O+', 'O-'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap)
  });
});
define('hospitalrun/mixins/can-edit-requested', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    canEdit: (function () {
      var status = this.get('status');
      return status === 'Requested';
    }).property('status')
  });
});
define('hospitalrun/mixins/charge-actions', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    chargePricingCategory: null,
    pricingList: null,
    pricingTypeForObjectType: null,
    pricingTypes: null,
    _createNewChargeRecord: function _createNewChargeRecord(quantityCharged, pricingId) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this.store.find('pricing', pricingId).then((function (item) {
          var newCharge = this.store.createRecord('proc-charge', {
            dateCharged: new Date(),
            quantity: quantityCharged,
            pricingItem: item
          });
          newCharge.save().then((function (chargeRecord) {
            var charges = this.get('model.charges');
            charges.addObject(chargeRecord);
            resolve();
          }).bind(this), reject);
        }).bind(this), reject);
      }).bind(this), '_createNewChargeRecord with pricingId:' + pricingId);
    },

    actions: {
      addCharge: function addCharge(charge) {
        var charges = this.get('model.charges');
        charges.addObject(charge);
        this.send('update', true);
        this.send('closeModal');
      },

      deleteCharge: function deleteCharge(model) {
        var chargeToDelete = model.get('chargeToDelete'),
            charges = this.get('model.charges');
        charges.removeObject(chargeToDelete);
        chargeToDelete.destroyRecord();
        this.send('update', true);
        this.send('closeModal');
      },

      showAddCharge: function showAddCharge() {
        var newCharge = this.get('store').createRecord('proc-charge', {
          dateCharged: new Date(),
          quantity: 1,
          pricingCategory: this.get('chargePricingCategory')
        });
        this.send('openModal', this.get('chargeRoute'), newCharge);
      },

      showEditCharge: function showEditCharge(charge) {
        charge.set('pricingCategory', this.get('chargePricingCategory'));
        this.send('openModal', this.get('chargeRoute'), charge);
      },

      showDeleteCharge: function showDeleteCharge(charge) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deleteCharge',
          title: 'Delete Charge Item',
          message: 'Are you sure you want to delete this charged item?',
          chargeToDelete: charge,
          updateButtonAction: 'confirm',
          updateButtonText: 'Ok'
        }));
      },

      setChargeQuantity: function setChargeQuantity(id, quantity) {
        var model = this.get('model');
        model.set(id, quantity);
      }
    },

    canAddCharge: (function () {
      return this.currentUserCan('add_charge');
    }).property(),

    /**
     * Returns pricing list without object types
     * Used for labs and imaging where the labs and imaging types are
     * directly in the price list.
     */
    chargesPricingList: (function () {
      var pricingList = this.get('pricingList'),
          pricingTypeForObjectType = this.get('pricingTypeForObjectType');
      return pricingList.filter(function (item) {
        return item.type !== pricingTypeForObjectType;
      });
    }).property('pricingList', 'pricingTypeForObjectType'),

    chargeRoute: null,

    findChargeForPricingItem: function findChargeForPricingItem(pricingItem, charges) {
      var chargeForItem = charges.find(function (charge) {
        var chargePricingItemId = charge.get('pricingItem.id');
        return pricingItem.id === chargePricingItemId;
      });
      return chargeForItem;
    },
    /**
     * Returns object types out of the pricing list.
     * Used for labs and imaging where the labs and imaging types are
     * directly in the price list.
     */
    objectTypeList: (function () {
      var pricingList = this.get('pricingList'),
          pricingTypeForObjectType = this.get('pricingTypeForObjectType'),
          userCanAddPricingTypes = this.get('userCanAddPricingTypes'),
          returnList = _ember['default'].Object.create({
        value: [],
        userCanAdd: userCanAddPricingTypes
      });
      if (!_ember['default'].isEmpty(pricingList)) {
        returnList.set('value', pricingList.filterBy('pricingType', pricingTypeForObjectType));
      }
      return returnList;
    }).property('pricingList', 'pricingTypeForObjectType', 'pricingTypeValues'),

    organizeByType: _ember['default'].computed.alias('pricingTypes.organizeByType'),

    pricingTypeList: (function () {
      var pricingList = this.get('pricingList'),
          pricingTypeValues = this.get('pricingTypeValues'),
          pricingTypeForObjectType = this.get('pricingTypeForObjectType');
      pricingTypeValues = pricingTypeValues.filter(function (pricingType) {
        var havePricing = false;
        if (!_ember['default'].isEmpty(pricingList)) {
          havePricing = !_ember['default'].isEmpty(pricingList.findBy('pricingType', pricingType));
        }
        return havePricing && pricingType !== pricingTypeForObjectType;
      });
      pricingTypeValues = pricingTypeValues.sortBy('name');
      return pricingTypeValues;
    }).property('pricingTypeValues', 'pricingTypeForObjectType', 'pricingList'),

    pricingTypeValues: _ember['default'].computed.alias('pricingTypes.value'),

    /**
     * Create multiple new request records from the pricing records passed in.  This function
     * will also add those new records to the specified visit.
     * @param {array} pricingRecords the list of pricing records to use to create request records from.
     * @param {string} pricingField the name of the field on the request record to set the pricing record on.
     * @param {string} visitChildName the name of the child object on the visit to add to.
     * @param {string} newVisitType if a new visit needs to be created, what type of visit
     * should be created.
     */
    createMultipleRequests: function createMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType) {
      var firstRecord = pricingRecords.get('firstObject'),
          modelToSave = this.get('model');
      modelToSave.set(pricingField, firstRecord);
      this.addChildToVisit(modelToSave, visitChildName, newVisitType).then((function (visit) {
        modelToSave.save().then((function () {
          this._finishCreateMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType, visit);
        }).bind(this));
      }).bind(this));
    },

    _finishCreateMultipleRequests: function _finishCreateMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType, visit) {
      var attributesToSave = {},
          baseModel = this.get('model'),
          modelToSave,
          modelsToAdd = [],
          patient = this.get('model.patient'),
          savePromises = [];

      baseModel.eachAttribute(function (name) {
        attributesToSave[name] = baseModel.get(name);
      });

      pricingRecords.forEach((function (pricingRecord, index) {
        if (index > 0) {
          modelToSave = this.store.createRecord(newVisitType.toLowerCase(), attributesToSave);
          modelToSave.set(pricingField, pricingRecord);
          modelToSave.set('patient', patient);
          modelToSave.set('visit', visit);
          modelsToAdd.push(modelToSave);
          savePromises.push(modelToSave.save());
        }
      }).bind(this));

      _ember['default'].RSVP.all(savePromises).then((function () {
        var addPromises = [];
        modelsToAdd.forEach((function (modelToSave) {
          addPromises.push(this.addChildToVisit(modelToSave, visitChildName, newVisitType));
        }).bind(this));
        _ember['default'].RSVP.all(addPromises).then((function (addResults) {
          this.afterUpdate(addResults, true);
        }).bind(this));
      }).bind(this));
    },

    saveNewPricing: function saveNewPricing(pricingName, pricingCategory, priceObjectToSet) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var newPricing,
            pricingTypeForObjectType = this.get('pricingTypeForObjectType');
        newPricing = this.store.createRecord('pricing', {
          name: pricingName,
          category: pricingCategory,
          pricingType: pricingTypeForObjectType
        });
        newPricing.save().then((function (savedNewPricing) {
          this.get('pricingList').addObject({
            id: savedNewPricing.get('id'),
            name: newPricing.get('name')
          });
          this.set(priceObjectToSet, newPricing);
          resolve();
        }).bind(this), reject);
      }).bind(this), 'saveNewPricing for: ' + pricingName);
    },

    getSelectedPricing: function getSelectedPricing(selectedField) {
      var selectedItem = this.get(selectedField);
      if (!_ember['default'].isEmpty(selectedItem)) {
        return new _ember['default'].RSVP.Promise((function (resolve, reject) {
          if (_ember['default'].isArray(selectedItem)) {
            this.store.findByIds('pricing', selectedItem).then(resolve, reject);
          } else {
            this.store.find('pricing', selectedItem.id).then(resolve, reject);
          }
        }).bind(this));
      } else {
        return _ember['default'].RSVP.resolve();
      }
    },

    showAddCharge: (function () {
      var canAddCharge = this.get('canAddCharge'),
          organizeByType = this.get('organizeByType');
      if (canAddCharge) {
        return !organizeByType;
      } else {
        return false;
      }
    }).property('canAddCharge', 'organizeByType'),

    showEditCharges: (function () {
      var canAddCharge = this.get('canAddCharge'),
          organizeByType = this.get('organizeByType');
      if (canAddCharge) {
        return organizeByType;
      } else {
        return false;
      }
    }).property('canAddCharge', 'organizeByType'),

    showPricingTypeTabs: (function () {
      var pricingTypeList = this.get('pricingTypeList');
      return !_ember['default'].isEmpty(pricingTypeList) && pricingTypeList.get('length') > 1;
    }).property('pricingTypeList'),

    userCanAddPricingTypes: (function () {
      var pricingTypes = this.get('pricingTypes');
      if (_ember['default'].isEmpty(pricingTypes)) {
        return true;
      } else {
        return pricingTypes.get('userCanAdd');
      }
    }).property('pricingTypes'),

    /**
     * When using organizeByType charges need to be mapped over from the price lists
     */
    updateCharges: function updateCharges() {
      var charges = this.get('model.charges'),
          organizeByType = this.get('organizeByType'),
          pricingList = this.get('pricingList');

      if (!organizeByType) {
        return _ember['default'].RSVP.resolve();
      }
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var chargePromises = [];
        var model = this.get('model');
        pricingList.forEach((function (pricingItem) {
          var currentCharge = this.findChargeForPricingItem(pricingItem, model.get('charges')),
              quantityCharged = model.get(pricingItem.id);
          if (_ember['default'].isEmpty(quantityCharged)) {
            if (currentCharge) {
              // Remove existing charge because quantity is blank
              charges.removeObject(currentCharge);
              chargePromises.push(currentCharge.destroyRecord());
            }
          } else {
            if (currentCharge) {
              if (currentCharge.get('quantity') !== quantityCharged) {
                currentCharge.set('quantity', quantityCharged);
                chargePromises.push(currentCharge.save());
              }
            } else {
              chargePromises.push(this._createNewChargeRecord(quantityCharged, pricingItem.id));
            }
          }
        }).bind(this));
        _ember['default'].RSVP.all(chargePromises, 'Charges updated for current record:' + this.get('model.id')).then(resolve, reject);
      }).bind(this), 'updateCharges for current record:' + this.get('model.id'));
    }
  });
});
define('hospitalrun/mixins/charge-route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    database: _ember['default'].inject.service(),
    actions: {
      deleteCharge: function deleteCharge(model) {
        this.controller.send('deleteCharge', model);
      }
    },
    pricingList: null,

    afterModel: function afterModel() {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var database = this.get('database');
        var maxId = database.getPouchId({}, 'pricing'),
            minId = database.getPouchId(null, 'pricing'),
            pricingCategory = this.get('pricingCategory'),
            pricingQuery = {
          startkey: [pricingCategory, null, null, minId],
          endkey: [pricingCategory, {}, {}, maxId],
          include_docs: true
        };
        database.queryMainDB(pricingQuery, 'pricing_by_category').then((function (result) {
          var pricingList = result.rows.map(function (item) {
            return item.doc;
          });
          this.set('pricingList', pricingList);
          resolve();
        }).bind(this))['catch'](reject);
      }).bind(this));
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      controller.set('pricingList', this.get('pricingList'));
    }
  });
});
define('hospitalrun/mixins/date-format', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    _dateFormat: function _dateFormat(value, dateFormat) {
      if (_ember['default'].isEmpty(dateFormat)) {
        dateFormat = 'l';
      }
      if (!_ember['default'].isEmpty(value)) {
        return moment(value).format(dateFormat);
      }
    },

    dateToTime: function dateToTime(date) {
      if (!_ember['default'].isEmpty(date) && date.getTime) {
        return date.getTime();
      }
    }
  });
});
define('hospitalrun/mixins/dob-days', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    convertDOBToText: function convertDOBToText(birthDate, shortFormat, omitDays) {
      var today = new Date(),
          years = 0,
          months = 0,
          days = 0;

      if (birthDate) {
        if (birthDate.getFullYear === undefined) {
          birthDate = moment(birthDate, 'l').toDate();
        }
        if (birthDate.getFullYear !== undefined) {
          years = today.getFullYear() - birthDate.getFullYear();
          if (today.getMonth() < birthDate.getMonth() || today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate()) {
            years--;
          }
        }

        if (birthDate.getMonth) {
          months = today.getMonth() - birthDate.getMonth();
          days = today.getDate() - birthDate.getDate();
          if (months <= 0) {
            if (days < 0) {
              months += 11;
            } else if (months < 0) {
              months += 12;
            }
          } else {
            if (days < 0) {
              months = months - 1;
            }
          }
        }

        if (birthDate.getDate) {
          days = today.getDate() - birthDate.getDate();
          if (days < 0) {
            days += 30;
          }
        }
      }

      var formatString = '';
      if (shortFormat) {
        if (years > 0) {
          formatString = years + 'y ' + months + 'm ' + days + 'd';
        } else {
          formatString = months + 'm ' + days + 'd';
        }
      } else if (omitDays) {
        if (years > 1) {
          formatString = years + ' years ' + months + ' months';
        } else if (years === 1) {
          formatString = years + ' year ' + months + ' months';
        } else {
          formatString = months + ' months';
        }
      } else {
        if (years > 1) {
          formatString = years + ' years ' + months + ' months ' + days + ' days';
        } else if (years === 1) {
          formatString = years + ' year ' + months + ' months ' + days + ' days';
        } else {
          formatString = months + ' months ' + days + ' days';
        }
      }
      return formatString;
    }
  });
});
define('hospitalrun/mixins/edit-panel-props', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    additionalButtons: null,
    cancelAction: null,
    cancelButtonText: null,
    disabledAction: null,
    hideCancelButton: null,
    isUpdateDisabled: null,
    showUpdateButton: null,
    updateButtonAction: null,
    updateButtonText: null,

    editPanelProps: (function () {
      return this.getProperties(['additionalButtons', 'cancelAction', 'cancelButtonText', 'disabledAction', 'hideCancelButton', 'isUpdateDisabled', 'showUpdateButton', 'updateButtonAction', 'updateButtonText']);
    }).property('additionalButtons', 'cancelAction', 'cancelButtonText', 'disabledAction', 'hideCancelButton', 'isUpdateDisabled', 'showUpdateButton', 'updateButtonAction', 'updateButtonText')
  });
});
define('hospitalrun/mixins/fulfill-request', ['exports', 'ember'], function (exports, _ember) {
  // NOTE!!! inventory-locations mixin is needed for fulfill-request mixin!
  exports['default'] = _ember['default'].Mixin.create({
    actions: {
      doneFulfillRequest: function doneFulfillRequest() {
        // Placeholder function; override if you need to know when fulfillrequest is complete.
      },

      fulfillRequest: function fulfillRequest(request, closeModal, increment, skipTransition) {
        this.performFulfillRequest(request, closeModal, increment, skipTransition);
      }
    },

    performFulfillRequest: function performFulfillRequest(request, closeModal, increment, skipTransition) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var markAsConsumed = request.get('markAsConsumed'),
            transactionType = request.get('transactionType');
        if (transactionType === 'Request') {
          transactionType = null; // reset the transaction type so that it gets set below.
        }
        request.get('inventoryItem').then((function (inventoryItem) {
          if (markAsConsumed) {
            request.set('adjustPurchases', true);
            if (_ember['default'].isEmpty(transactionType)) {
              request.set('transactionType', 'Fulfillment');
            }
            this._performFulfillment(request, inventoryItem, increment).then((function () {
              this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);
              resolve();
            }).bind(this), reject);
          } else {
            request.set('adjustPurchases', false);
            if (_ember['default'].isEmpty(transactionType)) {
              request.set('transactionType', 'Transfer');
            }
            this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);
            resolve();
          }
        }).bind(this), reject);
      }).bind(this));
    },

    /**
     * @private
     */
    _findQuantity: function _findQuantity(request, purchases, item, increment) {
      var currentQuantity,
          costPerUnit,
          requestPurchases = [],
          quantityOnHand = item.get('quantity'),
          quantityRequested = parseInt(request.get('quantity')),
          quantityNeeded = quantityRequested,
          purchaseInfo = [],
          totalCost = 0;
      if (increment) {
        var purchase = purchases.get('lastObject');
        costPerUnit = purchase.get('costPerUnit');
        purchase.incrementProperty('currentQuantity', quantityRequested);
        totalCost += costPerUnit * quantityNeeded;
        purchaseInfo.push({
          id: purchase.get('id'),
          quantity: quantityRequested
        });
        requestPurchases.addObject(purchase);
      } else {
        var foundQuantity = purchases.any(function (purchase) {
          currentQuantity = purchase.get('currentQuantity');
          if (purchase.get('expired') || currentQuantity <= 0) {
            return false;
          }
          costPerUnit = purchase.get('costPerUnit');
          if (increment) {

            return true;
          } else {
            if (quantityNeeded > currentQuantity) {
              totalCost += costPerUnit * currentQuantity;
              quantityNeeded = quantityNeeded - currentQuantity;
              purchaseInfo.push({
                id: purchase.get('id'),
                quantity: parseInt(currentQuantity)
              });
              currentQuantity = 0;
            } else {
              totalCost += costPerUnit * quantityNeeded;
              currentQuantity = currentQuantity - quantityNeeded;
              purchaseInfo.push({
                id: purchase.get('id'),
                quantity: parseInt(quantityNeeded)
              });
              quantityNeeded = 0;
            }
            purchase.set('currentQuantity', currentQuantity);
            requestPurchases.addObject(purchase);
            return quantityNeeded === 0;
          }
        });
        if (!foundQuantity) {
          return 'Could not find any purchases that had the required quantity:' + quantityRequested;
        }
      }
      request.set('costPerUnit', (totalCost / quantityRequested).toFixed(2));
      request.set('quantityAtCompletion', quantityOnHand);
      request.set('purchasesAffected', purchaseInfo);
      request.set('purchases', requestPurchases); // Not saved permanently, just set here so that purchases get saved later.
      item.updateQuantity();
      return true;
    },

    /**
     * @private
     * Finish the fulfillment request.
     * @param {object} request the request to fulfill.
     * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.
     * @param {boolean} closeModal if the modal should be closed.
     * @param {boolean} increment if the request should increment, not decrement
     * @param {boolean} skipTransition if the transition should not run after fulfillment.
     */
    _finishFulfillRequest: function _finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition) {
      var inventoryLocations = request.get('inventoryLocations'),
          locationsAffected = [],
          markAsConsumed = request.get('markAsConsumed'),
          promises = [],
          quantity = parseInt(request.get('quantity')),
          requestPurchases = request.get('purchases');
      if (increment) {
        var locationToIncrement = inventoryLocations.get('firstObject');
        locationToIncrement.incrementProperty('quantity', quantity);
        promises.push(locationToIncrement.save());
        locationsAffected.push({
          name: locationToIncrement.get('locationName'),
          quantity: quantity
        });
      } else {
        inventoryLocations.reduce((function (quantityNeeded, location) {
          var deliveryLocation = request.get('deliveryLocation'),
              deliveryAisle = request.get('deliveryAisle'),
              locationQuantity = parseInt(location.get('quantity'));
          if (quantityNeeded > 0) {
            if (!markAsConsumed) {
              location.set('transferAisleLocation', deliveryAisle);
              location.set('transferLocation', deliveryLocation);
            }
            if (locationQuantity >= quantityNeeded) {
              if (markAsConsumed) {
                location.decrementProperty('quantity', quantityNeeded);
                promises.push(location.save());
              } else {
                location.set('adjustmentQuantity', quantityNeeded);
                promises.push(this.transferToLocation(inventoryItem, location));
              }
              locationsAffected.push({
                name: location.get('locationName'),
                quantity: quantityNeeded
              });
              return 0;
            } else {
              if (markAsConsumed) {
                location.decrementProperty('quantity', locationQuantity);
                promises.push(location.save());
              } else {
                location.set('adjustmentQuantity', locationQuantity);
                promises.push(this.transferToLocation(inventoryItem, location));
              }
              locationsAffected.push({
                name: location.get('locationName'),
                quantity: locationQuantity
              });
              return quantityNeeded - locationQuantity;
            }
          }
        }).bind(this), quantity);
      }
      request.set('locationsAffected', locationsAffected);
      if (markAsConsumed) {
        requestPurchases.forEach(function (purchase) {
          promises.push(purchase.save());
        });
      }
      _ember['default'].RSVP.all(promises, 'Preliminary saving done for inventory fulfillment').then((function () {
        var savePromises = [];
        savePromises.push(inventoryItem.save());
        request.set('status', 'Completed');
        request.set('completedBy', request.getUserName());
        savePromises.push(request.save());
        _ember['default'].RSVP.all(savePromises, 'All saving done for inventory fulfillment').then((function () {
          this.send('doneFulfillRequest');
          if (closeModal) {
            this.send('closeModal');
          }
          if (!skipTransition) {
            this.transitionTo('inventory.index');
          }
        }).bind(this));
      }).bind(this));
    },

    /**
     * @private
     * Fulfill the request, decrementing from the purchases available on the inventory item
     * This function doesn't save anything, it just updates the objects in memory, so
     * a route will need to ensure that the models affected here get updated.
     * @param {object} request the request to fulfill.
     * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.
     * @param {boolean} increment if the request should increment, not decrement
     * @returns true if the request is fulfilled; false if it cannot be fulfilled due to a lack
     * of stock.
     */
    _performFulfillment: function _performFulfillment(request, inventoryItem, increment) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var purchases = inventoryItem.get('purchases'),
            quantityOnHand = inventoryItem.get('quantity'),
            quantityRequested = request.get('quantity');
        if (increment || quantityOnHand >= quantityRequested) {
          var findResult = this._findQuantity(request, purchases, inventoryItem, increment);
          if (findResult === true) {
            resolve();
          } else {
            reject(findResult);
          }
        } else {
          reject('The quantity on hand, ' + quantityOnHand + ' is less than the requested quantity of ' + quantityRequested + '.');
        }
      }).bind(this));
    }

  });
});
define('hospitalrun/mixins/hospitalrun-version', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    version: '0.9.12'
  });
});
define('hospitalrun/mixins/imaging-pricing-types', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    defaultImagingPricingTypes: ['Imaging Procedure']
  });
});
define('hospitalrun/mixins/inventory-adjustment-types', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    adjustmentTypes: [{
      name: 'Add',
      type: 'Adjustment (Add)'
    }, {
      name: 'Remove',
      type: 'Adjustment (Remove)'
    }, {
      name: 'Return To Vendor',
      type: 'Return To Vendor'
    }, {
      name: 'Return',
      type: 'Return'
    }, {
      name: 'Write Off',
      type: 'Write Off'
    }]
  });
});
define('hospitalrun/mixins/inventory-id', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    /**
     * Calculate a new id based on time stamp and randomized number
     * @return a generated id in base 36 so that its a shorter barcode.
     */
    generateId: function generateId() {
      var min = 1,
          max = 999,
          part1 = new Date().getTime(),
          part2 = Math.floor(Math.random() * (max - min + 1)) + min;
      return _ember['default'].RSVP.resolve(part1.toString(36) + '_' + part2.toString(36));
    }
  });
});
define('hospitalrun/mixins/inventory-locations', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    aisleToFind: null,
    locationToFind: null,

    _addQuantityToLocation: function _addQuantityToLocation(inventoryItem, quantity, location, aisle) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this._findOrCreateLocation(inventoryItem, location, aisle).then(function (foundLocation) {
          foundLocation.incrementProperty('quantity', quantity);
          foundLocation.save().then(resolve, reject);
        });
      }).bind(this));
    },

    _findOrCreateLocation: function _findOrCreateLocation(inventoryItem, location, aisle) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var foundLocation = false,
            locations = inventoryItem.get('locations');
        this.set('aisleToFind', aisle);
        this.set('locationToFind', location);

        foundLocation = locations.find(this.findLocation, this);
        if (foundLocation) {
          resolve(foundLocation);
        } else {
          var locationRecord = this.get('store').createRecord('inv-location', {
            id: PouchDB.utils.uuid(),
            aisleLocation: aisle,
            location: location,
            quantity: 0
          });
          locations.addObject(locationRecord);
          locationRecord.save().then(function () {
            resolve(locationRecord);
          }, reject);
        }
      }).bind(this));
    },

    findLocation: function findLocation(inventoryLocation) {
      var aisleLocation = inventoryLocation.get('aisleLocation'),
          aisleToFind = this.get('aisleToFind'),
          itemLocation = inventoryLocation.get('location'),
          locationToFind = this.get('locationToFind');
      if ((_ember['default'].isEmpty(aisleLocation) && _ember['default'].isEmpty(aisleToFind) || aisleLocation === aisleToFind) && (_ember['default'].isEmpty(itemLocation) && _ember['default'].isEmpty(locationToFind) || itemLocation === locationToFind)) {
        return true;
      }
    },

    /**
     * Process a new purchase, updating the corresponding location
     * with the number of items available.
     * @returns {Promise} a promise that fulfills once location has been updated.
     */
    newPurchaseAdded: function newPurchaseAdded(inventoryItem, newPurchase) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var aisle = newPurchase.get('aisleLocation'),
            location = newPurchase.get('location'),
            quantity = parseInt(newPurchase.get('originalQuantity'));
        this._addQuantityToLocation(inventoryItem, quantity, location, aisle).then(resolve, reject);
      }).bind(this));
    },

    /**
     * Save the location if the quantity is greater than zero, otherwise remove the empty location.
     * @param {Object} location the location to update or remove.
     * @param {Object} inventoryItem the inventory item the location belongs to.
     * @return {Promise} promise for save or remove
     */
    saveLocation: function saveLocation(location, inventoryItem) {
      if (location.get('quantity') === 0) {
        var locations = inventoryItem.get('locations');
        locations.removeObject(location);
        return location.destroyRecord();
      } else {
        return location.save();
      }
    },

    /**
     * Transfer items from the current location to the specified location.
     * @param {Object} inventoryItem the inventory item that items are being transferred from
     * @param {Object} transferLocation the inventory location to transfer from (also includes
     * attributes about where to transfer to.
     * @returns {Promise} a promise that fulfills once the transfer to location has been saved.
     */
    transferToLocation: function transferToLocation(inventoryItem, transferLocation) {
      var aisle = transferLocation.get('transferAisleLocation'),
          location = transferLocation.get('transferLocation'),
          quantity = parseInt(transferLocation.get('adjustmentQuantity'));
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this._addQuantityToLocation(inventoryItem, quantity, location, aisle).then(function () {
          transferLocation.decrementProperty('quantity', quantity);
          transferLocation.save().then(resolve, reject);
        }, reject);
      }).bind(this));
    }
  });
});
define('hospitalrun/mixins/inventory-selection', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    selectedInventoryItem: null,

    /**
     * For use with the inventory-type ahead.  When an inventory item is selected, resolve the selected
     * inventory item into an actual model object and set is as inventoryItem.
     */
    inventoryItemChanged: (function () {
      var selectedInventoryItem = this.get('selectedInventoryItem');
      if (!_ember['default'].isEmpty(selectedInventoryItem)) {
        this.store.find('inventory', selectedInventoryItem.id).then((function (inventoryItem) {
          var model = this.get('model');
          model.set('inventoryItem', inventoryItem);
          _ember['default'].run.once(this, function () {
            model.validate()['catch'](_ember['default'].K);
          });
        }).bind(this));
      }
    }).observes('selectedInventoryItem')
  });
});
define('hospitalrun/mixins/inventory-type-list', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Mixin.create({
    defaultInventoryTypes: ['Medication', 'Supply'],

    inventoryTypes: (function () {
      var defaultInventoryTypes = this.get('defaultInventoryTypes'),
          inventoryTypeList = this.get('inventoryTypeList'),
          typeList;
      if (_ember['default'].isEmpty(inventoryTypeList)) {
        typeList = defaultInventoryTypes;
      } else {
        typeList = inventoryTypeList;
      }
      typeList = _hospitalrunUtilsSelectValues['default'].selectValues(typeList);
      return typeList;
    }).property('inventoryTypeList', 'defaultInventoryTypes')
  });
});
define('hospitalrun/mixins/is-update-disabled', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    isUpdateDisabled: (function () {
      if (!_ember['default'].isNone(this.get('model.isValid'))) {
        return !this.get('model.isValid');
      } else {
        return false;
      }
    }).property('model.isValid')
  });
});
define('hospitalrun/mixins/lab-pricing-types', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    defaultLabPricingTypes: ['Lab Procedure']
  });
});
define('hospitalrun/mixins/location-name', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    getDisplayLocationName: function getDisplayLocationName(location, aisleLocation) {
      var locationName = this.formatLocationName(location, aisleLocation);
      if (_ember['default'].isEmpty(locationName)) {
        locationName = 'No Location';
      }
      return locationName;
    },

    formatLocationName: function formatLocationName(location, aisleLocation) {
      var locationName = '';
      if (!_ember['default'].isEmpty(location)) {
        locationName += location;
        if (!_ember['default'].isEmpty(aisleLocation)) {
          locationName += ' : ';
        }
      }
      if (!_ember['default'].isEmpty(aisleLocation)) {
        locationName += aisleLocation;
      }
      return locationName;
    },

    locationName: (function () {
      var aisleLocation = this.get('aisleLocation'),
          location = this.get('location');
      return this.getDisplayLocationName(location, aisleLocation);
    }).property('location', 'aisleLocation')
  });
});
define('hospitalrun/mixins/medication-details', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _ember['default'].Mixin.create({
    // Denormalized medication details so that inventory records do not need to be retrieved
    getMedicationName: function getMedicationName(inventoryAttribute) {
      var _this = this;

      var medicationTitle = this.get('medicationTitle');
      if (!_ember['default'].isEmpty(medicationTitle)) {
        return medicationTitle;
      } else {
        var inventoryObject = this.get(inventoryAttribute);
        if (inventoryObject.then) {
          this.get(inventoryAttribute).then(function (inventoryItem) {
            _this.set('medicationTitle', inventoryItem.get('name'));
          });
        } else {
          this.set('medicationTitle', inventoryObject.get('name'));
        }
      }
    },

    getMedicationPrice: function getMedicationPrice(inventoryAttribute) {
      var _this2 = this;

      var priceOfMedication = this.get('priceOfMedication');
      if (!_ember['default'].isEmpty(priceOfMedication)) {
        return priceOfMedication;
      } else {
        this.get(inventoryAttribute).then(function (inventoryItem) {
          _this2.set('priceOfMedication', inventoryItem.get('price'));
        });
      }
    },

    getMedicationDetails: function getMedicationDetails(inventoryAttribute) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve) {
        var medicationTitle = _this3.get('medicationTitle');
        var priceOfMedication = _this3.get('priceOfMedication');
        if (!_ember['default'].isEmpty(medicationTitle) && !_ember['default'].isEmpty(priceOfMedication)) {
          resolve({
            name: medicationTitle,
            price: priceOfMedication
          });
        } else {
          var objectInventoryItem = _this3.get(inventoryAttribute);
          if (objectInventoryItem.then) {
            _this3.get(inventoryAttribute).then(function (inventoryItem) {
              resolve({
                name: inventoryItem.get('name'),
                price: inventoryItem.get('price')
              });
            });
          } else {
            resolve({
              name: objectInventoryItem.get('name'),
              price: objectInventoryItem.get('price')
            });
          }
        }
      });
    },

    medicationTitle: _emberData['default'].attr('string'),
    priceOfMedication: _emberData['default'].attr('number')
  });
});
define('hospitalrun/mixins/modal-helper', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    /**
     * Display a message in a closable modal.
     * @param title string containing the title to display.
     * @param message string containing the message to display.
     */
    displayAlert: function displayAlert(title, message, okAction) {
      var i18n = this.get('i18n');
      var modalOptions = _ember['default'].Object.extend({
        updateButtonText: i18n.t('buttons.ok')
      });
      this.send('openModal', 'dialog', modalOptions.create({
        title: title,
        message: message,
        okAction: okAction,
        hideCancelButton: true,
        updateButtonAction: 'ok'
      }));
    },

    displayConfirm: function displayConfirm(title, message, confirmAction, model) {
      if (_ember['default'].isEmpty(model)) {
        model = _ember['default'].Object.create();
      }
      model.set('confirmAction', confirmAction);
      model.set('title', title);
      model.set('message', message);
      model.set('updateButtonAction', 'confirm');
      model.set('updateButtonText', 'Ok');
      this.send('openModal', 'dialog', model);
    }
  });
});
define('hospitalrun/mixins/navigation', ['exports', 'ember'], function (exports, _ember) {
  var underscore = _ember['default'].String.underscore;
  exports['default'] = _ember['default'].Mixin.create({
    navItems: [{
      title: 'Inventory',
      iconClass: 'octicon-package',
      route: 'inventory',
      capability: 'inventory',
      subnav: [{
        title: 'Requests',
        iconClass: 'octicon-chevron-right',
        route: 'inventory.index',
        capability: 'add_inventory_request'
      }, {
        title: 'Items',
        iconClass: 'octicon-chevron-right',
        route: 'inventory.listing',
        capability: 'inventory'
      }, {
        title: 'Inventory Received',
        iconClass: 'octicon-plus',
        route: 'inventory.batch',
        subroute: 'new',
        capability: 'add_inventory_item'
      }, {
        title: 'Reports',
        iconClass: 'octicon-chevron-right',
        route: 'inventory.reports',
        capability: 'inventory'
      }]
    }, {
      title: 'Patients',
      iconClass: 'octicon-organization',
      route: 'patients',
      capability: 'patients',
      subnav: [{
        title: 'Patient Listing',
        iconClass: 'octicon-chevron-right',
        route: 'patients',
        capability: 'patients'
      }, {
        title: 'Admitted Patients',
        iconClass: 'octicon-chevron-right',
        route: 'patients.admitted',
        capability: 'patients'
      }, {
        title: 'New Patient',
        iconClass: 'octicon-plus',
        route: 'patients.edit',
        subroute: 'new',
        capability: 'add_patient'
      }, {
        title: 'Reports',
        iconClass: 'octicon-chevron-right',
        route: 'patients.reports',
        capability: 'patients'
      }]
    }, {
      title: 'Appointments',
      iconClass: 'octicon-calendar',
      route: 'appointments.index',
      capability: 'appointments',
      subnav: [{
        title: 'This Week',
        iconClass: 'octicon-chevron-right',
        route: 'appointments.index',
        capability: 'appointments'
      }, {
        title: 'Today',
        iconClass: 'octicon-chevron-right',
        route: 'appointments.today',
        capability: 'appointments'
      }, {
        title: 'Missed',
        iconClass: 'octicon-chevron-right',
        route: 'appointments.missed',
        capability: 'appointments'
      }, {
        title: 'Search',
        iconClass: 'octicon-search',
        route: 'appointments.search',
        capability: 'appointments'
      }, {
        title: 'Add Appointment',
        iconClass: 'octicon-plus',
        route: 'appointments.edit',
        subroute: 'new',
        capability: 'add_appointment'
      }]
    }, {
      title: 'Imaging',
      iconClass: 'octicon-device-camera',
      route: 'imaging.index',
      capability: 'imaging',
      subnav: [{
        title: 'Requests',
        iconClass: 'octicon-chevron-right',
        route: 'imaging.index',
        capability: 'imaging'
      }, {
        title: 'Completed',
        iconClass: 'octicon-chevron-right',
        route: 'imaging.completed',
        capability: 'imaging'
      }, {
        title: 'New Request',
        iconClass: 'octicon-plus',
        route: 'imaging.edit',
        subroute: 'new',
        capability: 'add_imaging'
      }]
    }, {
      title: 'Medication',
      iconClass: 'octicon-file-text',
      route: 'medication.index',
      capability: 'medication',
      subnav: [{
        title: 'Requests',
        iconClass: 'octicon-chevron-right',
        route: 'medication.index',
        capability: 'medication'
      }, {
        title: 'Completed',
        iconClass: 'octicon-chevron-right',
        route: 'medication.completed',
        capability: 'medication'
      }, {
        title: 'New Request',
        iconClass: 'octicon-plus',
        route: 'medication.edit',
        subroute: 'new',
        capability: 'add_medication'
      }, {
        title: 'Dispense',
        iconClass: 'octicon-checklist',
        route: 'medication.edit',
        subroute: 'dispense',
        capability: 'fulfill_medication'
      }, {
        title: 'Return Medication',
        iconClass: 'octicon-mail-reply',
        route: 'medication.return',
        subroute: 'new',
        capability: 'add_medication'
      }]
    }, {
      title: 'Labs',
      iconClass: 'octicon-microscope',
      route: 'labs.index',
      capability: 'labs',
      subnav: [{
        title: 'Requests',
        iconClass: 'octicon-chevron-right',
        route: 'labs.index',
        capability: 'labs'
      }, {
        title: 'Completed',
        iconClass: 'octicon-chevron-right',
        route: 'labs.completed',
        capability: 'labs'
      }, {
        title: 'New Request',
        iconClass: 'octicon-plus',
        route: 'labs.edit',
        subroute: 'new',
        capability: 'add_lab'
      }]
    }, {
      title: 'Billing',
      iconClass: 'octicon-credit-card',
      route: 'invoices.index',
      capability: 'invoices',
      subnav: [{
        title: 'Invoices',
        iconClass: 'octicon-chevron-right',
        route: 'invoices.index',
        capability: 'invoices'
      }, {
        title: 'New Invoice',
        iconClass: 'octicon-plus',
        route: 'invoices.edit',
        subroute: 'new',
        capability: 'invoices'
      }, {
        title: 'Prices',
        iconClass: 'octicon-chevron-right',
        route: 'pricing.index',
        capability: 'invoices'
      }, {
        title: 'Price Profiles',
        iconClass: 'octicon-chevron-right',
        route: 'pricing.profiles',
        capability: 'invoices'
      }]
    }, {
      title: 'Administration',
      iconClass: 'octicon-person',
      route: 'admin.lookup',
      capability: 'admin',
      subnav: [{
        title: 'Lookup Lists',
        iconClass: 'octicon-chevron-right',
        route: 'admin.lookup',
        capability: 'update_config'
      }, {
        title: 'Address Fields',
        iconClass: 'octicon-chevron-right',
        route: 'admin.address',
        capability: 'update_config'
      }, {
        title: 'Load DB',
        iconClass: 'octicon-plus',
        route: 'admin.loaddb',
        capability: 'load_db'
      }, {
        title: 'Users',
        iconClass: 'octicon-chevron-right',
        route: 'users',
        capability: 'users'
      }, {
        title: 'New User',
        iconClass: 'octicon-plus',
        route: 'users.edit',
        subroute: 'new',
        capability: 'add_user'
      }, {
        title: 'User Roles',
        iconClass: 'octicon-chevron-right',
        route: 'admin.roles',
        capability: 'user_roles'
      }]
    }],

    // Navigation items get mapped localizations
    localizedNavItems: _ember['default'].computed('navItems.[]', function () {
      var _this = this;

      var localizationPrefix = 'navigation.';
      // Supports unlocalized keys for now, otherwise we would get:
      // "Missing translation: key.etc.path"
      var translationOrOriginal = function translationOrOriginal(translation, original) {
        // Check for typeof string, because if it's found in localization,
        // i18n will return a SafeString object, not a string
        return typeof translation === 'string' ? original : translation;
      };
      return this.get('navItems').map(function (nav) {
        var sectionKey = localizationPrefix + underscore(nav.title).toLowerCase(),
            navTranslated = _this.get('i18n').t(sectionKey);

        nav.localizedTitle = translationOrOriginal(navTranslated, nav.title);
        // Map all of the sub navs, too
        nav.subnav = nav.subnav.map(function (sub) {
          var subItemKey = localizationPrefix + 'subnav.' + underscore(sub.title).toLowerCase(),
              subTranslated = _this.get('i18n').t(subItemKey);

          sub.localizedTitle = translationOrOriginal(subTranslated, sub.title);
          return sub;
        });

        return nav;
      });
    })
  });
});
define('hospitalrun/mixins/number-format', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    /**
     * Given an array and property, total all of the property values in the array and return the value.
     * @param array Array|String either the actual array or the property name of the array on this object.
     * @param propertyName String the property name in the array values to total.
     * @param number that contains at most two decimal places.
     */
    _calculateTotal: function _calculateTotal(array, propertyName) {
      var arrayItems,
          total = 0;
      if (_ember['default'].isArray(array)) {
        arrayItems = array;
      } else {
        arrayItems = this.get(array);
      }
      total = arrayItems.reduce((function (previousValue, lineItem) {
        return previousValue += this._getValidNumber(_ember['default'].get(lineItem, propertyName));
      }).bind(this), 0);
      return this._numberFormat(total, true);
    },

    /**
     * Determine if number passed in is actually a number.  If it is, return the number; otherwise return 0.
     * @param number the number to valdiate.
     * @returns number a valid number.
     */
    _getValidNumber: function _getValidNumber(number) {
      if (_ember['default'].isEmpty(number) || isNaN(number)) {
        return 0;
      } else {
        return Number(number);
      }
    },

    /**
     * Return a formatted number with a maximum of two digits
     * @param value number to format
     * @param returnAsNumber boolean to denote if formatted number should be returned
     * as a number instead of a string
     * @returns String|Number a formatted String or number containing the formatted number.
     */
    _numberFormat: function _numberFormat(value, returnAsNumber) {
      var returnValue;
      if (!_ember['default'].isEmpty(value)) {
        if (isNaN(value)) {
          return;
        }
        if (Math.round(value) === value) {
          returnValue = Number(value).toString();
        } else {
          returnValue = Number(value).toFixed(2);
        }
        if (returnAsNumber) {
          return Number(returnValue);
        } else {
          return returnValue.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
        }
      }
    },

    _validNumber: function _validNumber(number) {
      return !_ember['default'].isEmpty(number) && !isNaN(number) && number > 0;
    }

  });
});
define('hospitalrun/mixins/pagination-props', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    paginationProps: (function () {
      var paginationProperties = ['disableNextPage', 'disablePreviousPage', 'showFirstPageButton', 'showLastPageButton', 'showPagination'];
      return this.getProperties(paginationProperties);
    }).property('disableNextPage', 'disablePreviousPage', 'showFirstPageButton', 'showLastPageButton', 'showPagination')
  });
});
define('hospitalrun/mixins/paging-actions', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    firstPage: 'firstPage',
    lastPage: 'lastPage',
    nextPage: 'nextPage',
    previousPage: 'previousPage',
    actions: {
      firstPage: function firstPage() {
        this.sendAction('firstPage');
      },
      lastPage: function lastPage() {
        this.sendAction('lastPage');
      },
      nextPage: function nextPage() {
        this.sendAction('nextPage');
      },
      previousPage: function previousPage() {
        this.sendAction('previousPage');
      }
    }
  });
});
define('hospitalrun/mixins/patient-diagnosis', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    _addDiagnosisToList: function _addDiagnosisToList(diagnosis, diagnosesList, visit) {
      if (!_ember['default'].isEmpty(diagnosis)) {
        if (_ember['default'].isEmpty(diagnosesList.findBy('description', diagnosis))) {
          diagnosesList.addObject({
            date: visit.get('startDate'),
            description: diagnosis
          });
        }
      }
    },

    getPrimaryDiagnoses: function getPrimaryDiagnoses(visits) {
      var diagnosesList = [];
      if (!_ember['default'].isEmpty(visits)) {
        visits.forEach((function (visit) {
          this._addDiagnosisToList(visit.get('primaryDiagnosis'), diagnosesList, visit);
          this._addDiagnosisToList(visit.get('primaryBillingDiagnosis'), diagnosesList, visit);
        }).bind(this));
      }
      var firstDiagnosis = diagnosesList.get('firstObject');
      if (!_ember['default'].isEmpty(firstDiagnosis)) {
        firstDiagnosis.first = true;
      }
      return diagnosesList;
    },

    getSecondaryDiagnoses: function getSecondaryDiagnoses(visits) {
      var diagnosesList = [];
      if (!_ember['default'].isEmpty(visits)) {
        visits.forEach(function (visit) {
          if (!_ember['default'].isEmpty(visit.get('additionalDiagnoses'))) {
            diagnosesList.addObjects(visit.get('additionalDiagnoses'));
          }
        });
      }

      var firstDiagnosis = diagnosesList.get('firstObject');
      if (!_ember['default'].isEmpty(firstDiagnosis)) {
        firstDiagnosis.first = true;
      }
      return diagnosesList;
    }

  });
});
define('hospitalrun/mixins/patient-id', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {
  exports.sequenceId = sequenceId;
  var inject = _ember['default'].inject;
  var isEmpty = _ember['default'].isEmpty;
  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {
    idPrefix: null,
    database: inject.service(),
    config: inject.service(),

    /**
    * Override this function to generate an id for a new record
    * @return a generated id;default is null which means that an
    * id will be automatically generated via Ember data.
    */
    generateFriendlyId: function generateFriendlyId() {
      var _this = this;

      var config = this.get('config');
      var database = this.get('database');
      var maxValue = this.get('maxValue');

      var findUnusedId = function findUnusedId(sequence) {
        var next = undefined,
            id = undefined;
        return config.getPatientPrefix().then(function (prefix) {
          next = sequence.incrementProperty('value');
          id = sequenceId(prefix, next);
          var query = {
            startkey: [id, null],
            endkey: [id, maxValue]
          };
          return database.queryMainDB(query, 'patient_by_display_id');
        }).then(function (found) {
          if (isEmpty(found.rows)) {
            sequence.set('value', next);
          } else {
            return findUnusedId(sequence);
          }
          return sequence.save().then(function () {
            return id;
          });
        });
      };

      return this.store.find('sequence', 'patient').then(findUnusedId)['catch'](function () {
        var store = _this.get('store');
        var sequence = store.push(store.normalize('sequence', {
          id: 'patient',
          value: 0
        }));
        return findUnusedId(sequence);
      });
    }
  });

  function sequenceId(prefix, sequence) {
    if (sequence < 100000) {
      sequence = ('00000' + sequence).slice(-5);
    }
    return '' + prefix + sequence;
  }
});
define('hospitalrun/mixins/patient-list-route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    database: _ember['default'].inject.service(),

    /**
     * Lazily load patient list so that it doesn't impact performance.
     */
    _fetchPatientList: function _fetchPatientList(controller) {
      var patientQuery = {
        startkey: 'patient_',
        endkey: 'patient_￿',
        include_docs: true
      };
      var database = this.get('database');
      database.queryMainDB(patientQuery).then(function (result) {
        if (result.rows) {
          var list = result.rows.map(function (row) {
            return row.doc;
          });
          controller.set('patientList', list);
        }
      });
    },

    actions: {
      returnToPatient: function returnToPatient() {
        this.controller.send('returnToPatient');
        this.controller.send('closeModal');
      }
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this._fetchPatientList(controller);
    }
  });
});
define('hospitalrun/mixins/patient-name', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    getPatientDisplayId: function getPatientDisplayId(patient) {
      var externalPatientId = _ember['default'].get(patient, 'externalPatientId'),
          friendlyId = _ember['default'].get(patient, 'friendlyId'),
          id = _ember['default'].get(patient, 'id');
      if (!_ember['default'].isEmpty(friendlyId)) {
        return friendlyId;
      } else if (!_ember['default'].isEmpty(externalPatientId)) {
        return externalPatientId;
      } else {
        return id;
      }
    },

    getPatientDisplayName: function getPatientDisplayName(patient) {
      var firstName = _ember['default'].get(patient, 'firstName'),
          lastName = _ember['default'].get(patient, 'lastName'),
          middleName = _ember['default'].get(patient, 'middleName'),
          nameArray = [];
      if (!_ember['default'].isEmpty(firstName)) {
        nameArray.push(firstName);
      }
      if (!_ember['default'].isEmpty(middleName)) {
        nameArray.push(middleName);
      }
      if (!_ember['default'].isEmpty(lastName)) {
        nameArray.push(lastName);
      }
      return nameArray.join(' ');
    }
  });
});
define('hospitalrun/mixins/patient-notes', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    canAddNote: function canAddNote() {
      return this.currentUserCan('add_note') && (!_ember['default'].isEmpty(this.get('visits')) || !_ember['default'].isEmpty(this.get('model.visits')));
    },

    canDeleteNote: function canDeleteNote() {
      return this.currentUserCan('delete_note');
    },

    _computeNoteType: function _computeNoteType(visit) {
      switch (visit.get('visitType')) {
        case 'Admission':
          if (_ember['default'].isEmpty(visit.get('procedures'))) {
            return 'Pre-op';
          } else {
            return 'Post-op';
          }
          break;
        case 'Clinic':
        case 'Followup':
          return 'General';
        default:
          return visit.get('visitType');
      }
    },

    _setNoteType: function _setNoteType() {
      var model = this.get('model');
      if (model.get('noteType') == null) {
        model.set('noteType', this._computeNoteType(model.get('visit')));
      }
    }
  });
});
define('hospitalrun/mixins/patient-submodule', ['exports', 'ember', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPatientVisits['default'], {
    findPatientVisits: true, // Override to false if visits shouldn't be set when patient is selected.
    needToUpdateVisit: false,
    patientList: null,
    selectedPatient: null,

    actions: {
      showPatient: function showPatient(patient) {
        this.transitionToRoute('patients.edit', patient);
      },

      returnToAllItems: function returnToAllItems() {
        this._cancelUpdate();
        this.send('allItems');
      },
      returnToPatient: function returnToPatient() {
        this._cancelUpdate();
        this.transitionToRoute('patients.edit', this.get('returnPatientId'));
      },
      returnToVisit: function returnToVisit() {
        this._cancelUpdate();
        this.transitionToRoute('visits.edit', this.get('returnVisitId'));
      }
    },

    /**
     * Add the specified child to the current visit and then save the visit.  If a visit
     * has not been selected, create a new visit and add it to the selected patient.
     * @param {Object} objectToAdd the object to add.
     * @param {string} childName the name of the child object on the visit to add to.
     * @param {string} newVisitType if a new visit needs to be created, what type of visit
     * should be created.
     * @returns {Promise} promise that will resolve or reject depending on whether or
     * not the add and subsequent saves were successful.
     */
    addChildToVisit: function addChildToVisit(objectToAdd, childName, newVisitType) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var visit = this.get('model.visit');
        if (_ember['default'].isEmpty(visit)) {
          visit = this.createNewVisit(newVisitType).then((function (savedVisit) {
            this._finishAddChildToVisit(objectToAdd, childName, savedVisit, resolve, reject);
          }).bind(this), reject);
        } else {
          this._finishAddChildToVisit(objectToAdd, childName, visit, resolve, reject);
        }
      }).bind(this));
    },

    _finishAddChildToVisit: function _finishAddChildToVisit(objectToAdd, childName, visit, resolve, reject) {
      visit.get(childName).then((function (visitChildren) {
        visitChildren.addObject(objectToAdd);
        this.set('needToUpdateVisit', true);
        resolve(visit);
      }).bind(this), reject);
    },

    cancelAction: (function () {
      var returnToPatient = this.get('model.returnToPatient'),
          returnToVisit = this.get('model.returnToVisit');
      if (returnToVisit) {
        return 'returnToVisit';
      } else if (returnToPatient) {
        return 'returnToPatient';
      } else {
        return 'returnToAllItems';
      }
    }).property('returnToPatient', 'returnToVisit'),

    createNewVisit: function createNewVisit(newVisitType) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var model = this.get('model'),
            patient = model.get('patient'),
            visit = this.get('store').createRecord('visit', {
          startDate: new Date(),
          endDate: new Date(),
          outPatient: true,
          patient: patient,
          visitType: newVisitType
        });
        model.set('visit', visit);
        visit.save().then((function () {
          visit.reload().then((function (updatedVisit) {
            this.getPatientVisits(patient).then((function (visits) {
              this.set('patientVisits', visits);
              model.set('visit', updatedVisit);
              resolve(updatedVisit);
            }).bind(this), reject);
          }).bind(this), reject);
        }).bind(this), reject)['catch']((function (err) {
          console.log('Error creating new visit');
          reject(err);
        }).bind(this));
      }).bind(this));
    },

    patientId: _ember['default'].computed.alias('model.patient.id'),

    patientChanged: (function () {
      var patient = this.get('model.patient');
      if (!_ember['default'].isEmpty(patient) && this.get('findPatientVisits')) {
        this.getPatientVisits(patient).then((function (visits) {
          if (_ember['default'].isEmpty(this.get('model.patient'))) {
            this.set('patientVisits', []);
          } else {
            this.set('patientVisits', visits);
          }
        }).bind(this));
      } else if (_ember['default'].isEmpty(patient) && this.get('findPatientVisits')) {
        this.set('patientVisits', []);
      }
    }).observes('model.patient'),

    selectedPatientChanged: (function () {
      var selectedPatient = this.get('selectedPatient');
      if (!_ember['default'].isEmpty(selectedPatient)) {
        this.store.find('patient', selectedPatient.id).then((function (item) {
          this.set('model.patient', item);
          _ember['default'].run.once(this, function () {
            this.get('model').validate()['catch'](_ember['default'].K);
          });
        }).bind(this));
      } else {
        this.set('model.patient', null);
      }
    }).observes('selectedPatient'),

    patientIdChanged: (function () {
      var patientId = this.get('patientId');
      if (!_ember['default'].isEmpty(patientId)) {
        this.set('returnPatientId', patientId);
      }
    }).observes('patientId').on('init'),

    patientVisits: [],
    returnPatientId: null,
    returnVisitId: null,
    patientVisitsForSelect: (function () {
      return this.get('patientVisits').map(_hospitalrunUtilsSelectValues['default'].selectObjectMap);
    }).property('patientVisits.[]'),

    /**
     * Removes the specified child from the current visit object and then saves the visit.
     * @param {Object} objectToRemove the object to remove.
     * @param {string} childName the name of the child object on the visit to remove from.
     * @returns {Promise} promise that will resolve or reject depending on whether or
     * not the remove and subsequent save were successful.
     */
    removeChildFromVisit: function removeChildFromVisit(objectToRemove, childName) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var childPromises = [],
            visit = this.get('model.visit');
        childPromises.addObjects(this.resolveVisitChildren());
        _ember['default'].RSVP.all(childPromises, 'Resolved visit children before removing ' + childName).then((function () {
          visit.get(childName).then((function (visitChildren) {
            visitChildren.removeObject(objectToRemove);
            visit.save().then(resolve, reject);
          }).bind(this), reject);
        }).bind(this), reject);
      }).bind(this));
    },

    /**
     * Observer on visits to make sure async relationships are resolved.
     * @returns {array} of promises which can be used to ensure
     * all relationships have resolved.
     */
    resolveVisitChildren: function resolveVisitChildren() {
      var promises = [],
          visit = this.get('model.visit');
      if (!_ember['default'].isEmpty(visit)) {
        // Make sure all the async relationships are resolved
        promises.push(visit.get('imaging'));
        promises.push(visit.get('labs'));
        promises.push(visit.get('medication'));
        promises.push(visit.get('procedures'));
        promises.push(visit.get('vitals'));
      }
      return promises;
    },

    /**
     * If visit needs to saved, save it and then display an alert message; otherwise
     * just display the alert message.
     * @param alertTitle String the title to use on the alert.
     * @param alertMessage String the message to display in the alert.
     */
    saveVisitIfNeeded: function saveVisitIfNeeded(alertTitle, alertMessage, alertAction) {
      if (this.get('needToUpdateVisit')) {
        this.get('model.visit').save().then((function () {
          this.set('needToUpdateVisit', false);
          this.displayAlert(alertTitle, alertMessage, alertAction);
        }).bind(this));
      } else {
        this.displayAlert(alertTitle, alertMessage, alertAction);
      }
    },

    visitIdChanged: (function () {
      var visitId = this.get('visitId');
      if (!_ember['default'].isEmpty(visitId)) {
        this.set('returnVisitId', visitId);
      }
    }).observes('visitId').on('init'),

    visitId: _ember['default'].computed.alias('model.visit.id'),
    visitsController: _ember['default'].computed.alias('controllers.visits')
  });
});
define('hospitalrun/mixins/patient-visits', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {
  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {
    getPatientVisits: function getPatientVisits(patient) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var maxValue = this.get('maxValue'),
            patientId = patient.get('id');
        this.store.query('visit', {
          options: {
            startkey: [patientId, null, null, null, 'visit_'],
            endkey: [patientId, maxValue, maxValue, maxValue, maxValue]
          },
          mapReduce: 'visit_by_patient'
        }).then(resolve, reject);
      }).bind(this));
    }
  });
});
define('hospitalrun/mixins/payment-profiles', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    paymentProfiles: ['Private', 'Discounted', 'Free']
  });
});
define('hospitalrun/mixins/pouch-adapter-utils', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    session: _ember['default'].inject.service(),
    _pouchError: function _pouchError(reject) {
      return (function (err) {
        if (err.status === 401) {
          // User is unauthorized; reload to force login.
          var session = this.get('session');
          if (!_ember['default'].isEmpty(session) && session.get('isAuthenticated')) {
            session.invalidate();
          }
        }
        var errmsg = [err.status, (err.name || err.error) + ':', err.message || err.reason].join(' ');
        _ember['default'].run(null, reject, errmsg);
      }).bind(this);
    }
  });
});
define('hospitalrun/mixins/pouchdb', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    maxValue: '￿'
  });
});
define('hospitalrun/mixins/progress-dialog', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    progressDialog: null,
    progressDialogDefaults: {
      showProgress: true,
      hideCancelButton: true,
      hideUpdateButton: true,
      progressBarValue: 0,
      progressBarStyle: 'width: 0%;'
    },
    progressInterval: 500,
    progressMessage: null,
    progressTimer: null,
    progressTitle: null,

    scheduleProgress: function scheduleProgress(f) {
      return _ember['default'].run.later(this, function () {
        f.apply(this);
        this.set('progressTimer', this.scheduleProgress(f));
      }, this.get('progressInterval'));
    },

    updateProgressBar: function updateProgressBar() {
      var progressDialog = this.get('progressDialog'),
          progressBarValue = progressDialog.get('progressBarValue');
      progressBarValue += 10;
      if (progressBarValue > 100) {
        progressBarValue = 0;
      }
      progressDialog.set('progressBarValue', progressBarValue);
      var progressBarStyle = new _ember['default'].Handlebars.SafeString('width: ' + progressBarValue + '%');
      progressDialog.set('progressBarStyle', progressBarStyle);
    },

    closeProgressModal: function closeProgressModal() {
      _ember['default'].run.cancel(this.get('progressTimer'));
      this.send('closeModal');
    },

    showProgressModal: function showProgressModal() {
      var progressDialog = _ember['default'].Object.create(this.get('progressDialogDefaults'));
      progressDialog.progressBarStyle = new _ember['default'].Handlebars.SafeString(progressDialog.progressBarStyle);
      progressDialog.set('title', this.get('progressTitle'));
      progressDialog.set('message', this.get('progressMessage'));
      this.set('progressDialog', progressDialog);
      this.set('progressTimer', this.scheduleProgress(this.get('updateProgressBar')));
      this.send('openModal', 'dialog', progressDialog);
    }
  });
});
define('hospitalrun/mixins/publish-statuses', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    publishStatuses: ['Draft', 'Published', 'Private', 'Archived']
  });
});
define('hospitalrun/mixins/result-validation', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    validations: {
      result: {
        acceptance: {
          accept: true,
          'if': function _if(object) {
            if (!object.get('hasDirtyAttributes')) {
              return false;
            }
            var status = object.get('status'),
                result = object.get('result');
            if (status === 'Completed' && _ember['default'].isEmpty(result)) {
              // force validation to fail
              return true;
            }
            return false;
          },
          message: 'Please enter a result before completing'
        }
      }
    }
  });
});
define('hospitalrun/mixins/return-to', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    cancelAction: (function () {
      var returnTo = this.get('model.returnTo');
      if (_ember['default'].isEmpty(returnTo)) {
        return 'allItems';
      } else {
        return 'returnTo';
      }
    }).property('returnTo')
  });
});
define('hospitalrun/mixins/setup-user-role', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    setupUserRole: function setupUserRole() {
      var session = this.get('session');
      var userRole = session.get('data.authenticated.role');
      return this.get('store').find('user-role', userRole.dasherize()).then(function (userCaps) {
        session.set('data.authenticated.userCaps', userCaps.get('capabilities'));
        var sessionStore = session.get('store');
        var sessionData = session.get('data');
        sessionStore.persist(sessionData);
        return true;
      })['catch'](_ember['default'].K);
    }
  });
});
define('hospitalrun/mixins/unit-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Mixin.create({
    defaultUnitList: ['ampoule', 'bag', 'bottle', 'box', 'bundle', 'capsule', 'case', 'container', 'cream', 'each', 'gel', 'nebule', 'ointment', 'pack', 'pair', 'pallet', 'patch', 'pcs', 'pill', 'plastic', 'polyamp', 'roll', 'spray', 'suppository', 'suspension', 'set', 'syrup', 'tablet', 'tray', 'tube', 'vial'],

    unitList: (function () {
      var defaultUnitList = this.get('defaultUnitList'),
          inventoryUnitList = this.get('inventoryUnitList');
      if (_ember['default'].isEmpty(inventoryUnitList)) {
        return defaultUnitList;
      } else {
        return inventoryUnitList;
      }
    }).property('inventoryUnitList', 'defaultUnitList'),

    unitListForSelect: _ember['default'].computed.map('unitList', _hospitalrunUtilsSelectValues['default'].selectValuesMap)
  });
});
define('hospitalrun/mixins/user-roles', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    userRoles: [{ name: 'Data Entry', roles: ['Data Entry', 'user'] }, { name: 'Doctor', roles: ['Doctor', 'user'] }, { name: 'Finance', roles: ['Finance', 'user'] }, { name: 'Finance Manager', roles: ['Finance Manager', 'user'] }, { name: 'Hospital Administrator', roles: ['Hospital Administrator', 'user'] }, { name: 'Inventory Manager', roles: ['Inventory Manager', 'user'] }, { name: 'Imaging Technician', roles: ['Imaging Technician', 'user'] }, { name: 'Lab Technician', roles: ['Lab Technician', 'user'] }, { name: 'Medical Records Officer', roles: ['Medical Records Officer', 'user'] }, { name: 'Nurse', roles: ['Nurse', 'user'] }, { name: 'Nurse Manager', roles: ['Nurse Manager', 'user'] }, { name: 'Patient Administration', roles: ['Patient Administration', 'user'] }, { name: 'Pharmacist', roles: ['Pharmacist', 'user'] }, { name: 'Social Worker', roles: ['Social Worker', 'user'] }, { name: 'System Administrator', roles: ['System Administrator', 'admin', 'user'] }, { name: 'User Administrator', roles: ['User Administrator', 'admin', 'user'] }]
  });
});
define('hospitalrun/mixins/user-session', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    session: _ember['default'].inject.service(),
    defaultCapabilities: {
      admin: ['User Administrator', 'System Administrator'],
      appointments: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],
      add_appointment: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],
      add_charge: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      add_diagnosis: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],
      add_medication: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],
      add_photo: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],
      add_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],
      add_pricing: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      add_pricing_profile: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      add_lab: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Lab Technician', 'System Administrator'],
      add_imaging: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Imaging Technician', 'Medical Records Officer', 'System Administrator'],
      add_inventory_request: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Nurse Manager', 'Pharmacist', 'System Administrator'],
      add_inventory_item: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],
      add_inventory_purchase: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],
      add_invoice: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      add_payment: ['Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      add_procedure: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],
      add_socialwork: ['Hospital Administrator', 'Medical Records Officer', 'Social Worker', 'System Administrator'],
      add_user: ['User Administrator', 'System Administrator'],
      add_visit: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],
      add_vitals: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],
      admit_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],
      adjust_inventory_location: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],
      billing: ['Hospital Administrator', 'Finance', 'Finance Manager', 'System Administrator'],
      complete_imaging: ['Imaging Technician', 'Medical Records Officer', 'System Administrator'],
      complete_lab: ['Lab Technician', 'Medical Records Officer', 'System Administrator'],
      delete_appointment: ['Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],
      delete_diagnosis: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],
      delete_inventory_item: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],
      delete_imaging: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      delete_invoice: ['Hospital Administrator', 'System Administrator'],
      delete_lab: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      delete_medication: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      delete_photo: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],
      delete_patient: ['Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],
      delete_pricing: ['Finance', 'Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      delete_pricing_profile: ['Finance', 'Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      delete_procedure: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],
      delete_socialwork: ['Hospital Administrator', 'Medical Records Officer', 'Social Worker', 'System Administrator'],
      delete_vitals: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],
      delete_visit: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],
      delete_user: ['User Administrator', 'System Administrator'],
      discharge_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],
      edit_invoice: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      fulfill_inventory: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],
      fulfill_medication: ['Medical Records Officer', 'Pharmacist', 'System Administrator'],
      imaging: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Imaging Technician', 'Medical Records Officer', 'System Administrator'],
      invoices: ['Hospital Administrator', 'Finance', 'Finance Manager', 'System Administrator'],
      labs: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Lab Technician', 'Medical Records Officer', 'System Administrator'],
      medication: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],
      inventory: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Nurse Manager', 'Pharmacist', 'System Administrator'],
      load_db: ['System Administrator'],
      override_invoice: ['Hospital Administrator', 'System Administrator'],
      query_db: ['System Administrator'],
      patients: ['Data Entry', 'Doctor', 'Finance', 'Finance Manager', 'Hospital Administrator', 'Imaging Technician', 'Lab Technician', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],

      patient_reports: ['Hospital Administrator', 'Patient Administration', 'System Administrator'],

      pricing: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],
      visits: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse Manager', 'Nurse', 'Patient Administration', 'Social Worker', 'System Administrator'],
      update_config: ['System Administrator'],
      users: ['User Administrator', 'System Administrator'],
      add_note: ['Doctor', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],
      delete_note: ['Medical Records Officer', 'Nurse Manager', 'Patient Administration', 'System Administrator'],
      'user_roles': ['System Administrator']
    },

    _getUserSessionVars: function _getUserSessionVars() {
      var session = this.get('session');
      if (!_ember['default'].isEmpty(session) && session.get('isAuthenticated')) {
        return session.get('data.authenticated');
      }
    },

    currentUserCan: function currentUserCan(capability) {
      var sessionVars = this._getUserSessionVars();
      if (!_ember['default'].isEmpty(sessionVars) && !_ember['default'].isEmpty(sessionVars.role)) {
        var userCaps = this.get('session').get('data.authenticated.userCaps');
        if (_ember['default'].isEmpty(userCaps)) {
          var capabilities = this.get('defaultCapabilities');
          var supportedRoles = capabilities[capability];
          if (!_ember['default'].isEmpty(supportedRoles)) {
            return supportedRoles.contains(sessionVars.role);
          }
        } else {
          return userCaps.contains(capability);
        }
      }
      return false;
    },

    /**
     * Returns the display name of the user or the username if
     * the display name is not set or if the username is explictly requested.
     * @param {boolean} returnUserName if true, always return the username instead
     * of the display name even if the display name is set.
     */
    getUserName: function getUserName(returnUserName) {
      var returnName,
          sessionVars = this._getUserSessionVars();
      if (!_ember['default'].isEmpty(sessionVars)) {
        if (returnUserName) {
          returnName = sessionVars.name;
        } else if (!_ember['default'].isEmpty(sessionVars.displayName)) {
          returnName = sessionVars.displayName;
        } else if (!_ember['default'].isEmpty(sessionVars.name)) {
          returnName = sessionVars.name;
        }
      }
      return returnName;
    }
  });
});
define('hospitalrun/mixins/visit-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Mixin.create({
    defaultVisitTypes: ['Admission', 'Clinic', 'Followup', 'Imaging', 'Lab', 'Pharmacy'],

    _getVisitTypes: function _getVisitTypes(includeEmpty) {
      var defaultVisitTypes = this.get('defaultVisitTypes'),
          visitTypesList = this.get('visitTypesList'),
          visitList;
      if (_ember['default'].isEmpty(visitTypesList)) {
        visitList = defaultVisitTypes;
      } else {
        visitList = visitTypesList.get('value');
      }
      visitList = _hospitalrunUtilsSelectValues['default'].selectValues(visitList, includeEmpty);
      return visitList;
    },

    visitTypes: (function () {
      return this._getVisitTypes();
    }).property('visitTypesList', 'defaultVisitTypes'),

    visitTypesWithEmpty: (function () {
      return this._getVisitTypes(true);
    }).property('visitTypesList', 'defaultVisitTypes')
  });
});
define('hospitalrun/models/abstract', ['exports', 'ember-data', 'ember', 'ember-validations', 'ember-pouch', 'hospitalrun/mixins/user-session'], function (exports, _emberData, _ember, _emberValidations, _emberPouch, _hospitalrunMixinsUserSession) {
  exports['default'] = _emberPouch.Model.extend(_hospitalrunMixinsUserSession['default'], _emberValidations['default'], {
    session: _ember['default'].inject.service(),
    lastModified: _emberData['default'].attr('date'),
    modifiedBy: _emberData['default'].attr(),
    modifiedFields: _emberData['default'].attr(),

    /**
    * Before saving the record, update the modifiedFields attribute to denote what fields were changed when.
    * Also, if the save failed because of a conflict, reload the record and reapply the changed attributes and
    * attempt to save again.
    */
    save: function save(options) {
      var attribute,
          changedAttributes = this.changedAttributes(),
          modifiedDate = new Date(),
          modifiedFields = this.get('modifiedFields'),
          session = this.get('session');

      if (!session || !session.get('isAuthenticated')) {
        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          _ember['default'].run(null, reject, 'ERROR you must be logged in to save');
        });
      }

      if (this.get('hasDirtyAttributes') && !this.get('isDeleted')) {
        if (_ember['default'].isEmpty(modifiedFields)) {
          modifiedFields = {};
        }
        this.set('lastModified', modifiedDate);
        for (attribute in changedAttributes) {
          modifiedFields[attribute] = modifiedDate;
        }
        this.set('modifiedFields', modifiedFields);
        this.set('modifiedBy', this.getUserName());
      }
      return this._super(options)['catch']((function (error) {
        if (!_ember['default'].isEmpty(options) && options.retry) {
          throw error;
        } else {
          if (error.name && error.name.indexOf && error.name.indexOf('conflict') > -1) {
            // Conflict encountered, so rollback, reload and then save the record with the changed attributes.
            this.rollbackAttributes();
            return this.reload().then(function (record) {
              for (var attribute in changedAttributes) {
                record.set(attribute, changedAttributes[attribute][1]);
              }
              if (_ember['default'].isEmpty(options)) {
                options = {};
              }
              options.retry = true;
              return record.save(options);
            });
          } else {
            throw error;
          }
        }
      }).bind(this));
    }
  });
});
define('hospitalrun/models/add-diagnosis', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {
  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {
    diagnosis: _emberData['default'].attr('string'),
    validations: {
      diagnosis: {
        presence: true
      }
    }
  });
});
/**
 * Stub model for adding new patient diagnoses; needed for validation.
 */
define('hospitalrun/models/appointment', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/utils/patient-validation'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunUtilsPatientValidation) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    allDay: _emberData['default'].attr(),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    visits: _emberData['default'].hasMany('visit'),
    provider: _emberData['default'].attr('string'),
    location: _emberData['default'].attr('string'),
    appointmentType: _emberData['default'].attr('string'),
    startDate: _emberData['default'].attr('date'),
    endDate: _emberData['default'].attr('date'),
    notes: _emberData['default'].attr('string'),
    status: _emberData['default'].attr('string', { defaultValue: 'Scheduled' }),

    longDateFormat: 'l h:mm A',
    shortDateFormat: 'l',
    timeFormat: 'h:mm A',

    _getDateSpan: function _getDateSpan(startDate, endDate, format) {
      var formattedStart = startDate.format(format),
          formattedEnd = endDate.format(format);
      return formattedStart + ' - ' + formattedEnd;
    },

    appointmentDate: (function () {
      var startDate = this.get('startDate');
      return startDate;
    }).property('startDate'),

    displayStatus: (function () {
      var status = this.get('status');
      if (_ember['default'].isEmpty(status)) {
        status = 'Scheduled';
      }
      return status;
    }).property('status'),

    formattedAppointmentDate: (function () {
      var allDay = this.get('allDay'),
          endDate = moment(this.get('endDate')),
          dateFormat = '',
          formattedDate = '',
          startDate = moment(this.get('startDate'));

      if (startDate.isSame(endDate, 'day')) {
        formattedDate = startDate.format(this.get('shortDateFormat'));
        if (!allDay) {
          formattedDate += ' ';
          formattedDate += this._getDateSpan(startDate, endDate, this.get('timeFormat'));
        }
      } else {
        if (allDay) {
          dateFormat = this.get('shortDateFormat');
        } else {
          dateFormat = this.get('longDateFormat');
        }
        formattedDate = this._getDateSpan(startDate, endDate, dateFormat);
      }
      return formattedDate;
    }).property('startDate', 'endDate'),

    validations: {
      appointmentDate: {
        presence: {
          'if': function _if(object) {
            var appointmentType = object.get('appointmentType');
            return appointmentType !== 'Admission';
          }
        }
      },

      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,

      patient: {
        presence: true
      },
      appointmentType: {
        presence: true
      },
      location: {
        presence: true
      },
      startDate: {
        presence: true
      },
      endDate: {
        acceptance: {
          accept: true,
          'if': function _if(object) {
            if (!object.get('hasDirtyAttributes')) {
              return false;
            }
            var allDay = object.get('allDay'),
                startDate = object.get('startDate'),
                endDate = object.get('endDate');
            if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {
              // force validation to fail
              return true;
            } else {
              if (allDay) {
                if (endDate.getTime() < startDate.getTime()) {
                  return true;
                }
              } else {
                if (endDate.getTime() <= startDate.getTime()) {
                  return true;
                }
              }
            }
            // patient is properly selected; don't do any further validation
            return false;
          },
          message: 'Please select an end date later than the start date'
        }
      }
    }
  });
});
define('hospitalrun/models/billing-line-item', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/number-format'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsNumberFormat) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsNumberFormat['default'], {
    amountOwed: _emberData['default'].attr('number'),
    category: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    details: _emberData['default'].hasMany('line-item-detail', {
      async: false
    }), /* The individual objects that make up this line item. */
    discount: _emberData['default'].attr('number'),
    name: _emberData['default'].attr('string'),
    nationalInsurance: _emberData['default'].attr('number'),
    privateInsurance: _emberData['default'].attr('number'),

    amountOwedChanged: (function () {
      _ember['default'].run.debounce(this, function () {
        var discount = this._getValidNumber(this.get('discount')),
            nationalInsurance = this._getValidNumber(this.get('nationalInsurance')),
            privateInsurance = this._getValidNumber(this.get('privateInsurance')),
            amountOwed = this._getValidNumber(this.get('total'));
        amountOwed = amountOwed - discount - nationalInsurance - privateInsurance;
        if (amountOwed < 0) {
          amountOwed = 0;
        }
        if (!this.get('isDestroyed')) {
          this.set('amountOwed', this._numberFormat(amountOwed, true));
        }
      }, 500);
    }).observes('discount', 'nationalInsurance', 'privateInsurance', 'total'),

    detailTotals: _ember['default'].computed.mapBy('details', 'amountOwed'),
    total: _ember['default'].computed.sum('detailTotals'),

    validations: {
      category: {
        presence: true
      },
      discount: {
        numericality: {
          allowBlank: true
        }
      },
      nationalInsurance: {
        numericality: {
          allowBlank: true
        }
      },
      name: {
        presence: true
      },
      privateInsurance: {
        numericality: {
          allowBlank: true
        }
      },
      total: {
        numericality: {
          allowBlank: true
        }
      }
    }
  });
});
define('hospitalrun/models/family-info', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {
  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {
    age: _emberData['default'].attr('number'),
    civilStatus: _emberData['default'].attr('string'),
    education: _emberData['default'].attr('string'),
    income: _emberData['default'].attr('string'),
    insurance: _emberData['default'].attr('string'),
    name: _emberData['default'].attr('string'),
    occupation: _emberData['default'].attr('string'),
    relationship: _emberData['default'].attr('string'),
    validations: {
      age: {
        numericality: {
          allowBlank: true
        }
      },
      name: {
        presence: true
      }
    }
  });
});
/**
 * Model for social worker family info
 */
define('hospitalrun/models/imaging', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'hospitalrun/mixins/date-format', 'ember-data', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _hospitalrunMixinsDateFormat, _emberData, _hospitalrunUtilsPatientValidation, _hospitalrunMixinsResultValidation) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsResultValidation['default'], {
    charges: _emberData['default'].hasMany('proc-charge', {
      async: false
    }),
    imagingDate: _emberData['default'].attr('date'),
    imagingType: _emberData['default'].belongsTo('pricing', {
      async: false
    }),
    notes: _emberData['default'].attr('string'),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    radiologist: _emberData['default'].attr('string'),
    requestedBy: _emberData['default'].attr('string'),
    requestedDate: _emberData['default'].attr('date'),
    result: _emberData['default'].attr('string'),
    status: _emberData['default'].attr('string'),
    visit: _emberData['default'].belongsTo('visit', {
      async: false
    }),

    imagingDateAsTime: (function () {
      return this.dateToTime(this.get('imagingDate'));
    }).property('imagingDate'),

    requestedDateAsTime: (function () {
      return this.dateToTime(this.get('requestedDate'));
    }).property('requestedDate'),

    validations: {
      imagingTypeName: {
        presence: {
          'if': function _if(object) {
            if (object.get('isNew')) {
              return true;
            }
          },
          message: 'Please select an imaging type'
        }
      },
      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,
      patient: {
        presence: true
      }
    }
  });
});
define('hospitalrun/models/inv-location', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsLocationName) {
  /**
   * Model to represent the location(s) of inventory items.
   * File/model name is inv-location because using inv-location will cause location
   * items to be shown as inventory items since the pouchdb adapter does a
   * retrieve for keys starting with 'inventory' to fetch inventory items.
   */
  var InventoryLocation = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {
    quantity: _emberData['default'].attr('number'),
    location: _emberData['default'].attr('string'),
    aisleLocation: _emberData['default'].attr('string'),

    locationNameWithQuantity: (function () {
      var quantity = this.get('quantity'),
          locationName = this.get('locationName');
      return locationName + ' (' + quantity + ' available)';
    }).property('locationName', 'quantity'),

    validations: {
      adjustmentQuantity: {
        numericality: {
          greaterThan: 0,
          messages: {
            greaterThan: 'must be greater than 0'
          }
        },
        acceptance: {
          /***
           * Validate that the adjustment quantity is a number and that if a deduction there are enough items to deduct
           */
          accept: true,
          'if': function _if(object) {
            var adjustmentQuantity = object.get('adjustmentQuantity'),
                transactionType = object.get('transactionType'),
                locationQuantity = object.get('quantity');
            if (_ember['default'].isEmpty(adjustmentQuantity) || isNaN(adjustmentQuantity)) {
              return true;
            }
            if (transactionType !== 'Adjustment (Add)' && adjustmentQuantity > locationQuantity) {
              return true;
            }
            return false;
          },
          message: 'Invalid quantity'
        }
      },

      dateCompleted: {
        presence: {
          message: 'Please provide a date'
        }
      },

      transferLocation: {
        acceptance: {
          accept: true,
          'if': function _if(object) {
            var transferLocation = object.get('transferLocation'),
                transferItem = object.get('transferItem');
            // If we don't have a transfer item, then a transfer is not occurring.
            if (!_ember['default'].isEmpty(transferItem) && _ember['default'].isEmpty(transferLocation)) {
              return true;
            }
            return false;
          },
          message: 'Please select a location to transfer to'
        }
      }
    }
  });

  exports['default'] = InventoryLocation;
});
define('hospitalrun/models/inv-purchase', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsLocationName) {
  /**
   * Model to represent a purchase within an inventory item.
   * File/model name is inv-purchase because using inventory-purchase will cause purchase
   * items to be shown as inventory items since the pouchdb adapter does a
   * retrieve for keys starting with 'inventory' to fetch inventory items.
   */
  var InventoryPurchaseItem = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {
    purchaseCost: _emberData['default'].attr('number'),
    lotNumber: _emberData['default'].attr('string'),
    dateReceived: _emberData['default'].attr('date'),
    costPerUnit: (function () {
      var purchaseCost = this.get('purchaseCost'),
          quantity = parseInt(this.get('originalQuantity'));
      if (_ember['default'].isEmpty(purchaseCost) || _ember['default'].isEmpty(quantity) || purchaseCost === 0 || quantity === 0) {
        return 0;
      }
      return Number((purchaseCost / quantity).toFixed(2));
    }).property('purchaseCost', 'originalQuantity'),
    originalQuantity: _emberData['default'].attr('number'),
    currentQuantity: _emberData['default'].attr('number'),
    expirationDate: _emberData['default'].attr('date'),
    expired: _emberData['default'].attr('boolean'),
    location: _emberData['default'].attr('string'),
    aisleLocation: _emberData['default'].attr('string'),
    giftInKind: _emberData['default'].attr('boolean'),
    inventoryItem: _emberData['default'].attr('string'), // Currently just storing id instead of DS.belongsTo('inventory', { async: true }),
    vendor: _emberData['default'].attr('string'),
    vendorItemNo: _emberData['default'].attr('string'),
    distributionUnit: _emberData['default'].attr('string'),
    invoiceNo: _emberData['default'].attr('string'),
    quantityGroups: _emberData['default'].attr(),
    validations: {
      purchaseCost: {
        numericality: true
      },
      originalQuantity: {
        numericality: true
      },
      vendor: {
        presence: true
      }
    }
  });

  exports['default'] = InventoryPurchaseItem;
});
define('hospitalrun/models/inv-request', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/inventory-adjustment-types', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsInventoryAdjustmentTypes, _emberData, _ember, _hospitalrunMixinsLocationName) {
  /**
   * Model to represent a request for inventory items.
   */
  var InventoryRequest = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsInventoryAdjustmentTypes['default'], _hospitalrunMixinsLocationName['default'], {
    adjustPurchases: _emberData['default'].attr('boolean'),
    completedBy: _emberData['default'].attr('string'),
    costPerUnit: _emberData['default'].attr('number'),
    dateCompleted: _emberData['default'].attr('date'),
    dateRequested: _emberData['default'].attr('date'),
    deliveryAisle: _emberData['default'].attr('string'),
    deliveryLocation: _emberData['default'].attr('string'),
    expenseAccount: _emberData['default'].attr('string'),
    inventoryItem: _emberData['default'].belongsTo('inventory', { async: true }),
    locationsAffected: _emberData['default'].attr(),
    markAsConsumed: _emberData['default'].attr('boolean', { defaultValue: true }),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    purchasesAffected: _emberData['default'].attr(),
    quantity: _emberData['default'].attr('number'),
    quantityAtCompletion: _emberData['default'].attr('number'),
    reason: _emberData['default'].attr('string'),
    requestedBy: _emberData['default'].attr('string'),
    status: _emberData['default'].attr('string'),
    transactionType: _emberData['default'].attr('string'),
    visit: _emberData['default'].belongsTo('visit', {
      async: false
    }),

    deliveryLocationName: (function () {
      var aisle = this.get('deliveryAisle'),
          location = this.get('deliveryLocation');
      return this.formatLocationName(location, aisle);
    }).property('deliveryAisle', 'deliveryLocation'),

    deliveryDetails: (function () {
      var locationName = this.get('deliveryLocationName'),
          patient = this.get('patient');
      if (_ember['default'].isEmpty(patient)) {
        return locationName;
      } else {
        return patient.get('displayName');
      }
    }).property('deliveryAisle', 'deliveryLocation', 'patient'),

    haveReason: (function () {
      return !_ember['default'].isEmpty(this.get('reason'));
    }).property('reason'),

    isAdjustment: (function () {
      var adjustmentTypes = this.get('adjustmentTypes'),
          transactionType = this.get('transactionType'),
          adjustmentType = adjustmentTypes.findBy('type', transactionType);
      return !_ember['default'].isEmpty(adjustmentType);
    }).property('transactionType'),

    isFulfillment: (function () {
      return this.get('transactionType') === 'Fulfillment';
    }).property('transactionType'),

    isTransfer: (function () {
      return this.get('transactionType') === 'Transfer';
    }).property('transactionType'),

    validations: {
      inventoryItemTypeAhead: {
        acceptance: {
          accept: true,
          'if': function _if(object) {
            if (!object.get('hasDirtyAttributes')) {
              return false;
            }
            var itemName = object.get('inventoryItem.name'),
                itemTypeAhead = object.get('inventoryItemTypeAhead'),
                requestedItems = object.get('requestedItems'),
                status = object.get('status');
            if (status === 'Requested') {
              // Requested items don't show the type ahead and therefore don't need validation.
              return false;
            }
            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {
              // force validation to fail if fields are empty and requested items are empty
              return _ember['default'].isEmpty(requestedItems);
            } else {
              var typeAheadName = itemTypeAhead.substr(0, itemName.length);
              if (itemName !== typeAheadName) {
                return true;
              }
            }
            // Inventory item is properly selected; don't do any further validation
            return false;
          },
          message: 'Please select a valid inventory item'
        }
      },
      quantity: {
        numericality: {
          greaterThan: 0,
          messages: {
            greaterThan: 'must be greater than 0'
          },
          'if': function _if(object) {
            var requestedItems = object.get('requestedItems');
            return _ember['default'].isEmpty(requestedItems);
          }
        },
        acceptance: {
          accept: true,
          'if': function _if(object) {
            var isNew = object.get('isNew'),
                requestQuantity = parseInt(object.get('quantity')),
                transactionType = object.get('transactionType'),
                quantityToCompare = null;
            if (transactionType === 'Return') {
              // no validation needed for returns
              return false;
            } else if (isNew && transactionType === 'Request') {
              quantityToCompare = object.get('inventoryItem.quantity');
            } else {
              quantityToCompare = object.get('inventoryLocation.quantity');
            }
            if (requestQuantity > quantityToCompare) {
              // force validation to fail
              return true;
            } else {
              // Diagnosis is properly set; don't do any further validation
              return false;
            }
          },
          message: 'The quantity must be less than or equal to the number of available items.'
        }
      }
    }
  });

  exports['default'] = InventoryRequest;
});
define('hospitalrun/models/inventory-batch', ['exports', 'hospitalrun/models/abstract', 'ember'], function (exports, _hospitalrunModelsAbstract, _ember) {

  /**
   * Model to represent a request for inventory items.
   */
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    haveInvoiceItems: function haveInvoiceItems() {
      var invoiceItems = this.get('invoiceItems');
      return _ember['default'].isEmpty(invoiceItems);
    },

    validations: {
      dateReceived: {
        presence: true
      },
      inventoryItemTypeAhead: {
        presence: {
          'if': function _if(object) {
            return object.haveInvoiceItems();
          }
        }
      },
      purchaseCost: {
        numericality: {
          greaterThan: 0,
          messages: {
            greaterThan: 'must be greater than 0'
          },
          'if': function _if(object) {
            return object.haveInvoiceItems();
          }
        }
      },
      quantity: {
        numericality: {
          greaterThan: 0,
          messages: {
            greaterThan: 'must be greater than 0'
          },
          'if': function _if(object) {
            return object.haveInvoiceItems();
          }
        }
      },
      vendor: {
        presence: true
      }
    }
  });
});
define('hospitalrun/models/inventory', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'ember-computed', 'hospitalrun/mixins/location-name', 'hospitalrun/utils/item-condition'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _emberComputed, _hospitalrunMixinsLocationName, _hospitalrunUtilsItemCondition) {

  var validateIfNewItem = {
    'if': function validateNewItem(object) {
      var skipSavePurchase = object.get('skipSavePurchase');
      // Only validate on new items and only if we are saving a purchase.
      return !skipSavePurchase && object.get('isNew');
    }
  };

  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {
    purchases: _emberData['default'].hasMany('inv-purchase', {
      async: false
    }),
    locations: _emberData['default'].hasMany('inv-location', {
      async: false
    }),
    description: _emberData['default'].attr('string'),
    friendlyId: _emberData['default'].attr('string'),
    keywords: _emberData['default'].attr(),
    name: _emberData['default'].attr('string'),
    quantity: _emberData['default'].attr('number'),
    crossReference: _emberData['default'].attr('string'),
    inventoryType: _emberData['default'].attr('string'),
    price: _emberData['default'].attr('number'),
    reorderPoint: _emberData['default'].attr('number'),
    distributionUnit: _emberData['default'].attr('string'),
    rank: _emberData['default'].attr('string'),

    // TODO: this value should be server calcuated property on model!
    estimatedDaysOfStock: 14,

    availableLocations: (0, _emberComputed['default'])('locations.@each.quantity', function () {
      var locations = this.get('locations').filter(function (location) {
        return location.get('quantity') > 0;
      });
      return locations;
    }),

    displayLocations: (0, _emberComputed['default'])('availableLocations', function () {
      var _this = this;

      var locations = this.get('availableLocations'),
          returnLocations = [];
      locations.forEach(function (currentLocation) {
        var aisleLocationName = currentLocation.get('aisleLocation'),
            locationName = currentLocation.get('location'),
            displayLocationName = _this.formatLocationName(locationName, aisleLocationName);
        if (!_ember['default'].isEmpty(displayLocationName)) {
          returnLocations.push(displayLocationName);
        }
      });
      return returnLocations.toString();
    }),

    condition: (0, _emberComputed['default'])('rank', 'estimatedDaysOfStock', function () {
      var estimatedDaysOfStock = this.get('estimatedDaysOfStock');
      var multiplier = (0, _hospitalrunUtilsItemCondition.rankToMultiplier)(this.get('rank'));

      return (0, _hospitalrunUtilsItemCondition.getCondition)(estimatedDaysOfStock, multiplier);
    }),

    validations: {
      distributionUnit: {
        presence: true
      },
      purchaseCost: {
        numericality: validateIfNewItem
      },
      name: {
        presence: true
      },
      quantity: {
        numericality: validateIfNewItem
      },
      price: {
        numericality: {
          allowBlank: true
        }
      },
      originalQuantity: {
        presence: validateIfNewItem
      },
      reorderPoint: {
        numericality: {
          allowBlank: true
        }
      },
      inventoryType: {
        presence: true
      },
      vendor: {
        presence: validateIfNewItem
      }
    },

    updateQuantity: function updateQuantity() {
      var purchases = this.get('purchases');
      var newQuantity = purchases.reduce(function (previousItem, currentItem) {
        var currentQuantity = 0;
        if (!currentItem.get('expired')) {
          currentQuantity = currentItem.get('currentQuantity');
        }
        return previousItem + currentQuantity;
      }, 0);
      this.set('quantity', newQuantity);
    }
  });
});
define('hospitalrun/models/invoice', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/date-format', 'ember-data', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/utils/patient-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsDateFormat, _emberData, _ember, _hospitalrunMixinsNumberFormat, _hospitalrunUtilsPatientValidation) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsNumberFormat['default'], {
    externalInvoiceNumber: _emberData['default'].attr('string'),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    patientInfo: _emberData['default'].attr('string'), // Needed for searching
    visit: _emberData['default'].belongsTo('visit', {
      async: false
    }),
    status: _emberData['default'].attr('string'),
    remarks: _emberData['default'].attr('string'),
    billDate: _emberData['default'].attr('date'),
    paidTotal: _emberData['default'].attr('number'),
    paymentProfile: _emberData['default'].belongsTo('price-profile', {
      async: false
    }),
    /*payments track the number of payment events attached to an invoice.*/
    payments: _emberData['default'].hasMany('payment', {
      async: false
    }),
    /*the individual line items of the invoice*/
    lineItems: _emberData['default'].hasMany('billing-line-item', {
      async: false
    }),

    addPayment: function addPayment(payment) {
      var payments = this.get('payments');
      payments.addObject(payment);
      this.paymentAmountChanged();
    },

    billDateAsTime: (function () {
      return this.dateToTime(this.get('billDate'));
    }).property('billDate'),

    discountTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'discount'),
    discount: _ember['default'].computed.sum('discountTotals'),

    nationalInsuranceTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'nationalInsurance'),
    nationalInsurance: _ember['default'].computed.sum('nationalInsuranceTotals'),

    paidFlag: (function () {
      return this.get('status') === 'Paid';
    }).property('status'),

    remainingBalance: (function () {
      var patientResponsibility = this.get('patientResponsibility'),
          paidTotal = this.get('paidTotal');
      return this._numberFormat(patientResponsibility - paidTotal, true);
    }).property('patientResponsibility', 'paidTotal'),

    privateInsuranceTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'privateInsurance'),
    privateInsurance: _ember['default'].computed.sum('privateInsuranceTotals'),

    lineTotals: _ember['default'].computed.mapBy('lineItems', 'total'),
    total: _ember['default'].computed.sum('lineTotals'),

    displayInvoiceNumber: (function () {
      var externalInvoiceNumber = this.get('externalInvoiceNumber'),
          id = this.get('id');
      if (_ember['default'].isEmpty(externalInvoiceNumber)) {
        return id;
      } else {
        return externalInvoiceNumber;
      }
    }).property('externalInvoiceNumber', 'id'),

    lineItemsByCategory: (function () {
      var lineItems = this.get('lineItems'),
          byCategory = [];
      lineItems.forEach((function (lineItem) {
        var category = lineItem.get('category'),
            categoryList = byCategory.findBy('category', category);
        if (_ember['default'].isEmpty(categoryList)) {
          categoryList = {
            category: category,
            items: []
          };
          byCategory.push(categoryList);
        }
        categoryList.items.push(lineItem);
      }).bind(this));
      byCategory.forEach((function (categoryList) {
        categoryList.amountOwed = this._calculateTotal(categoryList.items, 'amountOwed');
        categoryList.discount = this._calculateTotal(categoryList.items, 'discount');
        categoryList.nationalInsurance = this._calculateTotal(categoryList.items, 'nationalInsurance');
        categoryList.privateInsurance = this._calculateTotal(categoryList.items, 'privateInsurance');
        categoryList.total = this._calculateTotal(categoryList.items, 'total');
      }).bind(this));
      return byCategory;
    }).property('lineItems.@each.amountOwed'),
    patientIdChanged: (function () {
      if (!_ember['default'].isEmpty(this.get('patient'))) {
        var patientDisplayName = this.get('patient.displayName'),
            patientDisplayId = this.get('patient.displayPatientId');
        this.set('patientInfo', patientDisplayName + ' - ' + patientDisplayId);
      }
    }).observes('patient.displayName', 'patient.id', 'patient.displayPatientId'),

    patientResponsibilityTotals: _ember['default'].computed.mapBy('lineItems', 'amountOwed'),
    patientResponsibility: _ember['default'].computed.sum('patientResponsibilityTotals'),

    paymentAmountChanged: (function () {
      var payments = this.get('payments'),
          paidTotal = payments.reduce((function (previousValue, payment) {
        return previousValue += this._getValidNumber(payment.get('amount'));
      }).bind(this), 0);
      this.set('paidTotal', this._numberFormat(paidTotal, true));
      var remainingBalance = this.get('remainingBalance');
      if (remainingBalance <= 0) {
        this.set('status', 'Paid');
      }
    }).observes('payments.[]', 'payments.@each.amount'),

    validations: {
      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,

      patient: {
        presence: true
      },

      visit: {
        presence: true
      }
    }
  });
});
define('hospitalrun/models/lab', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'hospitalrun/mixins/date-format', 'ember-data', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _hospitalrunMixinsDateFormat, _emberData, _hospitalrunUtilsPatientValidation, _hospitalrunMixinsResultValidation) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsResultValidation['default'], {
    charges: _emberData['default'].hasMany('proc-charge', {
      async: false
    }),
    labDate: _emberData['default'].attr('date'),
    labType: _emberData['default'].belongsTo('pricing', {
      async: false
    }),
    notes: _emberData['default'].attr('string'),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    requestedBy: _emberData['default'].attr('string'),
    requestedDate: _emberData['default'].attr('date'),
    result: _emberData['default'].attr('string'),
    status: _emberData['default'].attr('string'),
    visit: _emberData['default'].belongsTo('visit', {
      async: false
    }),

    labDateAsTime: (function () {
      return this.dateToTime(this.get('labDate'));
    }).property('labDate'),

    requestedDateAsTime: (function () {
      return this.dateToTime(this.get('requestedDate'));
    }).property('requestedDate'),

    validations: {
      labTypeName: {
        presence: {
          'if': function _if(object) {
            if (object.get('isNew')) {
              return true;
            }
          },
          message: 'Please select a lab type'
        }
      },
      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,
      patient: {
        presence: true
      }
    }
  });
});
define('hospitalrun/models/line-item-detail', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'hospitalrun/mixins/number-format'], function (exports, _hospitalrunModelsAbstract, _emberData, _hospitalrunMixinsNumberFormat) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsNumberFormat['default'], {
    department: _emberData['default'].attr('string'),
    expenseAccount: _emberData['default'].attr('string'),
    name: _emberData['default'].attr('string'),
    price: _emberData['default'].attr('number'),
    pricingItem: _emberData['default'].belongsTo('pricing', {
      async: false
    }),
    quantity: _emberData['default'].attr('number'),
    total: _emberData['default'].attr('number'),

    amountOwed: (function () {
      var price = this.get('price'),
          quantity = this.get('quantity'),
          total = 0;
      if (this._validNumber(price) && this._validNumber(quantity)) {
        total = this._numberFormat(price * quantity, true);
      }
      return total;
    }).property('price', 'quantity')

  });
});
define('hospitalrun/models/lookup', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {
  exports['default'] = _emberPouch.Model.extend({
    _attachments: _emberData['default'].attr(), // Temporarily store file as attachment until it gets uploaded to the server
    importFile: _emberData['default'].attr('boolean', { defaultValue: false }),
    value: _emberData['default'].attr(''),
    organizeByType: _emberData['default'].attr('boolean'),
    userCanAdd: _emberData['default'].attr('boolean')
  });
});
define('hospitalrun/models/medication', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'ember-data', 'hospitalrun/mixins/date-format', 'ember', 'hospitalrun/mixins/medication-details'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _emberData, _hospitalrunMixinsDateFormat, _ember, _hospitalrunMixinsMedicationDetails) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsMedicationDetails['default'], {
    inventoryItem: _emberData['default'].belongsTo('inventory', {
      async: true
    }),
    notes: _emberData['default'].attr('string'),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    prescription: _emberData['default'].attr('string'),
    prescriptionDate: _emberData['default'].attr('date'),
    quantity: _emberData['default'].attr('number'),
    refills: _emberData['default'].attr('number'),
    requestedDate: _emberData['default'].attr('date'),
    requestedBy: _emberData['default'].attr('string'),
    status: _emberData['default'].attr('string'),
    visit: _emberData['default'].belongsTo('visit', {
      async: false
    }),

    isRequested: (function () {
      var status = this.get('status');
      return status === 'Requested';
    }).property('status'),

    medicationName: (function () {
      return this.getMedicationName('inventoryItem');
    }).property('medicationTitle', 'inventoryItem'),

    medicationPrice: (function () {
      return this.getMedicationPrice('inventoryItem');
    }).property('priceOfMedication', 'inventoryItem'),

    prescriptionDateAsTime: (function () {
      return this.dateToTime(this.get('prescriptionDate'));
    }).property('prescriptionDate'),

    requestedDateAsTime: (function () {
      return this.dateToTime(this.get('requestedDate'));
    }).property('requestedDate'),

    validations: {
      prescription: {
        acceptance: {
          accept: true,
          'if': function _if(object) {
            if (!object.get('hasDirtyAttributes') || object.get('isFulfilling')) {
              return false;
            }
            var prescription = object.get('prescription'),
                quantity = object.get('quantity');
            if (_ember['default'].isEmpty(prescription) && _ember['default'].isEmpty(quantity)) {
              // force validation to fail
              return true;
            } else {
              return false;
            }
          },
          message: 'Please enter a prescription or a quantity'
        }
      },

      inventoryItemTypeAhead: {
        acceptance: {
          accept: true,
          'if': function _if(object) {
            if (!object.get('hasDirtyAttributes') || !object.get('isNew')) {
              return false;
            }
            var itemName = object.get('inventoryItem.name'),
                itemTypeAhead = object.get('inventoryItemTypeAhead');
            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {
              // force validation to fail
              return true;
            } else {
              var typeAheadName = itemTypeAhead.substr(0, itemName.length);
              if (itemName !== typeAheadName) {
                return true;
              }
            }
            // Inventory item is properly selected; don't do any further validation
            return false;
          },
          message: 'Please select a valid medication'
        }
      },

      patientTypeAhead: {
        presence: {
          'if': function _if(object) {
            return object.get('selectPatient');
          }
        }
      },

      quantity: {
        numericality: {
          allowBlank: true,
          greaterThan: 0,
          messages: {
            greaterThan: 'must be greater than 0'
          }
        },
        presence: {
          'if': function _if(object) {
            var isFulfilling = object.get('isFulfilling');
            return isFulfilling;
          }
        },
        acceptance: {
          accept: true,
          'if': function _if(object) {
            var isFulfilling = object.get('isFulfilling'),
                requestQuantity = parseInt(object.get('quantity')),
                quantityToCompare = null;
            if (!isFulfilling) {
              // no validation needed when not fulfilling
              return false;
            } else {
              quantityToCompare = object.get('inventoryItem.quantity');
            }
            if (requestQuantity > quantityToCompare) {
              // force validation to fail
              return true;
            } else {
              // There is enough quantity on hand.
              return false;
            }
          },
          message: 'The quantity must be less than or equal to the number of available medication.'
        }
      },

      refills: {
        numericality: {
          allowBlank: true
        }
      }
    }
  });
});
define('hospitalrun/models/option', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {
  exports['default'] = _emberPouch.Model.extend({
    value: _emberData['default'].attr('')
  });
});
define('hospitalrun/models/override-price', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    profile: _emberData['default'].belongsTo('price-profile', {
      async: false
    }),
    price: _emberData['default'].attr('number'),
    validations: {
      profile: {
        presence: true
      },
      price: {
        numericality: true
      }
    }
  });
});
define('hospitalrun/models/patient-note', ['exports', 'hospitalrun/models/abstract', 'ember', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _ember, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    authoredBy: (function () {
      if (!_ember['default'].isEmpty(this.get('attribution'))) {
        var i18n = this.get('i18n');
        return this.get('createdBy') + ' ' + i18n.t('patients.notes.on_behalf_of_copy') + ' ' + this.get('attribution');
      } else {
        return this.get('createdBy');
      }
    }).property('attribution', 'createdBy'),
    // if the note was written by one person but dictated / given on behalf of another, otherwise, this and createdBy are the same
    attribution: _emberData['default'].attr('string'),
    content: _emberData['default'].attr('string'),
    createdBy: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    // custom list of noteTypes of mixins/patient-note-types
    noteType: _emberData['default'].attr(),
    // who is this note about?
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    // if this note is related to a visit, make sure it's noted.
    visit: _emberData['default'].belongsTo('visit', {
      async: false
    }),
    validations: {
      patient: {
        presence: true
      },
      visit: {
        presence: true
      },
      noteType: {
        presence: true
      },
      content: {
        presence: true
      }
    }
  });
});
define('hospitalrun/models/patient', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/dob-days', 'hospitalrun/utils/email-validation', 'ember', 'ember-data', 'hospitalrun/mixins/patient-name'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsDobDays, _hospitalrunUtilsEmailValidation, _ember, _emberData, _hospitalrunMixinsPatientName) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsDobDays['default'], _hospitalrunMixinsPatientName['default'], {
    admitted: _emberData['default'].attr('boolean', { defaultValue: false }),
    additionalContacts: _emberData['default'].attr(),
    address: _emberData['default'].attr('string'),
    address2: _emberData['default'].attr('string'),
    address3: _emberData['default'].attr('string'),
    address4: _emberData['default'].attr('string'),
    bloodType: _emberData['default'].attr('string'),
    clinic: _emberData['default'].attr('string'),
    country: _emberData['default'].attr('string'),
    dateOfBirth: _emberData['default'].attr('date'),
    economicClassification: _emberData['default'].attr('string'),
    email: _emberData['default'].attr('string'),
    expenses: _emberData['default'].attr(),
    externalPatientId: _emberData['default'].attr('string'),
    familySupport1: _emberData['default'].attr('string'),
    familySupport2: _emberData['default'].attr('string'),
    familySupport3: _emberData['default'].attr('string'),
    familySupport4: _emberData['default'].attr('string'),
    familySupport5: _emberData['default'].attr('string'),
    friendlyId: _emberData['default'].attr('string'),
    familyInfo: _emberData['default'].attr(),
    firstName: _emberData['default'].attr('string'),
    sex: _emberData['default'].attr('string'),
    occupation: _emberData['default'].attr('string'),
    history: _emberData['default'].attr('string'),
    insurance: _emberData['default'].attr('string'),
    lastName: _emberData['default'].attr('string'),
    livingArrangement: _emberData['default'].attr('string'),
    middleName: _emberData['default'].attr('string'),
    notes: _emberData['default'].attr('string'),
    otherIncome: _emberData['default'].attr('string'),
    payments: _emberData['default'].hasMany('payment', {
      async: true
    }),
    patientType: _emberData['default'].attr('string'),
    parent: _emberData['default'].attr('string'),
    paymentProfile: _emberData['default'].belongsTo('price-profile', {
      async: false
    }),
    phone: _emberData['default'].attr('string'),
    placeOfBirth: _emberData['default'].attr('string'),
    referredDate: _emberData['default'].attr('date'),
    referredBy: _emberData['default'].attr('string'),
    religion: _emberData['default'].attr('string'),
    socialActionTaken: _emberData['default'].attr('string'),
    socialRecommendation: _emberData['default'].attr('string'),
    status: _emberData['default'].attr('string'),

    age: (function () {
      var dob = this.get('dateOfBirth');
      return this.convertDOBToText(dob);
    }).property('dateOfBirth'),

    displayAddress: (function () {
      var addressFields = this.getProperties('address', 'address2', 'address3', 'address4'),
          displayAddress = '';
      for (var prop in addressFields) {
        if (!_ember['default'].isEmpty(addressFields[prop])) {
          if (!_ember['default'].isEmpty(displayAddress)) {
            displayAddress += ', ';
          }
          displayAddress += addressFields[prop];
        }
      }
      return displayAddress;
    }).property('address', 'address2', 'address3', 'address4'),

    displayName: (function () {
      return this.getPatientDisplayName(this);
    }).property('firstName', 'lastName', 'middleName'),

    displayPatientId: (function () {
      return this.getPatientDisplayId(this);
    }).property('id', 'externalPatientId', 'friendlyId'),

    validations: {
      email: {
        format: {
          'with': _hospitalrunUtilsEmailValidation['default'].emailRegex,
          allowBlank: true,
          message: 'please enter a valid email address'
        }
      },
      friendlyId: {
        presence: true
      },
      firstName: {
        presence: true
      },
      lastName: {
        presence: true
      }
    }

  });
});
define('hospitalrun/models/payment', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    amount: _emberData['default'].attr('number'),
    charityPatient: _emberData['default'].attr('boolean'), // Is patient a charity case
    expenseAccount: _emberData['default'].attr('string'),
    invoice: _emberData['default'].belongsTo('invoice', {
      async: false
    }),
    datePaid: _emberData['default'].attr('date'),
    paymentType: _emberData['default'].attr('string'),
    notes: _emberData['default'].attr('string'),

    canRemovePayment: (function () {
      return this.get('paymentType') === 'Deposit';
    }).property('paymentType'),

    validations: {
      amount: {
        numericality: true
      },
      datePaid: {
        presence: true
      }
    }
  });
});
define('hospitalrun/models/photo', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    _attachments: _emberData['default'].attr(), // Temporarily store file as attachment until it gets uploaded to the server
    coverImage: _emberData['default'].attr('boolean'),
    fileName: _emberData['default'].attr('string'),
    localFile: _emberData['default'].attr('boolean'),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    caption: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),

    downloadImageFromServer: function downloadImageFromServer(imageRecord) {
      var me = this,
          url = imageRecord.get('url'),
          xhr = new XMLHttpRequest();
      if (!_ember['default'].isEmpty(url)) {
        // Make sure directory exists or is created before downloading.
        this.getPatientDirectory(imageRecord.get('patientId'));
        xhr.open('GET', url, true);
        xhr.responseType = 'blob';
        xhr.onload = function () {
          var file = new Blob([xhr.response]);
          me.addImageToFileStore(file, null, imageRecord);
        };
        xhr.send();
      }
    }
  });
});
define('hospitalrun/models/price-profile', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    name: _emberData['default'].attr('string'),
    discountAmount: _emberData['default'].attr('number'),
    discountPercentage: _emberData['default'].attr('number'),

    validations: {
      name: {
        presence: true
      },
      discountAmount: {
        numericality: {
          allowBlank: true
        }
      },
      discountPercentage: {
        numericality: {
          allowBlank: true
        }
      }
    }
  });
});
define('hospitalrun/models/pricing', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    category: _emberData['default'].attr('string'),
    expenseAccount: _emberData['default'].attr('string'),
    name: _emberData['default'].attr('string'),
    price: _emberData['default'].attr('number'),
    pricingType: _emberData['default'].attr('string'),
    pricingOverrides: _emberData['default'].hasMany('override-price', {
      async: false
    }),

    validations: {
      category: {
        presence: true
      },
      name: {
        presence: true
      },
      price: {
        numericality: true
      }
    }
  });
});
define('hospitalrun/models/proc-charge', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/medication-details'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsMedicationDetails) {

  /**
   * Procedure charges
   */
  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsMedicationDetails['default'], {
    medication: _emberData['default'].belongsTo('inventory', {
      async: false
    }),
    pricingItem: _emberData['default'].belongsTo('pricing', {
      async: false
    }),
    quantity: _emberData['default'].attr('number'),
    dateCharged: _emberData['default'].attr('date'),

    medicationCharge: (function () {
      var medication = this.get('medication');
      var newMedicationCharge = this.get('newMedicationCharge');
      return !_ember['default'].isEmpty(medication) || !_ember['default'].isEmpty(newMedicationCharge);
    }).property('medication', 'newMedicationCharge'),

    medicationName: (function () {
      return this.get('medication.name');
    }).property('medication'),

    medicationPrice: (function () {
      return this.get('medication.price');
    }).property('medication'),

    validations: {
      itemName: {
        presence: true,
        acceptance: {
          accept: true,
          'if': function _if(object) {
            var medicationCharge = object.get('medicationCharge');
            if (!medicationCharge || !object.get('hasDirtyAttributes')) {
              return false;
            }
            var itemName = object.get('inventoryItem.name'),
                itemTypeAhead = object.get('itemName');
            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {
              // force validation to fail
              return true;
            } else {
              var typeAheadName = itemTypeAhead.substr(0, itemName.length);
              if (itemName !== typeAheadName) {
                return true;
              }
            }
            // Inventory item is properly selected; don't do any further validation
            return false;
          },
          message: 'Please select a valid medication'
        }

      },

      quantity: {
        numericality: {
          greaterThan: 0,
          messages: {
            greaterThan: 'must be greater than 0'
          }
        }
      }
    }
  });
});
define('hospitalrun/models/procedure', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    anesthesiaType: _emberData['default'].attr('string'),
    anesthesiologist: _emberData['default'].attr('string'),
    assistant: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    charges: _emberData['default'].hasMany('proc-charge', {
      async: false
    }),
    cptCode: _emberData['default'].attr('string'),
    location: _emberData['default'].attr('string'),
    notes: _emberData['default'].attr('string'),
    physician: _emberData['default'].attr('string'),
    procedureDate: _emberData['default'].attr('date'),
    timeStarted: _emberData['default'].attr('string'),
    timeEnded: _emberData['default'].attr('string'),
    visit: _emberData['default'].belongsTo('visit', {
      async: false
    }),

    validations: {
      description: {
        presence: true
      },

      oxygenHours: {
        numericality: {
          allowBlank: true
        }
      },
      pacuHours: {
        numericality: {
          allowBlank: true
        }
      },
      physician: {
        presence: true
      },
      procedureDate: {
        presence: true
      },
      display_procedureDate: {
        presence: {
          message: 'Please select a valid date'
        }
      }
    }
  });
});
define('hospitalrun/models/sequence', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {
  exports['default'] = _emberPouch.Model.extend({
    prefix: _emberData['default'].attr('string'),
    value: _emberData['default'].attr('number')
  });
});
define('hospitalrun/models/social-expense', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {
  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {
    category: _emberData['default'].attr('string'),
    sources: _emberData['default'].attr('string'),
    cost: _emberData['default'].attr(),
    validations: {
      category: {
        presence: true
      },
      cost: {
        numericality: true
      }
    }
  });
});
/**
 * Model for social worker family info
 */
define('hospitalrun/models/user-role', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    name: _emberData['default'].attr('string'),
    capabilities: _emberData['default'].attr()
  });
});
define('hospitalrun/models/user', ['exports', 'ember-data', 'hospitalrun/utils/email-validation', 'ember', 'ember-validations'], function (exports, _emberData, _hospitalrunUtilsEmailValidation, _ember, _emberValidations) {
  var User = _emberData['default'].Model.extend(_emberValidations['default'], {
    derived_key: _emberData['default'].attr('string'),
    deleted: _emberData['default'].attr('boolean'),
    displayName: _emberData['default'].attr('string'),
    email: _emberData['default'].attr('string'),
    iterations: _emberData['default'].attr(),
    name: _emberData['default'].attr('string'),
    password: _emberData['default'].attr('string'),
    password_scheme: _emberData['default'].attr('string'),
    password_sha: _emberData['default'].attr('string'),
    rev: _emberData['default'].attr('string'),
    roles: _emberData['default'].attr(),
    salt: _emberData['default'].attr('string'),
    userPrefix: _emberData['default'].attr('string'),

    displayRole: (function () {
      var roles = this.get('roles');
      if (!_ember['default'].isEmpty(roles)) {
        return roles[0];
      }
    }).property('roles'),

    validations: {
      email: {
        format: {
          'with': _hospitalrunUtilsEmailValidation['default'].emailRegex,
          message: 'please enter a valid email address'
        }
      }
    }
  });

  exports['default'] = User;
});
define('hospitalrun/models/visit', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember) {

  function dateAcceptance(object) {
    if (!object.get('hasDirtyAttributes')) {
      return false;
    }
    var startDate = object.get('startDate'),
        endDate = object.get('endDate');
    if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {
      // Can't validate if empty
      return false;
    } else {
      if (endDate.getTime() < startDate.getTime()) {
        return true;
      }
    }
    return false;
  }

  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    additionalDiagnoses: _emberData['default'].attr(), // Yes, the plural of diagnosis is diagnoses!
    charges: _emberData['default'].hasMany('proc-charge', {
      async: false
    }),
    dischargeInfo: _emberData['default'].attr('string'),
    endDate: _emberData['default'].attr('date'), // if visit type is outpatient, startDate and endDate are equal
    examiner: _emberData['default'].attr('string'),
    history: _emberData['default'].attr('string'),
    historySince: _emberData['default'].attr('string'), // History since last seen
    imaging: _emberData['default'].hasMany('imaging', { async: true }),
    labs: _emberData['default'].hasMany('lab', { async: true }),
    location: _emberData['default'].attr('string'),
    medication: _emberData['default'].hasMany('medication', { async: true }),
    // this field is being deprecated in favor of patient-note
    notes: _emberData['default'].attr('string'),
    patientNotes: _emberData['default'].hasMany('patient-note', { async: true }),
    outPatient: _emberData['default'].attr('boolean'),
    patient: _emberData['default'].belongsTo('patient', {
      async: false
    }),
    primaryDiagnosis: _emberData['default'].attr('string'), // AKA admitting diagnosis
    primaryBillingDiagnosis: _emberData['default'].attr('string'), // AKA final diagnosis
    primaryBillingDiagnosisId: _emberData['default'].attr('string'),
    procedures: _emberData['default'].hasMany('procedure', { async: true }),
    startDate: _emberData['default'].attr('date'),
    status: _emberData['default'].attr('string'),
    visitType: _emberData['default'].attr(),
    vitals: _emberData['default'].hasMany('vital', { async: true }),

    diagnosisList: (function () {
      var additionalDiagnosis = this.get('additionalDiagnoses'),
          diagnosisList = [],
          primaryDiagnosis = this.get('primaryDiagnosis');
      if (!_ember['default'].isEmpty(primaryDiagnosis)) {
        diagnosisList.push(primaryDiagnosis);
      }
      if (!_ember['default'].isEmpty(additionalDiagnosis)) {
        diagnosisList.addObjects(additionalDiagnosis.map(function (diagnosis) {
          return diagnosis.description;
        }));
      }
      return diagnosisList;
    }).property('additionalDiagnosis.[]', 'primaryDiagnosis'),

    visitDate: (function () {
      var endDate = this.get('endDate'),
          startDate = moment(this.get('startDate')),
          visitDate = startDate.format('l');
      if (!_ember['default'].isEmpty(endDate) && !startDate.isSame(endDate, 'day')) {
        visitDate += ' - ' + moment(endDate).format('l');
      }
      return visitDate;
    }).property('startDate', 'endDate'),

    visitDescription: (function () {
      var visitDate = this.get('visitDate'),
          visitType = this.get('visitType');
      return visitDate + ' (' + visitType + ')';
    }).property('visitDate', 'visitType'),

    validations: {
      endDate: {
        acceptance: {
          accept: true,
          'if': dateAcceptance,
          message: 'Please select an end date later than the start date'
        }
      },

      startDate: {
        acceptance: {
          accept: true,
          'if': dateAcceptance,
          message: 'Please select a start date earlier than the end date'
        },
        presence: true
      },
      visitType: {
        presence: true
      }

    }

  });
});
define('hospitalrun/models/vital', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {
  exports['default'] = _hospitalrunModelsAbstract['default'].extend({
    dateRecorded: _emberData['default'].attr('date'),
    temperature: _emberData['default'].attr('number'),
    weight: _emberData['default'].attr('string'),
    height: _emberData['default'].attr('string'),
    sbp: _emberData['default'].attr('number'),
    dbp: _emberData['default'].attr('number'),
    heartRate: _emberData['default'].attr('number'),
    respiratoryRate: _emberData['default'].attr('number'),
    validations: {
      temperature: {
        numericality: true
      },
      sbp: {
        numericality: true
      },
      dbp: {
        numericality: true
      },
      heartRate: {
        numericality: true
      },
      respiratoryRate: {
        numericality: true
      }
    }
  });
});
define('hospitalrun/patients/add-contact/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {
    patientsEdit: _ember['default'].inject.controller('patients/edit'),
    editController: _ember['default'].computed.alias('patientsEdit'),
    title: (0, _emberI18n.translationMacro)('patients.titles.add_contact'),
    updateButtonText: (0, _emberI18n.translationMacro)('buttons.add'),
    updateButtonAction: 'add',
    showUpdateButton: true,

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      add: function add() {
        var newContact = this.getProperties('name', 'phone', 'email', 'relationship');
        this.get('editController').send('addContact', newContact);
      }
    }
  });
});
define("hospitalrun/patients/add-contact/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/add-contact/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["label", ["subexpr", "t", ["labels.name"], [], ["loc", [null, [9, 21], [9, 38]]]], "property", "name"], ["loc", [null, [9, 4], [9, 56]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["patients.labels.phone"], [], ["loc", [null, [10, 21], [10, 48]]]], "property", "phone"], ["loc", [null, [10, 4], [10, 67]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["patients.labels.email"], [], ["loc", [null, [11, 21], [11, 48]]]], "property", "email"], ["loc", [null, [11, 4], [11, 67]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["patients.labels.relationships"], [], ["loc", [null, [12, 21], [12, 56]]]], "property", "relationship"], ["loc", [null, [12, 4], [12, 82]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/add-contact/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "this", ["loc", [null, [8, 19], [8, 23]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [8, 2], [13, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/add-contact/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "hideUpdateButton", ["subexpr", "@mut", [["get", "hideUpdateButton", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [4, 21], [4, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [5, 10], [5, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [6, 23], [6, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [7, 21], [7, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [14, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/admitted/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {
  exports['default'] = _hospitalrunPatientsIndexController['default'].extend({});
});
define('hospitalrun/patients/admitted/route', ['exports', 'hospitalrun/routes/abstract-index-route'], function (exports, _hospitalrunRoutesAbstractIndexRoute) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    modelName: 'patient',
    pageTitle: 'Admitted patients',

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var displayPatientId = item.get('displayPatientId');
      return [displayPatientId, 'patient_' + item.get('id')];
    },

    _modelQueryParams: function _modelQueryParams() {
      return {
        options: {
          key: true
        },
        mapReduce: 'patient_by_admission'
      };
    }
  });
});
define("hospitalrun/patients/admitted/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/admitted/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["patients/index"], [], ["loc", [null, [1, 0], [1, 28]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/patients/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    title: (0, _emberI18n.translationMacro)('patients.titles.delete')
  });
});
define("hospitalrun/patients/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["patients.messages.delete_patient", ["get", "model", ["loc", [null, [8, 43], [8, 48]]]]], [], ["loc", [null, [8, 4], [8, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/blood-types', 'ember', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/return-to', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsBloodTypes, _ember, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsReturnTo, _hospitalrunUtilsSelectValues, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsBloodTypes['default'], _hospitalrunMixinsReturnTo['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsPatientNotes['default'], {
    canAddAppointment: (function () {
      return this.currentUserCan('add_appointment');
    }).property(),

    canAddContact: (function () {
      return this.currentUserCan('add_patient');
    }).property(),

    canAddImaging: (function () {
      return this.currentUserCan('add_imaging');
    }).property(),

    canAddLab: (function () {
      return this.currentUserCan('add_lab');
    }).property(),

    canAddMedication: (function () {
      return this.currentUserCan('add_medication');
    }).property(),

    canAddPhoto: (function () {
      var isFileSystemEnabled = this.get('isFileSystemEnabled');
      return this.currentUserCan('add_photo') && isFileSystemEnabled;
    }).property(),

    canAddSocialWork: (function () {
      return this.currentUserCan('add_socialwork');
    }).property(),

    canAddVisit: (function () {
      return this.currentUserCan('add_visit');
    }).property(),

    canDeleteAppointment: (function () {
      return this.currentUserCan('delete_appointment');
    }).property(),

    canDeleteContact: (function () {
      return this.currentUserCan('add_patient');
    }).property(),

    canDeleteImaging: (function () {
      return this.currentUserCan('delete_imaging');
    }).property(),

    canDeleteLab: (function () {
      return this.currentUserCan('delete_lab');
    }).property(),

    canDeleteMedication: (function () {
      return this.currentUserCan('delete_medication');
    }).property(),

    canDeletePhoto: (function () {
      return this.currentUserCan('delete_photo');
    }).property(),

    canDeleteSocialWork: (function () {
      return this.currentUserCan('delete_socialwork');
    }).property(),

    canDeleteVisit: (function () {
      return this.currentUserCan('delete_visit');
    }).property(),

    patientTypes: ['Charity', 'Private'],

    filesystem: _ember['default'].inject.service(),
    database: _ember['default'].inject.service(),
    patientController: _ember['default'].inject.controller('patients'),

    addressOptions: _ember['default'].computed.alias('patientController.addressOptions'),
    address1Include: _ember['default'].computed.alias('patientController.addressOptions.value.address1Include'),
    address1Label: _ember['default'].computed.alias('patientController.addressOptions.value.address1Label'),
    address2Include: _ember['default'].computed.alias('patientController.addressOptions.value.address2Include'),
    address2Label: _ember['default'].computed.alias('patientController.addressOptions.value.address2Label'),
    address3Include: _ember['default'].computed.alias('patientController.addressOptions.value.address3Include'),
    address3Label: _ember['default'].computed.alias('patientController.addressOptions.value.address3Label'),
    address4Include: _ember['default'].computed.alias('patientController.addressOptions.value.address4Include'),
    address4Label: _ember['default'].computed.alias('patientController.addressOptions.value.address4Label'),

    clinicList: _ember['default'].computed.alias('patientController.clinicList'),
    countryList: _ember['default'].computed.alias('patientController.countryList'),
    customSocialForm: _ember['default'].computed.alias('patientController.customSocialForm.value'),
    isFileSystemEnabled: _ember['default'].computed.alias('filesystem.isFileSystemEnabled'),

    pricingProfiles: _ember['default'].computed.map('patientController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),
    sexList: _ember['default'].computed.alias('patientController.sexList'),
    statusList: _ember['default'].computed.alias('patientController.statusList'),

    haveAdditionalContacts: (function () {
      var additionalContacts = this.get('model.additionalContacts');
      return !_ember['default'].isEmpty(additionalContacts);
    }).property('model.additionalContacts'),

    haveAddressOptions: (function () {
      var addressOptions = this.get('addressOptions');
      return !_ember['default'].isEmpty(addressOptions);
    }).property('addressOptions'),

    lookupListsToUpdate: [{
      name: 'countryList',
      property: 'model.country',
      id: 'country_list'
    }, {
      name: 'clinicList',
      property: 'model.clinic',
      id: 'clinic_list'
    }, {
      name: 'sexList',
      property: 'model.sex',
      id: 'sex'
    }, {
      name: 'statusList',
      property: 'model.status',
      id: 'patient_status_list'
    }],

    patientImaging: (function () {
      return this._getVisitCollection('imaging');
    }).property('model.visits.[].imaging'),

    patientLabs: (function () {
      return this._getVisitCollection('labs');
    }).property('model.visits.[].labs'),

    patientMedications: (function () {
      return this._getVisitCollection('medication');
    }).property('model.visits.[].medication'),

    patientProcedures: (function () {
      return this._getVisitCollection('procedures');
    }).property('model.visits.[].procedures'),

    showExpenseTotal: (function () {
      var expenses = this.get('model.expenses');
      return !_ember['default'].isEmpty(expenses);
    }).property('model.expenses.[]'),

    totalExpenses: (function () {
      var expenses = this.get('model.expenses');
      if (!_ember['default'].isEmpty(expenses)) {
        var total = expenses.reduce(function (previousValue, expense) {
          if (!_ember['default'].isEmpty(expense.cost)) {
            return previousValue + parseInt(expense.cost);
          }
        }, 0);
        return total;
      }
    }).property('model.expenses.@each.cost'),

    updateCapability: 'add_patient',

    actions: {
      addContact: function addContact(newContact) {
        var additionalContacts = this.getWithDefault('model.additionalContacts', []),
            model = this.get('model');
        additionalContacts.addObject(newContact);
        model.set('additionalContacts', additionalContacts);
        this.send('update', true);
        this.send('closeModal');
      },
      returnToPatient: function returnToPatient() {
        this.transitionToRoute('patients.index');
      },
      /**
       * Add the specified photo to the patient's record.
       * @param {File} photoFile the photo file to add.
       * @param {String} caption the caption to store with the photo.
       * @param {boolean} coverImage flag indicating if image should be marked as the cover image (currently unused).
       */
      addPhoto: function addPhoto(photoFile, caption, coverImage) {
        var dirToSaveTo = this.get('model.id') + '/photos/',
            fileSystem = this.get('filesystem'),
            photos = this.get('model.photos'),
            newPatientPhoto = this.get('store').createRecord('photo', {
          patient: this.get('model'),
          localFile: true,
          caption: caption,
          coverImage: coverImage
        });
        newPatientPhoto.save().then((function (savedPhotoRecord) {
          var pouchDbId = this.get('database').getPouchId(savedPhotoRecord.get('id'), 'photo');
          fileSystem.addFile(photoFile, dirToSaveTo, pouchDbId).then((function (fileEntry) {
            fileSystem.fileToDataURL(photoFile).then((function (photoDataUrl) {
              savedPhotoRecord = this.get('store').find('photo', savedPhotoRecord.get('id')).then((function (savedPhotoRecord) {
                var dataUrlParts = photoDataUrl.split(',');
                savedPhotoRecord.setProperties({
                  fileName: fileEntry.fullPath,
                  url: fileEntry.toURL(),
                  _attachments: {
                    file: {
                      content_type: photoFile.type,
                      data: dataUrlParts[1]
                    }
                  }
                });
                savedPhotoRecord.save().then((function (savedPhotoRecord) {
                  photos.addObject(savedPhotoRecord);
                  this.send('closeModal');
                }).bind(this));
              }).bind(this));
            }).bind(this));
          }).bind(this));
        }).bind(this));
      },

      appointmentDeleted: function appointmentDeleted(deletedAppointment) {
        var appointments = this.get('model.appointments');
        appointments.removeObject(deletedAppointment);
        this.send('closeModal');
      },

      deleteContact: function deleteContact(model) {
        var contact = model.get('contactToDelete');
        var additionalContacts = this.get('model.additionalContacts');
        additionalContacts.removeObject(contact);
        this.send('update', true);
      },

      deleteExpense: function deleteExpense(model) {
        var expense = model.get('expenseToDelete'),
            expenses = this.get('model.expenses');
        expenses.removeObject(expense);
        this.send('update', true);
      },

      deleteFamily: function deleteFamily(model) {
        var family = model.get('familyToDelete'),
            familyInfo = this.get('model.familyInfo');
        familyInfo.removeObject(family);
        this.send('update', true);
      },

      deletePhoto: function deletePhoto(model) {
        var photo = model.get('photoToDelete'),
            photoId = photo.get('id'),
            photos = this.get('model.photos'),
            filePath = photo.get('fileName');
        photos.removeObject(photo);
        photo.destroyRecord().then((function () {
          var fileSystem = this.get('filesystem'),
              isFileSystemEnabled = this.get('isFileSystemEnabled');
          if (isFileSystemEnabled) {
            var pouchDbId = this.get('database').getPouchId(photoId, 'photo');
            fileSystem.deleteFile(filePath, pouchDbId);
          }
        }).bind(this));
      },

      editAppointment: function editAppointment(appointment) {
        if (this.get('canAddAppointment')) {
          appointment.set('returnToPatient', true);
          appointment.set('returnTo', null);
          this.transitionToRoute('appointments.edit', appointment);
        }
      },

      editImaging: function editImaging(imaging) {
        if (this.get('canAddImaging')) {
          if (imaging.get('canEdit')) {
            imaging.setProperties({
              'returnToPatient': true
            });
            this.transitionToRoute('imaging.edit', imaging);
          }
        }
      },

      editLab: function editLab(lab) {
        if (this.get('canAddLab')) {
          if (lab.get('canEdit')) {
            lab.setProperties({
              'returnToPatient': true
            });
            this.transitionToRoute('labs.edit', lab);
          }
        }
      },

      editMedication: function editMedication(medication) {
        if (this.get('canAddMedication')) {
          if (medication.get('canEdit')) {
            medication.set('returnToPatient', true);
            this.transitionToRoute('medication.edit', medication);
          }
        }
      },

      editPhoto: function editPhoto(photo) {
        this.send('openModal', 'patients.photo', photo);
      },

      editProcedure: function editProcedure(procedure) {
        if (this.get('canAddVisit')) {
          this.transitionToRoute('procedures.edit', procedure);
        }
      },

      editVisit: function editVisit(visit) {
        if (this.get('canAddVisit')) {
          this.transitionToRoute('visits.edit', visit);
        }
      },

      newAppointment: function newAppointment() {
        this._addChildObject('appointments.edit');
      },

      newImaging: function newImaging() {
        this._addChildObject('imaging.edit');
      },

      newLab: function newLab() {
        this._addChildObject('labs.edit');
      },

      newMedication: function newMedication() {
        this._addChildObject('medication.edit');
      },

      newVisit: function newVisit() {
        var patient = this.get('model'),
            visits = this.get('model.visits');
        this.send('createNewVisit', patient, visits);
      },

      showAddContact: function showAddContact() {
        this.send('openModal', 'patients.add-contact', {});
      },

      showAddPhoto: function showAddPhoto() {
        this.send('openModal', 'patients.photo', {
          isNew: true
        });
      },

      showAddPatientNote: function showAddPatientNote(model) {
        if (this.get('canAddNote')) {
          if (_ember['default'].isEmpty(model)) {
            model = this.get('store').createRecord('patient-note', {
              patient: this.get('model'),
              createdBy: this.getUserName()
            });
          }
          this.send('openModal', 'patients.notes', model);
        }
      },

      showDeleteAppointment: function showDeleteAppointment(appointment) {
        appointment.set('deleteFromPatient', true);
        this.send('openModal', 'appointments.delete', appointment);
      },

      showDeleteContact: function showDeleteContact(contact) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deleteContact',
          title: this.get('i18n').t('patients.titles.delete_contact'),
          message: this.get('i18n').t('patients.titles.delete_photo', { object: 'contact' }),
          contactToDelete: contact,
          updateButtonAction: 'confirm',
          updateButtonText: this.get('i18n').t('buttons.ok')
        }));
      },

      showDeleteExpense: function showDeleteExpense(expense) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deleteExpense',
          title: this.get('i18n').t('patients.titles.delete_expense'),
          message: this.get('i18n').t('patients.titles.delete_photo', { object: 'expense' }),
          expenseToDelete: expense,
          updateButtonAction: 'confirm',
          updateButtonText: this.get('i18n').t('buttons.ok')
        }));
      },

      showDeleteFamily: function showDeleteFamily(familyInfo) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deleteFamily',
          title: this.get('i18n').t('patients.titles.delete_family_member'),
          message: this.get('i18n').t('patients.titles.delete_photo', { object: 'family member' }),
          familyToDelete: familyInfo,
          updateButtonAction: 'confirm',
          updateButtonText: this.get('i18n').t('buttons.ok')
        }));
      },

      showDeleteImaging: function showDeleteImaging(imaging) {
        this.send('openModal', 'imaging.delete', imaging);
      },

      showDeleteLab: function showDeleteLab(lab) {
        this.send('openModal', 'labs.delete', lab);
      },

      showDeleteMedication: function showDeleteMedication(medication) {
        this.send('openModal', 'medication.delete', medication);
      },

      showDeletePhoto: function showDeletePhoto(photo) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deletePhoto',
          title: this.get('i18n').t('patients.titles.delete_photo'),
          message: this.get('i18n').t('patients.titles.delete_photo', { object: 'photo' }),
          photoToDelete: photo,
          updateButtonAction: 'confirm',
          updateButtonText: this.get('i18n').t('buttons.ok')
        }));
      },

      showDeleteVisit: function showDeleteVisit(visit) {
        visit.set('deleteFromPatient', true);
        this.send('openModal', 'visits.delete', visit);
      },

      showEditExpense: function showEditExpense(expenseInfo) {
        this._showEditSocial(expenseInfo, 'social-expense', 'expense');
      },

      showEditFamily: function showEditFamily(familyInfo) {
        this._showEditSocial(familyInfo, 'family-info', 'family-info');
      },

      updateExpense: function updateExpense(model) {
        this._updateSocialRecord(model, 'expenses');
      },

      updateFamilyInfo: function updateFamilyInfo(model) {
        this._updateSocialRecord(model, 'familyInfo');
      },

      updatePhoto: function updatePhoto(photo) {
        photo.save().then((function () {
          this.send('closeModal');
        }).bind(this));
      },

      visitDeleted: function visitDeleted(deletedVisit) {
        var visits = this.get('model.visits');
        visits.removeObject(deletedVisit);
        this.send('closeModal');
      }

    },

    _addChildObject: function _addChildObject(route) {
      this.transitionToRoute(route, 'new').then((function (newRoute) {
        newRoute.currentModel.setProperties({
          patient: this.get('model'),
          returnToPatient: true,
          selectPatient: false
        });
      }).bind(this));
    },

    _showEditSocial: function _showEditSocial(editAttributes, modelName, route) {
      var model;
      if (_ember['default'].isEmpty(editAttributes)) {
        model = this.get('store').createRecord(modelName, {
          newRecord: true
        });
      } else {
        model = this.get('store').push({
          data: {
            id: _ember['default'].get(editAttributes, 'id'),
            type: modelName,
            attributes: editAttributes
          }
        });
      }
      this.send('openModal', 'patients.socialwork.' + route, model);
    },

    _getVisitCollection: function _getVisitCollection(name) {
      var returnList = [],
          visits = this.get('model.visits');
      if (!_ember['default'].isEmpty(visits)) {
        visits.forEach(function (visit) {
          visit.get(name).then(function (items) {
            returnList.addObjects(items);
            if (returnList.length > 0) {
              returnList[0].set('first', true);
            }
          });
        });
      }
      return returnList;
    },

    _updateSocialRecord: function _updateSocialRecord(recordToUpdate, name) {
      var socialRecords = this.getWithDefault('model.' + name, []);
      var isNew = recordToUpdate.get('isNew');
      var patient = this.get('model');
      var objectToUpdate = recordToUpdate.serialize();
      objectToUpdate.id = recordToUpdate.get('id');
      if (isNew) {
        socialRecords.addObject(_ember['default'].Object.create(objectToUpdate));
      } else {
        var updateRecord = socialRecords.findBy('id', objectToUpdate.id);
        _ember['default'].setProperties(updateRecord, objectToUpdate);
      }
      patient.set(name, socialRecords);
      this.send('update', true);
      this.send('closeModal');
    },

    afterUpdate: function afterUpdate(record) {
      this.send('openModal', 'dialog', _ember['default'].Object.create({
        title: this.get('i18n').t('patients.titles.saved_patient'),
        message: this.get('i18n').t('patients.messages.saved_patient', record),
        updateButtonAction: 'returnToPatient',
        updateButtonText: this.get('i18n').t('patients.buttons.back_to_patients'),
        cancelButtonText: this.get('i18n').t('buttons.close')
      }));
    }

  });
});
define('hospitalrun/patients/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-visits', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/pouchdb', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsPatientId, _hospitalrunMixinsPatientVisits, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsPouchdb, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsPatientId['default'], _hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsPatientNotes['default'], {
    editTitle: (0, _emberI18n.translationMacro)('patients.titles.edit'),
    modelName: 'patient',
    newTitle: (0, _emberI18n.translationMacro)('patients.titles.new'),
    photos: null,

    actions: {
      updateNote: function updateNote(note) {
        note.get('visit').save().then(function () {
          // noop
        });
      },
      appointmentDeleted: function appointmentDeleted(model) {
        this.controller.send('appointmentDeleted', model);
      },
      returnToPatient: function returnToPatient() {
        this.controller.send('returnToPatient');
      },
      deleteContact: function deleteContact(model) {
        this.controller.send('deleteContact', model);
      },

      deleteExpense: function deleteExpense(model) {
        this.controller.send('deleteExpense', model);
      },

      deleteFamily: function deleteFamily(model) {
        this.controller.send('deleteFamily', model);
      },

      deletePhoto: function deletePhoto(model) {
        this.controller.send('deletePhoto', model);
      },

      updateExpense: function updateExpense(model) {
        this.controller.send('updateExpense', model);
      },

      updateFamilyInfo: function updateFamilyInfo(model) {
        this.controller.send('updateFamilyInfo', model);
      },

      visitDeleted: function visitDeleted(model) {
        this.controller.send('visitDeleted', model);
      }
    },

    getNewData: function getNewData() {
      return this.generateFriendlyId().then(function (friendlyId) {
        return { friendlyId: friendlyId };
      });
    },

    setupController: function setupController(controller, model) {
      // Load appointments, photos and visits asynchronously.
      var friendlyId = model.get('friendlyId'),
          externalId = model.get('externalPatientId'),
          maxValue = this.get('maxValue'),
          patientId = model.get('id');
      if (_ember['default'].isEmpty(friendlyId) && !_ember['default'].isEmpty(externalId)) {
        model.set('friendlyId', externalId);
      }
      this._super(controller, model);
      this.getPatientVisits(model).then(function (visits) {
        model.set('visits', visits);
      });
      this.store.query('appointment', {
        options: {
          startkey: [patientId, null, null, 'appointment_'],
          endkey: [patientId, maxValue, maxValue, maxValue]
        },
        mapReduce: 'appointments_by_patient'
      }).then(function (appointments) {
        model.set('appointments', appointments);
      });
      this.store.query('photo', {
        options: {
          key: patientId
        },
        mapReduce: 'photo_by_patient'
      }).then(function (photos) {
        var patientPhotos = [];
        patientPhotos.addObjects(photos);
        model.set('photos', patientPhotos);
      });
    }

  });
});
define("hospitalrun/patients/edit/template",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":14,"column":8},"end":{"line":16,"column":8}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"role","presentation");var el2=dom.createElement("a");dom.setAttribute(el2,"href","#social");dom.setAttribute(el2,"role","tab");dom.setAttribute(el2,"data-toggle","pill");dom.setAttribute(el2,"data-test-selector","social-tab");var el3=dom.createTextNode("Social Work");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":3,"column":4},"end":{"line":18,"column":4}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);var el1=dom.createElement("ul");dom.setAttribute(el1,"class","nav nav-pills tab-nav");dom.setAttribute(el1,"role","tablist");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");dom.setAttribute(el2,"class","active");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#history");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","history-tab");var el4=dom.createTextNode("History");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#general");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","general-tab");var el4=dom.createTextNode("General");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#photos");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","photos-tab");var el4=dom.createTextNode("Photos");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#appointments");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","appointments-tab");var el4=dom.createTextNode("Appointments");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#visits");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","visits-tab");var el4=dom.createTextNode("Visits");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#medication");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","medication-tab");var el4=dom.createTextNode("Medication");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#imaging");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","imaging-tab");var el4=dom.createTextNode("Imaging");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("li");dom.setAttribute(el2,"role","presentation");var el3=dom.createElement("a");dom.setAttribute(el3,"href","#labs");dom.setAttribute(el3,"role","tab");dom.setAttribute(el3,"data-toggle","pill");dom.setAttribute(el3,"data-test-selector","labs-tab");var el4=dom.createTextNode("Labs");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(dom.childAt(fragment,[3]),17,17);return morphs;},statements:[["inline","patient-summary",[],["patient",["subexpr","@mut",[["get","model",["loc",[null,[4,32],[4,37]]]]],[],[]],"visits",["subexpr","@mut",[["get","model.visits",["loc",[null,[4,45],[4,57]]]]],[],[]],"patientProcedures",["subexpr","@mut",[["get","patientProcedures",["loc",[null,[4,76],[4,93]]]]],[],[]],"disablePatientLink",true,"store",["subexpr","@mut",[["get","store",["loc",[null,[4,124],[4,129]]]]],[],[]]],["loc",[null,[4,6],[4,132]]]],["block","if",[["get","canAddSocialWork",["loc",[null,[14,14],[14,30]]]]],[],0,null,["loc",[null,[14,8],[16,15]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":23,"column":12},"end":{"line":29,"column":12}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading clearfix");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element60=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element60);morphs[1] = dom.createMorphAt(element60,2,2);return morphs;},statements:[["element","action",["showAddPatientNote"],["bubbles",false,"on","click"],["loc",[null,[25,74],[25,130]]]],["inline","t",["buttons.new_note"],[],["loc",[null,[26,60],[26,84]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":40,"column":20},"end":{"line":45,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ph-note-item");var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createTextNode("History");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["inline","html-line-break",[["get","visit.history",["loc",[null,[43,40],[43,53]]]]],[],["loc",[null,[43,22],[43,55]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":47,"column":20},"end":{"line":52,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ph-note-item");var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createTextNode("History Since");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),3,3);return morphs;},statements:[["inline","html-line-break",[["get","visit.historySince",["loc",[null,[50,40],[50,58]]]]],[],["loc",[null,[50,22],[50,60]]]]],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":60,"column":32},"end":{"line":62,"column":32}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                                  [");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode(" - ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("]\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);return morphs;},statements:[["inline","t",["labels.cptcode"],[],["loc",[null,[61,35],[61,58]]]],["content","procedure.cptCode",["loc",[null,[61,61],[61,82]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":67,"column":32},"end":{"line":69,"column":32}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                                  , ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode(": ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);return morphs;},statements:[["inline","t",["labels.assisting"],[],["loc",[null,[68,36],[68,60]]]],["content","procedure.assistant",["loc",[null,[68,62],[68,85]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":70,"column":32},"end":{"line":72,"column":32}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                                  , ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode(": ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);return morphs;},statements:[["inline","t",["labels.anesthesia"],[],["loc",[null,[71,36],[71,61]]]],["content","procedure.anesthesiologist",["loc",[null,[71,63],[71,93]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":57,"column":24},"end":{"line":76,"column":24}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(":\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                                ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("h6");var el3=dom.createTextNode("\n                                ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(": ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element54=dom.childAt(fragment,[1]);var element55=dom.childAt(element54,[1]);var element56=dom.childAt(element54,[3]);var morphs=new Array(9);morphs[0] = dom.createElementMorph(element54);morphs[1] = dom.createMorphAt(element55,0,0);morphs[2] = dom.createMorphAt(element55,2,2);morphs[3] = dom.createMorphAt(element55,4,4);morphs[4] = dom.createMorphAt(element56,1,1);morphs[5] = dom.createMorphAt(element56,3,3);morphs[6] = dom.createMorphAt(element56,5,5);morphs[7] = dom.createMorphAt(element56,6,6);morphs[8] = dom.createMorphAt(element54,5,5);return morphs;},statements:[["element","action",["editProcedure",["get","procedure",["loc",[null,[58,58],[58,67]]]]],[],["loc",[null,[58,33],[58,70]]]],["inline","date-format",[["get","procedure.procedureDate",["loc",[null,[59,72],[59,95]]]]],[],["loc",[null,[59,58],[59,97]]]],["block","if",[["get","procedure.cptCode",["loc",[null,[60,38],[60,55]]]]],[],0,null,["loc",[null,[60,32],[62,39]]]],["content","procedure.description",["loc",[null,[63,32],[63,57]]]],["inline","t",["labels.physician"],[],["loc",[null,[66,32],[66,56]]]],["content","procedure.physician",["loc",[null,[66,58],[66,81]]]],["block","if",[["get","procedure.assistant",["loc",[null,[67,38],[67,57]]]]],[],1,null,["loc",[null,[67,32],[69,39]]]],["block","if",[["get","procedure.anesthesiologist",["loc",[null,[70,38],[70,64]]]]],[],2,null,["loc",[null,[70,32],[72,39]]]],["inline","html-line-break",[["get","procedure.notes",["loc",[null,[74,48],[74,63]]]]],[],["loc",[null,[74,30],[74,65]]]]],locals:["procedure"],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":54,"column":20},"end":{"line":78,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ph-note-item");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element57=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(element57,[1]),0,0);morphs[1] = dom.createMorphAt(element57,3,3);return morphs;},statements:[["inline","t",["labels.procedures"],[],["loc",[null,[56,52],[56,78]]]],["block","each",[["get","visit.procedures",["loc",[null,[57,32],[57,48]]]]],[],0,null,["loc",[null,[57,24],[76,33]]]]],locals:[],templates:[child0]};})();var child3=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":82,"column":24},"end":{"line":88,"column":24}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(": ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element51=dom.childAt(fragment,[1]);var element52=dom.childAt(element51,[1]);var morphs=new Array(5);morphs[0] = dom.createElementMorph(element51);morphs[1] = dom.createMorphAt(element52,0,0);morphs[2] = dom.createMorphAt(element52,2,2);morphs[3] = dom.createMorphAt(dom.childAt(element51,[3]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(element51,[5]),0,0);return morphs;},statements:[["element","action",["editImaging",["get","imaging",["loc",[null,[83,56],[83,63]]]]],[],["loc",[null,[83,33],[83,66]]]],["inline","date-format",[["get","imaging.imagingDate",["loc",[null,[84,72],[84,91]]]]],[],["loc",[null,[84,58],[84,93]]]],["content","imaging.imagingType.name",["loc",[null,[84,95],[84,123]]]],["content","imaging.result",["loc",[null,[85,35],[85,53]]]],["inline","html-line-break",[["get","imaging.notes",["loc",[null,[86,53],[86,66]]]]],[],["loc",[null,[86,35],[86,68]]]]],locals:["imaging"],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":79,"column":20},"end":{"line":90,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ph-note-item");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element53=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(element53,[1]),0,0);morphs[1] = dom.createMorphAt(element53,3,3);return morphs;},statements:[["inline","t",["labels.image_orders"],[],["loc",[null,[81,52],[81,80]]]],["block","each",[["get","visit.imaging",["loc",[null,[82,32],[82,45]]]]],[],0,null,["loc",[null,[82,24],[88,33]]]]],locals:[],templates:[child0]};})();var child4=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":94,"column":24},"end":{"line":100,"column":24}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(": ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element48=dom.childAt(fragment,[1]);var element49=dom.childAt(element48,[1]);var morphs=new Array(5);morphs[0] = dom.createElementMorph(element48);morphs[1] = dom.createMorphAt(element49,0,0);morphs[2] = dom.createMorphAt(element49,2,2);morphs[3] = dom.createMorphAt(dom.childAt(element48,[3]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(element48,[5]),0,0);return morphs;},statements:[["element","action",["editLab",["get","lab",["loc",[null,[95,52],[95,55]]]]],[],["loc",[null,[95,33],[95,58]]]],["inline","date-format",[["get","lab.labDate",["loc",[null,[96,72],[96,83]]]]],[],["loc",[null,[96,58],[96,85]]]],["content","lab.labType.name",["loc",[null,[96,87],[96,107]]]],["content","lab.result",["loc",[null,[97,35],[97,49]]]],["inline","html-line-break",[["get","lab.notes",["loc",[null,[98,53],[98,62]]]]],[],["loc",[null,[98,35],[98,64]]]]],locals:["lab"],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":91,"column":20},"end":{"line":102,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ph-note-item");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element50=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(element50,[1]),0,0);morphs[1] = dom.createMorphAt(element50,3,3);return morphs;},statements:[["inline","t",["labels.lab_orders"],[],["loc",[null,[93,52],[93,78]]]],["block","each",[["get","visit.labs",["loc",[null,[94,32],[94,42]]]]],[],0,null,["loc",[null,[94,24],[100,33]]]]],locals:[],templates:[child0]};})();var child5=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":106,"column":24},"end":{"line":111,"column":24}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("[");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("]: ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element46=dom.childAt(fragment,[1]);var morphs=new Array(5);morphs[0] = dom.createElementMorph(element46);morphs[1] = dom.createMorphAt(dom.childAt(element46,[1]),0,0);morphs[2] = dom.createMorphAt(element46,3,3);morphs[3] = dom.createMorphAt(element46,5,5);morphs[4] = dom.createMorphAt(element46,7,7);return morphs;},statements:[["element","action",["showAddPatientNote",["get","note",["loc",[null,[107,63],[107,67]]]]],[],["loc",[null,[107,33],[107,70]]]],["content","note.authoredBy",["loc",[null,[108,58],[108,77]]]],["inline","date-format",[["get","note.date",["loc",[null,[109,44],[109,53]]]]],[],["loc",[null,[109,30],[109,55]]]],["content","note.noteType",["loc",[null,[109,56],[109,73]]]],["inline","html-line-break",[["get","note.content",["loc",[null,[109,94],[109,106]]]]],[],["loc",[null,[109,76],[109,108]]]]],locals:["note"],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":103,"column":20},"end":{"line":113,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ph-note-item");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("h5");dom.setAttribute(el2,"class","ph-note-heading");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element47=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(element47,[1]),0,0);morphs[1] = dom.createMorphAt(element47,3,3);return morphs;},statements:[["inline","t",["labels.notes"],[],["loc",[null,[105,52],[105,72]]]],["block","each",[["get","visit.patientNotes",["loc",[null,[106,32],[106,50]]]]],[],0,null,["loc",[null,[106,24],[111,33]]]]],locals:[],templates:[child0]};})();var child6=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":113,"column":20},"end":{"line":117,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ph-note-item");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","t",["messages.no_notes_available"],[],["loc",[null,[115,24],[115,59]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":32,"column":16},"end":{"line":119,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","patient-history-item");var el2=dom.createTextNode("\n\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","patient-history-heading clickable");var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","ph-visit-date");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","ph-visit-type");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element58=dom.childAt(fragment,[1]);var element59=dom.childAt(element58,[1]);var morphs=new Array(9);morphs[0] = dom.createElementMorph(element59);morphs[1] = dom.createMorphAt(dom.childAt(element59,[1]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element59,[3]),0,0);morphs[3] = dom.createMorphAt(element58,3,3);morphs[4] = dom.createMorphAt(element58,5,5);morphs[5] = dom.createMorphAt(element58,7,7);morphs[6] = dom.createMorphAt(element58,8,8);morphs[7] = dom.createMorphAt(element58,9,9);morphs[8] = dom.createMorphAt(element58,10,10);return morphs;},statements:[["element","action",["editVisit",["get","visit",["loc",[null,[35,88],[35,93]]]]],[],["loc",[null,[35,67],[35,95]]]],["content","visit.visitDate",["loc",[null,[36,50],[36,69]]]],["content","visit.visitType",["loc",[null,[37,50],[37,69]]]],["block","if",[["get","visit.history",["loc",[null,[40,26],[40,39]]]]],[],0,null,["loc",[null,[40,20],[45,27]]]],["block","if",[["get","visit.historySince",["loc",[null,[47,26],[47,44]]]]],[],1,null,["loc",[null,[47,20],[52,27]]]],["block","if",[["get","visit.procedures",["loc",[null,[54,26],[54,42]]]]],[],2,null,["loc",[null,[54,20],[78,27]]]],["block","if",[["get","visit.imaging",["loc",[null,[79,26],[79,39]]]]],[],3,null,["loc",[null,[79,20],[90,27]]]],["block","if",[["get","visit.labs",["loc",[null,[91,26],[91,36]]]]],[],4,null,["loc",[null,[91,20],[102,27]]]],["block","if",[["get","visit.patientNotes",["loc",[null,[103,26],[103,44]]]]],[],5,6,["loc",[null,[103,20],[117,27]]]]],locals:["visit"],templates:[child0,child1,child2,child3,child4,child5,child6]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":31,"column":14},"end":{"line":120,"column":14}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","model.visits",["loc",[null,[32,24],[32,36]]]]],[],0,null,["loc",[null,[32,16],[119,25]]]]],locals:[],templates:[child0]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":120,"column":14},"end":{"line":122,"column":14}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","t",["messages.no_history_available"],[],["loc",[null,[121,16],[121,53]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":20,"column":6},"end":{"line":126,"column":6}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane active");dom.setAttribute(el1,"id","history");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel detail-section");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("            ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("            ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element61=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(element61,1,1);morphs[1] = dom.createMorphAt(dom.childAt(element61,[3]),1,1);return morphs;},statements:[["block","if",[["get","canAddNote",["loc",[null,[23,18],[23,28]]]]],[],0,null,["loc",[null,[23,12],[29,19]]]],["block","if",[["get","model.visits",["loc",[null,[31,20],[31,32]]]]],[],1,2,["loc",[null,[31,14],[122,21]]]]],locals:[],templates:[child0,child1,child2]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":179,"column":10},"end":{"line":185,"column":10}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createTextNode("Add Contact\n              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element45=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element45);return morphs;},statements:[["element","action",["showAddContact"],["bubbles",false,"on","click"],["loc",[null,[181,72],[181,124]]]]],locals:[],templates:[]};})();var child3=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":191,"column":16},"end":{"line":193,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","em-text",[],["label",["subexpr","@mut",[["get","address1Label",["loc",[null,[192,34],[192,47]]]]],[],[]],"property","address","rows",3,"class","col-xs-12 col-sm-6"],["loc",[null,[192,18],[192,102]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":194,"column":16},"end":{"line":196,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","em-input",[],["label",["subexpr","@mut",[["get","address2Label",["loc",[null,[195,35],[195,48]]]]],[],[]],"property","address2","class","col-xs-12 col-sm-6"],["loc",[null,[195,18],[195,98]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":197,"column":16},"end":{"line":199,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","em-input",[],["label",["subexpr","@mut",[["get","address3Label",["loc",[null,[198,35],[198,48]]]]],[],[]],"property","address3","class","col-xs-12 col-sm-6"],["loc",[null,[198,18],[198,98]]]]],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":200,"column":16},"end":{"line":202,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","em-input",[],["label",["subexpr","@mut",[["get","address4Label",["loc",[null,[201,35],[201,48]]]]],[],[]],"property","address4","class","col-xs-12 col-sm-6"],["loc",[null,[201,18],[201,98]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":190,"column":14},"end":{"line":203,"column":14}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","address1Include",["loc",[null,[191,22],[191,37]]]]],[],0,null,["loc",[null,[191,16],[193,23]]]],["block","if",[["get","address2Include",["loc",[null,[194,22],[194,37]]]]],[],1,null,["loc",[null,[194,16],[196,23]]]],["block","if",[["get","address3Include",["loc",[null,[197,22],[197,37]]]]],[],2,null,["loc",[null,[197,16],[199,23]]]],["block","if",[["get","address4Include",["loc",[null,[200,22],[200,37]]]]],[],3,null,["loc",[null,[200,16],[202,23]]]]],locals:[],templates:[child0,child1,child2,child3]};})();var child4=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":203,"column":14},"end":{"line":205,"column":14}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","em-text",[],["label","Address","property","address","rows",3,"class","col-xs-12 col-sm-6"],["loc",[null,[204,16],[204,97]]]]],locals:[],templates:[]};})();var child5=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":217,"column":16},"end":{"line":219,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("th");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["inline","t",["labels.action"],[],["loc",[null,[218,22],[218,43]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":227,"column":18},"end":{"line":233,"column":18}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-default warning");var el3=dom.createTextNode("\n                        ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-x");dom.appendChild(el2,el3);var el3=dom.createTextNode("Delete\n                      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element41=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element41);return morphs;},statements:[["element","action",["showDeleteContact",["get","additionalContact",["loc",[null,[229,105],[229,122]]]]],["bubbles",false],["loc",[null,[229,76],[229,139]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":221,"column":14},"end":{"line":235,"column":14}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element42=dom.childAt(fragment,[1]);var morphs=new Array(5);morphs[0] = dom.createMorphAt(dom.childAt(element42,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element42,[3]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element42,[5]),0,0);morphs[3] = dom.createMorphAt(dom.childAt(element42,[7]),0,0);morphs[4] = dom.createMorphAt(element42,9,9);return morphs;},statements:[["content","additionalContact.name",["loc",[null,[223,22],[223,48]]]],["content","additionalContact.phone",["loc",[null,[224,22],[224,49]]]],["content","additionalContact.email",["loc",[null,[225,22],[225,49]]]],["content","additionalContact.relationship",["loc",[null,[226,22],[226,56]]]],["block","if",[["get","canDeleteContact",["loc",[null,[227,24],[227,40]]]]],[],0,null,["loc",[null,[227,18],[233,25]]]]],locals:["additionalContact"],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":209,"column":10},"end":{"line":237,"column":10}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("h4");var el2=dom.createTextNode("Additional Contacts");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n            ");dom.appendChild(el0,el1);var el1=dom.createElement("table");dom.setAttribute(el1,"class","table");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("tr");dom.setAttribute(el2,"class","table-header");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("th");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("th");var el4=dom.createTextNode("Phone");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("th");var el4=dom.createTextNode("Email");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("th");var el4=dom.createTextNode("Relationship");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element43=dom.childAt(fragment,[3]);var element44=dom.childAt(element43,[1]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(dom.childAt(element44,[1]),0,0);morphs[1] = dom.createMorphAt(element44,9,9);morphs[2] = dom.createMorphAt(element43,3,3);return morphs;},statements:[["inline","t",["labels.name"],[],["loc",[null,[213,20],[213,39]]]],["block","if",[["get","canDeleteContact",["loc",[null,[217,22],[217,38]]]]],[],0,null,["loc",[null,[217,16],[219,23]]]],["block","each",[["get","model.additionalContacts",["loc",[null,[221,22],[221,46]]]]],[],1,null,["loc",[null,[221,14],[235,23]]]]],locals:[],templates:[child0,child1]};})();var child6=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":243,"column":12},"end":{"line":249,"column":12}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createTextNode("New Photo\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element32=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element32);return morphs;},statements:[["element","action",["showAddPhoto"],["bubbles",false],["loc",[null,[245,74],[245,114]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":259,"column":26},"end":{"line":261,"column":26}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default neutral");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element28=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element28);morphs[1] = dom.createMorphAt(element28,0,0);return morphs;},statements:[["element","action",["editPhoto",["get","photo",["loc",[null,[260,103],[260,108]]]]],[],["loc",[null,[260,82],[260,110]]]],["inline","t",["labels.edit"],[],["loc",[null,[260,111],[260,130]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":262,"column":26},"end":{"line":265,"column":26}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                              ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode("Delete");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element27=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element27);return morphs;},statements:[["element","action",["showDeletePhoto",["get","photo",["loc",[null,[263,109],[263,114]]]]],["bubbles",false],["loc",[null,[263,82],[263,131]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":252,"column":16},"end":{"line":270,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","col-sm-4 col-md-3");var el2=dom.createTextNode("\n                     ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","thumbnail");var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","caption");var el4=dom.createTextNode("\n                        ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n                        ");dom.appendChild(el3,el4);var el4=dom.createElement("p");var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("                        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n                      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element29=dom.childAt(fragment,[1,1]);var element30=dom.childAt(element29,[3]);var element31=dom.childAt(element30,[3]);var morphs=new Array(5);morphs[0] = dom.createElementMorph(element29);morphs[1] = dom.createMorphAt(element29,1,1);morphs[2] = dom.createMorphAt(element30,1,1);morphs[3] = dom.createMorphAt(element31,1,1);morphs[4] = dom.createMorphAt(element31,2,2);return morphs;},statements:[["element","action",["editPhoto",["get","photo",["loc",[null,[254,47],[254,52]]]]],[],["loc",[null,[254,26],[254,54]]]],["inline","photo-display",[],["photo",["subexpr","@mut",[["get","photo",["loc",[null,[255,44],[255,49]]]]],[],[]]],["loc",[null,[255,22],[255,52]]]],["content","photo.caption",["loc",[null,[257,24],[257,41]]]],["block","if",[["get","canAddPhoto",["loc",[null,[259,32],[259,43]]]]],[],0,null,["loc",[null,[259,26],[261,33]]]],["block","if",[["get","canDeletePhoto",["loc",[null,[262,32],[262,46]]]]],[],1,null,["loc",[null,[262,26],[265,33]]]]],locals:["photo"],templates:[child0,child1]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":277,"column":12},"end":{"line":283,"column":12}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createTextNode(" New Appointment\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element26);return morphs;},statements:[["element","action",["newAppointment"],["bubbles",false],["loc",[null,[279,74],[279,116]]]]],locals:[],templates:[]};})();var child3=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":302,"column":22},"end":{"line":304,"column":22}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default neutral");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element23=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element23);morphs[1] = dom.createMorphAt(element23,0,0);return morphs;},statements:[["element","action",["editAppointment",["get","appointment",["loc",[null,[303,105],[303,116]]]]],[],["loc",[null,[303,78],[303,118]]]],["inline","t",["labels.edit"],[],["loc",[null,[303,119],[303,138]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":305,"column":22},"end":{"line":309,"column":22}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode(" Delete\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element22=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element22);return morphs;},statements:[["element","action",["showDeleteAppointment",["get","appointment",["loc",[null,[306,111],[306,122]]]]],["bubbles",false],["loc",[null,[306,78],[306,140]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":294,"column":16},"end":{"line":312,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element24=dom.childAt(fragment,[1]);var element25=dom.childAt(element24,[11]);var morphs=new Array(8);morphs[0] = dom.createElementMorph(element24);morphs[1] = dom.createMorphAt(dom.childAt(element24,[1]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element24,[3]),0,0);morphs[3] = dom.createMorphAt(dom.childAt(element24,[5]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(element24,[7]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(element24,[9]),0,0);morphs[6] = dom.createMorphAt(element25,1,1);morphs[7] = dom.createMorphAt(element25,2,2);return morphs;},statements:[["element","action",["editAppointment",["get","appointment",["loc",[null,[295,49],[295,60]]]]],[],["loc",[null,[295,22],[295,62]]]],["content","appointment.formattedAppointmentDate",["loc",[null,[296,24],[296,64]]]],["content","appointment.provider",["loc",[null,[297,24],[297,48]]]],["content","appointment.location",["loc",[null,[298,24],[298,48]]]],["content","appointment.appointmentType",["loc",[null,[299,24],[299,55]]]],["content","appointment.displayStatus",["loc",[null,[300,24],[300,53]]]],["block","if",[["get","canAddAppointment",["loc",[null,[302,28],[302,45]]]]],[],0,null,["loc",[null,[302,22],[304,29]]]],["block","if",[["get","canDeleteAppointment",["loc",[null,[305,28],[305,48]]]]],[],1,null,["loc",[null,[305,22],[309,29]]]]],locals:["appointment"],templates:[child0,child1]};})();var child4=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":319,"column":12},"end":{"line":325,"column":12}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createTextNode(" New Visit\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element21=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element21);return morphs;},statements:[["element","action",["newVisit"],["bubbles",false],["loc",[null,[321,74],[321,110]]]]],locals:[],templates:[]};})();var child5=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":346,"column":20},"end":{"line":348,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default neutral");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element18=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element18);morphs[1] = dom.createMorphAt(element18,0,0);return morphs;},statements:[["element","action",["editVisit",["get","visit",["loc",[null,[347,97],[347,102]]]]],[],["loc",[null,[347,76],[347,104]]]],["inline","t",["labels.edit"],[],["loc",[null,[347,105],[347,124]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":349,"column":20},"end":{"line":351,"column":20}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode(" Delete");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element17=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element17);return morphs;},statements:[["element","action",["showDeleteVisit",["get","visit",["loc",[null,[350,103],[350,108]]]]],["bubbles",false],["loc",[null,[350,76],[350,125]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":337,"column":16},"end":{"line":354,"column":16}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element19=dom.childAt(fragment,[1]);var element20=dom.childAt(element19,[13]);var morphs=new Array(9);morphs[0] = dom.createElementMorph(element19);morphs[1] = dom.createMorphAt(dom.childAt(element19,[1]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element19,[3]),0,0);morphs[3] = dom.createMorphAt(dom.childAt(element19,[5]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(element19,[7]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(element19,[9]),0,0);morphs[6] = dom.createMorphAt(dom.childAt(element19,[11]),0,0);morphs[7] = dom.createMorphAt(element20,1,1);morphs[8] = dom.createMorphAt(element20,2,2);return morphs;},statements:[["element","action",["editVisit",["get","visit",["loc",[null,[338,43],[338,48]]]]],[],["loc",[null,[338,22],[338,50]]]],["inline","date-format",[["get","visit.startDate",["loc",[null,[339,38],[339,53]]]]],[],["loc",[null,[339,24],[339,55]]]],["inline","date-format",[["get","visit.endDate",["loc",[null,[340,38],[340,51]]]]],[],["loc",[null,[340,24],[340,53]]]],["content","visit.primaryDiagnosis",["loc",[null,[341,24],[341,50]]]],["content","visit.examiner",["loc",[null,[342,24],[342,42]]]],["content","visit.location",["loc",[null,[343,24],[343,42]]]],["content","visit.visitType",["loc",[null,[344,24],[344,43]]]],["block","if",[["get","canAddVisit",["loc",[null,[346,26],[346,37]]]]],[],0,null,["loc",[null,[346,20],[348,27]]]],["block","if",[["get","canDeleteVisit",["loc",[null,[349,26],[349,40]]]]],[],1,null,["loc",[null,[349,20],[351,27]]]]],locals:["visit"],templates:[child0,child1]};})();var child6=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":361,"column":14},"end":{"line":367,"column":14}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createTextNode("New Medication\n                  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element16=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element16);return morphs;},statements:[["element","action",["newMedication"],["bubbles",false],["loc",[null,[363,76],[363,117]]]]],locals:[],templates:[]};})();var child7=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":375,"column":12},"end":{"line":381,"column":12}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createTextNode(" New Imaging\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element15=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element15);return morphs;},statements:[["element","action",["newImaging"],["bubbles",false],["loc",[null,[377,74],[377,112]]]]],locals:[],templates:[]};})();var child8=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":389,"column":12},"end":{"line":395,"column":12}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-heading");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"type","button");dom.setAttribute(el2,"class","btn btn-primary align-right");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","octicon octicon-plus");dom.appendChild(el2,el3);var el3=dom.createTextNode(" New Lab\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element14=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element14);return morphs;},statements:[["element","action",["newLab"],["bubbles",false],["loc",[null,[391,74],[391,108]]]]],locals:[],templates:[]};})();var child9=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":435,"column":24},"end":{"line":439,"column":24}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode("Delete\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element4=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element4);return morphs;},statements:[["element","action",["showDeleteFamily",["get","info",["loc",[null,[436,108],[436,112]]]]],["bubbles",false],["loc",[null,[436,80],[436,129]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":423,"column":18},"end":{"line":442,"column":18}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n                        ");dom.appendChild(el2,el3);var el3=dom.createElement("button");dom.setAttribute(el3,"type","button");dom.setAttribute(el3,"class","btn btn-default neutral");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element5=dom.childAt(fragment,[1]);var element6=dom.childAt(element5,[17]);var element7=dom.childAt(element6,[1]);var morphs=new Array(11);morphs[0] = dom.createMorphAt(dom.childAt(element5,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element5,[3]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element5,[5]),0,0);morphs[3] = dom.createMorphAt(dom.childAt(element5,[7]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(element5,[9]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(element5,[11]),0,0);morphs[6] = dom.createMorphAt(dom.childAt(element5,[13]),0,0);morphs[7] = dom.createMorphAt(dom.childAt(element5,[15]),0,0);morphs[8] = dom.createElementMorph(element7);morphs[9] = dom.createMorphAt(element7,0,0);morphs[10] = dom.createMorphAt(element6,3,3);return morphs;},statements:[["content","info.name",["loc",[null,[425,26],[425,39]]]],["content","info.age",["loc",[null,[426,26],[426,38]]]],["content","info.civilStatus",["loc",[null,[427,26],[427,46]]]],["content","info.relationship",["loc",[null,[428,26],[428,47]]]],["content","info.education",["loc",[null,[429,26],[429,44]]]],["content","info.occupation",["loc",[null,[430,26],[430,45]]]],["content","info.income",["loc",[null,[431,26],[431,41]]]],["content","info.insurance",["loc",[null,[432,26],[432,44]]]],["element","action",["showEditFamily",["get","info",["loc",[null,[434,104],[434,108]]]]],[],["loc",[null,[434,78],[434,110]]]],["inline","t",["labels.edit"],[],["loc",[null,[434,111],[434,130]]]],["block","if",[["get","canDeleteSocialWork",["loc",[null,[435,30],[435,49]]]]],[],0,null,["loc",[null,[435,24],[439,31]]]]],locals:["info"],templates:[child0]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":464,"column":22},"end":{"line":468,"column":22}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode("Delete\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element0);return morphs;},statements:[["element","action",["showDeleteExpense",["get","expense",["loc",[null,[465,107],[465,114]]]]],["bubbles",false],["loc",[null,[465,78],[465,131]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":457,"column":18},"end":{"line":471,"column":18}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("button");dom.setAttribute(el3,"type","button");dom.setAttribute(el3,"class","btn btn-default neutral");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element1=dom.childAt(fragment,[1]);var element2=dom.childAt(element1,[7]);var element3=dom.childAt(element2,[1]);var morphs=new Array(6);morphs[0] = dom.createMorphAt(dom.childAt(element1,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element1,[3]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element1,[5]),0,0);morphs[3] = dom.createElementMorph(element3);morphs[4] = dom.createMorphAt(element3,0,0);morphs[5] = dom.createMorphAt(element2,3,3);return morphs;},statements:[["content","expense.category",["loc",[null,[459,26],[459,46]]]],["content","expense.sources",["loc",[null,[460,26],[460,45]]]],["content","expense.cost",["loc",[null,[461,26],[461,42]]]],["element","action",["showEditExpense",["get","expense",["loc",[null,[463,103],[463,110]]]]],[],["loc",[null,[463,76],[463,112]]]],["inline","t",["labels.edit"],[],["loc",[null,[463,113],[463,132]]]],["block","if",[["get","canDeleteSocialWork",["loc",[null,[464,28],[464,47]]]]],[],0,null,["loc",[null,[464,22],[468,29]]]]],locals:["expense"],templates:[child0]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":472,"column":18},"end":{"line":478,"column":18}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");dom.setAttribute(el2,"colspan","2");var el3=dom.createElement("b");var el4=dom.createTextNode("Total Monthly Expenses");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("td");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1,3]),0,0);return morphs;},statements:[["content","totalExpenses",["loc",[null,[475,26],[475,43]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":401,"column":8},"end":{"line":484,"column":8}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane");dom.setAttribute(el1,"id","social");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n                ");dom.appendChild(el3,el4);var el4=dom.createElement("h4");var el5=dom.createTextNode("\n                  Family Information\n                  ");dom.appendChild(el4,el5);var el5=dom.createElement("button");dom.setAttribute(el5,"type","button");dom.setAttribute(el5,"class","btn btn-primary align-right");var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","octicon octicon-plus");dom.appendChild(el5,el6);var el6=dom.createTextNode("Add Family Member\n                  ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n                ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n                ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table");var el5=dom.createTextNode("\n                  ");dom.appendChild(el4,el5);var el5=dom.createElement("tr");dom.setAttribute(el5,"class","table-header");var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Age");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Civil Status");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Relation to Patient");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Education");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Occupation");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Income");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Insurance");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("              ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n                ");dom.appendChild(el3,el4);var el4=dom.createElement("h4");var el5=dom.createTextNode("\n                  Expenses\n                  ");dom.appendChild(el4,el5);var el5=dom.createElement("button");dom.setAttribute(el5,"type","button");dom.setAttribute(el5,"class","btn btn-primary align-right");var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","octicon octicon-plus");dom.appendChild(el5,el6);var el6=dom.createTextNode("Add Expense\n                  ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n                ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n                ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table");var el5=dom.createTextNode("\n                  ");dom.appendChild(el4,el5);var el5=dom.createElement("tr");dom.setAttribute(el5,"class","table-header");var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Category");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Sources");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Monthly Cost");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                    ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("                ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n                ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element8=dom.childAt(fragment,[1,1,1]);var element9=dom.childAt(element8,[1,1]);var element10=dom.childAt(element8,[3]);var element11=dom.childAt(element10,[1]);var element12=dom.childAt(element8,[5,1]);var element13=dom.childAt(element8,[7]);var morphs=new Array(9);morphs[0] = dom.createElementMorph(element9);morphs[1] = dom.createMorphAt(dom.childAt(element11,[1]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element11,[17]),0,0);morphs[3] = dom.createMorphAt(element10,3,3);morphs[4] = dom.createElementMorph(element12);morphs[5] = dom.createMorphAt(dom.childAt(element13,[1,7]),0,0);morphs[6] = dom.createMorphAt(element13,3,3);morphs[7] = dom.createMorphAt(element13,4,4);morphs[8] = dom.createMorphAt(element8,9,9);return morphs;},statements:[["element","action",["showEditFamily"],["bubbles",false],["loc",[null,[407,76],[407,119]]]],["inline","t",["labels.name"],[],["loc",[null,[413,24],[413,43]]]],["inline","t",["labels.action"],[],["loc",[null,[421,24],[421,45]]]],["block","each",[["get","model.familyInfo",["loc",[null,[423,26],[423,42]]]]],[],0,null,["loc",[null,[423,18],[442,27]]]],["element","action",["showEditExpense"],["bubbles",false],["loc",[null,[446,76],[446,119]]]],["inline","t",["labels.actions"],[],["loc",[null,[455,24],[455,46]]]],["block","each",[["get","model.expenses",["loc",[null,[457,26],[457,40]]]]],[],1,null,["loc",[null,[457,18],[471,27]]]],["block","if",[["get","showExpenseTotal",["loc",[null,[472,24],[472,40]]]]],[],2,null,["loc",[null,[472,18],[478,25]]]],["inline","custom-form",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[480,36],[480,41]]]]],[],[]],"form",["subexpr","@mut",[["get","customSocialForm",["loc",[null,[480,47],[480,63]]]]],[],[]]],["loc",[null,[480,16],[480,65]]]]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":240,"column":6},"end":{"line":485,"column":6}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane");dom.setAttribute(el1,"id","photos");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("            ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","row");var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("              ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane");dom.setAttribute(el1,"id","appointments");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("            ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table");var el5=dom.createTextNode("\n                ");dom.appendChild(el4,el5);var el5=dom.createElement("tr");dom.setAttribute(el5,"class","table-header");var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Date");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Examiner");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Location");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Type");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Status");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("              ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane");dom.setAttribute(el1,"id","visits");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("            ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table");var el5=dom.createTextNode("\n                ");dom.appendChild(el4,el5);var el5=dom.createElement("tr");dom.setAttribute(el5,"class","table-header");var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Start Date");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("End Date");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Diagnosis");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Provider");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Location");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Type");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("              ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane");dom.setAttribute(el1,"id","medication");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("              ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n                ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane");dom.setAttribute(el1,"id","imaging");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("            ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"role","tabpanel");dom.setAttribute(el1,"class","tab-pane");dom.setAttribute(el1,"id","labs");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("            ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body detail-section-content");var el4=dom.createTextNode("\n              ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element33=dom.childAt(fragment,[1,1]);var element34=dom.childAt(fragment,[3,1]);var element35=dom.childAt(element34,[3,1]);var element36=dom.childAt(fragment,[5,1]);var element37=dom.childAt(element36,[3,1]);var element38=dom.childAt(fragment,[7,1]);var element39=dom.childAt(fragment,[9,1]);var element40=dom.childAt(fragment,[11,1]);var morphs=new Array(15);morphs[0] = dom.createMorphAt(element33,1,1);morphs[1] = dom.createMorphAt(dom.childAt(element33,[3,1]),1,1);morphs[2] = dom.createMorphAt(element34,1,1);morphs[3] = dom.createMorphAt(dom.childAt(element35,[1,11]),0,0);morphs[4] = dom.createMorphAt(element35,3,3);morphs[5] = dom.createMorphAt(element36,1,1);morphs[6] = dom.createMorphAt(dom.childAt(element37,[1,13]),0,0);morphs[7] = dom.createMorphAt(element37,3,3);morphs[8] = dom.createMorphAt(element38,1,1);morphs[9] = dom.createMorphAt(dom.childAt(element38,[3]),1,1);morphs[10] = dom.createMorphAt(element39,1,1);morphs[11] = dom.createMorphAt(dom.childAt(element39,[3]),1,1);morphs[12] = dom.createMorphAt(element40,1,1);morphs[13] = dom.createMorphAt(dom.childAt(element40,[3]),1,1);morphs[14] = dom.createMorphAt(fragment,13,13,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","canAddPhoto",["loc",[null,[243,18],[243,29]]]]],[],0,null,["loc",[null,[243,12],[249,19]]]],["block","each",[["get","model.photos",["loc",[null,[252,24],[252,36]]]]],[],1,null,["loc",[null,[252,16],[270,25]]]],["block","if",[["get","canAddAppointment",["loc",[null,[277,18],[277,35]]]]],[],2,null,["loc",[null,[277,12],[283,19]]]],["inline","t",["labels.actions"],[],["loc",[null,[292,22],[292,44]]]],["block","each",[["get","model.appointments",["loc",[null,[294,24],[294,42]]]]],[],3,null,["loc",[null,[294,16],[312,25]]]],["block","if",[["get","canAddVisit",["loc",[null,[319,18],[319,29]]]]],[],4,null,["loc",[null,[319,12],[325,19]]]],["inline","t",["labels.actions"],[],["loc",[null,[335,22],[335,44]]]],["block","each",[["get","model.visits",["loc",[null,[337,24],[337,36]]]]],[],5,null,["loc",[null,[337,16],[354,25]]]],["block","if",[["get","canAddMedication",["loc",[null,[361,20],[361,36]]]]],[],6,null,["loc",[null,[361,14],[367,21]]]],["inline","partial",["patients/medication"],[],["loc",[null,[369,16],[369,49]]]],["block","if",[["get","canAddImaging",["loc",[null,[375,18],[375,31]]]]],[],7,null,["loc",[null,[375,12],[381,19]]]],["inline","partial",["patients/imaging"],[],["loc",[null,[383,14],[383,44]]]],["block","if",[["get","canAddLab",["loc",[null,[389,18],[389,27]]]]],[],8,null,["loc",[null,[389,12],[395,19]]]],["inline","partial",["patients/labs"],[],["loc",[null,[397,14],[397,41]]]],["block","if",[["get","canAddSocialWork",["loc",[null,[401,14],[401,30]]]]],[],9,null,["loc",[null,[401,8],[484,15]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":2,"column":2},"end":{"line":487,"column":2}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","tab-content");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("      ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"role","tabpanel");dom.setAttribute(el2,"id","general");var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel detail-section");var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","panel-body detail-section-content");var el5=dom.createTextNode("\n            ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","row");var el6=dom.createTextNode("\n              ");dom.appendChild(el5,el6);var el6=dom.createElement("div");dom.setAttribute(el6,"class","col-xs-12 col-sm-6");var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createElement("div");dom.setAttribute(el7,"class","form-input-group");var el8=dom.createTextNode("\n                  ");dom.appendChild(el7,el8);var el8=dom.createElement("label");dom.setAttribute(el8,"class","control-label");var el9=dom.createTextNode("Age");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n                  ");dom.appendChild(el7,el8);var el8=dom.createElement("p");dom.setAttribute(el8,"class","form-control-static");var el9=dom.createComment("");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n                ");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                ");dom.appendChild(el6,el7);var el7=dom.createElement("div");dom.setAttribute(el7,"class","form-input-group");var el8=dom.createTextNode("\n                  ");dom.appendChild(el7,el8);var el8=dom.createElement("label");var el9=dom.createTextNode("Patient Type");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n                  ");dom.appendChild(el7,el8);var el8=dom.createElement("div");var el9=dom.createTextNode("\n                    ");dom.appendChild(el8,el9);var el9=dom.createComment("");dom.appendChild(el8,el9);var el9=dom.createTextNode("\n                  ");dom.appendChild(el8,el9);dom.appendChild(el7,el8);var el8=dom.createTextNode("\n                ");dom.appendChild(el7,el8);dom.appendChild(el6,el7);var el7=dom.createTextNode("\n              ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n              ");dom.appendChild(el5,el6);var el6=dom.createElement("div");dom.setAttribute(el6,"class","col-xs-12 col-sm-6");var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n                  ");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n              ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n            ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel detail-section");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("          ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","panel-body detail-section-content");var el5=dom.createTextNode("\n            ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","row");var el6=dom.createTextNode("\n              ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n              ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("              ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n            ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("        ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element62=dom.childAt(fragment,[2]);var element63=dom.childAt(element62,[3]);var element64=dom.childAt(element63,[1,1,1]);var element65=dom.childAt(element64,[1]);var element66=dom.childAt(element64,[3]);var element67=dom.childAt(element63,[3]);var element68=dom.childAt(element67,[3,1]);var morphs=new Array(29);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(element62,1,1);morphs[2] = dom.createAttrMorph(element63,'class');morphs[3] = dom.createMorphAt(element65,1,1);morphs[4] = dom.createMorphAt(element65,3,3);morphs[5] = dom.createMorphAt(element65,5,5);morphs[6] = dom.createMorphAt(element65,7,7);morphs[7] = dom.createMorphAt(element65,9,9);morphs[8] = dom.createMorphAt(element65,11,11);morphs[9] = dom.createMorphAt(dom.childAt(element65,[13,3]),0,0);morphs[10] = dom.createMorphAt(element65,15,15);morphs[11] = dom.createMorphAt(element65,17,17);morphs[12] = dom.createMorphAt(dom.childAt(element65,[19,3]),1,1);morphs[13] = dom.createMorphAt(element66,1,1);morphs[14] = dom.createMorphAt(element66,3,3);morphs[15] = dom.createMorphAt(element66,5,5);morphs[16] = dom.createMorphAt(element66,7,7);morphs[17] = dom.createMorphAt(element66,9,9);morphs[18] = dom.createMorphAt(element66,11,11);morphs[19] = dom.createMorphAt(element66,13,13);morphs[20] = dom.createMorphAt(element66,15,15);morphs[21] = dom.createMorphAt(element66,17,17);morphs[22] = dom.createMorphAt(element67,1,1);morphs[23] = dom.createMorphAt(element68,1,1);morphs[24] = dom.createMorphAt(element68,3,3);morphs[25] = dom.createMorphAt(element68,5,5);morphs[26] = dom.createMorphAt(element68,7,7);morphs[27] = dom.createMorphAt(element67,5,5);morphs[28] = dom.createMorphAt(element62,5,5);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","unless",[["get","isNewOrDeleted",["loc",[null,[3,14],[3,28]]]]],[],0,null,["loc",[null,[3,4],[18,15]]]],["block","unless",[["get","isNewOrDeleted",["loc",[null,[20,16],[20,30]]]]],[],1,null,["loc",[null,[20,6],[126,17]]]],["attribute","class",["concat",["tab-pane ",["subexpr","if",[["get","isNewOrDeleted",["loc",[null,[127,48],[127,62]]]],"active"],[],["loc",[null,[127,43],[127,73]]]]]]],["inline","em-input",[],["property","friendlyId","label","Id","class","form-input-group required test-id"],["loc",[null,[132,16],[132,103]]]],["inline","em-input",[],["property","firstName","label","First Name","class","form-input-group required test-first-name"],["loc",[null,[133,16],[133,118]]]],["inline","em-input",[],["property","middleName","label","Middle Name","class","form-input-group test-middle-name"],["loc",[null,[134,16],[134,112]]]],["inline","em-input",[],["property","lastName","label","Last Name","class","form-input-group required test-last-name"],["loc",[null,[135,16],[135,115]]]],["inline","select-or-typeahead",[],["property","sex","label","Sex","class","form-input-group","list",["subexpr","@mut",[["get","sexList",["loc",[null,[136,95],[136,102]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.sex",["loc",[null,[136,113],[136,122]]]]],[],[]]],["loc",[null,[136,16],[136,124]]]],["inline","date-picker",[],["property","dateOfBirth","label","Date of Birth","class","form-input-group ","maxDate","now"],["loc",[null,[137,16],[137,116]]]],["content","model.age",["loc",[null,[140,49],[140,62]]]],["inline","em-input",[],["property","placeOfBirth","label","Place of Birth","class","form-input-group"],["loc",[null,[142,16],[142,100]]]],["inline","em-input",[],["property","occupation","label","Occupation","class","form-input-group"],["loc",[null,[143,16],[143,94]]]],["inline","ext-radio",[],["content",["subexpr","@mut",[["get","patientTypes",["loc",[null,[147,40],[147,52]]]]],[],[]],"value",["subexpr","@mut",[["get","model.patientType",["loc",[null,[147,59],[147,76]]]]],[],[]],"showInline",true],["loc",[null,[147,20],[147,95]]]],["inline","select-or-typeahead",[],["property","status","label","Patient Status","list",["subexpr","@mut",[["get","statusList",["loc",[null,[152,86],[152,96]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.status",["loc",[null,[152,107],[152,119]]]]],[],[]],"class","form-input-group"],["loc",[null,[152,18],[152,147]]]],["inline","em-input",[],["property","externalPatientId","label","External Patient Id","class","form-input-group"],["loc",[null,[153,18],[153,112]]]],["inline","em-select",[],["prompt"," ","label","Blood Type","property","bloodType","content",["subexpr","@mut",[["get","bloodTypes",["loc",[null,[158,28],[158,38]]]]],[],[]],"class","form-input-group"],["loc",[null,[154,18],[160,20]]]],["inline","select-or-typeahead",[],["property","clinic","label","Clinic Site","list",["subexpr","@mut",[["get","clinicList",["loc",[null,[161,83],[161,93]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.clinic",["loc",[null,[161,104],[161,116]]]]],[],[]],"class","form-input-group"],["loc",[null,[161,18],[161,143]]]],["inline","em-input",[],["property","referredBy","label","Referred By","class","form-input-group"],["loc",[null,[162,18],[162,97]]]],["inline","date-picker",[],["property","referredDate","label","Referred Date","class","form-input-group"],["loc",[null,[163,18],[163,104]]]],["inline","em-input",[],["property","religion","label","Religion","class","form-input-group"],["loc",[null,[164,18],[164,92]]]],["inline","em-input",[],["property","parent","label","Parent/Guardian","class","form-input-group"],["loc",[null,[165,18],[165,97]]]],["inline","em-select",[],["label","Payment Profile","property","paymentProfile","content",["subexpr","@mut",[["get","pricingProfiles",["loc",[null,[168,28],[168,43]]]]],[],[]],"optionValuePath","selectObject","optionLabelPath","selectObject.name","prompt"," ","class","form-input-group"],["loc",[null,[166,18],[173,20]]]],["block","if",[["get","canAddContact",["loc",[null,[179,16],[179,29]]]]],[],2,null,["loc",[null,[179,10],[185,17]]]],["inline","em-input",[],["property","phone","label","Phone Contact","class","col-xs-12 col-sm-6"],["loc",[null,[188,14],[188,92]]]],["inline","em-input",[],["property","email","type","email","label","Email","class","col-xs-12 col-sm-6"],["loc",[null,[189,14],[189,97]]]],["block","if",[["get","haveAddressOptions",["loc",[null,[190,20],[190,38]]]]],[],3,4,["loc",[null,[190,14],[205,21]]]],["inline","select-or-typeahead",[],["property","country","label","Country","list",["subexpr","@mut",[["get","countryList",["loc",[null,[206,76],[206,87]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.country",["loc",[null,[206,98],[206,111]]]]],[],[]],"className","col-xs-12 col-sm-6"],["loc",[null,[206,14],[206,145]]]],["block","if",[["get","haveAdditionalContacts",["loc",[null,[209,16],[209,38]]]]],[],5,null,["loc",[null,[209,10],[237,17]]]],["block","unless",[["get","isNewOrDeleted",["loc",[null,[240,16],[240,30]]]]],[],6,null,["loc",[null,[240,6],[485,17]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["wrong-type"]},"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":488,"column":0}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","em-form",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[2,19],[2,24]]]]],[],[]],"submitButton",false,"bubbles",false],0,null,["loc",[null,[2,2],[487,14]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["wrong-type"]},"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":489,"column":0}},"moduleName":"hospitalrun/patients/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","edit-panel",[],["editPanelProps",["subexpr","@mut",[["get","editPanelProps",["loc",[null,[1,29],[1,43]]]]],[],[]]],0,null,["loc",[null,[1,0],[488,15]]]]],locals:[],templates:[child0]};})());});
define("hospitalrun/patients/imaging/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 20
                },
                "end": {
                  "line": 25,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/patients/imaging/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "btn btn-default neutral");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["editImaging", ["get", "imaging", ["loc", [null, [24, 101], [24, 108]]]]], [], ["loc", [null, [24, 78], [24, 110]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [24, 111], [24, 130]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 20
                },
                "end": {
                  "line": 28,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/patients/imaging/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "btn btn-default warning");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "octicon octicon-x");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 2, 2);
              return morphs;
            },
            statements: [["element", "action", ["showDeleteImaging", ["get", "imaging", ["loc", [null, [27, 107], [27, 114]]]]], ["bubbles", false], ["loc", [null, [27, 78], [27, 132]]]], ["inline", "t", ["labels.delete"], [], ["loc", [null, [27, 173], [27, 194]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 16
              },
              "end": {
                "line": 29,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/patients/imaging/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "canAddImaging", ["loc", [null, [23, 26], [23, 39]]]]], [], 0, null, ["loc", [null, [23, 20], [25, 27]]]], ["block", "if", [["get", "canDeleteImaging", ["loc", [null, [26, 26], [26, 42]]]]], [], 1, null, ["loc", [null, [26, 20], [28, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/patients/imaging/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(9);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element2, [7]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element2, [9]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element2, [11]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element2, [13]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element2, [15]), 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["editImaging", ["get", "imaging", ["loc", [null, [13, 35], [13, 42]]]]], [], ["loc", [null, [13, 12], [13, 44]]]], ["inline", "date-format", [["get", "imaging.requestedDate", ["loc", [null, [14, 30], [14, 51]]]]], [], ["loc", [null, [14, 16], [14, 53]]]], ["content", "imaging.imagingType.name", ["loc", [null, [15, 16], [15, 44]]]], ["content", "imaging.status", ["loc", [null, [16, 16], [16, 34]]]], ["inline", "date-format", [["get", "imaging.imagingDate", ["loc", [null, [17, 30], [17, 49]]]]], [], ["loc", [null, [17, 16], [17, 51]]]], ["content", "imaging.result", ["loc", [null, [18, 16], [18, 34]]]], ["content", "imaging.notes", ["loc", [null, [19, 16], [19, 33]]]], ["content", "imaging.requestedBy", ["loc", [null, [20, 16], [20, 39]]]], ["block", "if", [["get", "imaging.canEdit", ["loc", [null, [22, 22], [22, 37]]]]], [], 0, null, ["loc", [null, [22, 16], [29, 23]]]]],
        locals: ["imaging"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/imaging/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "table");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        dom.setAttribute(el2, "class", "table-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [7]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [9]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [11]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [13]), 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element4, [15]), 0, 0);
        morphs[8] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["labels.date_requested"], [], ["loc", [null, [3, 12], [3, 41]]]], ["inline", "t", ["labels.imaging_type"], [], ["loc", [null, [4, 12], [4, 39]]]], ["inline", "t", ["labels.status"], [], ["loc", [null, [5, 12], [5, 33]]]], ["inline", "t", ["patients.labels.date_processed"], [], ["loc", [null, [6, 12], [6, 50]]]], ["inline", "t", ["labels.result"], [], ["loc", [null, [7, 12], [7, 33]]]], ["inline", "t", ["labels.notes"], [], ["loc", [null, [8, 12], [8, 32]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [9, 12], [9, 39]]]], ["inline", "t", ["labels.actions"], [], ["loc", [null, [10, 12], [10, 34]]]], ["block", "each", [["get", "patientImaging", ["loc", [null, [12, 12], [12, 26]]]]], [], 0, null, ["loc", [null, [12, 4], [32, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/patient-visits'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsPatientVisits) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsPatientVisits['default'], {
    addPermission: 'add_patient',
    deletePermission: 'delete_patient',
    canAdmitPatient: (function () {
      return this.currentUserCan('admit_patient');
    }).property(),

    canDischargePatient: (function () {
      return this.currentUserCan('discharge_patient');
    }).property(),

    startKey: [],
    actions: {
      admitPatient: function admitPatient(patient) {
        this.getPatientVisits(patient).then((function (visits) {
          this.send('createNewVisit', patient, visits);
        }).bind(this));
      },

      dischargePatient: function dischargePatient(patient) {
        this.getPatientVisits(patient).then((function (visits) {
          var visitToDischarge = visits.findBy('status', 'Admitted');
          if (visitToDischarge) {
            visitToDischarge.set('status', 'Discharged');
            visitToDischarge.set('endDate', new Date());
            this.transitionToRoute('visits.edit', visitToDischarge);
          }
        }).bind(this));
      }
    }
  });
});
define('hospitalrun/patients/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    modelName: 'patient',
    pageTitle: (0, _emberI18n.translationMacro)('patients.titles.patient_listing'),

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var displayPatientId = item.get('displayPatientId');
      return [displayPatientId, 'patient_' + item.get('id')];
    },

    _modelQueryParams: function _modelQueryParams() {
      return {
        mapReduce: 'patient_by_display_id'
      };
    }

  });
});
define("hospitalrun/patients/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 10
                },
                "end": {
                  "line": 6,
                  "column": 94
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["labels.id"], [], ["loc", [null, [6, 77], [6, 94]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 10
                },
                "end": {
                  "line": 7,
                  "column": 118
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["patients.labels.first_name"], [], ["loc", [null, [7, 84], [7, 118]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 10
                },
                "end": {
                  "line": 8,
                  "column": 116
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["patients.labels.last_name"], [], ["loc", [null, [8, 83], [8, 116]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 10
                },
                "end": {
                  "line": 9,
                  "column": 105
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["patients.labels.sex"], [], ["loc", [null, [9, 78], [9, 105]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 10
                },
                "end": {
                  "line": 10,
                  "column": 113
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["patients.labels.dob"], [], ["loc", [null, [10, 86], [10, 113]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 10
                },
                "end": {
                  "line": 11,
                  "column": 102
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["labels.status"], [], ["loc", [null, [11, 81], [11, 102]]]]],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 10
                },
                "end": {
                  "line": 14,
                  "column": 10
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [13, 16], [13, 38]]]]],
            locals: [],
            templates: []
          };
        })();
        var child7 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 28,
                      "column": 16
                    },
                    "end": {
                      "line": 30,
                      "column": 16
                    }
                  },
                  "moduleName": "hospitalrun/patients/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default neutral");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element5);
                  morphs[1] = dom.createMorphAt(element5, 0, 0);
                  return morphs;
                },
                statements: [["element", "action", ["editItem", ["get", "patient", ["loc", [null, [29, 78], [29, 85]]]]], ["bubbles", false], ["loc", [null, [29, 58], [29, 103]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [29, 104], [29, 123]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 32,
                        "column": 18
                      },
                      "end": {
                        "line": 34,
                        "column": 18
                      }
                    },
                    "moduleName": "hospitalrun/patients/index/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default success admit");
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "glyphicon glyphicon-log-in");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element4 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element4);
                    morphs[1] = dom.createMorphAt(element4, 2, 2);
                    return morphs;
                  },
                  statements: [["element", "action", ["admitPatient", ["get", "patient", ["loc", [null, [33, 90], [33, 97]]]]], ["bubbles", false], ["loc", [null, [33, 66], [33, 115]]]], ["inline", "t", ["patients.labels.admit"], [], ["loc", [null, [33, 165], [33, 194]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 31,
                      "column": 16
                    },
                    "end": {
                      "line": 35,
                      "column": 16
                    }
                  },
                  "moduleName": "hospitalrun/patients/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "canAdmitPatient", ["loc", [null, [32, 24], [32, 39]]]]], [], 0, null, ["loc", [null, [32, 18], [34, 25]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child2 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 37,
                        "column": 18
                      },
                      "end": {
                        "line": 39,
                        "column": 18
                      }
                    },
                    "moduleName": "hospitalrun/patients/index/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default info");
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "glyphicon glyphicon-log-out");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element3);
                    morphs[1] = dom.createMorphAt(element3, 2, 2);
                    return morphs;
                  },
                  statements: [["element", "action", ["dischargePatient", ["get", "patient", ["loc", [null, [38, 85], [38, 92]]]]], ["bubbles", false], ["loc", [null, [38, 57], [38, 110]]]], ["inline", "t", ["patients.labels.discharge"], [], ["loc", [null, [38, 161], [38, 194]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 36,
                      "column": 16
                    },
                    "end": {
                      "line": 40,
                      "column": 16
                    }
                  },
                  "moduleName": "hospitalrun/patients/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "canDischargePatient", ["loc", [null, [37, 24], [37, 43]]]]], [], 0, null, ["loc", [null, [37, 18], [39, 25]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child3 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 41,
                      "column": 16
                    },
                    "end": {
                      "line": 43,
                      "column": 16
                    }
                  },
                  "moduleName": "hospitalrun/patients/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default warning");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "octicon octicon-x");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element2);
                  morphs[1] = dom.createMorphAt(element2, 2, 2);
                  return morphs;
                },
                statements: [["element", "action", ["deleteItem", ["get", "patient", ["loc", [null, [42, 80], [42, 87]]]]], ["bubbles", false], ["loc", [null, [42, 58], [42, 105]]]], ["inline", "t", ["labels.delete"], [], ["loc", [null, [42, 146], [42, 167]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 12
                  },
                  "end": {
                    "line": 45,
                    "column": 12
                  }
                },
                "moduleName": "hospitalrun/patients/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element6 = dom.childAt(fragment, [1]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(element6, 1, 1);
                morphs[1] = dom.createMorphAt(element6, 2, 2);
                morphs[2] = dom.createMorphAt(element6, 3, 3);
                morphs[3] = dom.createMorphAt(element6, 4, 4);
                return morphs;
              },
              statements: [["block", "if", [["get", "canAdd", ["loc", [null, [28, 22], [28, 28]]]]], [], 0, null, ["loc", [null, [28, 16], [30, 23]]]], ["block", "unless", [["get", "patient.admitted", ["loc", [null, [31, 26], [31, 42]]]]], [], 1, null, ["loc", [null, [31, 16], [35, 27]]]], ["block", "if", [["get", "patient.admitted", ["loc", [null, [36, 22], [36, 38]]]]], [], 2, null, ["loc", [null, [36, 16], [40, 23]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [41, 22], [41, 31]]]]], [], 3, null, ["loc", [null, [41, 16], [43, 23]]]]],
              locals: [],
              templates: [child0, child1, child2, child3]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 47,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              dom.setAttribute(el1, "class", "clickable");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1]);
              var morphs = new Array(8);
              morphs[0] = dom.createElementMorph(element7);
              morphs[1] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element7, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element7, [7]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element7, [9]), 0, 0);
              morphs[6] = dom.createMorphAt(dom.childAt(element7, [11]), 0, 0);
              morphs[7] = dom.createMorphAt(element7, 13, 13);
              return morphs;
            },
            statements: [["element", "action", ["editItem", ["get", "patient", ["loc", [null, [19, 34], [19, 41]]]]], [], ["loc", [null, [19, 14], [19, 43]]]], ["content", "patient.displayPatientId", ["loc", [null, [20, 16], [20, 44]]]], ["content", "patient.firstName", ["loc", [null, [21, 16], [21, 37]]]], ["content", "patient.lastName", ["loc", [null, [22, 16], [22, 36]]]], ["content", "patient.sex", ["loc", [null, [23, 16], [23, 31]]]], ["inline", "date-format", [["get", "patient.dateOfBirth", ["loc", [null, [24, 30], [24, 49]]]]], [], ["loc", [null, [24, 16], [24, 51]]]], ["content", "patient.status", ["loc", [null, [25, 16], [25, 34]]]], ["block", "if", [["get", "showActions", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 12], [45, 19]]]]],
            locals: ["patient"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 50,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            dom.setAttribute(el3, "class", "table-header");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1]);
            var element9 = dom.childAt(element8, [1, 1]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(element9, 1, 1);
            morphs[1] = dom.createMorphAt(element9, 3, 3);
            morphs[2] = dom.createMorphAt(element9, 5, 5);
            morphs[3] = dom.createMorphAt(element9, 7, 7);
            morphs[4] = dom.createMorphAt(element9, 9, 9);
            morphs[5] = dom.createMorphAt(element9, 11, 11);
            morphs[6] = dom.createMorphAt(element9, 13, 13);
            morphs[7] = dom.createMorphAt(dom.childAt(element8, [3]), 1, 1);
            return morphs;
          },
          statements: [["block", "sortable-column", [], ["sortBy", "id", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [6, 50], [6, 58]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [6, 67], [6, 74]]]]], [], []]], 0, null, ["loc", [null, [6, 10], [6, 114]]]], ["block", "sortable-column", [], ["sortBy", "firstName", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [7, 57], [7, 65]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [7, 74], [7, 81]]]]], [], []]], 1, null, ["loc", [null, [7, 10], [7, 138]]]], ["block", "sortable-column", [], ["sortBy", "lastName", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [8, 56], [8, 64]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [8, 73], [8, 80]]]]], [], []]], 2, null, ["loc", [null, [8, 10], [8, 136]]]], ["block", "sortable-column", [], ["sortBy", "sex", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [9, 51], [9, 59]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [9, 68], [9, 75]]]]], [], []]], 3, null, ["loc", [null, [9, 10], [9, 125]]]], ["block", "sortable-column", [], ["sortBy", "dateOfBirth", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [10, 59], [10, 67]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [10, 76], [10, 83]]]]], [], []]], 4, null, ["loc", [null, [10, 10], [10, 133]]]], ["block", "sortable-column", [], ["sortBy", "status", "sortDesc", ["subexpr", "@mut", [["get", "sortDesc", ["loc", [null, [11, 54], [11, 62]]]]], [], []], "sortKey", ["subexpr", "@mut", [["get", "sortKey", ["loc", [null, [11, 71], [11, 78]]]]], [], []]], 5, null, ["loc", [null, [11, 10], [11, 122]]]], ["block", "if", [["get", "showActions", ["loc", [null, [12, 16], [12, 27]]]]], [], 6, null, ["loc", [null, [12, 10], [14, 17]]]], ["block", "each", [["get", "model", ["loc", [null, [18, 16], [18, 21]]]]], [], 7, null, ["loc", [null, [18, 8], [47, 17]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 52
                },
                "end": {
                  "line": 52,
                  "column": 148
                }
              },
              "moduleName": "hospitalrun/patients/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["newItem"], [], ["loc", [null, [52, 79], [52, 99]]]], ["inline", "t", ["patients.messages.create_new_patient"], [], ["loc", [null, [52, 100], [52, 144]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 2
              },
              "end": {
                "line": 54,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            dom.setAttribute(el1, "data-test-selector", "no-patients-found");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["patients.messages.no_patients_found"], [], ["loc", [null, [52, 9], [52, 52]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [52, 58], [52, 64]]]]], [], 0, null, ["loc", [null, [52, 52], [52, 155]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [54, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [55, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/patients/labs/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 20
                },
                "end": {
                  "line": 25,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/patients/labs/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "btn btn-default neutral");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["editLab", ["get", "lab", ["loc", [null, [24, 97], [24, 100]]]]], [], ["loc", [null, [24, 78], [24, 102]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [24, 103], [24, 122]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 20
                },
                "end": {
                  "line": 28,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/patients/labs/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "btn btn-default warning");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "octicon octicon-x");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 2, 2);
              return morphs;
            },
            statements: [["element", "action", ["showDeleteLab", ["get", "lab", ["loc", [null, [27, 103], [27, 106]]]]], ["bubbles", false], ["loc", [null, [27, 78], [27, 124]]]], ["inline", "t", ["labels.delete"], [], ["loc", [null, [27, 165], [27, 186]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 16
              },
              "end": {
                "line": 29,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/patients/labs/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "canAddLab", ["loc", [null, [23, 26], [23, 35]]]]], [], 0, null, ["loc", [null, [23, 20], [25, 27]]]], ["block", "if", [["get", "canDeleteLab", ["loc", [null, [26, 26], [26, 38]]]]], [], 1, null, ["loc", [null, [26, 20], [28, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/patients/labs/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(9);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element2, [7]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element2, [9]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element2, [11]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element2, [13]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element2, [15]), 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["editLab", ["get", "lab", ["loc", [null, [13, 31], [13, 34]]]]], [], ["loc", [null, [13, 12], [13, 36]]]], ["inline", "date-format", [["get", "lab.requestedDate", ["loc", [null, [14, 30], [14, 47]]]]], [], ["loc", [null, [14, 16], [14, 49]]]], ["content", "lab.labType.name", ["loc", [null, [15, 16], [15, 36]]]], ["content", "lab.status", ["loc", [null, [16, 16], [16, 30]]]], ["inline", "date-format", [["get", "lab.labDate", ["loc", [null, [17, 30], [17, 41]]]]], [], ["loc", [null, [17, 16], [17, 43]]]], ["content", "lab.result", ["loc", [null, [18, 16], [18, 30]]]], ["content", "lab.notes", ["loc", [null, [19, 16], [19, 29]]]], ["content", "lab.requestedBy", ["loc", [null, [20, 16], [20, 35]]]], ["block", "if", [["get", "lab.canEdit", ["loc", [null, [22, 22], [22, 33]]]]], [], 0, null, ["loc", [null, [22, 16], [29, 23]]]]],
        locals: ["lab"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/labs/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "table");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        dom.setAttribute(el2, "class", "table-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [7]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [9]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [11]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [13]), 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element4, [15]), 0, 0);
        morphs[8] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["labels.date_requested"], [], ["loc", [null, [3, 12], [3, 41]]]], ["inline", "t", ["labs.labels.lab_type"], [], ["loc", [null, [4, 12], [4, 40]]]], ["inline", "t", ["labels.status"], [], ["loc", [null, [5, 12], [5, 33]]]], ["inline", "t", ["patients.labels.date_processed"], [], ["loc", [null, [6, 12], [6, 50]]]], ["inline", "t", ["labels.result"], [], ["loc", [null, [7, 12], [7, 33]]]], ["inline", "t", ["labels.notes"], [], ["loc", [null, [8, 12], [8, 32]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [9, 12], [9, 39]]]], ["inline", "t", ["labels.actions"], [], ["loc", [null, [10, 12], [10, 34]]]], ["block", "each", [["get", "patientLabs", ["loc", [null, [12, 12], [12, 23]]]]], [], 0, null, ["loc", [null, [12, 4], [32, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/patients/medication/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 20
                },
                "end": {
                  "line": 21,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/patients/medication/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "btn btn-default neutral");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["editMedication", ["get", "medication", ["loc", [null, [20, 104], [20, 114]]]]], [], ["loc", [null, [20, 78], [20, 116]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [20, 117], [20, 136]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 20
                },
                "end": {
                  "line": 24,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/patients/medication/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "btn btn-default warning");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "octicon octicon-x");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["showDeleteMedication", ["get", "medication", ["loc", [null, [23, 110], [23, 120]]]]], ["bubbles", false], ["loc", [null, [23, 78], [23, 137]]]], ["inline", "t", ["labels.delete"], [], ["loc", [null, [23, 177], [23, 198]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 16
              },
              "end": {
                "line": 25,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/patients/medication/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "canAddMedication", ["loc", [null, [19, 26], [19, 42]]]]], [], 0, null, ["loc", [null, [19, 20], [21, 27]]]], ["block", "if", [["get", "canDeleteMedication", ["loc", [null, [22, 26], [22, 45]]]]], [], 1, null, ["loc", [null, [22, 20], [24, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/patients/medication/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(7);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element2, [7]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element2, [9]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element2, [11]), 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["editMedication", ["get", "medication", ["loc", [null, [11, 38], [11, 48]]]]], [], ["loc", [null, [11, 12], [11, 50]]]], ["inline", "date-format", [["get", "medication.prescriptionDate", ["loc", [null, [12, 30], [12, 57]]]]], [], ["loc", [null, [12, 16], [12, 59]]]], ["content", "medication.medicationName", ["loc", [null, [13, 16], [13, 45]]]], ["content", "medication.status", ["loc", [null, [14, 16], [14, 37]]]], ["content", "medication.prescription", ["loc", [null, [15, 16], [15, 43]]]], ["content", "medication.requestedBy", ["loc", [null, [16, 16], [16, 42]]]], ["block", "if", [["get", "medication.canEdit", ["loc", [null, [18, 22], [18, 40]]]]], [], 0, null, ["loc", [null, [18, 16], [25, 23]]]]],
        locals: ["medication"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/medication/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "table");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        dom.setAttribute(el2, "class", "table-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [7]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [9]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [11]), 0, 0);
        morphs[6] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["labels.date"], [], ["loc", [null, [3, 12], [3, 31]]]], ["inline", "t", ["labels.name"], [], ["loc", [null, [4, 12], [4, 31]]]], ["inline", "t", ["labels.status"], [], ["loc", [null, [5, 12], [5, 33]]]], ["inline", "t", ["labels.prescription"], [], ["loc", [null, [6, 12], [6, 39]]]], ["inline", "t", ["labels.requested_by"], [], ["loc", [null, [7, 12], [7, 39]]]], ["inline", "t", ["labels.actions"], [], ["loc", [null, [8, 12], [8, 34]]]], ["block", "each", [["get", "patientMedications", ["loc", [null, [10, 12], [10, 30]]]]], [], 0, null, ["loc", [null, [10, 4], [28, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/notes/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsIsUpdateDisabled['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPatientNotes['default'], {
    cancelAction: 'closeModal',
    updateAction: 'updateNote',
    moduleController: _ember['default'].inject.controller('patients'),
    physicianList: _ember['default'].computed.alias('moduleController.physicianList'),
    lookupListsToUpdate: [{
      name: 'physicianList',
      property: 'model.attribution',
      id: 'physician_list'
    }],
    title: (function () {
      if (this.get('model.isNew')) {
        return this.get('i18n').t('patients.notes.new_note') + ' ' + this.get('model.patient.displayName');
      } else {
        return this.get('i18n').t('patients.notes.new_note') + ' ' + (moment(this.get('model.date')).format('MM/DD/YYYY') + ' for ' + this.get('model.patient.displayName'));
      }
    }).property('model.patient.displayName'),
    updateCapability: 'add_note',
    beforeUpdate: function beforeUpdate() {
      this.set('model.date', new Date());
      this.set('model.createdBy', this.getUserName());
      return _ember['default'].RSVP.Promise.resolve();
    },
    afterUpdate: function afterUpdate() {
      this.send(this.get('updateAction'), this.get('model'));
      this.send(this.get('cancelAction'));
    },
    actions: {
      changeVisit: function changeVisit() {
        var selectEl = $('select[name="note-visits"]')[0];
        var selectedIndex = selectEl.selectedIndex;
        var content = this.get('patientVisitsForSelect');

        // decrement index by 1 if we have a prompt
        var contentIndex = selectedIndex - 1;

        var selection = content[contentIndex].selectObject;

        // set the local, shadowed selection to avoid leaking
        // changes to `selection` out via 2-way binding
        this.get('model').set('visit', selection);
        this._setNoteType();
      }
    }
  });
});
define("hospitalrun/patients/notes/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 6
                },
                "end": {
                  "line": 20,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/patients/notes/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n         ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'value');
              morphs[1] = dom.createAttrMorph(element0, 'selected');
              morphs[2] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["concat", [["get", "item.selectObject", ["loc", [null, [16, 25], [16, 42]]]]]]], ["attribute", "selected", ["subexpr", "is-equal", [["get", "item.selectObject", ["loc", [null, [17, 36], [17, 53]]]], ["get", "model.visit", ["loc", [null, [17, 54], [17, 65]]]]], [], ["loc", [null, [17, 25], [17, 67]]]]], ["content", "item.selectObject.visitDescription", ["loc", [null, [18, 10], [18, 48]]]]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/notes/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("select");
            dom.setAttribute(el1, "name", "note-visits");
            dom.setAttribute(el1, "class", "form-control");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("option");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(element1, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createAttrMorph(element2, 'selected');
            morphs[3] = dom.createMorphAt(element2, 1, 1);
            morphs[4] = dom.createMorphAt(element1, 3, 3);
            morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-text", [], ["label", ["subexpr", "t", ["patients.notes.note_label"], [], ["loc", [null, [9, 20], [9, 51]]]], "property", "content", "rows", 3, "class", "test-note-content required form-input-group"], ["loc", [null, [9, 4], [9, 131]]]], ["element", "action", ["changeVisit"], ["on", "change"], ["loc", [null, [11, 31], [11, 67]]]], ["attribute", "selected", ["subexpr", "is-not", [["get", "model.visit", ["loc", [null, [12, 34], [12, 45]]]]], [], ["loc", [null, [12, 25], [12, 47]]]]], ["inline", "t", ["patients.notes.please_select_a_visit"], [], ["loc", [null, [13, 10], [13, 55]]]], ["block", "each", [["get", "patientVisitsForSelect", ["loc", [null, [15, 14], [15, 36]]]]], [], 0, null, ["loc", [null, [15, 6], [20, 15]]]], ["inline", "select-or-typeahead", [], ["property", "attribution", "label", ["subexpr", "t", ["patients.notes.on_behalf_of_label"], [], ["loc", [null, [24, 12], [24, 52]]]], "list", ["subexpr", "@mut", [["get", "physicianList", ["loc", [null, [25, 11], [25, 24]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "attribution", ["loc", [null, [26, 16], [26, 27]]]]], [], []], "className", "form-input-group test-note-attribution"], ["loc", [null, [22, 4], [28, 6]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/notes/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 19], [8, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [8, 2], [29, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 17
          }
        },
        "moduleName": "hospitalrun/patients/notes/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "hideUpdateButton", ["subexpr", "@mut", [["get", "hideUpdateButton", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [4, 21], [4, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [5, 10], [5, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [6, 23], [6, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [7, 21], [7, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [30, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/photo/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    patientsEdit: _ember['default'].inject.controller('patients/edit'),

    title: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return this.get('i18n').t('patients.titles.add_photo');
      } else {
        return this.get('i18n').t('patients.titles.edit_photo');
      }
    }).property('model.isNew'),

    updateButtonText: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return this.get('i18n').t('buttons.add');
      } else {
        return this.get('i18n').t('buttons.add');
      }
    }).property('model.isNew'),

    updateButtonAction: 'update',
    showUpdateButton: true,

    editController: _ember['default'].computed.alias('patientsEdit'),

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      update: function update() {
        var caption = this.get('model.caption'),
            isNew = this.get('model.isNew'),
            photoFile = this.get('model.photoFile');
        if (isNew) {
          this.get('editController').send('addPhoto', photoFile, caption);
        } else {
          this.get('editController').send('updatePhoto', this.get('model'));
        }
      }
    }
  });
});
define("hospitalrun/patients/photo/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/patients/photo/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "take-photo", [], ["photoFile", ["subexpr", "@mut", [["get", "model.photoFile", ["loc", [null, [10, 29], [10, 44]]]]], [], []]], ["loc", [null, [10, 6], [10, 47]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/patients/photo/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "thumbnail");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("img");
              dom.setAttribute(el2, "class", "img-responsive");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'alt');
              morphs[1] = dom.createAttrMorph(element0, 'src');
              return morphs;
            },
            statements: [["attribute", "alt", ["get", "model.caption", ["loc", [null, [13, 19], [13, 32]]]]], ["attribute", "src", ["get", "model.url", ["loc", [null, [13, 41], [13, 50]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/photo/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.isNew", ["loc", [null, [9, 10], [9, 21]]]]], [], 0, 1, ["loc", [null, [9, 4], [15, 11]]]], ["inline", "em-input", [], ["property", "caption", "label", "Caption"], ["loc", [null, [17, 6], [17, 53]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/photo/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 19], [8, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [8, 2], [19, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/photo/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "hideUpdateButton", ["subexpr", "@mut", [["get", "hideUpdateButton", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [4, 21], [4, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [5, 10], [5, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [6, 23], [6, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [7, 21], [7, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [20, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/quick-add/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller', 'ember-i18n'], function (exports, _ember, _hospitalrunControllersAbstractEditController, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({
    medicationController: _ember['default'].inject.controller('medication'),
    sexList: _ember['default'].computed.alias('medicationController.sexList'),
    title: (0, _emberI18n.translationMacro)('patients.titles.new'),

    updateCapability: 'add_patient',

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      }
    },

    afterUpdate: function afterUpdate(record) {
      var requestingController = this.get('model.requestingController');
      requestingController.send('addedNewPatient', record);
    }
  });
});
define("hospitalrun/patients/quick-add/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 23,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/quick-add/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            morphs[3] = dom.createMorphAt(element1, 3, 3);
            morphs[4] = dom.createMorphAt(element2, 1, 1);
            morphs[5] = dom.createMorphAt(element2, 3, 3);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["property", "friendlyId", "label", "Id", "class", "required col-sm-6"], ["loc", [null, [12, 6], [12, 77]]]], ["inline", "em-input", [], ["property", "firstName", "label", "First Name", "class", "required col-sm-6"], ["loc", [null, [13, 6], [13, 84]]]], ["inline", "em-input", [], ["property", "middleName", "label", "Middle Name", "class", "col-sm-6"], ["loc", [null, [16, 6], [16, 78]]]], ["inline", "em-input", [], ["property", "lastName", "label", "Last Name", "class", "required col-sm-6"], ["loc", [null, [17, 6], [17, 82]]]], ["inline", "select-or-typeahead", [], ["property", "sex", "label", "Sex", "list", ["subexpr", "@mut", [["get", "sexList", ["loc", [null, [20, 60], [20, 67]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.sex", ["loc", [null, [20, 78], [20, 87]]]]], [], []], "class", "col-sm-6"], ["loc", [null, [20, 6], [20, 106]]]], ["inline", "date-picker", [], ["property", "dateOfBirth", "label", "Date of Birth", "maxDate", "now", "class", "col-sm-6"], ["loc", [null, [21, 6], [21, 97]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/quick-add/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-warning");
          dom.setAttribute(el1, "role", "alert");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["patients.messages.not_found_quick_add", ["get", "model", ["loc", [null, [8, 48], [8, 53]]]]], [], ["loc", [null, [8, 4], [8, 55]]]], ["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [10, 19], [10, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [10, 2], [23, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/quick-add/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [4, 10], [4, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [5, 23], [5, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [6, 21], [6, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [24, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/reports/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-report-controller', 'hospitalrun/mixins/patient-diagnosis', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/visit-types', 'ember-i18n'], function (exports, _ember, _hospitalrunControllersAbstractReportController, _hospitalrunMixinsPatientDiagnosis, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsSelectValues, _hospitalrunMixinsVisitTypes, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractReportController['default'].extend(_hospitalrunMixinsPatientDiagnosis['default'], _hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsVisitTypes['default'], {
    patientsController: _ember['default'].inject.controller('patients'),

    clinicList: _ember['default'].computed.map('patientsController.clinicList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),
    diagnosisList: _ember['default'].computed.alias('patientsController.diagnosisList'),
    physicianList: _ember['default'].computed.map('patientsController.physicianList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),
    locationList: _ember['default'].computed.map('patientsController.locationList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),
    statusList: _ember['default'].computed.map('patientsController.statusList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),
    visitTypesList: _ember['default'].computed.alias('patientsController.visitTypeList'),
    reportType: 'detailedAdmissions',
    patientDetails: {},

    admissionReportColumns: {
      sex: {
        label: (0, _emberI18n.translationMacro)('labels.sex'),
        include: true,
        property: 'sex'
      },
      total: {
        label: (0, _emberI18n.translationMacro)('labels.total'),
        include: true,
        property: 'total',
        format: '_numberFormat'
      }
    },
    admissionDetailReportColumns: {
      id: {
        label: (0, _emberI18n.translationMacro)('labels.id'),
        include: true,
        property: 'patientId'
      },
      name: {
        label: (0, _emberI18n.translationMacro)('labels.name'),
        include: true,
        property: 'patientName'
      },
      admissionDate: {
        label: (0, _emberI18n.translationMacro)('patients.labels.admission_date'),
        include: true,
        property: 'admissionDate',
        format: '_dateTimeFormat'
      },
      dischargeDate: {
        label: (0, _emberI18n.translationMacro)('patients.labels.discharge_date'),
        include: false,
        property: 'dischargeDate',
        format: '_dateTimeFormat'
      },
      patientDays: {
        label: (0, _emberI18n.translationMacro)('patients.labels.discharge_date'),
        include: false,
        property: 'patientDays',
        format: '_numberFormat'
      }
    },
    diagnosticReportColumns: {
      type: {
        label: 'Type',
        include: true,
        property: 'type'
      },
      total: {
        label: 'Total',
        include: true,
        property: 'total',
        format: '_numberFormat'
      }
    },

    procedureDetailReportColumns: {
      id: {
        label: 'Id',
        include: true,
        property: 'patient.displayPatientId'
      },
      name: {
        label: 'Name',
        include: true,
        property: 'patient.displayName'
      },
      procedure: {
        label: 'Procedure',
        include: true,
        property: 'procedure'
      },
      procedureDate: {
        label: 'Procedure Date',
        include: true,
        property: 'procedureDate',
        format: '_dateTimeFormat'
      }
    },
    reportColumns: {
      visitDate: {
        label: 'Visit Date',
        include: true,
        property: 'visitDate'
      },
      visitType: {
        label: 'Visit Type',
        include: true,
        property: 'visitType'
      },
      visitLocation: {
        label: 'Location',
        include: false,
        property: 'location'
      },
      examiner: {
        label: 'Examiner',
        include: true,
        property: 'examiner'
      },
      name: {
        label: 'Name',
        include: true,
        property: 'patient.displayName'
      },
      id: {
        label: 'Id',
        include: true,
        property: 'patient.displayPatientId'
      },
      sex: {
        label: 'Sex',
        include: true,
        property: 'patient.sex'
      },
      dateOfBirth: {
        label: 'Date Of Birth',
        include: true,
        property: 'patient.dateOfBirth',
        format: '_dateFormat'
      },
      age: {
        label: 'Age',
        include: false,
        property: 'patient.age'
      },
      primaryDiagnosis: {
        label: 'Primary Diagnosis',
        include: false,
        property: 'primaryDiagnosis'
      },
      secondaryDiagnoses: {
        label: 'Secondary Diagnoses',
        include: false,
        property: 'additionalDiagnoses',
        format: '_diagnosisListToString'
      },
      procedures: {
        label: 'Procedures',
        include: false,
        property: 'resolvedProcedures',
        format: '_procedureListToString'
      },
      contacts: {
        label: 'Contacts',
        include: false,
        property: 'patient',
        format: '_contactListToString'
      },
      referredBy: {
        label: 'Referred By',
        include: false,
        property: 'patient.referredBy'
      },
      referredDate: {
        label: 'Referred Date',
        include: false,
        property: 'patient.referredDate',
        format: '_dateFormat'
      }
    },
    statusReportColumns: {
      id: {
        label: 'Id',
        include: true,
        property: 'patient.displayPatientId'
      },
      name: {
        label: 'Name',
        include: true,
        property: 'patient.displayName'
      },
      status: {
        label: 'Status',
        include: true,
        property: 'patient.status'
      },
      primaryDiagnosis: {
        label: 'Primary Diagnoses',
        include: true,
        property: 'patient.visits',
        format: '_formatPrimaryDiagnosis'
      },
      secondaryDiagnoses: {
        label: 'Secondary Diagnoses',
        include: true,
        property: 'patient.visits',
        format: '_formatSecondaryDiagnosis'
      }
    },
    reportTypes: [{
      name: 'Admissions Detail',
      value: 'detailedAdmissions'
    }, {
      name: 'Admissions Summary',
      value: 'admissions'
    }, {
      name: 'Diagnostic Testing',
      value: 'diagnostic'
    }, {
      name: 'Discharges Detail',
      value: 'detailedDischarges'
    }, {
      name: 'Discharges Summary',
      value: 'discharges'
    }, {
      name: 'Procedures Detail',
      value: 'detailedProcedures'
    }, {
      name: 'Procedures Summary',
      value: 'procedures'
    }, {
      name: 'Patient Status',
      value: 'status'
    }, {
      name: 'Total Patient Days',
      value: 'patientDays'
    }, {
      name: 'Total Patient Days (Detailed)',
      value: 'detailedPatientDays'
    }, {
      name: 'Visit',
      value: 'visit'
    }],

    isDischargeReport: (function () {
      var reportType = this.get('reportType');
      return reportType.toLowerCase().indexOf('discharges') > -1;
    }).property('reportType'),

    isStatusReport: (function () {
      var reportType = this.get('reportType');
      return reportType === 'status';
    }).property('reportType'),

    isVisitReport: (function () {
      var reportType = this.get('reportType');
      return reportType === 'visit';
    }).property('reportType'),

    _addContactToList: function _addContactToList(phone, email, prefix, contactList) {
      var contactArray = [];
      if (!_ember['default'].isEmpty(email) || !_ember['default'].isEmpty(phone)) {
        if (!_ember['default'].isEmpty(phone)) {
          contactArray.push(phone);
        }
        if (!_ember['default'].isEmpty(email)) {
          contactArray.push(email);
        }
        contactList.push(prefix + contactArray.join(', '));
      }
    },

    _addReportRow: function _addReportRow(row, skipFormatting, reportColumns, rowAction) {
      if (_ember['default'].isEmpty(rowAction) && !_ember['default'].isEmpty(row.patient)) {
        var patientId = null;
        if (row.get) {
          patientId = row.get('patient.id');
        } else {
          patientId = row.patient.get('id');
        }
        if (!_ember['default'].isEmpty(patientId)) {
          rowAction = {
            action: 'viewPatient',
            model: patientId
          };
        }
      }
      this._super(row, skipFormatting, reportColumns, rowAction);
    },

    /**
     * Given a list of records, organize and total by them by type and then add them to the report.
     * @param records {Array} list of records to total.
     * @param typeField {String} the field in the records containing the type.
     * @param totalLabel {String} the label for the grand total.
     * @param reportColumns
     */
    _addRowsByType: function _addRowsByType(records, typeField, totalLabel, reportColumns) {
      var types = this._totalByType(records, typeField, totalLabel);
      types.forEach((function (type) {
        this._addReportRow(type, true, reportColumns);
      }).bind(this));
    },

    _addPatientProcedureRows: function _addPatientProcedureRows(procedureTotals, reportColumns) {
      procedureTotals.forEach((function (procedureTotal) {
        if (!_ember['default'].isEmpty(procedureTotal.records)) {
          procedureTotal.records.forEach((function (patientProcedure, index) {
            this._addReportRow({
              patient: patientProcedure.get('patient'),
              procedure: patientProcedure.get('description'),
              procedureDate: patientProcedure.get('procedureDate')
            }, false, reportColumns);
            if (index + 1 === procedureTotal.records.length) {
              this._addReportRow({
                procedure: 'Total for ' + procedureTotal.type + ': ' + procedureTotal.total
              }, true, reportColumns);
            }
          }).bind(this));
        } else {
          this._addReportRow({
            procedure: 'Total for ' + procedureTotal.type + ': ' + procedureTotal.total
          }, true, reportColumns);
        }
      }).bind(this));
    },

    _contactListToString: function _contactListToString(patient) {
      var additionalContacts = patient.get('additionalContacts'),
          contactArray = [],
          contactDesc,
          contactList = [],
          email = patient.get('email'),
          phone = patient.get('phone');
      this._addContactToList(phone, email, 'Primary: ', contactList);
      if (!_ember['default'].isEmpty(additionalContacts)) {
        additionalContacts.forEach((function (contact) {
          contactArray = [];
          contactDesc = '';
          if (!_ember['default'].isEmpty(contact.name) && !_ember['default'].isEmpty(contact.relationship)) {
            if (!_ember['default'].isEmpty(contact.name)) {
              contactDesc += contact.name;
            }
            if (!_ember['default'].isEmpty(contact.relationship)) {
              if (!_ember['default'].isEmpty(contactDesc)) {
                contactDesc += ' - ';
              }
              contactDesc += contact.relationship;
            }
            contactDesc += ': ';
          }
          this._addContactToList(contact.phone, contact.email, contactDesc, contactList);
        }).bind(this));
      }
      return contactList.join(';\n');
    },

    _dateTimeFormat: function _dateTimeFormat(value) {
      return this._dateFormat(value, 'l h:mm A');
    },

    _diagnosisListToString: function _diagnosisListToString(diagnoses) {
      return this._listToString(diagnoses, 'description', 'date');
    },
    /**
       * Find diagnostics by the specified dates and the record's start and (optional) end dates.
       */
    _findDiagnosticsByDate: function _findDiagnosticsByDate() {
      var filterEndDate = this.get('endDate'),
          filterStartDate = this.get('startDate'),
          findParams = {
        options: {},
        mapReduce: 'imaging_by_status'
      },
          maxValue = this.get('maxValue');
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        findParams.options.startkey = ['Completed', null, filterStartDate.getTime(), null];

        if (!_ember['default'].isEmpty(filterEndDate)) {
          filterEndDate = moment(filterEndDate).endOf('day').toDate();
          findParams.options.endkey = ['Completed', maxValue, filterEndDate.getTime(), maxValue];
        }
        this.store.query('imaging', findParams).then((function (imagingRecords) {
          var returnRecords = {
            imaging: imagingRecords
          };
          findParams.mapReduce = 'lab_by_status';
          this.store.query('lab', findParams).then(function (labRecords) {
            returnRecords.labs = labRecords;
            resolve(returnRecords);
          }, reject);
        }).bind(this), reject);
      }).bind(this));
    },

    /**
     * Find procedures by the specified dates and the record's start and (optional) end dates.
     */
    _findPatientsByStatus: function _findPatientsByStatus() {
      var status = this.get('status'),
          findParams = {
        options: {
          key: status
        },
        mapReduce: 'patient_by_status'
      };
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this.store.query('patient', findParams).then(resolve, reject);
      }).bind(this));
    },

    /**
     * Find procedures by the specified dates and the record's start and (optional) end dates.
     */
    _findProceduresByDate: function _findProceduresByDate() {
      var filterEndDate = this.get('endDate'),
          filterStartDate = this.get('startDate'),
          findParams = {
        options: {},
        mapReduce: 'procedure_by_date'
      },
          maxValue = this.get('maxValue');
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        findParams.options.startkey = [filterStartDate.getTime(), null];

        if (!_ember['default'].isEmpty(filterEndDate)) {
          filterEndDate = moment(filterEndDate).endOf('day').toDate();
          findParams.options.endkey = [filterEndDate.getTime(), maxValue];
        }
        this.store.query('procedure', findParams).then(resolve, reject);
      }).bind(this));
    },

    /**
     * Find visits by the specified dates and the record's start and (optional) end dates.
     * @param {String} reportType the type of report to find visits for.
     */
    _findVisitsByDate: function _findVisitsByDate() {
      var filterEndDate = this.get('endDate'),
          filterStartDate = this.get('startDate'),
          findParams = {
        options: {},
        mapReduce: 'visit_by_date'
      },
          isDischargeReport = this.get('isDischargeReport'),
          maxValue = this.get('maxValue');
      if (isDischargeReport) {
        findParams.mapReduce = 'visit_by_discharge_date';
      }

      /**
       * Admissions - start date between start and end date
       * Discharge end date between start and end date
       */
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var isDischargeReport = this.get('isDischargeReport');
        findParams.options.startkey = [filterStartDate.getTime(), null];
        if (!_ember['default'].isEmpty(filterEndDate)) {
          filterEndDate = moment(filterEndDate).endOf('day').toDate();
          if (isDischargeReport) {
            findParams.options.endkey = [filterEndDate.getTime(), maxValue];
          } else {
            findParams.options.endkey = [filterEndDate.getTime(), maxValue, maxValue];
          }
        }
        this.store.query('visit', findParams).then(resolve, reject);
      }).bind(this));
    },

    _filterByLike: function _filterByLike(records, field, likeCondition) {
      return records.filter(function (record) {
        var fieldValue = record.get('field');
        if (_ember['default'].isEmpty(fieldValue)) {
          return false;
        } else {
          if (_ember['default'].isArray(fieldValue)) {
            var foundValue = fieldValue.find((function (value) {
              return this._haveLikeValue(value, likeCondition);
            }).bind(this));
            return !_ember['default'].isEmpty(foundValue);
          } else {
            return this._haveLikeValue(fieldValue, likeCondition);
          }
        }
      });
    },

    _filterInPatientVisit: function _filterInPatientVisit(visit) {
      var outPatient = visit.get('outPatient'),
          status = visit.get('status');
      return !outPatient && !_ember['default'].isEmpty(status);
    },

    _finishVisitReport: function _finishVisitReport(visits) {
      var visitTypes = this._totalByType(visits, 'visitType', 'total');
      visitTypes.forEach((function (visitType) {
        if (visitType.type === 'total') {
          this._addReportRow({
            visitDate: 'Total visits: ' + visitType.total
          });
        } else {
          visitType.records.forEach((function (visit) {
            this._addReportRow(visit);
          }).bind(this));
          this._addReportRow({
            visitDate: 'Total for ' + visitType.type + ': ' + visitType.total
          });
        }
      }).bind(this));
      this._finishReport();
    },
    _formatPrimaryDiagnosis: function _formatPrimaryDiagnosis(visits) {
      var primaryDiagnoses = this.getPrimaryDiagnoses(visits);
      return this._diagnosisListToString(primaryDiagnoses);
    },

    _formatSecondaryDiagnosis: function _formatSecondaryDiagnosis(visits) {
      var secondaryDiagnoses = this.getSecondaryDiagnoses(visits);
      return this._diagnosisListToString(secondaryDiagnoses);
    },

    _generateAdmissionOrDischargeReport: function _generateAdmissionOrDischargeReport(visits, reportType) {
      var _this = this;

      var detailedReport = false,
          reportColumns,
          patientBySex = {};
      if (reportType.indexOf('detailed') > -1) {
        detailedReport = true;
        reportColumns = this.get('admissionDetailReportColumns');
        reportColumns.patientDays.include = false;
        if (reportType === 'detailedDischarges') {
          reportColumns.dischargeDate.include = true;
        } else {
          reportColumns.dischargeDate.include = false;
        }
      } else {
        reportColumns = this.get('admissionReportColumns');
      }
      visits = visits.filter(this._filterInPatientVisit);
      visits.forEach((function (visit) {
        if (!this.get('isDischargeReport') || !_ember['default'].isEmpty(visit.get('endDate'))) {
          var reportRow = {
            patient: visit.get('patient'),
            patientId: visit.get('patient.displayPatientId'),
            patientName: visit.get('patient.displayName'),
            admissionDate: visit.get('startDate'),
            dischargeDate: visit.get('endDate')
          };
          var sexGrouping = patientBySex[visit.get('patient.sex')];
          if (!sexGrouping) {
            sexGrouping = {
              count: 0,
              rows: []
            };
            patientBySex[visit.get('patient.sex')] = sexGrouping;
          }
          sexGrouping.count++;
          sexGrouping.rows.push(reportRow);
        }
      }).bind(this));
      var sexTotal = 0;
      var addPatientBySexRows = function addPatientBySexRows(reportRow) {
        _this._addReportRow(reportRow, false, reportColumns);
      };
      for (var sex in patientBySex) {
        if (detailedReport) {
          patientBySex[sex].rows.forEach(addPatientBySexRows);
          this._addReportRow({ patientId: sex + ' Total: ' + patientBySex[sex].count }, true, reportColumns);
        } else {
          this._addReportRow({ sex: sex, total: patientBySex[sex].count }, true, reportColumns);
        }
        sexTotal += patientBySex[sex].count;
      }
      this._addReportRow({ patientId: 'Grand Total: ' + sexTotal }, true, reportColumns);
      this._finishReport(reportColumns);
    },

    _generateDiagnosticReport: function _generateDiagnosticReport() {
      this._findDiagnosticsByDate().then((function (diagnostics) {
        var reportColumns = this.get('diagnosticReportColumns');
        this._addRowsByType(diagnostics.imaging, 'imagingType.name', 'Total for imaging: ', reportColumns);
        this._addRowsByType(diagnostics.labs, 'labType.name', 'Total for labs: ', reportColumns);
        this._finishReport(reportColumns);
      }).bind(this), (function (err) {
        this._notifyReportError('Error in _generateDiagnosticReport:' + err);
      }).bind(this));
    },

    _generatePatientDaysReport: function _generatePatientDaysReport(visits, reportType) {
      visits = visits.filter(this._filterInPatientVisit);
      var detailed = reportType.indexOf('detailed') === 0,
          reportEndDate = this.get('endDate'),
          reportColumns,
          reportStartDate = moment(this.get('startDate')).startOf('day');
      if (detailed) {
        reportColumns = this.get('admissionDetailReportColumns');
        reportColumns.patientDays.include = true;
        reportColumns.dischargeDate.include = true;
      } else {
        reportColumns = {
          total: {
            label: 'Total',
            include: true,
            property: 'total',
            format: '_numberFormat'
          }
        };
      }
      if (_ember['default'].isEmpty(reportEndDate)) {
        reportEndDate = moment().endOf('day');
      } else {
        reportEndDate = moment(reportEndDate).endOf('day');
      }
      var patientDays = visits.reduce((function (previousValue, visit) {
        var calcEndDate = visit.get('endDate'),
            calcStartDate = moment(visit.get('startDate')).startOf('day');
        if (_ember['default'].isEmpty(calcEndDate)) {
          calcEndDate = moment().endOf('day');
        } else {
          calcEndDate = moment(calcEndDate).endOf('day');
        }
        if (calcStartDate.isBefore(reportStartDate)) {
          calcStartDate = reportStartDate;
        }
        if (calcEndDate.isAfter(reportEndDate)) {
          calcEndDate = reportEndDate;
        }
        var daysDiff = calcEndDate.diff(calcStartDate, 'days', true);
        if (detailed) {
          this._addReportRow({
            patient: visit.get('patient'),
            patientId: visit.get('patient.displayPatientId'),
            patientName: visit.get('patient.displayName'),
            admissionDate: visit.get('startDate'),
            dischargeDate: visit.get('endDate'),
            patientDays: daysDiff
          }, false, reportColumns);
        }
        return previousValue += daysDiff;
      }).bind(this), 0);
      if (detailed) {
        this._addReportRow({ patientDays: 'Total: ' + this._numberFormat(patientDays) }, true, reportColumns);
      } else {
        this._addReportRow({ total: patientDays }, false, reportColumns);
      }
      this._finishReport(reportColumns);
    },

    _generateProcedureReport: function _generateProcedureReport(reportType) {
      this._findProceduresByDate().then((function (procedures) {
        var reportColumns;
        procedures = procedures.filter(function (procedure) {
          var visit = procedure.get('visit');
          if (_ember['default'].isEmpty(visit) || _ember['default'].isEmpty(visit.get('patient.id'))) {
            return false;
          } else {
            return true;
          }
        });
        if (reportType.indexOf('detailed') === 0) {
          reportColumns = this.get('procedureDetailReportColumns');
          var patientPromises = {};
          procedures.forEach((function (procedure) {
            var visit = procedure.get('visit');
            if (!_ember['default'].isEmpty(visit)) {
              patientPromises[procedure.get('id')] = this._getPatientDetails(visit.get('patient.id'));
            }
          }).bind(this));

          _ember['default'].RSVP.hash(patientPromises).then((function (resolutionHash) {
            procedures.forEach(function (procedure) {
              procedure.set('patient', resolutionHash[procedure.get('id')]);
            });
            var procedureTotals = this._totalByType(procedures, 'description', 'all procedures');
            this._addPatientProcedureRows(procedureTotals, reportColumns);
            this._finishReport(reportColumns);
          }).bind(this), (function (err) {
            this._notifyReportError('Error in  _generateProcedureReport:' + err);
          }).bind(this));
        } else {
          reportColumns = this.get('diagnosticReportColumns');
          this._addRowsByType(procedures, 'description', 'Total procedures: ', reportColumns);
          this._finishReport(reportColumns);
        }
      }).bind(this), (function (err) {
        this._notifyReportError('Error in _generateProcedureReport:' + err);
      }).bind(this));
    },

    _generateStatusReport: function _generateStatusReport() {
      this._findPatientsByStatus().then((function (patients) {
        var reportColumns = this.get('statusReportColumns'),
            sortedPatients = patients.sortBy('lastName', 'firstName');
        this._getPatientVisits(sortedPatients).then((function (resolvedPatients) {
          resolvedPatients.forEach((function (patient) {
            this._addReportRow({ patient: patient }, false, reportColumns);
          }).bind(this));
          this._finishReport(reportColumns);
        }).bind(this))['catch']((function (err) {
          this._notifyReportError('Error in _generateStatusReport:' + err);
        }).bind(this));
      }).bind(this))['catch']((function (err) {
        this._notifyReportError('Error in _generateStatusReport:' + err);
      }).bind(this));
    },

    _generateVisitReport: function _generateVisitReport(visits) {
      var reportColumns = this.get('reportColumns'),
          visitFilters = this.getProperties('examiner', 'visitDate', 'visitType', 'location', 'clinic', 'primaryDiagnosis', 'secondaryDiagnosis');
      for (var filter in visitFilters) {
        if (!_ember['default'].isEmpty(visitFilters[filter])) {
          switch (filter) {
            case 'diagnosis':
              {
                visits = this._filterByLike(visits, 'diagnosisList', visitFilters[filter]);
                break;
              }
            default:
              {
                visits = visits.filterBy(filter, visitFilters[filter]);
                break;
              }
          }
        }
      }
      if (reportColumns.procedures.include) {
        var promisesMap = {};
        visits.forEach(function (visit) {
          promisesMap[visit.get('id')] = visit.get('procedures');
        });
        _ember['default'].RSVP.hash(promisesMap).then((function (resolutionHash) {
          visits.forEach(function (visit) {
            visit.set('resolvedProcedures', resolutionHash[visit.get('id')]);
          });
          this._finishVisitReport(visits);
        }).bind(this));
      } else {
        this._finishVisitReport(visits);
      }
    },

    _getPatientDetails: function _getPatientDetails(patientId) {
      var patientDetails = this.get('patientDetails');
      if (!_ember['default'].isEmpty(patientDetails[patientId])) {
        return _ember['default'].RSVP.resolve(patientDetails[patientId]);
      } else {
        return this.store.find('patient', patientId);
      }
    },

    _getPatientVisits: function _getPatientVisits(patients) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var visitHash = {};
        patients.forEach((function (patient) {
          visitHash[patient.get('id')] = this.getPatientVisits(patient);
        }).bind(this));
        _ember['default'].RSVP.hash(visitHash).then(function (resolvedHash) {
          patients.forEach(function (patient) {
            patient.set('visits', resolvedHash[patient.get('id')]);
          });
          resolve(patients);
        }, reject);
      }).bind(this));
    },

    _haveLikeValue: function _haveLikeValue(valueToCompare, likeCondition) {
      return valueToCompare.toLowerCase().indexOf(likeCondition.toLowerCase()) > -1;
    },

    _listToString: function _listToString(items, descField, dateField) {
      var itemList = [];
      if (!_ember['default'].isEmpty(items)) {
        itemList = items.map((function (item) {
          return _ember['default'].get(item, descField) + '(' + this._dateFormat(_ember['default'].get(item, dateField)) + ')';
        }).bind(this));
      }
      return itemList.join(',\n');
    },

    /**
     * Given a list of records, total them by type and also add a grand total.
     * @param records {Array} list of records to total.
     * @param typeField {String} the field in the records containing the type.
     * @param totalLabel {String} the label for the grand total.
     * @param reportColumns
     */
    _totalByType: function _totalByType(records, typeField, totalLabel) {
      var total = 0,
          types = [];
      records.forEach(function (record) {
        var type = record.get(typeField),
            typeObject;
        if (!_ember['default'].isEmpty(type)) {
          typeObject = types.find(function (item) {
            var itemType = item.type;
            return itemType.trim().toLowerCase() === type.toLowerCase();
          });
          if (_ember['default'].isEmpty(typeObject)) {
            typeObject = {
              type: type.trim(),
              total: 0,
              records: []
            };
            types.push(typeObject);
          }
          typeObject.total++;
          typeObject.records.push(record);
          total++;
        }
      });
      types = types.sortBy('type');
      types.push({ type: totalLabel, total: total });
      return types;
    },

    _procedureListToString: function _procedureListToString(procedures) {
      return this._listToString(procedures, 'description', 'procedureDate');
    },

    _validateDates: function _validateDates() {
      var alertMessage,
          endDate = this.get('endDate'),
          isValid = true,
          reportType = this.get('reportType'),
          startDate = this.get('startDate');
      if (reportType === 'status') {
        return true;
      }
      if (_ember['default'].isEmpty(startDate)) {
        alertMessage = 'Please enter a start date.';
        isValid = false;
      } else if (!_ember['default'].isEmpty(endDate) && endDate.getTime() < startDate.getTime()) {
        alertMessage = 'Please enter an end date after the start date.';
        isValid = false;
      }
      if (!isValid) {
        this.displayAlert('Error Generating Report', alertMessage);
      }
      return isValid;
    },

    actions: {
      generateReport: function generateReport() {
        if (this._validateDates()) {
          var reportRows = this.get('reportRows'),
              reportType = this.get('reportType');
          reportRows.clear();
          this.showProgressModal();
          switch (reportType) {
            case 'diagnostic':
              {
                this._generateDiagnosticReport();
                break;
              }
            case 'detailedProcedures':
            case 'procedures':
              {
                this._generateProcedureReport(reportType);
                break;
              }
            case 'admissions':
            case 'discharges':
            case 'detailedAdmissions':
            case 'detailedDischarges':
            case 'detailedPatientDays':
            case 'patientDays':
            case 'visit':
              {
                this._findVisitsByDate().then((function (visits) {
                  switch (reportType) {
                    case 'admissions':
                    case 'detailedAdmissions':
                    case 'detailedDischarges':
                    case 'discharges':
                      {
                        this._generateAdmissionOrDischargeReport(visits, reportType);
                        break;
                      }
                    case 'detailedPatientDays':
                    case 'patientDays':
                      {
                        this._generatePatientDaysReport(visits, reportType);
                        break;
                      }
                    case 'visit':
                      {
                        this._generateVisitReport(visits);
                        break;
                      }
                  }
                }).bind(this), (function (err) {
                  this._notifyReportError('Error in _findVisitsByDate:' + err);
                }).bind(this));
                break;
              }
            case 'status':
              {
                this._generateStatusReport();
                break;
              }
          }
        }
      },
      viewPatient: function viewPatient(id) {
        this.store.find('patient', id).then((function (item) {
          item.set('returnTo', 'patients.reports');
          this.transitionToRoute('patients.edit', item);
        }).bind(this));
      }

    }
  });
});
define('hospitalrun/patients/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({
    pageTitle: (0, _emberI18n.translationMacro)('patients.titles.patient_report'),

    // No model for reports; data gets retrieved when report is run.
    model: function model() {
      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));
    }

  });
});
define("hospitalrun/patients/reports/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 12
              },
              "end": {
                "line": 23,
                "column": 12
              }
            },
            "moduleName": "hospitalrun/patients/reports/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-select", [], ["property", "status", "label", "Patient Status", "content", ["subexpr", "@mut", [["get", "statusList", ["loc", [null, [20, 28], [20, 38]]]]], [], []], "prompt", " "], ["loc", [null, [19, 16], [22, 18]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 12
              },
              "end": {
                "line": 32,
                "column": 12
              }
            },
            "moduleName": "hospitalrun/patients/reports/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "data-test-selector", "select-report-start-date");
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "data-test-selector", "select-report-end-date");
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element9, [3]), 1, 1);
            return morphs;
          },
          statements: [["inline", "date-picker", [], ["property", "startDate", "label", "Start Date", "class", "col-sm-4"], ["loc", [null, [26, 18], [26, 90]]]], ["inline", "date-picker", [], ["property", "endDate", "label", "End Date", "class", "col-sm-4"], ["loc", [null, [29, 18], [29, 86]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 12
              },
              "end": {
                "line": 87,
                "column": 12
              }
            },
            "moduleName": "hospitalrun/patients/reports/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "form-group col-xs-12");
            var el3 = dom.createTextNode("\n                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h3");
            var el2 = dom.createTextNode("Fields to Include");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(fragment, [3]);
            var element6 = dom.childAt(fragment, [9]);
            var element7 = dom.childAt(fragment, [11]);
            var element8 = dom.childAt(fragment, [13]);
            var morphs = new Array(20);
            morphs[0] = dom.createMorphAt(element4, 1, 1);
            morphs[1] = dom.createMorphAt(element4, 3, 3);
            morphs[2] = dom.createMorphAt(element5, 1, 1);
            morphs[3] = dom.createMorphAt(element5, 3, 3);
            morphs[4] = dom.createMorphAt(dom.childAt(fragment, [5, 1]), 1, 1);
            morphs[5] = dom.createMorphAt(element6, 3, 3);
            morphs[6] = dom.createMorphAt(element6, 5, 5);
            morphs[7] = dom.createMorphAt(element6, 7, 7);
            morphs[8] = dom.createMorphAt(element6, 9, 9);
            morphs[9] = dom.createMorphAt(element6, 11, 11);
            morphs[10] = dom.createMorphAt(element7, 3, 3);
            morphs[11] = dom.createMorphAt(element7, 5, 5);
            morphs[12] = dom.createMorphAt(element7, 7, 7);
            morphs[13] = dom.createMorphAt(element7, 9, 9);
            morphs[14] = dom.createMorphAt(element7, 11, 11);
            morphs[15] = dom.createMorphAt(element8, 3, 3);
            morphs[16] = dom.createMorphAt(element8, 5, 5);
            morphs[17] = dom.createMorphAt(element8, 7, 7);
            morphs[18] = dom.createMorphAt(element8, 9, 9);
            morphs[19] = dom.createMorphAt(element8, 11, 11);
            return morphs;
          },
          statements: [["inline", "em-select", [], ["class", "col-sm-6", "label", "Visit Type", "property", "visitType", "content", ["subexpr", "@mut", [["get", "visitTypes", ["loc", [null, [36, 53], [36, 63]]]]], [], []], "prompt", " "], ["loc", [null, [35, 20], [38, 22]]]], ["inline", "em-select", [], ["class", "col-sm-6", "label", "Examiner", "property", "examiner", "content", ["subexpr", "@mut", [["get", "physicianList", ["loc", [null, [40, 52], [40, 65]]]]], [], []], "prompt", " "], ["loc", [null, [39, 20], [42, 22]]]], ["inline", "em-select", [], ["class", "col-sm-6", "label", "Location", "property", "location", "content", ["subexpr", "@mut", [["get", "locationList", ["loc", [null, [46, 52], [46, 64]]]]], [], []], "prompt", " "], ["loc", [null, [45, 20], [48, 22]]]], ["inline", "em-select", [], ["class", "col-sm-6", "label", "Clinic", "property", "clinic", "content", ["subexpr", "@mut", [["get", "clinicList", ["loc", [null, [50, 50], [50, 60]]]]], [], []], "prompt", " "], ["loc", [null, [49, 20], [52, 22]]]], ["inline", "select-or-typeahead", [], ["property", "diagnosis", "label", "Diagnosis", "list", ["subexpr", "@mut", [["get", "diagnosisList", ["loc", [null, [57, 51], [57, 64]]]]], [], []]], ["loc", [null, [56, 24], [58, 26]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.id.label", ["loc", [null, [65, 40], [65, 62]]]]], [], []], "property", "reportColumns.id.include", "class", "col-xs-2"], ["loc", [null, [65, 20], [65, 117]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.name.label", ["loc", [null, [66, 40], [66, 64]]]]], [], []], "property", "reportColumns.name.include", "class", "col-xs-2"], ["loc", [null, [66, 20], [66, 121]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.age.label", ["loc", [null, [67, 40], [67, 63]]]]], [], []], "property", "reportColumns.age.include", "class", "col-xs-2"], ["loc", [null, [67, 20], [67, 119]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.contacts.label", ["loc", [null, [68, 40], [68, 68]]]]], [], []], "property", "reportColumns.contacts.include", "class", "col-xs-2"], ["loc", [null, [68, 20], [68, 129]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.dateOfBirth.label", ["loc", [null, [69, 40], [69, 71]]]]], [], []], "property", "reportColumns.dateOfBirth.include", "class", "col-xs-2"], ["loc", [null, [69, 20], [69, 135]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.examiner.label", ["loc", [null, [73, 40], [73, 68]]]]], [], []], "property", "reportColumns.examiner.include", "class", "col-xs-2"], ["loc", [null, [73, 20], [73, 129]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.sex.label", ["loc", [null, [74, 40], [74, 63]]]]], [], []], "property", "reportColumns.sex.include", "class", "col-xs-2"], ["loc", [null, [74, 20], [74, 119]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.primaryDiagnosis.label", ["loc", [null, [75, 40], [75, 76]]]]], [], []], "property", "reportColumns.primaryDiagnosis.include", "class", "col-xs-2"], ["loc", [null, [75, 20], [75, 145]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.procedures.label", ["loc", [null, [76, 40], [76, 70]]]]], [], []], "property", "reportColumns.procedures.include", "class", "col-xs-2"], ["loc", [null, [76, 20], [76, 133]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.referredBy.label", ["loc", [null, [77, 40], [77, 70]]]]], [], []], "property", "reportColumns.referredBy.include", "class", "col-xs-2"], ["loc", [null, [77, 20], [77, 133]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.referredDate.label", ["loc", [null, [81, 40], [81, 72]]]]], [], []], "property", "reportColumns.referredDate.include", "class", "col-xs-2"], ["loc", [null, [81, 20], [81, 137]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.secondaryDiagnoses.label", ["loc", [null, [82, 40], [82, 78]]]]], [], []], "property", "reportColumns.secondaryDiagnoses.include", "class", "col-xs-2"], ["loc", [null, [82, 20], [82, 149]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.visitDate.label", ["loc", [null, [83, 40], [83, 69]]]]], [], []], "property", "reportColumns.visitDate.include", "class", "col-xs-2"], ["loc", [null, [83, 20], [83, 131]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.visitLocation.label", ["loc", [null, [84, 40], [84, 73]]]]], [], []], "property", "reportColumns.visitLocation.include", "class", "col-xs-2"], ["loc", [null, [84, 20], [84, 139]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "reportColumns.visitType.label", ["loc", [null, [85, 40], [85, 69]]]]], [], []], "property", "reportColumns.visitType.include", "class", "col-xs-2"], ["loc", [null, [85, 20], [85, 131]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/patients/reports/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          dom.setAttribute(el1, "data-test-selector", "select-report-type");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group col-xs-6");
          var el3 = dom.createTextNode("\n                  ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label");
          dom.setAttribute(el3, "for", "report-type");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                  ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element10, 3, 3);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["inventory.reports.report_type"], [], ["loc", [null, [6, 65], [6, 102]]]], ["inline", "select-list", [], ["action", ["subexpr", "action", [["subexpr", "mut", [["get", "reportType", ["loc", [null, [8, 40], [8, 50]]]]], [], ["loc", [null, [8, 35], [8, 51]]]]], [], ["loc", [null, [8, 27], [8, 52]]]], "class", "form-control", "content", ["subexpr", "@mut", [["get", "reportTypes", ["loc", [null, [10, 28], [10, 39]]]]], [], []], "id", "report-type", "optionValuePath", "value", "optionLabelPath", "name", "value", ["subexpr", "@mut", [["get", "reportType", ["loc", [null, [14, 26], [14, 36]]]]], [], []]], ["loc", [null, [7, 18], [15, 20]]]], ["block", "if", [["get", "isStatusReport", ["loc", [null, [18, 18], [18, 32]]]]], [], 0, 1, ["loc", [null, [18, 12], [32, 19]]]], ["block", "if", [["get", "isVisitReport", ["loc", [null, [33, 18], [33, 31]]]]], [], 2, null, ["loc", [null, [33, 12], [87, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 102,
                "column": 20
              },
              "end": {
                "line": 106,
                "column": 20
              }
            },
            "moduleName": "hospitalrun/patients/reports/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "reportHeader", ["loc", [null, [104, 28], [104, 44]]]]],
          locals: ["reportHeader"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 94,
              "column": 0
            },
            "end": {
              "line": 116,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/reports/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          dom.setAttribute(el4, "class", "table-header");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-footer");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "target", "_blank");
          dom.setAttribute(el3, "download", "report.csv");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [3, 1]);
          var element3 = dom.childAt(element0, [5, 1]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element1, 0, 0);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[3] = dom.createMorphAt(element2, 3, 3);
          morphs[4] = dom.createAttrMorph(element3, 'href');
          morphs[5] = dom.createMorphAt(element3, 0, 0);
          return morphs;
        },
        statements: [["content", "reportTitle", ["loc", [null, [97, 36], [97, 51]]]], ["inline", "nav-paging", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [97, 80], [97, 95]]]]], [], []]], ["loc", [null, [97, 51], [97, 98]]]], ["block", "each", [["get", "reportHeaders", ["loc", [null, [102, 28], [102, 41]]]]], [], 0, null, ["loc", [null, [102, 20], [106, 29]]]], ["inline", "partial", ["report-rows"], [], ["loc", [null, [108, 16], [108, 41]]]], ["attribute", "href", ["get", "csvExport", ["loc", [null, [112, 22], [112, 31]]]]], ["inline", "t", ["inventory.reports.export"], [], ["loc", [null, [112, 96], [112, 128]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 117,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/reports/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-primary");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-footer");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "btn btn-default");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [0]);
        var element12 = dom.childAt(element11, [3, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[1] = dom.createElementMorph(element12);
        morphs[2] = dom.createMorphAt(element12, 0, 0);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "this", ["loc", [null, [3, 25], [3, 29]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [3, 8], [88, 20]]]], ["element", "action", ["generateReport"], [], ["loc", [null, [91, 40], [91, 67]]]], ["inline", "t", ["inventory.reports.generate"], [], ["loc", [null, [91, 68], [91, 102]]]], ["block", "if", [["get", "showReportResults", ["loc", [null, [94, 6], [94, 23]]]]], [], 1, null, ["loc", [null, [94, 0], [116, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('hospitalrun/patients/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember', 'hospitalrun/mixins/patient-id', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _ember, _hospitalrunMixinsPatientId, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsPatientId['default'], {
    addCapability: 'add_patient',
    additionalModels: [{
      name: 'addressOptions',
      findArgs: ['option', 'address_options']
    }, {
      name: 'clinicList',
      findArgs: ['lookup', 'clinic_list']
    }, {
      name: 'countryList',
      findArgs: ['lookup', 'country_list']
    }, {
      name: 'customSocialForm',
      findArgs: ['option', 'custom_form_social']
    }, {
      name: 'diagnosisList',
      findArgs: ['lookup', 'diagnosis_list']
    }, {
      name: 'locationList',
      findArgs: ['lookup', 'visit_location_list']
    }, {
      name: 'physicianList',
      findArgs: ['lookup', 'physician_list']
    }, {
      name: 'pricingProfiles',
      findArgs: ['price-profile']
    }, {
      name: 'sexList',
      findArgs: ['lookup', 'sex']
    }, {
      name: 'statusList',
      findArgs: ['lookup', 'patient_status_list']
    }, {
      name: 'visitTypesList',
      findArgs: ['lookup', 'visit_types']
    }],

    actions: {
      createNewVisit: function createNewVisit(patient, visits) {
        var lastVisit = visits.get('lastObject'),
            propertiesToSet = {};

        if (!_ember['default'].isEmpty(lastVisit)) {
          propertiesToSet = lastVisit.getProperties('primaryDiagnosis', 'primaryBillingDiagnosis');
        }
        propertiesToSet.patient = patient;

        this.transitionTo('visits.edit', 'new').then((function (newRoute) {
          newRoute.currentModel.setProperties(propertiesToSet);
        }).bind(this));
      }
    },
    newButtonText: (0, _emberI18n.translationMacro)('patients.buttons.new_patient'),
    moduleName: 'patients'
  });
});
define('hospitalrun/patients/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {
  exports['default'] = _hospitalrunPatientsIndexController['default'].extend();
});
define('hospitalrun/patients/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {
  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({
    moduleName: 'patients',
    searchKeys: [{
      name: 'friendlyId',
      type: 'contains'
    }, {
      name: 'externalPatientId',
      type: 'contains'
    }, {
      name: 'firstName',
      type: 'fuzzy'
    }, {
      name: 'lastName',
      type: 'fuzzy'
    }, {
      name: 'phone',
      type: 'contains'
    }],
    searchModel: 'patient'
  });
});
define("hospitalrun/patients/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/search/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["patients/index"], [], ["loc", [null, [2, 4], [2, 32]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 19
          }
        },
        "moduleName": "hospitalrun/patients/search/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "search-listing", [], ["newButtonText", "New Patient", "allButtonText", "All Patients"], 0, null, ["loc", [null, [1, 0], [3, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/socialwork/expense/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/utils/select-values', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunUtilsSelectValues, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {
    patientsController: _ember['default'].inject.controller('patients'),

    categoryTypes: ['Clothing', 'Education', 'Electricity', 'Food', 'Fuel', 'Other', 'Rent', 'Transportation', 'Water'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),

    editController: _ember['default'].computed.alias('patientsController'),
    showUpdateButton: true,
    title: (0, _emberI18n.translationMacro)('patients.titles.social_work'),
    updateButtonAction: 'update',

    updateButtonText: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return this.get('i18n').t('buttons.add');
      } else {
        return this.get('i18n').t('buttons.add');
      }
    }).property('model.isNew'),

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      update: function update() {
        var model = this.get('model');
        this.get('editController').send('updateExpense', model);
      }
    }
  });
});
define("hospitalrun/patients/socialwork/expense/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/socialwork/expense/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-select", [], ["label", ["subexpr", "t", ["inventory.reports.rows.category"], [], ["loc", [null, [9, 22], [9, 59]]]], "property", "category", "class", "required", "content", ["subexpr", "@mut", [["get", "categoryTypes", ["loc", [null, [10, 14], [10, 27]]]]], [], []], "prompt", " "], ["loc", [null, [9, 4], [12, 6]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["patients.labels.sources"], [], ["loc", [null, [13, 21], [13, 50]]]], "property", "sources"], ["loc", [null, [13, 4], [13, 71]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["patients.labels.cost"], [], ["loc", [null, [14, 21], [14, 47]]]], "property", "cost", "class", "required"], ["loc", [null, [14, 4], [14, 82]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/socialwork/expense/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 19], [8, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [8, 2], [15, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/socialwork/expense/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "hideUpdateButton", ["subexpr", "@mut", [["get", "hideUpdateButton", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [4, 21], [4, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [5, 10], [5, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [6, 23], [6, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [7, 21], [7, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [16, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/patients/socialwork/family-info/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {
    patientsController: _ember['default'].inject.controller('patients'),

    editController: _ember['default'].computed.alias('patientsController'),
    showUpdateButton: true,
    title: t('patients.titles.family_info'),
    updateButtonAction: 'update',

    updateButtonText: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return this.get('i18n').t('buttons.add');
      } else {
        return this.get('i18n').t('buttons.add');
      }
    }).property('model.isNew'),

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      update: function update() {
        var model = this.get('model');
        this.get('editController').send('updateFamilyInfo', model);
      }
    }
  });
});
define("hospitalrun/patients/socialwork/family-info/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/patients/socialwork/family-info/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var element3 = dom.childAt(fragment, [7]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            morphs[3] = dom.createMorphAt(element1, 3, 3);
            morphs[4] = dom.createMorphAt(element2, 1, 1);
            morphs[5] = dom.createMorphAt(element2, 3, 3);
            morphs[6] = dom.createMorphAt(element3, 1, 1);
            morphs[7] = dom.createMorphAt(element3, 3, 3);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.name", ["loc", [null, [10, 26], [10, 37]]]]], [], ["loc", [null, [10, 23], [10, 38]]]], "property", "name", "class", "required col-xs-6"], ["loc", [null, [10, 6], [10, 82]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.age", ["loc", [null, [11, 26], [11, 36]]]]], [], ["loc", [null, [11, 23], [11, 37]]]], "property", "age", "class", "col-xs-3"], ["loc", [null, [11, 6], [11, 71]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.civil_status", ["loc", [null, [14, 26], [14, 45]]]]], [], ["loc", [null, [14, 23], [14, 46]]]], "property", "civilStatus", "class", "col-xs-6"], ["loc", [null, [14, 6], [14, 88]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.relationship", ["loc", [null, [15, 26], [15, 45]]]]], [], ["loc", [null, [15, 23], [15, 46]]]], "property", "relationship", "class", "col-xs-6"], ["loc", [null, [15, 6], [15, 89]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.education", ["loc", [null, [18, 26], [18, 42]]]]], [], ["loc", [null, [18, 23], [18, 43]]]], "property", "education", "class", "col-xs-6"], ["loc", [null, [18, 6], [18, 83]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.occupation", ["loc", [null, [19, 26], [19, 43]]]]], [], ["loc", [null, [19, 23], [19, 44]]]], "property", "occupation", "class", "col-xs-6"], ["loc", [null, [19, 6], [19, 84]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.income", ["loc", [null, [22, 26], [22, 39]]]]], [], ["loc", [null, [22, 23], [22, 40]]]], "property", "income", "class", "col-xs-6"], ["loc", [null, [22, 6], [22, 77]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", [["get", "labels.insurance", ["loc", [null, [23, 26], [23, 42]]]]], [], ["loc", [null, [23, 23], [23, 43]]]], "property", "insurance", "class", "col-xs-6"], ["loc", [null, [23, 6], [23, 83]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/patients/socialwork/family-info/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 19], [8, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [8, 2], [25, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/patients/socialwork/family-info/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "hideUpdateButton", ["subexpr", "@mut", [["get", "hideUpdateButton", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [4, 21], [4, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [5, 10], [5, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [6, 23], [6, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [7, 21], [7, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [26, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    title: 'Delete Pricing Item'
  });
});
define("hospitalrun/pricing/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/pricing/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["billing.alerts.delete_item"], ["item", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [8, 42], [8, 52]]]]], [], []]], ["loc", [null, [8, 4], [8, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/lab-pricing-types', 'hospitalrun/mixins/imaging-pricing-types', 'hospitalrun/mixins/return-to', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsLabPricingTypes, _hospitalrunMixinsImagingPricingTypes, _hospitalrunMixinsReturnTo, _hospitalrunUtilsSelectValues) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsLabPricingTypes['default'], _hospitalrunMixinsImagingPricingTypes['default'], _hospitalrunMixinsReturnTo['default'], {
    pricingController: _ember['default'].inject.controller('pricing'),

    actions: {
      addOverride: function addOverride(override) {
        var pricingOverrides = this.get('model.pricingOverrides');
        pricingOverrides.addObject(override);
        this.send('update', true);
        this.send('closeModal');
      },
      deleteOverride: function deleteOverride(model) {
        var overrideToDelete = model.overrideToDelete,
            pricingOverrides = this.get('model.pricingOverrides');
        pricingOverrides.removeObject(overrideToDelete);
        overrideToDelete.destroyRecord().then((function () {
          this.send('update', true);
          this.send('closeModal');
        }).bind(this));
      },
      editOverride: function editOverride(overrideToEdit) {
        if (_ember['default'].isEmpty(overrideToEdit)) {
          overrideToEdit = this.store.createRecord('override-price');
        }
        this.send('openModal', 'pricing.override', overrideToEdit);
      },
      showDeleteOverride: function showDeleteOverride(overrideToDelete) {
        var message = 'Are you sure you want to delete this override?',
            model = _ember['default'].Object.create({
          overrideToDelete: overrideToDelete
        }),
            title = 'Delete Override';
        this.displayConfirm(title, message, 'deleteOverride', model);
      }
    },

    categories: ['Imaging', 'Lab', 'Procedure', 'Ward'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),
    expenseAccountList: _ember['default'].computed.alias('pricingController.expenseAccountList'),
    imagingPricingTypes: _ember['default'].computed.alias('pricingController.imagingPricingTypes'),
    labPricingTypes: _ember['default'].computed.alias('pricingController.labPricingTypes'),
    procedurePricingTypes: _ember['default'].computed.alias('pricingController.procedurePricingTypes'),
    wardPricingTypes: _ember['default'].computed.alias('pricingController.wardPricingTypes'),

    lookupListsToUpdate: (function () {
      var category = this.get('model.category').toLowerCase(),
          listsToUpdate = [{
        name: 'expenseAccountList',
        property: 'model.expenseAccount',
        id: 'expense_account_list'
      }];
      listsToUpdate.push({
        name: category + 'PricingTypes',
        property: 'model.pricingType',
        id: category + '_pricing_types'
      });
      return listsToUpdate;
    }).property('model.category'),

    pricingTypes: (function () {
      var category = this.get('model.category');
      if (!_ember['default'].isEmpty(category)) {
        var typesList = this.get(category.toLowerCase() + 'PricingTypes');
        if (_ember['default'].isEmpty(typesList) || _ember['default'].isEmpty(typesList.get('value'))) {
          if (category === 'Lab') {
            return _ember['default'].Object.create({ value: this.defaultLabPricingTypes });
          } else if (category === 'Imaging') {
            return _ember['default'].Object.create({ value: this.defaultImagingPricingTypes });
          }
        }
        return typesList;
      }
    }).property('model.category'),

    updateCapability: 'add_pricing',

    afterUpdate: function afterUpdate(record) {
      var message = 'The pricing record for ' + record.get('name') + ' has been saved.';
      this.displayAlert('Pricing Item Saved', message);
    }
  });
});
define('hospitalrun/pricing/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({
    editTitle: 'Edit Pricing Item',
    modelName: 'pricing',
    newTitle: 'New Pricing Item',

    actions: {
      deleteOverride: function deleteOverride(overrideToDelete) {
        this.controller.send('deleteOverride', overrideToDelete);
      }
    },

    getNewData: function getNewData(params) {
      var newCategory = params.pricing_id.substr(3);
      if (_ember['default'].isEmpty(newCategory)) {
        newCategory = 'Imaging';
      }
      return _ember['default'].RSVP.resolve({
        category: newCategory
      });
    },

    model: function model(params) {
      var idParam = this.get('idParam');
      if (!_ember['default'].isEmpty(idParam) && params[idParam].indexOf('new') === 0) {
        return this._createNewRecord(params);
      } else {
        return this._super(params);
      }
    }

  });
});
define("hospitalrun/pricing/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 10
                },
                "end": {
                  "line": 20,
                  "column": 10
                }
              },
              "moduleName": "hospitalrun/pricing/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-primary align-right");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "octicon octicon-plus");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element3);
              morphs[1] = dom.createMorphAt(element3, 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["editOverride"], ["bubbles", false], ["loc", [null, [19, 56], [19, 96]]]], ["inline", "t", ["billing.buttons.add_override"], [], ["loc", [null, [19, 139], [19, 175]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 14
                },
                "end": {
                  "line": 31,
                  "column": 14
                }
              },
              "moduleName": "hospitalrun/pricing/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [30, 20], [30, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 38,
                    "column": 18
                  },
                  "end": {
                    "line": 43,
                    "column": 18
                  }
                },
                "moduleName": "hospitalrun/pricing/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-default neutral");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-default warning");
                var el2 = dom.createTextNode("\n                      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "octicon octicon-x");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(fragment, [3]);
                var morphs = new Array(4);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                morphs[2] = dom.createElementMorph(element1);
                morphs[3] = dom.createMorphAt(element1, 3, 3);
                return morphs;
              },
              statements: [["element", "action", ["editOverride", ["get", "override", ["loc", [null, [39, 84], [39, 92]]]]], [], ["loc", [null, [39, 60], [39, 94]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [39, 95], [39, 114]]]], ["element", "action", ["showDeleteOverride", ["get", "override", ["loc", [null, [40, 90], [40, 98]]]]], ["bubbles", false], ["loc", [null, [40, 60], [40, 115]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [41, 63], [41, 85]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 12
                },
                "end": {
                  "line": 46,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/pricing/edit/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "override-profile");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
              return morphs;
            },
            statements: [["content", "override.profile.name", ["loc", [null, [35, 45], [35, 70]]]], ["content", "override.price", ["loc", [null, [36, 20], [36, 38]]]], ["block", "if", [["get", "showUpdateButton", ["loc", [null, [38, 24], [38, 40]]]]], [], 0, null, ["loc", [null, [38, 18], [43, 25]]]]],
            locals: ["override"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 51,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/pricing/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-body detail-section-content");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("table");
            dom.setAttribute(el3, "class", "table");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("tbody");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("tr");
            dom.setAttribute(el5, "class", "table-header");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("th");
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("th");
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [3]);
            var element5 = dom.childAt(fragment, [5]);
            var element6 = dom.childAt(fragment, [7]);
            var element7 = dom.childAt(element6, [1, 1]);
            var element8 = dom.childAt(element6, [3, 1, 1]);
            var element9 = dom.childAt(element8, [1]);
            var morphs = new Array(11);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(element4, 1, 1);
            morphs[2] = dom.createMorphAt(element4, 3, 3);
            morphs[3] = dom.createMorphAt(element5, 1, 1);
            morphs[4] = dom.createMorphAt(element5, 3, 3);
            morphs[5] = dom.createMorphAt(element7, 1, 1);
            morphs[6] = dom.createMorphAt(element7, 3, 3);
            morphs[7] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
            morphs[8] = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
            morphs[9] = dom.createMorphAt(element9, 5, 5);
            morphs[10] = dom.createMorphAt(element8, 3, 3);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["label", ["subexpr", "t", ["labels.name"], [], ["loc", [null, [3, 21], [3, 38]]]], "property", "name", "class", "required price-name"], ["loc", [null, [3, 4], [3, 84]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["labels.price"], [], ["loc", [null, [5, 23], [5, 41]]]], "property", "price", "class", "required col-xs-2 price-amount"], ["loc", [null, [5, 6], [5, 99]]]], ["inline", "select-or-typeahead", [], ["property", "expenseAccount", "label", ["subexpr", "t", ["labels.department"], [], ["loc", [null, [6, 60], [6, 83]]]], "list", ["subexpr", "@mut", [["get", "expenseAccountList", ["loc", [null, [6, 89], [6, 107]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.expenseAccount", ["loc", [null, [6, 118], [6, 138]]]]], [], []], "className", "col-xs-4 price-department"], ["loc", [null, [6, 6], [6, 178]]]], ["inline", "em-select", [], ["label", ["subexpr", "t", ["labels.category"], [], ["loc", [null, [9, 24], [9, 45]]]], "class", "required col-xs-4 price-category", "property", "category", "content", ["subexpr", "@mut", [["get", "categories", ["loc", [null, [10, 34], [10, 44]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "model.category", ["loc", [null, [11, 15], [11, 29]]]]], [], []]], ["loc", [null, [9, 6], [11, 32]]]], ["inline", "select-or-typeahead", [], ["property", "pricingType", "label", ["subexpr", "t", ["labels.type"], [], ["loc", [null, [12, 57], [12, 74]]]], "list", ["subexpr", "@mut", [["get", "pricingTypes", ["loc", [null, [12, 80], [12, 92]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.pricingType", ["loc", [null, [12, 103], [12, 120]]]]], [], []], "className", "col-xs-4 price-type", "prompt", " "], ["loc", [null, [12, 6], [12, 165]]]], ["inline", "t", ["billing.labels.pricing_panel_overrides"], [], ["loc", [null, [17, 10], [17, 56]]]], ["block", "if", [["get", "showUpdateButton", ["loc", [null, [18, 16], [18, 32]]]]], [], 0, null, ["loc", [null, [18, 10], [20, 17]]]], ["inline", "t", ["billing.labels.pricing_profile"], [], ["loc", [null, [27, 18], [27, 56]]]], ["inline", "t", ["labels.price"], [], ["loc", [null, [28, 18], [28, 38]]]], ["block", "if", [["get", "showUpdateButton", ["loc", [null, [29, 20], [29, 36]]]]], [], 1, null, ["loc", [null, [29, 14], [31, 21]]]], ["block", "each", [["get", "model.pricingOverrides", ["loc", [null, [33, 20], [33, 42]]]]], [], 2, null, ["loc", [null, [33, 12], [46, 21]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 52,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/pricing/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [51, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [52, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/imaging/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {
  exports['default'] = _hospitalrunPricingIndexController['default'].extend();
});
define('hospitalrun/pricing/imaging/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {
  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({
    category: 'Imaging',
    pageTitle: 'Imaging Pricing',

    actions: {
      editItem: function editItem(item) {
        item.set('returnTo', 'pricing.imaging');
        this.transitionTo('pricing.edit', item);
      }
    }
  });
});
define("hospitalrun/pricing/imaging/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/imaging/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["pricing/index"], [], ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/pricing/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({
    addPermission: 'add_pricing',
    deletePermission: 'delete_pricing',
    showCategory: true,
    startKey: []
  });
});
define('hospitalrun/pricing/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {
    category: null,
    modelName: 'pricing',
    pageTitle: 'All Pricing Items',

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      var category = item.get('category'),
          id = this._getPouchIdFromItem(item),
          name = item.get('name'),
          pricingType = item.get('pricingType');
      return [category, name, pricingType, id];
    },

    _modelQueryParams: function _modelQueryParams() {
      var category = this.get('category'),
          maxId = this._getMaxPouchId(),
          queryParams = {
        mapReduce: 'pricing_by_category'
      };
      if (!_ember['default'].isEmpty(category)) {
        queryParams.options = {
          startkey: [category, null, null, null],
          endkey: [category, {}, {}, maxId]
        };
      }
      return queryParams;
    },

    actions: {
      newItem: function newItem() {
        if (this.currentUserCan('add_pricing')) {
          var routeId = 'new',
              routeParts = this.routeName.split('.');
          if (routeParts.length === 2 && routeParts[1] !== 'index') {
            routeId += routeParts[1].capitalize();
          }
          this.transitionTo('pricing.edit', routeId);
        }
      }
    }
  });
});
define("hospitalrun/pricing/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/pricing/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.category"], [], ["loc", [null, [6, 14], [6, 37]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 8
                },
                "end": {
                  "line": 14,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/pricing/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [13, 14], [13, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 10
                  },
                  "end": {
                    "line": 20,
                    "column": 10
                  }
                },
                "moduleName": "hospitalrun/pricing/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "pricingItem.category", ["loc", [null, [19, 16], [19, 40]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 27,
                      "column": 14
                    },
                    "end": {
                      "line": 29,
                      "column": 14
                    }
                  },
                  "moduleName": "hospitalrun/pricing/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default neutral");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element3);
                  morphs[1] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["element", "action", ["editItem", ["get", "pricingItem", ["loc", [null, [28, 76], [28, 87]]]]], ["bubbles", false], ["loc", [null, [28, 56], [28, 104]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [28, 105], [28, 124]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 30,
                      "column": 14
                    },
                    "end": {
                      "line": 34,
                      "column": 14
                    }
                  },
                  "moduleName": "hospitalrun/pricing/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default warning");
                  var el2 = dom.createTextNode("\n                  ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "octicon octicon-x");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element2);
                  morphs[1] = dom.createMorphAt(element2, 3, 3);
                  return morphs;
                },
                statements: [["element", "action", ["deleteItem", ["get", "pricingItem", ["loc", [null, [31, 78], [31, 89]]]]], ["bubbles", false], ["loc", [null, [31, 56], [31, 106]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [32, 58], [32, 80]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 10
                  },
                  "end": {
                    "line": 36,
                    "column": 10
                  }
                },
                "moduleName": "hospitalrun/pricing/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element4, 1, 1);
                morphs[1] = dom.createMorphAt(element4, 2, 2);
                return morphs;
              },
              statements: [["block", "if", [["get", "canEdit", ["loc", [null, [27, 20], [27, 27]]]]], [], 0, null, ["loc", [null, [27, 14], [29, 21]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [30, 20], [30, 29]]]]], [], 1, null, ["loc", [null, [30, 14], [34, 21]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 38,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/pricing/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              dom.setAttribute(el1, "class", "clickable");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "price-name");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(7);
              morphs[0] = dom.createElementMorph(element5);
              morphs[1] = dom.createMorphAt(element5, 1, 1);
              morphs[2] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element5, [7]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element5, [9]), 0, 0);
              morphs[6] = dom.createMorphAt(element5, 11, 11);
              return morphs;
            },
            statements: [["element", "action", ["editItem", ["get", "pricingItem", ["loc", [null, [17, 32], [17, 43]]]]], [], ["loc", [null, [17, 12], [17, 45]]]], ["block", "if", [["get", "showCategory", ["loc", [null, [18, 16], [18, 28]]]]], [], 0, null, ["loc", [null, [18, 10], [20, 17]]]], ["content", "pricingItem.name", ["loc", [null, [21, 33], [21, 53]]]], ["content", "pricingItem.price", ["loc", [null, [22, 14], [22, 35]]]], ["content", "pricingItem.pricingType", ["loc", [null, [23, 14], [23, 41]]]], ["content", "pricingItem.expenseAccount", ["loc", [null, [24, 14], [24, 44]]]], ["block", "if", [["get", "showActions", ["loc", [null, [25, 16], [25, 27]]]]], [], 1, null, ["loc", [null, [25, 10], [36, 17]]]]],
            locals: ["pricingItem"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 40,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/pricing/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1]);
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(element7, 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element7, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element7, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element7, [9]), 0, 0);
            morphs[5] = dom.createMorphAt(element7, 11, 11);
            morphs[6] = dom.createMorphAt(element6, 3, 3);
            return morphs;
          },
          statements: [["block", "if", [["get", "showCategory", ["loc", [null, [5, 14], [5, 26]]]]], [], 0, null, ["loc", [null, [5, 8], [7, 15]]]], ["inline", "t", ["labels.name"], [], ["loc", [null, [8, 12], [8, 31]]]], ["inline", "t", ["labels.price"], [], ["loc", [null, [9, 12], [9, 32]]]], ["inline", "t", ["labels.type"], [], ["loc", [null, [10, 12], [10, 31]]]], ["inline", "t", ["labels.expense_to"], [], ["loc", [null, [11, 12], [11, 37]]]], ["block", "if", [["get", "showActions", ["loc", [null, [12, 14], [12, 25]]]]], [], 1, null, ["loc", [null, [12, 8], [14, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [16, 14], [16, 19]]]]], [], 2, null, ["loc", [null, [16, 6], [38, 15]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 49
                },
                "end": {
                  "line": 42,
                  "column": 134
                }
              },
              "moduleName": "hospitalrun/pricing/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["newItem"], [], ["loc", [null, [42, 75], [42, 95]]]], ["inline", "t", ["messages.create_new_record"], [], ["loc", [null, [42, 96], [42, 130]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 2
              },
              "end": {
                "line": 44,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/pricing/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["inline", "t", ["billing.alerts.no_pricing_items"], [], ["loc", [null, [42, 9], [42, 48]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [42, 55], [42, 61]]]]], [], 0, null, ["loc", [null, [42, 49], [42, 141]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 45,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/pricing/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [44, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [45, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/lab/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {
  exports['default'] = _hospitalrunPricingIndexController['default'].extend();
});
define('hospitalrun/pricing/lab/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {
  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({
    category: 'Lab',
    pageTitle: 'Lab Pricing',

    actions: {
      editItem: function editItem(item) {
        item.set('returnTo', 'pricing.lab');
        this.transitionTo('pricing.edit', item);
      }
    }
  });
});
define("hospitalrun/pricing/lab/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/lab/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["pricing/index"], [], ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/pricing/override/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunUtilsSelectValues) {
  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {
    pricingController: _ember['default'].inject.controller('pricing'),

    actions: {
      cancel: function cancel() {
        this.get('model').rollbackAttributes();
        this.send('closeModal');
      },

      update: function update() {
        var isNew = this.get('model.isNew'),
            override = this.get('model');
        override.save().then((function () {
          if (isNew) {
            this.get('editController').send('addOverride', override);
          } else {
            this.send('closeModal');
          }
        }).bind(this));
      }
    },

    editController: _ember['default'].inject.controller('pricing/edit'),
    pricingProfiles: _ember['default'].computed.map('pricingController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),
    showUpdateButton: true,

    title: (function () {
      if (this.get('model.isNew')) {
        return 'Add Override';
      } else {
        return 'Edit Override';
      }
    }).property('model.isNew'),

    updateButtonAction: 'update',
    updateButtonText: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return 'Add';
      } else {
        return 'Update';
      }
    }).property('model.isNew')

  });
});
define("hospitalrun/pricing/override/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/pricing/override/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-select", [], ["label", ["subexpr", "t", ["billing.labels.pricing_profile"], [], ["loc", [null, [7, 22], [7, 58]]]], "property", "profile", "content", ["subexpr", "@mut", [["get", "pricingProfiles", ["loc", [null, [9, 14], [9, 29]]]]], [], []], "optionValuePath", "selectObject", "optionLabelPath", "selectObject.name", "class", "required pricing-profile", "prompt", " "], ["loc", [null, [7, 4], [14, 6]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["labels.price"], [], ["loc", [null, [15, 21], [15, 39]]]], "property", "price", "class", "required pricing-override-price"], ["loc", [null, [15, 4], [15, 98]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/pricing/override/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 2], [16, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/override/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [17, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/procedure/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {
  exports['default'] = _hospitalrunPricingIndexController['default'].extend();
});
define('hospitalrun/pricing/procedure/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {
  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({
    category: 'Procedure',
    pageTitle: 'Procedure Pricing',

    actions: {
      editItem: function editItem(item) {
        item.set('returnTo', 'pricing.procedure');
        this.transitionTo('pricing.edit', item);
      }
    }
  });
});
define("hospitalrun/pricing/procedure/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/procedure/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["pricing/index"], [], ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/pricing/profiles/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({
    addPermission: 'add_pricing_profile',
    deletePermission: 'delete_pricing_profile'
  });
});
define('hospitalrun/pricing/profiles/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({
    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      }
    },

    afterUpdate: function afterUpdate(record) {
      var message = 'The pricing profile ' + record.get('name') + ' has been saved.';
      this.displayAlert('Pricing Profile Saved', message, 'refreshProfiles');
    },

    title: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return 'New Pricing Profile';
      } else {
        return 'Edit Pricing Profile';
      }
    }).property('model.isNew')
  });
});
define("hospitalrun/pricing/profiles/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/pricing/profiles/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "em-input", [], ["property", "name", "label", "Name", "class", "required pricing-profile-name"], ["loc", [null, [7, 4], [7, 83]]]], ["inline", "em-input", [], ["property", "discountPercentage", "label", "Discount Percentage", "class", "pricing-profile-percentage"], ["loc", [null, [8, 4], [8, 109]]]], ["inline", "em-input", [], ["property", "discountAmount", "label", "Discount Amount", "class", "pricing-profile-discount"], ["loc", [null, [9, 4], [9, 99]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/pricing/profiles/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [6, 2], [10, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/profiles/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/profiles/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/modal-helper'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _hospitalrunMixinsModalHelper) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsModalHelper['default'], {
    category: null,
    modelName: 'price-profile',
    pageTitle: 'Pricing Profiles',

    actions: {
      editItem: function editItem(item) {
        this.send('openModal', 'pricing.profiles.edit', item);
      },

      deleteItem: function deleteItem(item) {
        var message = 'Are you sure you want to delete this profile?',
            model = _ember['default'].Object.create({
          itemToDelete: item
        }),
            title = 'Delete Profile';
        this.displayConfirm(title, message, 'deletePricingProfile', model);
      },

      deletePricingProfile: function deletePricingProfile(model) {
        model.itemToDelete.destroyRecord();
      },

      newItem: function newItem() {
        var newItem = this.store.createRecord('price-profile');
        this.send('openModal', 'pricing.profiles.edit', newItem);
      },

      refreshProfiles: function refreshProfiles() {
        this.refresh();
      }
    }
  });
});
define("hospitalrun/pricing/profiles/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 10,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/pricing/profiles/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [9, 14], [9, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 19,
                      "column": 14
                    },
                    "end": {
                      "line": 21,
                      "column": 14
                    }
                  },
                  "moduleName": "hospitalrun/pricing/profiles/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default neutral");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element3);
                  morphs[1] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["element", "action", ["editItem", ["get", "profile", ["loc", [null, [20, 76], [20, 83]]]]], ["bubbles", false], ["loc", [null, [20, 56], [20, 100]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [20, 101], [20, 120]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 14
                    },
                    "end": {
                      "line": 24,
                      "column": 14
                    }
                  },
                  "moduleName": "hospitalrun/pricing/profiles/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default warning");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "octicon octicon-x");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element2);
                  morphs[1] = dom.createMorphAt(element2, 2, 2);
                  return morphs;
                },
                statements: [["element", "action", ["deleteItem", ["get", "profile", ["loc", [null, [23, 78], [23, 85]]]]], ["bubbles", false], ["loc", [null, [23, 56], [23, 102]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [23, 143], [23, 165]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 17,
                    "column": 10
                  },
                  "end": {
                    "line": 26,
                    "column": 10
                  }
                },
                "moduleName": "hospitalrun/pricing/profiles/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("td");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element4, 1, 1);
                morphs[1] = dom.createMorphAt(element4, 2, 2);
                return morphs;
              },
              statements: [["block", "if", [["get", "canEdit", ["loc", [null, [19, 20], [19, 27]]]]], [], 0, null, ["loc", [null, [19, 14], [21, 21]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [22, 20], [22, 29]]]]], [], 1, null, ["loc", [null, [22, 14], [24, 21]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/pricing/profiles/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              dom.setAttribute(el1, "class", "clickable");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "pricing-profile-name");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(5);
              morphs[0] = dom.createElementMorph(element5);
              morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
              morphs[4] = dom.createMorphAt(element5, 7, 7);
              return morphs;
            },
            statements: [["element", "action", ["editItem", ["get", "profile", ["loc", [null, [13, 32], [13, 39]]]]], [], ["loc", [null, [13, 12], [13, 41]]]], ["content", "profile.name", ["loc", [null, [14, 43], [14, 59]]]], ["content", "profile.discountAmount", ["loc", [null, [15, 14], [15, 40]]]], ["content", "profile.discountPercentage", ["loc", [null, [16, 14], [16, 44]]]], ["block", "if", [["get", "showActions", ["loc", [null, [17, 16], [17, 27]]]]], [], 0, null, ["loc", [null, [17, 10], [26, 17]]]]],
            locals: ["profile"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/pricing/profiles/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element7, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(element7, 7, 7);
            morphs[4] = dom.createMorphAt(element6, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.name"], [], ["loc", [null, [5, 12], [5, 31]]]], ["inline", "t", ["billing.labels.discount_amount"], [], ["loc", [null, [6, 12], [6, 50]]]], ["inline", "t", ["billing.labels.discount_percentage"], [], ["loc", [null, [7, 12], [7, 54]]]], ["block", "if", [["get", "showActions", ["loc", [null, [8, 14], [8, 25]]]]], [], 0, null, ["loc", [null, [8, 8], [10, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [12, 14], [12, 19]]]]], [], 1, null, ["loc", [null, [12, 6], [28, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 53
                },
                "end": {
                  "line": 32,
                  "column": 138
                }
              },
              "moduleName": "hospitalrun/pricing/profiles/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "#");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["newItem"], [], ["loc", [null, [32, 79], [32, 99]]]], ["inline", "t", ["messages.create_new_record"], [], ["loc", [null, [32, 100], [32, 134]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 34,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/pricing/profiles/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(". ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["inline", "t", ["billing.alerts.no_pricing_profiles"], [], ["loc", [null, [32, 9], [32, 51]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [32, 59], [32, 65]]]]], [], 0, null, ["loc", [null, [32, 53], [32, 145]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/pricing/profiles/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [34, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/profiles/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [35, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({
    addCapability: 'add_pricing',
    additionalModels: [{
      name: 'expenseAccountList',
      findArgs: ['lookup', 'expense_account_list']
    }, {
      name: 'imagingPricingTypes',
      findArgs: ['lookup', 'imaging_pricing_types']
    }, {
      name: 'labPricingTypes',
      findArgs: ['lookup', 'lab_pricing_types']
    }, {
      name: 'procedurePricingTypes',
      findArgs: ['lookup', 'procedure_pricing_types']
    }, {
      name: 'pricingProfiles',
      findArgs: ['price-profile']
    }, {
      name: 'wardPricingTypes',
      findArgs: ['lookup', 'ward_pricing_types']
    }],
    allowSearch: true,
    moduleName: 'pricing',
    newButtonText: '+ new item',
    sectionTitle: 'Pricing',
    subActions: [{
      text: 'All Pricing Items',
      linkTo: 'pricing.index'
    }, {
      text: 'Imaging Pricing',
      linkTo: 'pricing.imaging'
    }, {
      text: 'Lab Pricing',
      linkTo: 'pricing.lab'
    }, {
      text: 'Procedure Pricing',
      linkTo: 'pricing.procedure'
    }, {
      text: 'Ward Pricing',
      linkTo: 'pricing.ward'
    }, {
      text: 'Pricing Profiles',
      linkTo: 'pricing.profiles'
    }]
  });
});
define('hospitalrun/pricing/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {
  exports['default'] = _hospitalrunPatientsIndexController['default'].extend();
});
define('hospitalrun/pricing/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {
  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({
    moduleName: 'pricing',
    searchKeys: [{
      'name': 'fuzzy'
    }],
    searchModel: 'pricing'
  });
});
define("hospitalrun/pricing/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/pricing/search/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["pricing/index"], [], ["loc", [null, [2, 4], [2, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/search/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "search-listing", [], ["newButtonText", ["subexpr", "t", ["labels.new_item"], [], ["loc", [null, [1, 32], [1, 53]]]], "allButtonText", ["subexpr", "t", ["labels.all_items"], [], ["loc", [null, [1, 68], [1, 90]]]]], 0, null, ["loc", [null, [1, 0], [3, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/pricing/ward/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {
  exports['default'] = _hospitalrunPricingIndexController['default'].extend();
});
define('hospitalrun/pricing/ward/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {
  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({
    category: 'Ward',
    pageTitle: 'Ward Pricing',

    actions: {
      editItem: function editItem(item) {
        item.set('returnTo', 'pricing.ward');
        this.transitionTo('pricing.edit', item);
      }
    }
  });
});
define("hospitalrun/pricing/ward/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/pricing/ward/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["pricing/index"], [], ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/print/invoice/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      returnToInvoice: function returnToInvoice() {
        this.transitionTo('invoices.edit', this.get('model'));
      }
    }
  });
});
define("hospitalrun/print/invoice/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 10
                }
              },
              "moduleName": "hospitalrun/print/invoice/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "text-right");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "text-right");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "text-right");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "text-right");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "class", "text-right");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
              morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
              morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]), 1, 1);
              morphs[5] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
              return morphs;
            },
            statements: [["content", "item.name", ["loc", [null, [62, 16], [62, 29]]]], ["inline", "number-format", [["get", "item.total", ["loc", [null, [65, 32], [65, 42]]]]], [], ["loc", [null, [65, 16], [65, 44]]]], ["inline", "number-format", [["get", "item.discount", ["loc", [null, [68, 32], [68, 45]]]]], [], ["loc", [null, [68, 16], [68, 47]]]], ["inline", "number-format", [["get", "item.nationalInsurance", ["loc", [null, [71, 32], [71, 54]]]]], [], ["loc", [null, [71, 16], [71, 56]]]], ["inline", "number-format", [["get", "item.privateInsurance", ["loc", [null, [74, 32], [74, 53]]]]], [], ["loc", [null, [74, 16], [74, 55]]]], ["inline", "number-format", [["get", "item.amountOwed", ["loc", [null, [76, 53], [76, 68]]]]], [], ["loc", [null, [76, 37], [76, 70]]]]],
            locals: ["item"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 8
              },
              "end": {
                "line": 87,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/print/invoice/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "colspan", "6");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createElement("strong");
            var el4 = dom.createTextNode("Total ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "text-right");
            var el3 = dom.createElement("strong");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [5]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [1, 0]), 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [3, 0]), 0, 0);
            morphs[4] = dom.createMorphAt(dom.childAt(element1, [5, 0]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element1, [7, 0]), 0, 0);
            morphs[6] = dom.createMorphAt(dom.childAt(element1, [9, 0]), 0, 0);
            morphs[7] = dom.createMorphAt(dom.childAt(element1, [11, 0]), 0, 0);
            return morphs;
          },
          statements: [["content", "categoryGroup.category", ["loc", [null, [56, 22], [56, 48]]]], ["block", "each", [["get", "categoryGroup.items", ["loc", [null, [59, 18], [59, 37]]]]], [], 0, null, ["loc", [null, [59, 10], [78, 19]]]], ["content", "categoryGroup.category", ["loc", [null, [80, 30], [80, 56]]]], ["inline", "number-format", [["get", "categoryGroup.total", ["loc", [null, [81, 59], [81, 78]]]]], [], ["loc", [null, [81, 43], [81, 80]]]], ["inline", "number-format", [["get", "categoryGroup.discount", ["loc", [null, [82, 59], [82, 81]]]]], [], ["loc", [null, [82, 43], [82, 83]]]], ["inline", "number-format", [["get", "categoryGroup.nationalInsurance", ["loc", [null, [83, 59], [83, 90]]]]], [], ["loc", [null, [83, 43], [83, 92]]]], ["inline", "number-format", [["get", "categoryGroup.privateInsurance", ["loc", [null, [84, 59], [84, 89]]]]], [], ["loc", [null, [84, 43], [84, 91]]]], ["inline", "number-format", [["get", "categoryGroup.amountOwed", ["loc", [null, [85, 59], [85, 83]]]]], [], ["loc", [null, [85, 43], [85, 85]]]]],
          locals: ["categoryGroup"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 110,
                "column": 8
              },
              "end": {
                "line": 116,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/print/invoice/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n              Discharge Notes: ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "model.visit.dischargeInfo", ["loc", [null, [113, 31], [113, 60]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 117,
                "column": 8
              },
              "end": {
                "line": 123,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/print/invoice/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n              Remarks: ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "model.remarks", ["loc", [null, [120, 23], [120, 40]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 147,
                "column": 6
              },
              "end": {
                "line": 147,
                "column": 79
              }
            },
            "moduleName": "hospitalrun/print/invoice/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Return");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 150,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/print/invoice/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          dom.setAttribute(el3, "class", "text-center");
          var el4 = dom.createTextNode("\n        TEBOW CURE HOSPITAL\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "text-center");
          var el4 = dom.createTextNode("J.P. Laurel Ave. corner Banawe St. Brgy Aquino Davao City, Philippines");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "text-center");
          var el4 = dom.createTextNode("Telephone: (082) 300-5345    Email: info@tebowcure.org");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          dom.setAttribute(el3, "class", "text-center");
          var el4 = dom.createTextNode("\n        PATIENT'S\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h5");
          dom.setAttribute(el3, "class", "text-center");
          var el4 = dom.createTextNode("\n        BILLING STATEMENT\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "colspan", "2");
          dom.setAttribute(el5, "class", "col-xs-8");
          var el6 = dom.createTextNode("\n            NAME OF PATIENT: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-4");
          var el6 = dom.createTextNode("\n            PATIENT #:");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-5");
          var el6 = dom.createTextNode("\n            AGE: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-3");
          var el6 = dom.createTextNode("\n            ADMITTED: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-4");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-5");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-3");
          var el6 = dom.createTextNode("DISCHARGE: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-4");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "colspan", "3");
          dom.setAttribute(el5, "class", "col-xs-12");
          var el6 = dom.createTextNode("\n            ADDRESS: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          dom.setAttribute(el4, "class", "table-header");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Description");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createTextNode("Actual Charges");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createTextNode("Discount");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createTextNode("PhilHealth");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createTextNode("HMO/COM");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createTextNode("Excess");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("strong");
          var el7 = dom.createTextNode("Total");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createElement("strong");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createElement("strong");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createElement("strong");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createElement("strong");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createElement("strong");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("strong");
          var el7 = dom.createTextNode("Payments/Deposits");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "colspan", "4");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createTextNode("-");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("strong");
          var el7 = dom.createTextNode("Grand Total");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "colspan", "4");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-right");
          var el6 = dom.createElement("strong");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-7");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-5");
          var el6 = dom.createTextNode("were deducted during my confinement");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-8");
          var el6 = dom.createTextNode("Billed by: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-4");
          var el6 = dom.createTextNode("__________________________________________");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-8");
          var el6 = dom.createTextNode("Bill Date: ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-center col-xs-4");
          var el6 = dom.createTextNode("Patient-Member");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-8");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-4");
          var el6 = dom.createTextNode("__________________________________________");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "col-xs-8");
          var el6 = dom.createTextNode("Certified Correct by: Leron L. Lehman- Executive Director");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.setAttribute(el5, "class", "text-center col-xs-4");
          var el6 = dom.createTextNode("Relationship/Contact no.");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-footer");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element3, [11]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element4, [3]);
          var element7 = dom.childAt(element3, [13]);
          var element8 = dom.childAt(element7, [5]);
          var element9 = dom.childAt(element3, [15]);
          var morphs = new Array(19);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
          morphs[3] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
          morphs[4] = dom.createMorphAt(dom.childAt(element4, [5, 3]), 1, 1);
          morphs[5] = dom.createMorphAt(dom.childAt(element4, [7, 1]), 1, 1);
          morphs[6] = dom.createMorphAt(element7, 3, 3);
          morphs[7] = dom.createMorphAt(dom.childAt(element8, [3, 0]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element8, [5, 0]), 0, 0);
          morphs[9] = dom.createMorphAt(dom.childAt(element8, [7, 0]), 0, 0);
          morphs[10] = dom.createMorphAt(dom.childAt(element8, [9, 0]), 0, 0);
          morphs[11] = dom.createMorphAt(dom.childAt(element8, [11, 0]), 0, 0);
          morphs[12] = dom.createMorphAt(dom.childAt(element7, [7, 5]), 1, 1);
          morphs[13] = dom.createMorphAt(dom.childAt(element7, [9, 5, 0]), 0, 0);
          morphs[14] = dom.createMorphAt(element9, 1, 1);
          morphs[15] = dom.createMorphAt(element9, 2, 2);
          morphs[16] = dom.createMorphAt(dom.childAt(element9, [6, 1]), 1, 1);
          morphs[17] = dom.createMorphAt(dom.childAt(element9, [8, 1]), 1, 1);
          morphs[18] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.patient.displayName", ["loc", [null, [18, 29], [18, 58]]]], ["content", "model.patient.displayPatientId", ["loc", [null, [21, 22], [21, 56]]]], ["content", "model.patient.age", ["loc", [null, [26, 17], [26, 38]]]], ["inline", "date-format", [["get", "model.visit.startDate", ["loc", [null, [29, 36], [29, 57]]]]], [], ["loc", [null, [29, 22], [29, 59]]]], ["inline", "date-format", [["get", "model.visit.endDate", ["loc", [null, [35, 56], [35, 75]]]]], [], ["loc", [null, [35, 42], [35, 77]]]], ["content", "model.patient.displayAddress", ["loc", [null, [40, 21], [40, 53]]]], ["block", "each", [["get", "model.lineItemsByCategory", ["loc", [null, [53, 16], [53, 41]]]]], [], 0, null, ["loc", [null, [53, 8], [87, 17]]]], ["inline", "number-format", [["get", "model.total", ["loc", [null, [90, 57], [90, 68]]]]], [], ["loc", [null, [90, 41], [90, 70]]]], ["inline", "number-format", [["get", "model.discount", ["loc", [null, [91, 57], [91, 71]]]]], [], ["loc", [null, [91, 41], [91, 73]]]], ["inline", "number-format", [["get", "model.nationalInsurance", ["loc", [null, [92, 57], [92, 80]]]]], [], ["loc", [null, [92, 41], [92, 82]]]], ["inline", "number-format", [["get", "model.privateInsurance", ["loc", [null, [93, 57], [93, 79]]]]], [], ["loc", [null, [93, 41], [93, 81]]]], ["inline", "number-format", [["get", "model.amountOwed", ["loc", [null, [94, 57], [94, 73]]]]], [], ["loc", [null, [94, 41], [94, 75]]]], ["inline", "number-format", [["get", "model.paidTotal", ["loc", [null, [99, 50], [99, 65]]]]], [], ["loc", [null, [99, 34], [99, 67]]]], ["inline", "number-format", [["get", "model.remainingBalance", ["loc", [null, [105, 57], [105, 79]]]]], [], ["loc", [null, [105, 41], [105, 81]]]], ["block", "if", [["get", "model.visit.dischargeInfo", ["loc", [null, [110, 14], [110, 39]]]]], [], 1, null, ["loc", [null, [110, 8], [116, 15]]]], ["block", "if", [["get", "model.remarks", ["loc", [null, [117, 14], [117, 27]]]]], [], 2, null, ["loc", [null, [117, 8], [123, 15]]]], ["content", "model.modifiedBy", ["loc", [null, [129, 42], [129, 62]]]], ["inline", "date-format", [["get", "model.billDate", ["loc", [null, [133, 56], [133, 70]]]]], [], ["loc", [null, [133, 42], [133, 72]]]], ["block", "link-to", ["invoices.edit", ["get", "model", ["loc", [null, [147, 33], [147, 38]]]]], ["class", "btn btn-default warning"], 3, null, ["loc", [null, [147, 6], [147, 91]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 151,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/print/invoice/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "print-this", [], [], 0, null, ["loc", [null, [1, 0], [150, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/procedures/charge/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({
    cancelAction: 'closeModal',
    newCharge: false,
    newPricingItem: false,
    requestingController: _ember['default'].inject.controller('procedures/edit'),
    database: _ember['default'].inject.service(),
    pricingList: _ember['default'].computed.alias('requestingController.pricingList'),
    selectedItem: null,
    updateCapability: 'add_charge',

    itemChanged: (function () {
      var model = this.get('model'),
          selectedItem = this.get('selectedItem');
      if (!_ember['default'].isEmpty(selectedItem)) {
        this.store.find('pricing', selectedItem.id).then((function (item) {
          model.set('pricingItem', item);
        }).bind(this));
      }
    }).observes('selectedItem'),

    pricingItemChanged: (function () {
      var model = this.get('model'),
          itemName = model.get('itemName'),
          pricingItem = model.get('pricingItem');
      if (!_ember['default'].isEmpty(pricingItem)) {
        this.set('newPricingItem', false);
        if (pricingItem.get('name') !== itemName) {
          model.set('itemName', pricingItem.get('name'));
        }
      } else {
        this.set('newPricingItem', true);
      }
    }).observes('model.pricingItem'),

    title: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return this.get('i18n').t('procedures.titles.add_charge_item');
      }
      return this.get('i18n').t('procedures.titles.edit_charge_item');
    }).property('model.isNew'),

    beforeUpdate: function beforeUpdate() {
      var isNew = this.get('model.isNew');
      if (isNew) {
        this.set('newCharge', true);
      }
      if (this.get('newPricingItem')) {
        return new _ember['default'].RSVP.Promise((function (resolve, reject) {
          var model = this.get('model'),
              newPricing = this.store.createRecord('pricing', {
            name: model.get('itemName'),
            category: model.get('pricingCategory')
          });
          newPricing.save().then((function () {
            this.get('pricingList').addObject({
              id: newPricing.get('id'),
              name: newPricing.get('name')
            });
            model.set('pricingItem', newPricing);
            resolve();
          }).bind(this), reject);
        }).bind(this));
      } else {
        return _ember['default'].RSVP.Promise.resolve();
      }
    },

    afterUpdate: function afterUpdate(record) {
      if (this.get('newCharge')) {
        this.get('requestingController').send('addCharge', record);
      } else {
        this.send('closeModal');
      }
    }
  });
});
define("hospitalrun/procedures/charge/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/procedures/charge/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            morphs[2] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["inline", "pricing-typeahead", [], ["property", "itemName", "label", ["subexpr", "t", ["labels.item"], [], ["loc", [null, [8, 50], [8, 67]]]], "content", ["subexpr", "@mut", [["get", "pricingList", ["loc", [null, [8, 76], [8, 87]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedItem", ["loc", [null, [8, 98], [8, 110]]]]], [], []], "class", "required"], ["loc", [null, [8, 4], [8, 129]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["labels.quantity"], [], ["loc", [null, [10, 23], [10, 44]]]], "property", "quantity", "class", "col-xs-3 required"], ["loc", [null, [10, 6], [10, 92]]]], ["inline", "date-picker", [], ["property", "dateCharged", "label", "Date Charged", "class", "col-xs-4 required"], ["loc", [null, [11, 6], [11, 91]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/procedures/charge/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [7, 2], [13, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/procedures/charge/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [4, 10], [4, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [5, 23], [5, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [6, 21], [6, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [14, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/procedures/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {
    visitsController: _ember['default'].inject.controller('visits'),

    canAddProcedure: (function () {
      return this.currentUserCan('add_procedure');
    }).property(),

    chargePricingCategory: 'Procedure',
    chargeRoute: 'procedures.charge',

    anesthesiaTypes: _ember['default'].computed.alias('visitsController.anesthesiaTypes'),
    anesthesiologistList: _ember['default'].computed.alias('visitsController.anesthesiologistList'),
    cptCodeList: _ember['default'].computed.alias('visitsController.cptCodeList'),
    medicationList: null,
    physicianList: _ember['default'].computed.alias('visitsController.physicianList'),
    procedureList: _ember['default'].computed.alias('visitsController.procedureList'),
    procedureLocations: _ember['default'].computed.alias('visitsController.procedureLocations'),
    lookupListsToUpdate: [{
      name: 'anesthesiaTypes',
      property: 'model.anesthesiaType',
      id: 'anesthesia_types'
    }, {
      name: 'anesthesiologistList',
      property: 'model.anesthesiologist',
      id: 'anesthesiologists'
    }, {
      name: 'cptCodeList',
      property: 'model.cptCode',
      id: 'cpt_code_list'
    }, {
      name: 'physicianList',
      property: 'model.assistant',
      id: 'physician_list'
    }, {
      name: 'physicianList',
      property: 'model.physician',
      id: 'physician_list'
    }, {
      name: 'procedureList',
      property: 'model.description',
      id: 'procedure_list'
    }, {
      name: 'procedureLocations',
      property: 'model.location',
      id: 'procedure_locations'
    }],

    editController: _ember['default'].inject.controller('visits/edit'),
    pricingList: null, // This gets filled in by the route
    pricingTypes: _ember['default'].computed.alias('visitsController.procedurePricingTypes'),
    newProcedure: false,

    title: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return this.get('i18n').t('procedures.titles.add');
      }
      return this.get('i18n').t('procedures.titles.edit');;
    }).property('model.isNew'),

    updateCapability: 'add_charge',

    actions: {
      showAddMedication: function showAddMedication() {
        var newCharge = this.get('store').createRecord('proc-charge', {
          dateCharged: new Date(),
          newMedicationCharge: true,
          quantity: 1
        });
        this.send('openModal', 'procedures.medication', newCharge);
      },

      showEditMedication: function showEditMedication(charge) {
        this.send('openModal', 'procedures.medication', charge);
      },

      showDeleteMedication: function showDeleteMedication(charge) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deleteCharge',
          title: this.get('i18n').t('procedures.titles.delete_medication_used'),
          message: this.get('i18n').t('procedures.messages.delete_medication'),
          chargeToDelete: charge,
          updateButtonAction: this.get('i18n').t('buttons.confirm'),
          updateButtonText: this.get('i18n').t('buttons.ok')
        }));
      }
    },

    beforeUpdate: function beforeUpdate() {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this.updateCharges().then((function () {
          if (this.get('model.isNew')) {
            this.addChildToVisit(this.get('model'), 'procedures').then(resolve, reject);
          } else {
            resolve();
          }
        }).bind(this), reject);
      }).bind(this));
    },

    afterUpdate: function afterUpdate() {
      var alertTitle = this.get('i18n').t('procedures.titles.saved'),
          alertMessage = this.get('i18n').t('procedures.messages.saved');
      this.saveVisitIfNeeded(alertTitle, alertMessage);
    }
  });
});
define('hospitalrun/procedures/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _ember, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], {
    editTitle: (0, _emberI18n.translationMacro)('procedure.titles.edit'),
    modelName: 'procedure',
    newTitle: (0, _emberI18n.translationMacro)('procedure.titles.new'),
    pricingCategory: 'Procedure',
    database: _ember['default'].inject.service(),

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        procedureDate: new Date()
      });
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      var medicationQuery = {
        key: 'Medication',
        include_docs: true
      };
      this.get('database').queryMainDB(medicationQuery, 'inventory_by_type').then(function (result) {
        var medicationList = result.rows.map(function (medication) {
          return medication.doc;
        });
        controller.set('medicationList', medicationList);
      });
    }
  });
});
define("hospitalrun/procedures/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 48,
                  "column": 10
                },
                "end": {
                  "line": 52,
                  "column": 10
                }
              },
              "moduleName": "hospitalrun/procedures/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-primary align-right");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "octicon octicon-plus");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element4);
              morphs[1] = dom.createMorphAt(element4, 2, 2);
              return morphs;
            },
            statements: [["element", "action", ["showAddMedication"], ["bubbles", false], ["loc", [null, [49, 56], [49, 101]]]], ["inline", "t", ["procedures.buttons.add_medication"], [], ["loc", [null, [50, 56], [50, 97]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 68,
                      "column": 18
                    },
                    "end": {
                      "line": 70,
                      "column": 18
                    }
                  },
                  "moduleName": "hospitalrun/procedures/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default neutral");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element1);
                  morphs[1] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["element", "action", ["showEditMedication", ["get", "charge", ["loc", [null, [69, 90], [69, 96]]]]], [], ["loc", [null, [69, 60], [69, 98]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [69, 99], [69, 118]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 71,
                      "column": 18
                    },
                    "end": {
                      "line": 75,
                      "column": 18
                    }
                  },
                  "moduleName": "hospitalrun/procedures/edit/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "class", "btn btn-default warning");
                  var el2 = dom.createTextNode("\n                      ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "octicon octicon-x");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element0);
                  morphs[1] = dom.createMorphAt(element0, 2, 2);
                  return morphs;
                },
                statements: [["element", "action", ["showDeleteMedication", ["get", "charge", ["loc", [null, [72, 92], [72, 98]]]]], ["bubbles", false], ["loc", [null, [72, 60], [72, 115]]]], ["inline", "t", ["buttons.delete"], [], ["loc", [null, [73, 61], [73, 83]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 63,
                    "column": 12
                  },
                  "end": {
                    "line": 78,
                    "column": 12
                  }
                },
                "moduleName": "hospitalrun/procedures/edit/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var element3 = dom.childAt(element2, [5]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
                morphs[2] = dom.createMorphAt(element3, 1, 1);
                morphs[3] = dom.createMorphAt(element3, 2, 2);
                return morphs;
              },
              statements: [["content", "charge.medicationName", ["loc", [null, [65, 20], [65, 45]]]], ["content", "charge.quantity", ["loc", [null, [66, 20], [66, 39]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [68, 24], [68, 36]]]]], [], 0, null, ["loc", [null, [68, 18], [70, 25]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [71, 24], [71, 36]]]]], [], 1, null, ["loc", [null, [71, 18], [75, 25]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 10
                }
              },
              "moduleName": "hospitalrun/procedures/edit/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "charge.medicationCharge", ["loc", [null, [63, 18], [63, 41]]]]], [], 0, null, ["loc", [null, [63, 12], [78, 19]]]]],
            locals: ["charge"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 83,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/procedures/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel detail-section");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-body detail-section-content");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("table");
            dom.setAttribute(el3, "class", "table");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("tr");
            dom.setAttribute(el4, "class", "table-header");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("th");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("th");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("th");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [5]);
            var element6 = dom.childAt(fragment, [7]);
            var element7 = dom.childAt(fragment, [15]);
            var element8 = dom.childAt(element7, [1, 1]);
            var element9 = dom.childAt(element7, [3, 1]);
            var element10 = dom.childAt(element9, [1]);
            var morphs = new Array(18);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            morphs[2] = dom.createMorphAt(element5, 1, 1);
            morphs[3] = dom.createMorphAt(element5, 3, 3);
            morphs[4] = dom.createMorphAt(element5, 5, 5);
            morphs[5] = dom.createMorphAt(element5, 7, 7);
            morphs[6] = dom.createMorphAt(element6, 1, 1);
            morphs[7] = dom.createMorphAt(element6, 3, 3);
            morphs[8] = dom.createMorphAt(element6, 5, 5);
            morphs[9] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
            morphs[10] = dom.createMorphAt(fragment, 11, 11, contextualElement);
            morphs[11] = dom.createMorphAt(fragment, 13, 13, contextualElement);
            morphs[12] = dom.createMorphAt(element8, 1, 1);
            morphs[13] = dom.createMorphAt(element8, 3, 3);
            morphs[14] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
            morphs[15] = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
            morphs[16] = dom.createMorphAt(dom.childAt(element10, [5]), 0, 0);
            morphs[17] = dom.createMorphAt(element9, 3, 3);
            return morphs;
          },
          statements: [["inline", "select-or-typeahead", [], ["className", "required", "property", "description", "label", "Procedure", "list", ["subexpr", "@mut", [["get", "procedureList", ["loc", [null, [4, 29], [4, 42]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [5, 16], [5, 33]]]]], [], []], "hint", false], ["loc", [null, [3, 4], [6, 6]]]], ["inline", "select-or-typeahead", [], ["className", "col-xs-6", "property", "cptCode", "label", "CPT Code", "list", ["subexpr", "@mut", [["get", "cptCodeList", ["loc", [null, [9, 30], [9, 41]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.cptCode", ["loc", [null, [10, 18], [10, 31]]]]], [], []]], ["loc", [null, [8, 6], [11, 8]]]], ["inline", "select-or-typeahead", [], ["className", "col-sm-3", "property", "location", "label", "Procedure Location", "list", ["subexpr", "@mut", [["get", "procedureLocations", ["loc", [null, [15, 40], [15, 58]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.location", ["loc", [null, [16, 18], [16, 32]]]]], [], []]], ["loc", [null, [14, 6], [17, 8]]]], ["inline", "date-picker", [], ["property", "procedureDate", "label", "Procedure Date", "class", "col-sm-3 required"], ["loc", [null, [18, 6], [18, 95]]]], ["inline", "em-input", [], ["property", "timeStarted", "label", "Time Started", "class", "col-sm-3"], ["loc", [null, [19, 6], [19, 79]]]], ["inline", "em-input", [], ["property", "timeEnded", "label", "Time Ended", "class", "col-sm-3"], ["loc", [null, [20, 6], [20, 75]]]], ["inline", "select-or-typeahead", [], ["className", "col-sm-4 required", "property", "physician", "label", "Physician", "list", ["subexpr", "@mut", [["get", "physicianList", ["loc", [null, [24, 31], [24, 44]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.physician", ["loc", [null, [25, 18], [25, 33]]]]], [], []]], ["loc", [null, [23, 6], [26, 8]]]], ["inline", "select-or-typeahead", [], ["className", "col-sm-4", "property", "assistant", "label", "Assistant", "list", ["subexpr", "@mut", [["get", "physicianList", ["loc", [null, [28, 31], [28, 44]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.assistant", ["loc", [null, [29, 18], [29, 33]]]]], [], []], "prompt", " "], ["loc", [null, [27, 6], [30, 8]]]], ["inline", "select-or-typeahead", [], ["className", "col-sm-4", "property", "anesthesiologist", "label", "Anesthesiologist", "list", ["subexpr", "@mut", [["get", "anesthesiologistList", ["loc", [null, [32, 38], [32, 58]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.anesthesiologist", ["loc", [null, [33, 18], [33, 40]]]]], [], []]], ["loc", [null, [31, 6], [34, 8]]]], ["inline", "select-or-typeahead", [], ["className", "col-sm-4", "property", "anesthesiaType", "label", "Anesthesia Type", "list", ["subexpr", "@mut", [["get", "anesthesiaTypes", ["loc", [null, [38, 39], [38, 54]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.anesthesiaTypes", ["loc", [null, [39, 20], [39, 41]]]]], [], []]], ["loc", [null, [37, 8], [40, 10]]]], ["inline", "em-text", [], ["label", "Notes", "property", "notes", "rows", 3], ["loc", [null, [42, 4], [42, 54]]]], ["inline", "partial", ["item-charges"], [], ["loc", [null, [43, 4], [43, 30]]]], ["inline", "t", ["procedures.titles.medication_used"], [], ["loc", [null, [47, 10], [47, 51]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [48, 16], [48, 28]]]]], [], 0, null, ["loc", [null, [48, 10], [52, 17]]]], ["inline", "t", ["labels.item"], [], ["loc", [null, [58, 16], [58, 35]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [59, 16], [59, 39]]]], ["inline", "t", ["labels.action"], [], ["loc", [null, [60, 16], [60, 37]]]], ["block", "each", [["get", "model.charges", ["loc", [null, [62, 18], [62, 31]]]]], [], 1, null, ["loc", [null, [62, 10], [79, 19]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 84,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/procedures/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [83, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/procedures/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [84, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/procedures/medication/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-selection', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventorySelection, _ember) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventorySelection['default'], {
    cancelAction: 'closeModal',
    newCharge: false,
    requestingController: _ember['default'].inject.controller('procedures/edit'),
    medicationList: _ember['default'].computed.alias('requestingController.medicationList'),

    updateCapability: 'add_charge',

    title: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return this.get('i18n').t('procedures.titles.add_medication_used');
      }
      return this.get('i18n').t('procedures.titles.edit_medication_used');
    }).property('model.isNew'),

    beforeUpdate: function beforeUpdate() {
      var isNew = this.get('model.isNew');
      if (isNew) {
        this.set('newCharge', true);
        var model = this.get('model');
        var inventoryItem = model.get('inventoryItem');
        model.set('medication', inventoryItem);
        model.set('medicationTitle', inventoryItem.get('name'));
        model.set('priceOfMedication', inventoryItem.get('price'));
      }
      return _ember['default'].RSVP.Promise.resolve();
    },

    afterUpdate: function afterUpdate(record) {
      if (this.get('newCharge')) {
        this.get('requestingController').send('addCharge', record);
      } else {
        this.send('closeModal');
      }
    }
  });
});
define("hospitalrun/procedures/medication/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/procedures/medication/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "inventory-typeahead", [], ["property", "itemName", "label", ["subexpr", "t", ["procedures.labels.medication_used"], [], ["loc", [null, [8, 52], [8, 91]]]], "content", ["subexpr", "@mut", [["get", "medicationList", ["loc", [null, [8, 100], [8, 114]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selectedInventoryItem", ["loc", [null, [8, 125], [8, 146]]]]], [], []]], ["loc", [null, [8, 4], [8, 149]]]], ["inline", "em-input", [], ["label", ["subexpr", "t", ["labels.quantity"], [], ["loc", [null, [9, 21], [9, 42]]]], "property", "quantity", "class", "required"], ["loc", [null, [9, 4], [9, 81]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/procedures/medication/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [7, 2], [10, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/procedures/medication/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [4, 10], [4, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [5, 23], [5, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [6, 21], [6, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('hospitalrun/router', ['exports', 'ember', 'hospitalrun/config/environment'], function (exports, _ember, _hospitalrunConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _hospitalrunConfigEnvironment['default'].locationType
  });

  Router.map(function () {
    this.route('admin', {
      resetNamespace: true
    }, function () {
      this.route('address');
      this.route('loaddb');
      this.route('lookup', { path: '/' });
      this.route('users', {
        resetNamespace: true
      }, function () {
        this.route('edit', { path: '/edit/:user_id' });
      });
      this.route('roles');
      this.route('query');
    });

    this.route('appointments', {
      resetNamespace: true
    }, function () {
      this.route('edit', { path: '/edit/:appointment_id' });
      this.route('search');
      this.route('today');
      this.route('missed');
    });

    this.route('finishgauth', { path: '/finishgauth/:s1/:s2/:k/:t/:i/:p' });

    this.route('index', { path: '/' });

    this.route('imaging', {
      resetNamespace: true
    }, function () {
      this.route('completed');
      this.route('edit', { path: '/edit/:imaging_id' });
    });

    this.route('inventory', {
      resetNamespace: true
    }, function () {
      this.route('barcode', { path: '/barcode/:inventory_id' });
      this.route('delivery', { path: '/delivery/:inv-request_id' });
      this.route('edit', { path: '/edit/:inventory_id' });
      this.route('batch', { path: '/batch/:inventory-batch_id' });
      this.route('listing');
      this.route('reports');
      this.route('request', { path: '/request/:inv-request_id' });
      this.route('search', { path: '/search/:search_text' });
    });

    this.route('invoices', {
      resetNamespace: true
    }, function () {
      this.route('edit', { path: '/edit/:invoice_id' });
      this.route('search', { path: '/search/:search_text' });
    });

    this.route('labs', {
      resetNamespace: true
    }, function () {
      this.route('completed');
      this.route('edit', { path: '/edit/:lab_id' });
    });

    this.route('login');

    this.route('medication', {
      resetNamespace: true
    }, function () {
      this.route('completed');
      this.route('edit', { path: '/edit/:medication_id' });
      this.route('return', { path: '/return/:inv-request_id' });
      this.route('search', { path: '/search/:search_text' });
    });

    this.route('patients', {
      resetNamespace: true
    }, function () {
      this.route('edit', { path: '/edit/:patient_id' });
      this.route('reports');
      this.route('admitted');
      this.route('search', { path: '/search/:search_text' });
    });

    this.route('pricing', {
      resetNamespace: true
    }, function () {
      this.route('imaging');
      this.route('lab');
      this.route('procedure');
      this.route('ward');
      this.route('edit', { path: '/edit/:pricing_id' });
      this.route('search', { path: '/search/:search_text' });
      this.route('profiles');
    });

    this.route('print', {
      resetNamespace: true
    }, function () {
      this.route('invoice', { path: '/invoice/:invoice_id' });
    });

    this.route('visits', {
      resetNamespace: true
    }, function () {
      this.route('edit', { path: '/edit/:visit_id' });
      this.route('procedures', {
        resetNamespace: true
      }, function () {
        this.route('edit', { path: '/edit/:procedure_id' });
      });
    });
  });

  exports['default'] = Router;
});
define('hospitalrun/routes/abstract-edit-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {
  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
    editTitle: null,
    hideNewButton: false,
    modelName: null,
    newTitle: null,

    _createNewRecord: function _createNewRecord(params) {
      return new _ember['default'].RSVP.Promise((function (resolve) {
        this.generateId().then((function (newId) {
          this.getNewData(params).then((function (data) {
            var modelName = this.get('modelName');
            if (newId) {
              data.id = newId;
            }
            if (newId && this.store.hasRecordForId(modelName, newId)) {
              resolve(this.store.push(this.store.normalize(modelName, data)));
            } else {
              resolve(this.store.createRecord(modelName, data));
            }
          }).bind(this));
        }).bind(this));
      }).bind(this));
    },

    idParam: (function () {
      var modelName = this.get('modelName');
      return modelName + '_id';
    }).property('modelName'),

    /**
     * Override this function to generate an id for a new record
     * @return a promise that will resolved to a generated id;default is null which means that an
     * id will be automatically generated via Ember data.
     */
    generateId: function generateId() {
      return _ember['default'].RSVP.resolve(null);
    },

    /**
     * Override this function to define what data a new model should be instantiated with.
     * @return a promise that will resolve with the data for a new record; defaults to empty object.
     */
    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({});
    },

    model: function model(params) {
      var idParam = this.get('idParam');
      if (!_ember['default'].isEmpty(idParam) && params[idParam] === 'new') {
        return this._createNewRecord(params);
      } else {
        return this._super(params);
      }
    },

    setupController: function setupController(controller, model) {
      var sectionDetails = {};
      if (model.get('isNew')) {
        sectionDetails.currentScreenTitle = this.get('newTitle');
      } else {
        sectionDetails.currentScreenTitle = this.get('editTitle');
      }
      if (this.get('hideNewButton')) {
        sectionDetails.newButtonAction = null;
      }
      this.send('setSectionHeader', sectionDetails);
      this._super(controller, model);
    }
  });
});
define('hospitalrun/routes/abstract-index-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog) {
  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
    database: _ember['default'].inject.service(),
    filterParams: null,
    firstKey: null,
    hideNewButton: false,
    itemsPerPage: 25,
    modelName: null,
    newButtonAction: null,
    newButtonText: null,
    nextStartKey: null,
    pageTitle: null,

    _getFilterParams: function _getFilterParams(params) {
      var filterByList = [],
          filterParams = this.get('filterParams');
      if (!_ember['default'].isEmpty(filterParams)) {
        filterParams.forEach(function (paramName) {
          if (!_ember['default'].isEmpty(params[paramName])) {
            filterByList.push({
              name: paramName,
              value: params[paramName]
            });
          }
        });
      }
      return filterByList;
    },

    _getMaxPouchId: function _getMaxPouchId() {
      return this.get('database').getPouchId({}, this.get('modelName').camelize());
    },

    _getMinPouchId: function _getMinPouchId() {
      return this.get('database').getPouchId(null, this.get('modelName').camelize());
    },

    _getPouchIdFromItem: function _getPouchIdFromItem(item) {
      return this.get('database').getPouchId(item.get('id'), this.get('modelName').camelize());
    },

    _getStartKeyFromItem: function _getStartKeyFromItem(item) {
      return item.get('id');
    },

    _modelQueryParams: function _modelQueryParams() {
      return {};
    },

    model: function model(params) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var filterParams = this._getFilterParams(params),
            modelName = this.get('modelName'),
            itemsPerPage = this.get('itemsPerPage'),
            queryParams = this._modelQueryParams(params);
        if (!_ember['default'].isEmpty(params.sortKey)) {
          queryParams.sortKey = params.sortKey;
          if (!_ember['default'].isEmpty(params.sortDesc)) {
            queryParams.sortDesc = params.sortDesc;
          }
        }
        if (!_ember['default'].isEmpty(filterParams)) {
          queryParams.filterBy = filterParams;
        }
        if (_ember['default'].isEmpty(queryParams.options)) {
          queryParams.options = {};
        }
        queryParams.options.limit = itemsPerPage + 1;
        if (!_ember['default'].isEmpty(params.startKey)) {
          queryParams.options.startkey = params.startKey;
        }
        this.store.query(modelName, queryParams).then((function (model) {
          if (model.get('length') > 0) {
            this.set('firstKey', this._getStartKeyFromItem(model.get('firstObject')));
          }
          if (model.get('length') > itemsPerPage) {
            var lastItem = model.popObject();
            this.set('nextStartKey', this._getStartKeyFromItem(lastItem));
          } else {
            this.set('nextStartKey');
          }
          resolve(model);
        }).bind(this), reject);
      }).bind(this));
    },

    queryParams: {
      sortDesc: { refreshModel: true },
      sortKey: { refreshModel: true },
      startKey: { refreshModel: true }
    },

    setupController: function setupController(controller, model) {
      var props = this.getProperties('firstKey', 'nextStartKey');
      controller.setProperties(props);
      var sectionDetails = {
        currentScreenTitle: this.get('pageTitle')
      };
      if (this.get('hideNewButton')) {
        sectionDetails.newButtonAction = null;
      } else if (!_ember['default'].isEmpty(this.get('newButtonAction'))) {
        sectionDetails.newButtonAction = this.get('newButtonAction');
      }
      if (!_ember['default'].isEmpty(this.get('newButtonText'))) {
        sectionDetails.newButtonText = this.get('newButtonText');
      }
      this.send('setSectionHeader', sectionDetails);
      this.closeProgressModal();
      this._super(controller, model);
    }
  });
});
define('hospitalrun/routes/abstract-module-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsUserSession) {
  /**
   * Abstract route for top level modules (eg patients, inventory, users)
   */
  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsUserSession['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
    addCapability: null,
    additionalModels: null,
    allowSearch: true,
    currentScreenTitle: null,
    moduleName: null,
    newButtonText: null,
    sectionTitle: null,
    subActions: null,

    editPath: (function () {
      var module = this.get('moduleName');
      return module + '.edit';
    }).property('moduleName'),

    deletePath: (function () {
      var module = this.get('moduleName');
      return module + '.delete';
    }).property('moduleName'),

    newButtonAction: (function () {
      if (this.currentUserCan(this.get('addCapability'))) {
        return 'newItem';
      } else {
        return null;
      }
    }).property(),

    searchRoute: (function () {
      var module = this.get('moduleName');
      return '/' + module + '/search';
    }).property('moduleName'),

    actions: {
      allItems: function allItems() {
        this.transitionTo(this.get('moduleName') + '.index');
      },
      deleteItem: function deleteItem(item) {
        var deletePath = this.get('deletePath');
        this.send('openModal', deletePath, item);
      },
      editItem: function editItem(item) {
        this.transitionTo(this.get('editPath'), item);
      },
      newItem: function newItem() {
        if (this.currentUserCan(this.get('addCapability'))) {
          this.transitionTo(this.get('editPath'), 'new');
        }
      },

      /**
       * Action to set items in the section header.
       * @param details an object containing details to set on the section header.
       * The following parameters are supported:
       * - currentScreenTitle - The current screen title.
       * - newButtonText - The text to display for the "new" button.
       * - newButtonAction - The action to fire for the "new" button.
       */
      setSectionHeader: function setSectionHeader(details) {
        var currentController = this.controllerFor(this.get('moduleName'));
        currentController.setProperties(details);
      }

    },

    /**
     * Make sure the user has permissions to the module; if not reroute to index.
     */
    beforeModel: function beforeModel(transition) {
      var moduleName = this.get('moduleName');
      if (this.currentUserCan(moduleName)) {
        return this._super(transition);
      } else {
        this.transitionTo('index');
        return _ember['default'].RSVP.reject('Not available');
      }
    },

    /**
     * Override this function to generate an id for a new record
     * @return a promise that will resolved to a generated id;default is null which means that an
     * id will be automatically generated via Ember data.
     */
    generateId: function generateId() {
      return _ember['default'].RSVP.resolve(null);
    },

    model: function model() {
      if (!_ember['default'].isEmpty(this.additionalModels)) {
        return new _ember['default'].RSVP.Promise((function (resolve, reject) {
          var promises = this.additionalModels.map((function (modelMap) {
            if (modelMap.findArgs.length === 1) {
              return this.store.findAll.apply(this.store, modelMap.findArgs);
            } else {
              return this.store.find.apply(this.store, modelMap.findArgs);
            }
          }).bind(this));
          _ember['default'].RSVP.allSettled(promises, 'All additional Models for ' + this.get('moduleName')).then((function (array) {
            array.forEach((function (item, index) {
              if (item.state === 'fulfilled') {
                this.set(this.additionalModels[index].name, item.value);
              }
            }).bind(this));
            resolve();
          }).bind(this), reject);
        }).bind(this), 'Additional Models for' + this.get('moduleName'));
      } else {
        return _ember['default'].RSVP.resolve();
      }
    },

    renderTemplate: function renderTemplate() {
      this.render('section');
    },

    setupController: function setupController(controller, model) {
      var navigationController = this.controllerFor('navigation');
      if (this.get('allowSearch') === true) {
        navigationController.set('allowSearch', true);
        navigationController.set('searchRoute', this.get('searchRoute'));
      } else {
        navigationController.set('allowSearch', false);
      }
      var currentController = this.controllerFor(this.get('moduleName'));
      var propsToSet = this.getProperties('additionalButtons', 'currentScreenTitle', 'newButtonAction', 'newButtonText', 'sectionTitle', 'subActions');
      currentController.setProperties(propsToSet);
      if (!_ember['default'].isEmpty(this.additionalModels)) {
        this.additionalModels.forEach((function (item) {
          controller.set(item.name, this.get(item.name));
        }).bind(this));
      }
      this._super(controller, model);
    }

  });
});
define('hospitalrun/routes/abstract-search-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember-data', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _emberData, _ember) {
  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
    searchKeys: null,
    searchModel: null,
    searchText: null,

    _findByContains: function _findByContains(searchText) {
      var searchKeys = this.get('searchKeys'),
          searchModel = this.get('searchModel'),
          queryParams = {
        containsValue: {
          value: searchText,
          keys: searchKeys
        }
      };
      return this.store.query(searchModel, queryParams);
    },

    model: function model(params) {
      return new _ember['default'].RSVP.Promise((function (resolve) {
        var searchText = params.search_text;
        this.controllerFor('navigation').set('currentSearchText', searchText);
        this.set('searchText', searchText);
        this._findByContains(searchText).then(resolve, (function (err) {
          resolve(new _emberData['default'].AdapterPopulatedRecordArray());
          throw new Error(err);
        }).bind(this));
      }).bind(this));
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      if (!_ember['default'].isEmpty(model)) {
        controller.set('hasRecords', model.get('length') > 0);
      } else {
        controller.set('hasRecords', false);
      }
      controller.set('searchText', this.get('searchText'));
      this.controllerFor('navigation').closeProgressModal();
      var parentController = this.controllerFor(this.get('moduleName'));
      var searchTitle = 'Search Results for <i>' + _ember['default'].Handlebars.Utils.escapeExpression(this.get('searchText')) + '</i>';
      parentController.set('currentScreenTitle', searchTitle.htmlSafe());
    }

  });
});
define('hospitalrun/routes/application', ['exports', 'ember-simple-auth/mixins/application-route-mixin', 'ember', 'hospitalrun/mixins/setup-user-role'], function (exports, _emberSimpleAuthMixinsApplicationRouteMixin, _ember, _hospitalrunMixinsSetupUserRole) {
  var inject = _ember['default'].inject;
  var Route = _ember['default'].Route;

  var ApplicationRoute = Route.extend(_emberSimpleAuthMixinsApplicationRouteMixin['default'], _hospitalrunMixinsSetupUserRole['default'], {
    database: inject.service(),
    config: inject.service(),
    session: inject.service(),
    shouldSetupUserRole: true,

    actions: {
      closeModal: function closeModal() {
        this.disconnectOutlet({
          parentView: 'application',
          outlet: 'modal'
        });
      },
      /**
       * Render a modal using the specifed path and optionally set a model.
       * @param modalPath the path to use for the controller and template.
       * @param model (optional) the model to set on the controller for the modal.
       */
      openModal: function openModal(modalPath, model) {
        if (model) {
          this.controllerFor(modalPath).set('model', model);
        }
        this.renderModal(modalPath);
      },

      /**
       * Update an open modal using the specifed model.
       * @param modalPath the path to use for the controller and template.
       * @param model (optional) the model to set on the controller for the modal.
       */
      updateModal: function updateModal(modalPath, model) {
        this.controllerFor(modalPath).set('model', model);
      }
    },

    model: function model(params, transition) {
      var session = this.get('session');
      var isAuthenticated = session && session.get('isAuthenticated');
      return this.get('config').setup().then((function (configs) {
        if (transition.targetName !== 'finishgauth' && transition.targetName !== 'login') {
          this.set('shouldSetupUserRole', true);
          if (isAuthenticated) {
            return this.get('database').setup(configs)['catch'](function () {
              // Error thrown indicates missing auth, so invalidate session.
              session.invalidate();
            });
          }
        } else if (transition.targetName === 'finishgauth') {
          this.set('shouldSetupUserRole', false);
        }
      }).bind(this));
    },

    afterModel: function afterModel() {
      this.controllerFor('navigation').set('allowSearch', false);
      $('#apploading').remove();
    },

    renderModal: function renderModal(template) {
      this.render(template, {
        into: 'application',
        outlet: 'modal'
      });
    },

    sessionAuthenticated: function sessionAuthenticated() {
      if (this.get('shouldSetupUserRole') === true) {
        this.setupUserRole();
      }
      this._super();
    }

  });
  exports['default'] = ApplicationRoute;
});
define('hospitalrun/routes/index', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {
  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
    afterModel: function afterModel() {
      this.controllerFor('navigation').set('allowSearch', false);
    }
  });
});
define('hospitalrun/routes/login', ['exports', 'ember', 'ember-simple-auth/mixins/unauthenticated-route-mixin'], function (exports, _ember, _emberSimpleAuthMixinsUnauthenticatedRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsUnauthenticatedRouteMixin['default'], {
    config: _ember['default'].inject.service(),
    beforeModel: function beforeModel(transition) {
      if (this.get('session').get('isAuthenticated')) {
        this._super(transition);
      } else {
        return this.get('config').useGoogleAuth().then(function (useGoogleAuth) {
          if (useGoogleAuth) {
            window.location.replace('/auth/google');
          }
        });
      }
    }
  });
});
define('hospitalrun/serializers/application', ['exports', 'ember-pouch'], function (exports, _emberPouch) {
  exports['default'] = _emberPouch.Serializer.extend();
});
define('hospitalrun/serializers/user', ['exports', 'ember-data'], function (exports, _emberData) {
  var couchSerializer = _emberData['default'].JSONSerializer.extend({
    attrs: {
      rev: '_rev'
    },
    primaryKey: '_id',

    isNewSerializerAPI: true,

    normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {
      var newPayload = payload.rows.map((function (row) {
        return row.doc;
      }).bind(this));
      return this._super(store, primaryModelClass, newPayload, id, requestType);
    },

    normalizeSaveResponse: function normalizeSaveResponse(store, primaryModelClass, payload) {
      return {
        data: {
          id: payload.id,
          type: 'user',
          attrs: {
            rev: payload.rev
          }
        }
      };
    }

  });

  exports['default'] = couchSerializer;
});
define('hospitalrun/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('hospitalrun/services/config', ['exports', 'ember'], function (exports, _ember) {
  var inject = _ember['default'].inject;
  var run = _ember['default'].run;
  exports['default'] = _ember['default'].Service.extend({
    configDB: null,
    database: inject.service(),
    session: inject.service(),
    sessionData: _ember['default'].computed.alias('session.data'),

    setup: function setup() {
      var _this = this;

      var replicateConfigDB = this.replicateConfigDB.bind(this);
      var loadConfig = this.loadConfig.bind(this);
      return this.createDB().then(function (db) {
        _this.set('configDB', db);
        _this.setCurrentUser();
        return db;
      }).then(replicateConfigDB).then(loadConfig)['catch'](function (err) {
        return console.log(err);
      });
    },

    createDB: function createDB() {
      var promise = new _ember['default'].RSVP.Promise(function (resolve, reject) {
        new PouchDB('config', function (err, db) {
          if (err) {
            reject(err);
          }
          resolve(db);
        });
      }, 'instantiating config database instance');
      return promise;
    },
    replicateConfigDB: function replicateConfigDB(db) {
      var promise = new _ember['default'].RSVP.Promise(function (resolve) {
        var url = document.location.protocol + '//' + document.location.host + '/db/config';
        db.replicate.from(url).then(resolve)['catch'](resolve);
      });
      return promise;
    },
    loadConfig: function loadConfig() {
      var config = this.get('configDB');
      var options = {
        include_docs: true,
        keys: ['config_consumer_key', 'config_consumer_secret', 'config_disable_offline_sync', 'config_oauth_token', 'config_token_secret', 'config_use_google_auth']
      };
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        config.allDocs(options, function (err, response) {
          if (err) {
            console.log('Could not get configDB configs:', err);
            reject(err);
          }
          var configObj = {};
          for (var i = 0; i < response.rows.length; i++) {
            if (!response.rows[i].error && response.rows[i].doc) {
              configObj[response.rows[i].id] = response.rows[i].doc.value;
            }
          }
          resolve(configObj);
        });
      }, 'getting configuration from the database');
    },
    getFileLink: function getFileLink(id) {
      var config = this.get('configDB');
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        config.get('file-link_' + id, function (err, doc) {
          if (err) {
            reject(err);
          }
          resolve(doc);
        });
      });
    },
    removeFileLink: function removeFileLink(id) {
      var config = this.get('configDB');
      return this.getFileLink(id).then(function (fileLink) {
        config.remove(fileLink);
      });
    },
    saveFileLink: function saveFileLink(fileName, id) {
      var config = this.get('configDB');
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        config.put({ fileName: fileName }, 'file-link_' + id, function (err, doc) {
          if (err) {
            reject(err);
          }
          resolve(doc);
        });
      });
    },
    saveOauthConfigs: function saveOauthConfigs(configs) {
      var configDB = this.get('configDB');
      var configKeys = Object.keys(configs);
      var savePromises = [];
      return this._getOauthConfigs(configKeys).then(function (records) {
        configKeys.forEach(function (key) {
          var configRecord = records.rows.findBy('key', key);
          if (!configRecord || !configRecord.doc) {
            configRecord = {
              _id: key,
              value: configs[key]
            };
          } else {
            configRecord = configRecord.doc;
            configRecord.value = configs[key];
          }
          savePromises.push(configDB.put(configRecord));
        });
        return _ember['default'].RSVP.all(savePromises);
      });
    },
    useGoogleAuth: function useGoogleAuth() {
      return this.getConfigValue('use_google_auth', false);
    },

    getPatientPrefix: function getPatientPrefix() {
      return this.getConfigValue('patient_id_prefix', 'P');
    },

    getConfigDB: function getConfigDB() {
      return this.get('configDB');
    },

    getConfigValue: function getConfigValue(id, defaultValue) {
      var configDB = this.get('configDB');
      return new _ember['default'].RSVP.Promise(function (resolve) {
        configDB.get('config_' + id).then(function (doc) {
          run(null, resolve, doc.value);
        })['catch'](function () {
          run(null, resolve, defaultValue);
        });
      }, 'get ' + id + ' from config database');
    },

    _getOauthConfigs: function _getOauthConfigs(configKeys) {
      var configDB = this.get('configDB');
      var options = {
        include_docs: true,
        keys: configKeys
      };
      return configDB.allDocs(options);
    },

    setCurrentUser: function setCurrentUser(userName) {
      var config = this.get('configDB');
      var sessionData = this.get('sessionData');
      if (!userName && sessionData.authenticated) {
        userName = sessionData.authenticated.name;
      }
      config.get('current_user').then(function (doc) {
        doc.value = userName;
        config.put(doc);
      })['catch'](function () {
        config.put({
          _id: 'current_user',
          value: userName
        });
      });
    }

  });
});
define('hospitalrun/services/database', ['exports', 'ember', 'hospitalrun/utils/pouch-views', 'hospitalrun/mixins/pouch-adapter-utils'], function (exports, _ember, _hospitalrunUtilsPouchViews, _hospitalrunMixinsPouchAdapterUtils) {
  exports['default'] = _ember['default'].Service.extend(_hospitalrunMixinsPouchAdapterUtils['default'], {
    config: _ember['default'].inject.service(),
    mainDB: null, // Server DB
    oauthHeaders: null,
    setMainDB: false,

    setup: function setup(configs) {
      var _this = this;

      PouchDB.plugin(List);
      return this.createDB(configs).then(function (db) {
        _this.set('mainDB', db);
        _this.set('setMainDB', true);
      });
    },

    createDB: function createDB(configs) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var pouchOptions = {};
        if (configs && configs.config_use_google_auth) {
          pouchOptions.ajax = {
            timeout: 30000
          };
          // If we don't have the proper credentials, throw error to force login.
          if (_ember['default'].isEmpty(configs.config_consumer_key) || _ember['default'].isEmpty(configs.config_consumer_secret) || _ember['default'].isEmpty(configs.config_oauth_token) || _ember['default'].isEmpty(configs.config_token_secret)) {
            throw Error('login required');
          } else {
            var headers = {
              'x-oauth-consumer-secret': configs.config_consumer_secret,
              'x-oauth-consumer-key': configs.config_consumer_key,
              'x-oauth-token-secret': configs.config_token_secret,
              'x-oauth-token': configs.config_oauth_token
            };
            _this2.set('oauthHeaders', headers);
            pouchOptions.ajax.headers = headers;
          }
        }
        var url = document.location.protocol + '//' + document.location.host + '/db/main';

        _this2._createRemoteDB(url, pouchOptions)['catch'](function (err) {
          if (err.status && err.status === 401 || configs.config_disable_offline_sync === true) {
            reject(err);
          } else {
            return _this2._createLocalDB('localMainDB', pouchOptions);
          }
        }).then(function (db) {
          return resolve(db);
        })['catch'](function (err) {
          return reject(err);
        });
      }, 'initialize application db');
    },

    queryMainDB: function queryMainDB(queryParams, mapReduce) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var mainDB = _this3.get('mainDB');
        if (mapReduce) {
          mainDB.query(mapReduce, queryParams, function (err, response) {
            if (err) {
              _this3._pouchError(reject)(err);
            } else {
              response.rows = _this3._mapPouchData(response.rows);
              resolve(response);
            }
          });
        } else {
          mainDB.allDocs(queryParams, function (err, response) {
            if (err) {
              _this3._pouchError(reject)(err);
            } else {
              response.rows = _this3._mapPouchData(response.rows);
              resolve(response);
            }
          });
        }
      });
    },

    /**
    * Given an pouchDB doc id, return the corresponding ember record id.
    * @param {String} docId the pouchDB doc id.
    * @returns {String} the corresponding Ember id.
    */
    getEmberId: function getEmberId(docId) {
      var parsedId = this.get('mainDB').rel.parseDocID(docId);
      if (!_ember['default'].isEmpty(parsedId.id)) {
        return parsedId.id;
      }
    },

    getDocFromMainDB: function getDocFromMainDB(docId) {
      var _this4 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var mainDB = _this4.get('mainDB');
        mainDB.get(docId, function (err, doc) {
          if (err) {
            _this4._pouchError(reject)(err);
          } else {
            resolve(doc);
          }
        });
      });
    },

    /**
    * Given an Ember record id and type, return back the corresponding pouchDB id.
    * @param {String} emberId the ember record id.
    * @param {String} type the record type.
    * @returns {String} the corresponding pouch id.
    */
    getPouchId: function getPouchId(emberId, type) {
      return this.get('mainDB').rel.makeDocID({
        id: emberId,
        type: type
      });
    },

    /**
     * Load the specified db dump into the database.
     * @param {String} dbDump A couchdb dump string produced by pouchdb-dump-cli.
     * @returns {Promise} A promise that resolves once the dump has been loaded.
     */
    loadDBFromDump: function loadDBFromDump(dbDump) {
      var _this5 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var db = new PouchDB('dbdump', {
          adapter: 'memory'
        });
        db.load(dbDump).then(function () {
          var mainDB = _this5.get('mainDB');
          db.replicate.to(mainDB).on('complete', function (info) {
            resolve(info);
          }).on('error', function (err) {
            reject(err);
          });
        }, reject);
      });
    },

    _mapPouchData: function _mapPouchData(rows) {
      var _this6 = this;

      var mappedRows = [];
      if (rows) {
        mappedRows = rows.map(function (row) {
          if (row.doc) {
            var rowValues = {
              doc: row.doc.data
            };
            rowValues.doc.id = _this6.getEmberId(row.id);
            return rowValues;
          } else {
            return row;
          }
        });
      }
      return mappedRows;
    },

    _createRemoteDB: function _createRemoteDB(remoteUrl, pouchOptions) {
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        new PouchDB(remoteUrl, pouchOptions, function (errRemote, remoteDB) {
          if (errRemote) {
            reject(errRemote);
            return;
          }

          // remote db lazy created, check if db created correctly
          remoteDB.info().then(function () {
            (0, _hospitalrunUtilsPouchViews['default'])(remoteDB);
            resolve(remoteDB);
          })['catch'](function (err) {
            return reject(err);
          });
        });
      });
    },

    _createLocalDB: function _createLocalDB(localDBName, pouchOptions) {
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        new PouchDB(localDBName, pouchOptions, function (errLocal, localDB) {
          if (errLocal) {
            reject(errLocal);
            return;
          }

          (0, _hospitalrunUtilsPouchViews['default'])(localDB);
          resolve(localDB);
        });
      });
    }
  });
});
/* global List */
define('hospitalrun/services/filesystem', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    config: _ember['default'].inject.service(),

    filer: null, // Injected via initializer
    fileSystemSize: 1024 * 1024 * 1024 * 8, // 8GB max size for local filesystem;chrome only,

    _onError: function _onError(e) {
      console.log('Filer filesystem error: ' + e);
    },

    _downloadFiles: function _downloadFiles() {
      this.store.find('photo').then((function (photos) {
        photos.forEach((function (photo) {
          this.downloadIfNeeded(photo);
        }).bind(this));
      }).bind(this));
    },

    /**
     * Downloads the file from the server and saves it to the local filesystem.
     * @param {Object} fileRecord Record to use to download the file.
     */
    _downloadFileFromServer: function _downloadFileFromServer(fileRecord) {
      var fileName = _ember['default'].get(fileRecord, 'fileName'),
          pouchDbId = _ember['default'].get(fileRecord, 'id'),
          url = _ember['default'].get(fileRecord, 'url'),
          xhr = new XMLHttpRequest();
      if (!_ember['default'].isEmpty(url)) {
        xhr.open('GET', url, true);
        xhr.responseType = 'blob';
        xhr.onload = (function () {
          var file = new Blob([xhr.response]);
          this.addFile(file, fileName, pouchDbId);
        }).bind(this);
        xhr.send();
      }
    },

    setup: function setup() {
      var size = this.get('fileSystemSize'),
          filer = new Filer();
      filer.init({ persistent: true, size: size }, (function () {
        this.set('filer', filer);
      }).bind(this));
    },

    /**
     * Add the specified file to the local filesystem
     * @param {File} file the file to save.
     * @param {String} path the file path to save the file to.
     * @param {String} pouchDbId database id that the file is associated with.
     * The pouch DB ids are prefixed with the type of record (eg patient record is
     * prefixed by 'patient_'.
     * @returns {Promise} returns a Promise that resolves once the file is saved.
     */
    addFile: function addFile(file, path, pouchDbId) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var currentDate = new Date(),
            filer = this.get('filer'),
            fileName = file.name || currentDate.getTime(),
            newFileName = path + fileName,
            config = this.get('config');
        if (path.indexOf('.') > -1) {
          newFileName = path;
          // If a full file path was provided, figure out the path and file name.
          var pathParts = path.split('/');
          fileName = pathParts.pop();
          path = pathParts.join('/');
          path += '/';
        }

        if (newFileName.indexOf('.') === -1) {
          if (file.type) {
            var typeParts = file.type.split('/');
            newFileName += '.' + typeParts.pop();
          } else {
            // Default to png extension
            newFileName += '.png';
          }
        }

        this.fileExists(newFileName).then((function (exists) {
          if (exists) {
            // Make sure a unique name is used.
            newFileName = path + currentDate.getTime() + fileName;
          }
          if (_ember['default'].isEmpty(filer)) {
            reject('Local filesystem unavailable, please use Google Chrome browser');
          }
          if (_ember['default'].isEmpty(fileName) && !_ember['default'].isEmpty(file.type)) {
            var typeParts = file.type.split('/');
            if (typeParts.length > 1) {
              newFileName += '.' + typeParts[1];
            }
          }
          filer.mkdir(path, false, function () {
            filer.write(newFileName, { data: file, type: file.type }, function (fileEntry) {
              config.saveFileLink(newFileName, pouchDbId);
              resolve(fileEntry);
            }, function (e) {
              reject(e);
            });
          }, function (e) {
            reject(e);
          });
        }).bind(this));
      }).bind(this));
    },

    /**
     * Delete the specified file
     * @param {String} filePath path of file to delete.
     * @param {String} pouchId database id that the file is associated with.
     * The pouch DB ids are prefixed with the type of record (eg patient record is
     * prefixed by 'patient_'.
     * @returns {Promise} returns a Promise that resolves once the file is deleted.
     */
    deleteFile: function deleteFile(filePath, pouchDbId) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        var filer = this.get('filer'),
            config = this.get('config');
        try {
          filer.rm(filePath, function () {
            config.removeFileLink(pouchDbId);
            resolve();
          }, reject);
        } catch (ex) {
          reject(ex);
        }
      }).bind(this));
    },

    downloadIfNeeded: function downloadIfNeeded(fileRecord) {
      var fileName = _ember['default'].get(fileRecord, 'fileName');
      this.fileExists(fileName).then((function (exists) {
        if (!exists) {
          this._downloadFileFromServer(fileRecord);
        }
      }).bind(this));
    },

    /**
     * Determine if specified file exists
     * @param {String} the path of the file to determine if it exists.
     * @returns {Promise} returns a Promise that resolves with a boolean indicating
     * if the file exists.
     */
    fileExists: function fileExists(filePath) {
      return new _ember['default'].RSVP.Promise((function (resolve) {
        var filer = this.get('filer');
        filer.fs.root.getFile(filePath, {}, function () {
          resolve(true);
        }, function () {
          // if ls errs, file doesn't exist.
          resolve(false);
        });
      }).bind(this));
    },

    /**
     * Convert specified file to a data url
     * @param {File} file to convert
     * @returns {Promise} returns a Promise that resolves with the data url
     * for the file.
     */
    fileToDataURL: function fileToDataURL(file) {
      return new _ember['default'].RSVP.Promise(function (resolve) {
        var reader = new FileReader();
        reader.onloadend = function (e) {
          resolve(e.target.result);
        };
        reader.readAsDataURL(file);
      });
    },

    /**
     * Read the specified file into a string
     * @param {File} file to read
     * @returns {Promise} returns a Promise that resolves with the data url
     * for the file.
     */
    fileToString: function fileToString(file) {
      return new _ember['default'].RSVP.Promise(function (resolve) {
        var reader = new FileReader();
        reader.onloadend = function (e) {
          resolve(e.target.result);
        };
        reader.readAsText(file);
      });
    },

    /**
     * Property to determine if file system API is available.
     */
    isFileSystemEnabled: (function () {
      var filer = this.get('filer');
      return !_ember['default'].isEmpty(filer);
    }).property('filer'),

    /**
     * Get filesystem url from specified path.
     * @param {String} the path of the file to get the url for.
     * @returns {Promise} returns a Promise that resolves with the file system
     * url or null if the file doesn't exist.
     */
    pathToFileSystemURL: function pathToFileSystemURL(path) {
      return new _ember['default'].RSVP.Promise((function (resolve) {
        var filer = this.get('filer');
        filer.fs.root.getFile(path, {}, function (fileEntry) {
          resolve(fileEntry.toURL());
        }, function () {
          // if ls errs, just return empty, file doesn't exist.
          resolve();
        });
      }).bind(this));
    }
  });
});
define('hospitalrun/services/i18n', ['exports', 'ember-i18n/services/i18n'], function (exports, _emberI18nServicesI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nServicesI18n['default'];
    }
  });
});
define('hospitalrun/services/session', ['exports', 'ember-simple-auth/services/session'], function (exports, _emberSimpleAuthServicesSession) {
  exports['default'] = _emberSimpleAuthServicesSession['default'];
});
define('hospitalrun/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define('hospitalrun/serviceworkers/pouchdb-sync', ['exports'], function (exports) {
  var configDB;
  var configs = false;
  var localMainDB;
  var syncingRemote = false;

  new PouchDB('config', function (err, db) {
    configDB = db;
  });

  new PouchDB('localMainDB', function (err, db) {
    localMainDB = db;
  });

  toolbox.router.get('/db/main/_all_docs', function (request, values, options) {
    logDebug('request for all docs:', request.url);
    return couchDBResponse(request, values, options, function (request) {
      var options = getDBOptions(request.url);
      logDebug('allDocs PouchDB:', options);
      return localMainDB.allDocs(options);
    });
  });
  toolbox.router.get('/db/main/_design/:design_doc/_view/:view', function (request, values, options) {
    logDebug('request for view:', request.url);
    return couchDBResponse(request, values, options, function (request) {
      var options = getDBOptions(request.url);
      var mapReduce = values.design_doc + '/' + values.view;
      logDebug('queryPouchDB:', mapReduce, options);
      return localMainDB.query(mapReduce, options);
    });
  });

  toolbox.router.post('/db/main/_bulk_docs', function (request, values, options) {
    logDebug('request for bulk docs:', request.url);
    var pouchRequest = request.clone();
    return couchDBResponse(request, values, options, function () {
      logDebug('couch failed, trying pouch request:', request.url);
      return pouchRequest.json().then(function (jsonRequest) {
        logDebug('got bulk docs, jsonRequest is:', jsonRequest);
        return localMainDB.bulkDocs(jsonRequest);
      })['catch'](function (err) {
        logDebug('err getting json: ', err);
      });
    });
  });

  function setupRemoteSync() {
    if (!syncingRemote && configs.config_disable_offline_sync !== true) {
      var pouchOptions = {
        ajax: {
          headers: {},
          timeout: 30000
        }
      };
      if (configs.config_consumer_secret && configs.config_token_secret && configs.config_consumer_key && configs.config_oauth_token) {
        pouchOptions.ajax.headers['x-oauth-consumer-secret'] = configs.config_consumer_secret;
        pouchOptions.ajax.headers['x-oauth-consumer-key'] = configs.config_consumer_key;
        pouchOptions.ajax.headers['x-oauth-token-secret'] = configs.config_token_secret;
        pouchOptions.ajax.headers['x-oauth-token'] = configs.config_oauth_token;
      }
      var remoteURL = self.location.protocol + '//' + self.location.host + '/db/main';
      new PouchDB(remoteURL, pouchOptions, function (err, db) {
        syncingRemote = localMainDB.sync(db, {
          live: true,
          retry: true
        }).on('change', function (info) {
          logDebug('local sync change', info);
        }).on('paused', function () {
          logDebug('local sync paused');
          // replication paused (e.g. user went offline)
        }).on('active', function () {
          logDebug('local sync active');
          // replicate resumed (e.g. user went back online)
        }).on('denied', function (info) {
          logDebug('local sync denied:', info);
          // a document failed to replicate, e.g. due to permissions
        }).on('complete', function (info) {
          logDebug('local sync complete:', info);
          // handle complete
        }).on('error', function (err) {
          logDebug('local sync error:', err);
        });
      });
    }
  }

  function setupConfigs() {
    return new Promise(function (resolve, reject) {
      if (configs) {
        resolve();
      } else {
        configDB.allDocs({
          include_docs: true
        }).then(function (result) {
          configs = {};
          result.rows.forEach(function (row) {
            configs[row.id] = row.doc.value;
          });
          resolve();
        }, reject);
      }
    });
  }

  function couchDBResponse(request, values, options, pouchDBFn) {
    setupConfigs().then(setupRemoteSync);
    logDebug('Looking for couchdb response for:', request.url);
    return new Promise(function (resolve, reject) {
      var startTime = performance.now();
      toolbox.networkOnly(request, values, options).then(function (response) {
        if (response) {
          var elapsedTime = performance.now() - startTime;
          resolve(response);
          logPerformance(elapsedTime, request.url);
        } else {
          logDebug('Network first returned no response, get data from local pouch db.');
          runPouchFn(pouchDBFn, request, resolve, reject);
        }
      })['catch'](function (err) {
        logDebug('Network first returned err, get data from local pouch db:', err);
        runPouchFn(pouchDBFn, request, resolve, reject);
      });
    });
  }

  function convertPouchToResponse(pouchResponse) {
    return new Response(JSON.stringify(pouchResponse), {
      status: 200,
      statusText: 'OK'
    });
  }

  function getDBOptions(url) {
    var returnParams = {};
    if (url.indexOf('?') > 0) {
      var urlParams = url.split('?'),
          params = decodeURIComponent(urlParams[1]).split('&'),
          paramParts,
          i;
      for (i = 0; i < params.length; i++) {
        paramParts = params[i].split('=');
        returnParams[paramParts[0]] = JSON.parse(paramParts[1]);
      }
    }
    return returnParams;
  }

  function logPerformance(elapsedTime, requestUrl) {
    if (configs.config_log_metrics && configs.current_user) {
      var now = Date.now();
      var timingId = 'timing_' + configs.current_user.toLowerCase() + '_' + now;
      localMainDB.put({
        _id: timingId,
        elapsed: elapsedTime,
        url: requestUrl
      });
    }
  }

  function runPouchFn(pouchDBFn, request, resolve, reject) {
    if (configs.disable_offline_sync) {
      reject('Offline access has been disabled.');
    } else {
      pouchDBFn(request).then(function (response) {
        resolve(convertPouchToResponse(response));
      })['catch'](function (err) {
        logDebug('POUCH error is:', err);
        reject(err);
      });
    }
  }
});
define('hospitalrun/session-stores/application', ['exports', 'ember-simple-auth/session-stores/adaptive'], function (exports, _emberSimpleAuthSessionStoresAdaptive) {
  exports['default'] = _emberSimpleAuthSessionStoresAdaptive['default'].extend();
});
define("hospitalrun/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["inline", "render", ["navigation"], [], ["loc", [null, [2, 0], [2, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 18
          }
        },
        "moduleName": "hospitalrun/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [1, 6], [1, 29]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["content", "outlet", ["loc", [null, [4, 0], [4, 10]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [5, 0], [5, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/charges-by-type", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/charges-by-type.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "charges-by-type-tab", [], ["pricingType", ["subexpr", "@mut", [["get", "pricingType", ["loc", [null, [4, 40], [4, 51]]]]], [], []], "index", ["subexpr", "@mut", [["get", "index", ["loc", [null, [4, 58], [4, 63]]]]], [], []]], ["loc", [null, [4, 6], [4, 66]]]]],
          locals: ["pricingType", "index"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/charges-by-type.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "nav nav-pills tab-nav");
          dom.setAttribute(el1, "role", "tablist");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "pricingTypeList", ["loc", [null, [3, 12], [3, 27]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 17,
              "column": 2
            }
          },
          "moduleName": "hospitalrun/templates/charges-by-type.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "price-list", [], ["canAddCharge", ["subexpr", "@mut", [["get", "canAddCharge", ["loc", [null, [11, 19], [11, 31]]]]], [], []], "pricingType", ["subexpr", "@mut", [["get", "pricingType", ["loc", [null, [12, 18], [12, 29]]]]], [], []], "index", ["subexpr", "@mut", [["get", "index", ["loc", [null, [13, 12], [13, 17]]]]], [], []], "pricingList", ["subexpr", "@mut", [["get", "pricingList", ["loc", [null, [14, 18], [14, 29]]]]], [], []], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [15, 12], [15, 17]]]]], [], []]], ["loc", [null, [10, 4], [16, 6]]]]],
        locals: ["pricingType", "index"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/charges-by-type.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "tab-content");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "showPricingTypeTabs", ["loc", [null, [1, 6], [1, 25]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]], ["block", "each", [["get", "pricingTypeList", ["loc", [null, [9, 10], [9, 25]]]]], [], 1, null, ["loc", [null, [9, 2], [17, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/array-display", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/components/array-display.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "item", ["loc", [null, [3, 8], [3, 16]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/array-display.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content", ["loc", [null, [2, 12], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 4], [4, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/array-display.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "content", ["loc", [null, [6, 4], [6, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/array-display.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isArray", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/charge-quantity", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/charge-quantity.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        dom.setAttribute(el1, "class", "control-label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "help-block");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
        return morphs;
      },
      statements: [["content", "pricingItem.name", ["loc", [null, [2, 29], [2, 49]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "quantitySelected", ["loc", [null, [3, 14], [3, 30]]]]], [], []], "class", "form-control"], ["loc", [null, [3, 0], [3, 53]]]], ["content", "quantityHelp", ["loc", [null, [4, 25], [4, 41]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/charges-by-type-tab", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/charges-by-type-tab.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("a");
        dom.setAttribute(el1, "role", "tab");
        dom.setAttribute(el1, "data-toggle", "pill");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" charges");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'href');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["attribute", "href", ["get", "tabHref", ["loc", [null, [1, 10], [1, 17]]]]], ["content", "pricingType", ["loc", [null, [1, 50], [1, 65]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/checkbox-or-typeahead", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/checkbox-or-typeahead.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/render-typeahead"], [], ["loc", [null, [2, 4], [2, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 12
                },
                "end": {
                  "line": 16,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/templates/components/checkbox-or-typeahead.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "checkbox col-xs-2");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element0, 1, 1);
              morphs[1] = dom.createMorphAt(element0, 2, 2);
              return morphs;
            },
            statements: [["inline", "action-checkbox", [], ["value", ["subexpr", "@mut", [["get", "checkbox.value", ["loc", [null, [13, 44], [13, 58]]]]], [], []], "action", "checkboxChanged"], ["loc", [null, [13, 20], [13, 85]]]], ["content", "checkbox.label", ["loc", [null, [13, 85], [13, 103]]]]],
            locals: ["checkbox"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/components/checkbox-or-typeahead.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
            return morphs;
          },
          statements: [["block", "each", [["get", "checkboxRow", ["loc", [null, [10, 20], [10, 31]]]]], [], 0, null, ["loc", [null, [10, 12], [16, 21]]]]],
          locals: ["checkboxRow"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/components/checkbox-or-typeahead.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "has-error");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "help-block");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            return morphs;
          },
          statements: [["content", "errors", ["loc", [null, [21, 37], [21, 47]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/checkbox-or-typeahead.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "control-label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["required ", ["subexpr", "if", [["get", "errors", ["loc", [null, [4, 30], [4, 36]]]], "has-error"], [], ["loc", [null, [4, 25], [4, 50]]]]]]], ["content", "label", ["loc", [null, [5, 37], [5, 46]]]], ["block", "each", [["get", "checkboxRows", ["loc", [null, [7, 12], [7, 24]]]]], [], 0, null, ["loc", [null, [7, 4], [18, 13]]]], ["block", "if", [["get", "errors", ["loc", [null, [19, 10], [19, 16]]]]], [], 1, null, ["loc", [null, [19, 4], [23, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/checkbox-or-typeahead.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "userCanAdd", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [24, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/cross-icon-svg", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/cross-icon-svg.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        dom.setNamespace("http://www.w3.org/2000/svg");
        var el1 = dom.createElement("svg");
        dom.setAttribute(el1, "class", "cross-icon-svg");
        dom.setAttribute(el1, "xmlns", "http://www.w3.org/2000/svg");
        dom.setAttribute(el1, "xmlns:xlink", "http://www.w3.org/1999/xlink");
        dom.setAttribute(el1, "x", "0px");
        dom.setAttribute(el1, "y", "0px");
        dom.setAttribute(el1, "viewBox", "0 0 32 32");
        dom.setAttribute(el1, "enable-background", "new 0 0 32 32");
        dom.setAttributeNS(el1, "http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("polygon");
        dom.setAttribute(el2, "fill", "#1ABC9C");
        dom.setAttribute(el2, "points", "21.33,10.67 21.33,0 10.67,0 10.67,10.67 0,10.67 0,21.33 10.67,21.33 10.67,32 21.33,32\n  21.33,21.33 32,21.33 32,10.67 ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/custom-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 16,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/templates/components/custom-form.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element1, 'class');
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(element1, 3, 3);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["form-group ", ["get", "field.classNames", ["loc", [null, [5, 33], [5, 49]]]]]]], ["content", "field.label", ["loc", [null, [6, 17], [6, 32]]]], ["inline", "ext-radio", [], ["content", ["subexpr", "@mut", [["get", "field.values", ["loc", [null, [8, 20], [8, 32]]]]], [], []], "value", ["subexpr", "get", [["get", "model", ["loc", [null, [9, 23], [9, 28]]]], ["get", "field.property", ["loc", [null, [9, 29], [9, 43]]]]], [], ["loc", [null, [9, 18], [9, 44]]]], "includeOtherOption", ["subexpr", "@mut", [["get", "field.includeOtherOption", ["loc", [null, [10, 31], [10, 55]]]]], [], []], "otherOptionLabel", ["subexpr", "@mut", [["get", "field.otherOptionLabel", ["loc", [null, [11, 29], [11, 51]]]]], [], []], "radioLabelPath", "content", "radioValuePath", "content"], ["loc", [null, [7, 10], [14, 12]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 10
                  },
                  "end": {
                    "line": 22,
                    "column": 10
                  }
                },
                "moduleName": "hospitalrun/templates/components/custom-form.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "em-checkbox", [], ["label", ["subexpr", "@mut", [["get", "checkbox.label", ["loc", [null, [21, 32], [21, 46]]]]], [], []], "property", ["subexpr", "@mut", [["get", "checkbox.property", ["loc", [null, [21, 56], [21, 73]]]]], [], []]], ["loc", [null, [21, 12], [21, 75]]]]],
              locals: ["checkbox"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 6
                },
                "end": {
                  "line": 24,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/templates/components/custom-form.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(element0, 3, 3);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["form-group ", ["get", "field.classNames", ["loc", [null, [18, 33], [18, 49]]]]]]], ["content", "field.label", ["loc", [null, [19, 17], [19, 32]]]], ["block", "each", [["get", "field.checkboxes", ["loc", [null, [20, 18], [20, 34]]]]], [], 0, null, ["loc", [null, [20, 10], [22, 19]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 6
                },
                "end": {
                  "line": 27,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/templates/components/custom-form.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-text", [], ["label", ["subexpr", "@mut", [["get", "field.label", ["loc", [null, [26, 24], [26, 35]]]]], [], []], "property", ["subexpr", "@mut", [["get", "field.property", ["loc", [null, [26, 45], [26, 59]]]]], [], []], "class", ["subexpr", "@mut", [["get", "field.classNames", ["loc", [null, [26, 66], [26, 82]]]]], [], []]], ["loc", [null, [26, 8], [26, 84]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 30,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/templates/components/custom-form.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-input", [], ["label", ["subexpr", "@mut", [["get", "field.label", ["loc", [null, [29, 25], [29, 36]]]]], [], []], "property", ["subexpr", "@mut", [["get", "field.property", ["loc", [null, [29, 46], [29, 60]]]]], [], []], "class", ["subexpr", "@mut", [["get", "field.classNames", ["loc", [null, [29, 67], [29, 83]]]]], [], []]], ["loc", [null, [29, 8], [29, 85]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 6
                },
                "end": {
                  "line": 38,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/templates/components/custom-form.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "em-select", [], ["label", ["subexpr", "@mut", [["get", "field.label", ["loc", [null, [32, 28], [32, 39]]]]], [], []], "property", ["subexpr", "@mut", [["get", "field.property", ["loc", [null, [33, 21], [33, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "field.mappedValues", ["loc", [null, [34, 20], [34, 38]]]]], [], []], "class", ["subexpr", "@mut", [["get", "field.classNames", ["loc", [null, [35, 18], [35, 34]]]]], [], []], "prompt", ["subexpr", "@mut", [["get", "field.prompt", ["loc", [null, [36, 19], [36, 31]]]]], [], []]], ["loc", [null, [32, 10], [37, 12]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 39,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/components/custom-form.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "field.type", ["loc", [null, [4, 16], [4, 26]]]], "radio"], [], ["loc", [null, [4, 12], [4, 35]]]]], [], 0, null, ["loc", [null, [4, 6], [16, 13]]]], ["block", "if", [["subexpr", "eq", [["get", "field.type", ["loc", [null, [17, 16], [17, 26]]]], "checkbox"], [], ["loc", [null, [17, 12], [17, 38]]]]], [], 1, null, ["loc", [null, [17, 6], [24, 13]]]], ["block", "if", [["subexpr", "eq", [["get", "field.type", ["loc", [null, [25, 16], [25, 26]]]], "textarea"], [], ["loc", [null, [25, 12], [25, 38]]]]], [], 2, null, ["loc", [null, [25, 6], [27, 13]]]], ["block", "if", [["subexpr", "eq", [["get", "field.type", ["loc", [null, [28, 16], [28, 26]]]], "text"], [], ["loc", [null, [28, 12], [28, 34]]]]], [], 3, null, ["loc", [null, [28, 6], [30, 13]]]], ["block", "if", [["subexpr", "eq", [["get", "field.type", ["loc", [null, [31, 16], [31, 26]]]], "select"], [], ["loc", [null, [31, 12], [31, 36]]]]], [], 4, null, ["loc", [null, [31, 6], [38, 13]]]]],
          locals: ["field"],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/custom-form.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row form-group");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "row", ["loc", [null, [3, 12], [3, 15]]]]], [], 0, null, ["loc", [null, [3, 4], [39, 13]]]]],
        locals: ["row"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/custom-form.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "fieldsByRow", ["loc", [null, [1, 8], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [41, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/components/edit-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary on-white disabled-btn");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element5);
            morphs[1] = dom.createMorphAt(element5, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["disabledAction"], [], ["loc", [null, [8, 62], [8, 89]]]], ["content", "editPanelProps.updateButtonText", ["loc", [null, [8, 90], [8, 125]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary on-white");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'disabled');
            morphs[1] = dom.createElementMorph(element4);
            morphs[2] = dom.createMorphAt(element4, 1, 1);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "editPanelProps.isUpdateDisabled", ["loc", [null, [10, 92], [10, 123]]]]], ["element", "action", ["updateButtonAction"], [], ["loc", [null, [10, 49], [10, 80]]]], ["content", "editPanelProps.updateButtonText", ["loc", [null, [11, 10], [11, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "editPanelProps.disabledAction", ["loc", [null, [7, 12], [7, 41]]]]], [], 0, 1, ["loc", [null, [7, 6], [13, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 6
              },
              "end": {
                "line": 18,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default warning");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element3);
            morphs[1] = dom.createMorphAt(element3, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["cancel"], [], ["loc", [null, [17, 48], [17, 67]]]], ["content", "editPanelProps.cancelButtonText", ["loc", [null, [17, 68], [17, 103]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default warning");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["element", "action", ["cancel"], [], ["loc", [null, [19, 48], [19, 67]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "editPanelProps.cancelButtonText", ["loc", [null, [16, 12], [16, 43]]]]], [], 0, 1, ["loc", [null, [16, 6], [20, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 8
              },
              "end": {
                "line": 26,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["get", "button.buttonIcon", ["loc", [null, [25, 25], [25, 42]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1, 1, 1);
          morphs[3] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "button.class", ["loc", [null, [23, 23], [23, 35]]]]]]], ["element", "action", ["fireButtonAction", ["get", "button.buttonAction", ["loc", [null, [23, 67], [23, 86]]]]], [], ["loc", [null, [23, 39], [23, 88]]]], ["block", "if", [["get", "button.buttonIcon", ["loc", [null, [24, 14], [24, 31]]]]], [], 0, null, ["loc", [null, [24, 8], [26, 15]]]], ["content", "button.buttonText", ["loc", [null, [27, 8], [27, 29]]]]],
        locals: ["button"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/edit-panel.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-primary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-footer");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element7, 1, 1);
        morphs[2] = dom.createMorphAt(element7, 2, 2);
        morphs[3] = dom.createMorphAt(element7, 3, 3);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [3, 4], [3, 13]]]], ["block", "if", [["get", "editPanelProps.showUpdateButton", ["loc", [null, [6, 10], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [14, 11]]]], ["block", "unless", [["get", "editPanelProps.hideCancelButton", ["loc", [null, [15, 14], [15, 45]]]]], [], 1, null, ["loc", [null, [15, 4], [21, 15]]]], ["block", "each", [["get", "editPanelProps.additionalButtons", ["loc", [null, [22, 12], [22, 44]]]]], [], 2, null, ["loc", [null, [22, 4], [29, 13]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("hospitalrun/templates/components/ext-radio", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 8
              },
              "end": {
                "line": 5,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/templates/components/ext-radio.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "radio.value", ["loc", [null, [4, 33], [4, 44]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 53], [4, 58]]]]], [], []]], ["loc", [null, [4, 12], [4, 60]]]], ["content", "radio.label", ["loc", [null, [4, 61], [4, 76]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/templates/components/ext-radio.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "radio", ["loc", [null, [6, 33], [6, 38]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 47], [6, 52]]]]], [], []]], ["loc", [null, [6, 12], [6, 54]]]], ["content", "radio", ["loc", [null, [6, 55], [6, 64]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/ext-radio.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "radioClass", ["loc", [null, [2, 19], [2, 29]]]]], ["block", "if", [["get", "haveLabel", ["loc", [null, [3, 14], [3, 23]]]]], [], 0, 1, ["loc", [null, [3, 8], [7, 15]]]]],
        locals: ["radio"],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/ext-radio.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "radio");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          morphs[2] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "otherValue", ["loc", [null, [13, 33], [13, 43]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "value", ["loc", [null, [13, 52], [13, 57]]]]], [], []]], ["loc", [null, [13, 12], [13, 60]]]], ["content", "otherOptionLabel", ["loc", [null, [14, 12], [14, 32]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "otherValue", ["loc", [null, [14, 47], [14, 57]]]]], [], []], "class", "form-control"], ["loc", [null, [14, 33], [14, 80]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 7
          }
        },
        "moduleName": "hospitalrun/templates/components/ext-radio.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "content", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [9, 9]]]], ["block", "if", [["get", "includeOtherOption", ["loc", [null, [10, 6], [10, 24]]]]], [], 1, null, ["loc", [null, [10, 0], [17, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/inventory-location-picker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/inventory-location-picker.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "control-label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["content", "locationPicker.label", ["loc", [null, [3, 37], [3, 61]]]], ["inline", "location-select", [], ["locationPicker", ["subexpr", "@mut", [["get", "locationPicker", ["loc", [null, [4, 41], [4, 55]]]]], [], []]], ["loc", [null, [4, 8], [4, 58]]]]],
        locals: ["locationPicker"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 9
          }
        },
        "moduleName": "hospitalrun/templates/components/inventory-location-picker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "locationPickers", ["loc", [null, [1, 8], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [6, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/components/item-listing", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/item-listing.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        return morphs;
      },
      statements: [["inline", "nav-paging", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 31], [1, 46]]]]], [], []]], ["loc", [null, [1, 2], [1, 49]]]], ["content", "yield", ["loc", [null, [2, 2], [2, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/location-select", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "hospitalrun/templates/components/location-select.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "select-list", [], ["value", ["subexpr", "@mut", [["get", "locationPicker.selectedLocation", ["loc", [null, [2, 8], [2, 39]]]]], [], []], "content", ["subexpr", "@mut", [["get", "locationPicker.subLocationList", ["loc", [null, [3, 10], [3, 40]]]]], [], []], "class", "form-control", "optionValuePath", "selectObject", "optionLabelPath", "selectObject.locationNameWithQuantity", "action", ["subexpr", "@mut", [["get", "locationChange", ["loc", [null, [7, 9], [7, 23]]]]], [], []]], ["loc", [null, [1, 0], [8, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/logo-dark-svg", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/logo-dark-svg.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        dom.setNamespace("http://www.w3.org/2000/svg");
        var el1 = dom.createElement("svg");
        dom.setAttribute(el1, "class", "logo-svg");
        dom.setAttribute(el1, "xmlns", "http://www.w3.org/2000/svg");
        dom.setAttribute(el1, "xmlns:xlink", "http://www.w3.org/1999/xlink");
        dom.setAttribute(el1, "x", "0px");
        dom.setAttribute(el1, "y", "0px");
        dom.setAttribute(el1, "viewBox", "0 0 200 31.36");
        dom.setAttribute(el1, "enable-background", "new 0 0 200 31.36");
        dom.setAttributeNS(el1, "http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" <g> \n	<g>\n		<path fill=\"#273647\" d=\"M51.29,25.59h-4.67V14.71H34.95v10.89h-4.67V0.69h4.67V11.4h11.68V0.69h4.67V25.59z\"/>\n		<path fill=\"#273647\" d=\"M61.71,7.65c1.32,0,2.52,0.21,3.59,0.64c1.07,0.42,1.99,1.03,2.75,1.81c0.76,0.78,1.34,1.73,1.76,2.86\n			c0.41,1.13,0.62,2.38,0.62,3.77c0,1.4-0.21,2.66-0.62,3.79c-0.41,1.13-1,2.08-1.76,2.88c-0.76,0.79-1.67,1.4-2.75,1.83\n			c-1.07,0.42-2.27,0.64-3.59,0.64c-1.32,0-2.52-0.21-3.6-0.64c-1.08-0.42-2-1.03-2.76-1.83c-0.76-0.79-1.36-1.75-1.77-2.88\n			c-0.42-1.13-0.63-2.39-0.63-3.79c0-1.39,0.21-2.65,0.63-3.77c0.42-1.13,1.01-2.08,1.77-2.86c0.76-0.78,1.68-1.38,2.76-1.81\n			C59.19,7.86,60.39,7.65,61.71,7.65z M61.71,22.58c1.47,0,2.56-0.49,3.26-1.48c0.71-0.99,1.06-2.43,1.06-4.34s-0.35-3.36-1.06-4.36\n			c-0.71-1-1.79-1.5-3.26-1.5c-1.49,0-2.6,0.5-3.31,1.51c-0.71,1-1.07,2.45-1.07,4.35c0,1.89,0.36,3.34,1.07,4.33\n			C59.11,22.08,60.21,22.58,61.71,22.58z\"/>\n		<path fill=\"#273647\" d=\"M83.4,11.37c-0.11,0.18-0.24,0.31-0.36,0.39c-0.13,0.07-0.29,0.11-0.48,0.11c-0.21,0-0.43-0.06-0.66-0.17\n			c-0.24-0.11-0.51-0.24-0.82-0.39c-0.31-0.14-0.66-0.27-1.06-0.39c-0.4-0.11-0.86-0.17-1.4-0.17c-0.84,0-1.5,0.18-1.98,0.53\n			c-0.48,0.36-0.72,0.82-0.72,1.39c0,0.38,0.12,0.7,0.37,0.96c0.25,0.26,0.57,0.49,0.98,0.68c0.41,0.2,0.87,0.37,1.39,0.53\n			c0.52,0.15,1.04,0.32,1.58,0.51c0.54,0.18,1.07,0.39,1.58,0.63c0.52,0.24,0.98,0.53,1.39,0.9c0.41,0.36,0.73,0.8,0.98,1.3\n			c0.25,0.51,0.37,1.11,0.37,1.83c0,0.85-0.16,1.63-0.47,2.35c-0.31,0.72-0.76,1.34-1.36,1.86c-0.6,0.52-1.33,0.93-2.21,1.22\n			c-0.88,0.29-1.89,0.44-3.02,0.44c-0.61,0-1.2-0.05-1.78-0.16c-0.58-0.11-1.14-0.26-1.67-0.46c-0.53-0.2-1.03-0.42-1.48-0.69\n			c-0.45-0.26-0.85-0.55-1.2-0.86l0.98-1.62c0.13-0.2,0.28-0.34,0.45-0.45c0.17-0.1,0.39-0.15,0.65-0.15c0.26,0,0.51,0.07,0.75,0.22\n			c0.24,0.15,0.51,0.31,0.82,0.48c0.31,0.17,0.67,0.33,1.09,0.48c0.42,0.15,0.95,0.22,1.59,0.22c0.51,0,0.94-0.06,1.3-0.18\n			c0.36-0.12,0.66-0.28,0.9-0.47c0.24-0.2,0.41-0.42,0.52-0.68c0.11-0.26,0.16-0.53,0.16-0.8c0-0.41-0.12-0.75-0.37-1.02\n			c-0.25-0.26-0.57-0.49-0.98-0.69c-0.41-0.2-0.87-0.37-1.4-0.53c-0.52-0.15-1.06-0.32-1.6-0.51c-0.55-0.18-1.08-0.4-1.6-0.65\n			c-0.52-0.25-0.99-0.56-1.4-0.94c-0.41-0.38-0.73-0.84-0.98-1.4c-0.25-0.55-0.37-1.22-0.37-2c0-0.72,0.14-1.41,0.43-2.07\n			c0.29-0.65,0.71-1.23,1.27-1.71c0.56-0.49,1.25-0.88,2.08-1.17c0.83-0.29,1.79-0.44,2.88-0.44c1.22,0,2.33,0.2,3.32,0.6\n			c1,0.4,1.83,0.93,2.5,1.58L83.4,11.37z\"/>\n		<path fill=\"#273647\" d=\"M86.58,31.36V7.92h2.6c0.28,0,0.51,0.06,0.71,0.19c0.2,0.13,0.32,0.32,0.38,0.59l0.34,1.64\n			c0.71-0.82,1.53-1.48,2.45-1.98c0.92-0.51,2.01-0.76,3.25-0.76c0.96,0,1.85,0.2,2.64,0.6c0.8,0.4,1.49,0.98,2.07,1.75\n			c0.58,0.76,1.03,1.71,1.34,2.82c0.32,1.12,0.47,2.4,0.47,3.85c0,1.32-0.18,2.54-0.53,3.67c-0.36,1.13-0.86,2.1-1.52,2.93\n			c-0.66,0.83-1.46,1.47-2.39,1.94s-1.98,0.7-3.14,0.7c-1,0-1.85-0.15-2.54-0.46c-0.69-0.3-1.32-0.73-1.87-1.27v7.23H86.58z\n			 M94.85,10.95c-0.88,0-1.64,0.19-2.26,0.56c-0.63,0.37-1.21,0.9-1.75,1.58v7.92c0.48,0.6,1.01,1.01,1.58,1.25\n			c0.57,0.24,1.18,0.35,1.83,0.35c0.64,0,1.23-0.12,1.75-0.36c0.52-0.24,0.96-0.61,1.33-1.1c0.36-0.49,0.64-1.12,0.84-1.87\n			c0.2-0.75,0.29-1.64,0.29-2.66c0-1.03-0.08-1.91-0.25-2.63c-0.17-0.72-0.41-1.3-0.71-1.75c-0.31-0.45-0.69-0.78-1.13-0.98\n			C95.92,11.06,95.41,10.95,94.85,10.95z\"/>\n		<path fill=\"#273647\" d=\"M109.85,2.77c0,0.37-0.07,0.71-0.22,1.03c-0.15,0.32-0.35,0.6-0.59,0.84c-0.25,0.24-0.54,0.43-0.87,0.58\n			c-0.33,0.14-0.69,0.22-1.07,0.22c-0.37,0-0.71-0.07-1.04-0.22c-0.33-0.14-0.61-0.34-0.85-0.58c-0.24-0.24-0.43-0.52-0.58-0.84\n			c-0.14-0.32-0.22-0.67-0.22-1.03c0-0.38,0.07-0.73,0.22-1.07c0.14-0.33,0.34-0.62,0.58-0.86c0.24-0.24,0.53-0.43,0.85-0.58\n			c0.33-0.14,0.67-0.22,1.04-0.22c0.38,0,0.73,0.07,1.07,0.22c0.33,0.14,0.62,0.34,0.87,0.58c0.25,0.24,0.44,0.53,0.59,0.86\n			C109.78,2.04,109.85,2.39,109.85,2.77z M109.22,7.92v17.67h-4.25V7.92H109.22z\"/>\n		<path fill=\"#273647\" d=\"M118.45,25.87c-1.53,0-2.7-0.43-3.53-1.3c-0.83-0.87-1.24-2.06-1.24-3.59v-9.87h-1.79\n			c-0.23,0-0.43-0.07-0.59-0.22c-0.17-0.15-0.25-0.37-0.25-0.67V8.53l2.84-0.47l0.9-4.82c0.05-0.23,0.15-0.41,0.32-0.53\n			c0.17-0.13,0.38-0.19,0.63-0.19h2.2v5.56h4.65v3.03h-4.65v9.58c0,0.55,0.14,0.98,0.41,1.29c0.28,0.31,0.64,0.46,1.1,0.46\n			c0.26,0,0.48-0.03,0.66-0.09c0.18-0.06,0.33-0.13,0.47-0.2c0.13-0.07,0.25-0.14,0.35-0.2c0.1-0.06,0.21-0.09,0.31-0.09\n			c0.13,0,0.23,0.03,0.31,0.09c0.08,0.06,0.17,0.16,0.26,0.28l1.27,2.07c-0.62,0.52-1.33,0.91-2.14,1.17\n			C120.14,25.74,119.31,25.87,118.45,25.87z\"/>\n		<path fill=\"#273647\" d=\"M138.44,25.59h-1.91c-0.4,0-0.72-0.06-0.95-0.18c-0.23-0.12-0.4-0.36-0.52-0.73l-0.38-1.26\n			c-0.45,0.4-0.89,0.75-1.32,1.06c-0.43,0.3-0.88,0.56-1.33,0.77c-0.46,0.21-0.95,0.36-1.46,0.47c-0.52,0.1-1.09,0.15-1.72,0.15\n			c-0.75,0-1.44-0.1-2.07-0.3c-0.63-0.2-1.17-0.5-1.63-0.91c-0.45-0.4-0.81-0.9-1.06-1.5c-0.25-0.6-0.38-1.3-0.38-2.09\n			c0-0.67,0.17-1.33,0.53-1.98c0.35-0.65,0.93-1.24,1.75-1.76c0.82-0.52,1.9-0.96,3.26-1.3c1.35-0.35,3.04-0.52,5.05-0.52v-1.04\n			c0-1.19-0.25-2.07-0.75-2.65c-0.5-0.57-1.23-0.86-2.18-0.86c-0.69,0-1.26,0.08-1.72,0.24c-0.46,0.16-0.86,0.34-1.2,0.54\n			c-0.34,0.2-0.65,0.38-0.94,0.54c-0.29,0.16-0.6,0.24-0.95,0.24c-0.29,0-0.53-0.07-0.74-0.22c-0.21-0.15-0.37-0.33-0.5-0.55\n			l-0.77-1.36c2.03-1.86,4.48-2.79,7.35-2.79c1.03,0,1.95,0.17,2.76,0.51c0.81,0.34,1.5,0.81,2.06,1.41\n			c0.56,0.6,0.99,1.32,1.28,2.16c0.29,0.84,0.44,1.76,0.44,2.76V25.59z M130.18,22.94c0.44,0,0.84-0.04,1.21-0.12\n			c0.37-0.08,0.71-0.2,1.04-0.36c0.33-0.16,0.64-0.35,0.95-0.58c0.3-0.23,0.61-0.51,0.92-0.82V18.1c-1.24,0-2.28,0.08-3.11,0.23\n			c-0.83,0.16-1.5,0.36-2.01,0.6c-0.51,0.24-0.86,0.53-1.08,0.85c-0.21,0.32-0.32,0.68-0.32,1.06c0,0.75,0.22,1.29,0.66,1.61\n			C128.89,22.78,129.46,22.94,130.18,22.94z\"/>\n		<path fill=\"#273647\" d=\"M145.78,0v25.59h-4.25V0H145.78z\"/>\n	</g>\n	<g>\n		<path fill=\"#1ABC9C\" d=\"M152.86,14.18v11.41h-1.82V0.37h6.43c2.91,0,5.08,0.56,6.52,1.68c1.44,1.12,2.16,2.77,2.16,4.95\n			c0,0.96-0.17,1.84-0.5,2.64c-0.33,0.8-0.81,1.49-1.43,2.09c-0.62,0.6-1.38,1.09-2.25,1.48c-0.88,0.39-1.87,0.64-2.98,0.76\n			c0.29,0.18,0.54,0.42,0.77,0.71l8.68,10.91h-1.59c-0.19,0-0.35-0.04-0.49-0.11c-0.14-0.07-0.27-0.19-0.4-0.36l-8.07-10.23\n			c-0.2-0.26-0.42-0.45-0.65-0.55c-0.23-0.11-0.59-0.16-1.08-0.16H152.86z M152.86,12.82h4.38c1.12,0,2.12-0.13,3-0.4\n			c0.88-0.27,1.63-0.65,2.25-1.15c0.61-0.5,1.08-1.1,1.4-1.8c0.32-0.7,0.48-1.49,0.48-2.37c0-1.79-0.59-3.12-1.76-3.99\n			c-1.18-0.87-2.89-1.3-5.13-1.3h-4.62V12.82z\"/>\n		<path fill=\"#1ABC9C\" d=\"M170.85,7.85v11.33c0,1.66,0.38,2.97,1.14,3.91c0.76,0.94,1.93,1.42,3.49,1.42c1.16,0,2.24-0.29,3.24-0.88\n			c1-0.59,1.9-1.4,2.7-2.45V7.85h1.69v17.73h-0.93c-0.33,0-0.5-0.15-0.51-0.46l-0.16-2.64c-0.82,1.02-1.77,1.84-2.85,2.46\n			c-1.08,0.62-2.28,0.93-3.6,0.93c-0.99,0-1.85-0.15-2.59-0.46c-0.74-0.31-1.35-0.75-1.84-1.34c-0.49-0.58-0.86-1.28-1.11-2.1\n			c-0.25-0.82-0.37-1.75-0.37-2.78V7.85H170.85z\"/>\n		<path fill=\"#1ABC9C\" d=\"M186.06,25.58V7.85h0.93c0.31,0,0.49,0.15,0.53,0.45l0.16,2.67c0.81-1.02,1.75-1.84,2.82-2.47\n			c1.08-0.62,2.27-0.94,3.59-0.94c0.97,0,1.83,0.15,2.58,0.46c0.74,0.31,1.36,0.75,1.84,1.34c0.49,0.58,0.86,1.28,1.1,2.1\n			c0.25,0.82,0.37,1.75,0.37,2.78v11.33h-1.69V14.25c0-1.66-0.38-2.97-1.14-3.91c-0.76-0.94-1.92-1.42-3.49-1.42\n			c-1.16,0-2.25,0.3-3.24,0.9c-1,0.6-1.89,1.42-2.67,2.47v13.29H186.06z\"/>\n	</g>\n	<g>\n		<polygon fill=\"#1ABC9C\" points=\"16.68,9.03 16.68,0.69 8.34,0.69 8.34,9.03 0,9.03 0,17.36 8.34,17.36 8.34,25.7 16.68,25.7\n			16.68,17.36 25.01,17.36 25.01,9.03 		\"/>\n	</g>\n</g> ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/logo-svg", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/logo-svg.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        dom.setNamespace("http://www.w3.org/2000/svg");
        var el1 = dom.createElement("svg");
        dom.setAttribute(el1, "class", "logo-svg");
        dom.setAttribute(el1, "xmlns", "http://www.w3.org/2000/svg");
        dom.setAttribute(el1, "xmlns:xlink", "http://www.w3.org/1999/xlink");
        dom.setAttribute(el1, "x", "0px");
        dom.setAttribute(el1, "y", "0px");
        dom.setAttribute(el1, "viewBox", "0 0 200 31.36");
        dom.setAttribute(el1, "enable-background", "new 0 0 200 31.36");
        dom.setAttributeNS(el1, "http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" <g> \n	<g>\n		<path fill=\"#FFFFFF\" d=\"M51.29,25.59h-4.67V14.71H34.95v10.89h-4.67V0.69h4.67V11.4h11.68V0.69h4.67V25.59z\"/>\n		<path fill=\"#FFFFFF\" d=\"M61.71,7.65c1.32,0,2.52,0.21,3.59,0.64c1.07,0.42,1.99,1.03,2.75,1.81c0.76,0.78,1.34,1.73,1.76,2.86\n			c0.41,1.13,0.62,2.38,0.62,3.77c0,1.4-0.21,2.66-0.62,3.79c-0.41,1.13-1,2.08-1.76,2.88c-0.76,0.79-1.67,1.4-2.75,1.83\n			c-1.07,0.42-2.27,0.64-3.59,0.64c-1.32,0-2.52-0.21-3.6-0.64c-1.08-0.42-2-1.03-2.76-1.83c-0.76-0.79-1.36-1.75-1.77-2.88\n			c-0.42-1.13-0.63-2.39-0.63-3.79c0-1.39,0.21-2.65,0.63-3.77c0.42-1.13,1.01-2.08,1.77-2.86c0.76-0.78,1.68-1.38,2.76-1.81\n			C59.19,7.86,60.39,7.65,61.71,7.65z M61.71,22.58c1.47,0,2.56-0.49,3.26-1.48c0.71-0.99,1.06-2.43,1.06-4.34s-0.35-3.36-1.06-4.36\n			c-0.71-1-1.79-1.5-3.26-1.5c-1.49,0-2.6,0.5-3.31,1.51c-0.71,1-1.07,2.45-1.07,4.35c0,1.89,0.36,3.34,1.07,4.33\n			C59.11,22.08,60.21,22.58,61.71,22.58z\"/>\n		<path fill=\"#FFFFFF\" d=\"M83.4,11.37c-0.11,0.18-0.24,0.31-0.36,0.39c-0.13,0.07-0.29,0.11-0.48,0.11c-0.21,0-0.43-0.06-0.66-0.17\n			c-0.24-0.11-0.51-0.24-0.82-0.39c-0.31-0.14-0.66-0.27-1.06-0.39c-0.4-0.11-0.86-0.17-1.4-0.17c-0.84,0-1.5,0.18-1.98,0.53\n			c-0.48,0.36-0.72,0.82-0.72,1.39c0,0.38,0.12,0.7,0.37,0.96c0.25,0.26,0.57,0.49,0.98,0.68c0.41,0.2,0.87,0.37,1.39,0.53\n			c0.52,0.15,1.04,0.32,1.58,0.51c0.54,0.18,1.07,0.39,1.58,0.63c0.52,0.24,0.98,0.53,1.39,0.9c0.41,0.36,0.73,0.8,0.98,1.3\n			c0.25,0.51,0.37,1.11,0.37,1.83c0,0.85-0.16,1.63-0.47,2.35c-0.31,0.72-0.76,1.34-1.36,1.86c-0.6,0.52-1.33,0.93-2.21,1.22\n			c-0.88,0.29-1.89,0.44-3.02,0.44c-0.61,0-1.2-0.05-1.78-0.16c-0.58-0.11-1.14-0.26-1.67-0.46c-0.53-0.2-1.03-0.42-1.48-0.69\n			c-0.45-0.26-0.85-0.55-1.2-0.86l0.98-1.62c0.13-0.2,0.28-0.34,0.45-0.45c0.17-0.1,0.39-0.15,0.65-0.15c0.26,0,0.51,0.07,0.75,0.22\n			c0.24,0.15,0.51,0.31,0.82,0.48c0.31,0.17,0.67,0.33,1.09,0.48c0.42,0.15,0.95,0.22,1.59,0.22c0.51,0,0.94-0.06,1.3-0.18\n			c0.36-0.12,0.66-0.28,0.9-0.47c0.24-0.2,0.41-0.42,0.52-0.68c0.11-0.26,0.16-0.53,0.16-0.8c0-0.41-0.12-0.75-0.37-1.02\n			c-0.25-0.26-0.57-0.49-0.98-0.69c-0.41-0.2-0.87-0.37-1.4-0.53c-0.52-0.15-1.06-0.32-1.6-0.51c-0.55-0.18-1.08-0.4-1.6-0.65\n			c-0.52-0.25-0.99-0.56-1.4-0.94c-0.41-0.38-0.73-0.84-0.98-1.4c-0.25-0.55-0.37-1.22-0.37-2c0-0.72,0.14-1.41,0.43-2.07\n			c0.29-0.65,0.71-1.23,1.27-1.71c0.56-0.49,1.25-0.88,2.08-1.17c0.83-0.29,1.79-0.44,2.88-0.44c1.22,0,2.33,0.2,3.32,0.6\n			c1,0.4,1.83,0.93,2.5,1.58L83.4,11.37z\"/>\n		<path fill=\"#FFFFFF\" d=\"M86.58,31.36V7.92h2.6c0.28,0,0.51,0.06,0.71,0.19c0.2,0.13,0.32,0.32,0.38,0.59l0.34,1.64\n			c0.71-0.82,1.53-1.48,2.45-1.98c0.92-0.51,2.01-0.76,3.25-0.76c0.96,0,1.85,0.2,2.64,0.6c0.8,0.4,1.49,0.98,2.07,1.75\n			c0.58,0.76,1.03,1.71,1.34,2.82c0.32,1.12,0.47,2.4,0.47,3.85c0,1.32-0.18,2.54-0.53,3.67c-0.36,1.13-0.86,2.1-1.52,2.93\n			c-0.66,0.83-1.46,1.47-2.39,1.94s-1.98,0.7-3.14,0.7c-1,0-1.85-0.15-2.54-0.46c-0.69-0.3-1.32-0.73-1.87-1.27v7.23H86.58z\n			 M94.85,10.95c-0.88,0-1.64,0.19-2.26,0.56c-0.63,0.37-1.21,0.9-1.75,1.58v7.92c0.48,0.6,1.01,1.01,1.58,1.25\n			c0.57,0.24,1.18,0.35,1.83,0.35c0.64,0,1.23-0.12,1.75-0.36c0.52-0.24,0.96-0.61,1.33-1.1c0.36-0.49,0.64-1.12,0.84-1.87\n			c0.2-0.75,0.29-1.64,0.29-2.66c0-1.03-0.08-1.91-0.25-2.63c-0.17-0.72-0.41-1.3-0.71-1.75c-0.31-0.45-0.69-0.78-1.13-0.98\n			C95.92,11.06,95.41,10.95,94.85,10.95z\"/>\n		<path fill=\"#FFFFFF\" d=\"M109.85,2.77c0,0.37-0.07,0.71-0.22,1.03c-0.15,0.32-0.35,0.6-0.59,0.84c-0.25,0.24-0.54,0.43-0.87,0.58\n			c-0.33,0.14-0.69,0.22-1.07,0.22c-0.37,0-0.71-0.07-1.04-0.22c-0.33-0.14-0.61-0.34-0.85-0.58c-0.24-0.24-0.43-0.52-0.58-0.84\n			c-0.14-0.32-0.22-0.67-0.22-1.03c0-0.38,0.07-0.73,0.22-1.07c0.14-0.33,0.34-0.62,0.58-0.86c0.24-0.24,0.53-0.43,0.85-0.58\n			c0.33-0.14,0.67-0.22,1.04-0.22c0.38,0,0.73,0.07,1.07,0.22c0.33,0.14,0.62,0.34,0.87,0.58c0.25,0.24,0.44,0.53,0.59,0.86\n			C109.78,2.04,109.85,2.39,109.85,2.77z M109.22,7.92v17.67h-4.25V7.92H109.22z\"/>\n		<path fill=\"#FFFFFF\" d=\"M118.45,25.87c-1.53,0-2.7-0.43-3.53-1.3c-0.83-0.87-1.24-2.06-1.24-3.59v-9.87h-1.79\n			c-0.23,0-0.43-0.07-0.59-0.22c-0.17-0.15-0.25-0.37-0.25-0.67V8.53l2.84-0.47l0.9-4.82c0.05-0.23,0.15-0.41,0.32-0.53\n			c0.17-0.13,0.38-0.19,0.63-0.19h2.2v5.56h4.65v3.03h-4.65v9.58c0,0.55,0.14,0.98,0.41,1.29c0.28,0.31,0.64,0.46,1.1,0.46\n			c0.26,0,0.48-0.03,0.66-0.09c0.18-0.06,0.33-0.13,0.47-0.2c0.13-0.07,0.25-0.14,0.35-0.2c0.1-0.06,0.21-0.09,0.31-0.09\n			c0.13,0,0.23,0.03,0.31,0.09c0.08,0.06,0.17,0.16,0.26,0.28l1.27,2.07c-0.62,0.52-1.33,0.91-2.14,1.17\n			C120.14,25.74,119.31,25.87,118.45,25.87z\"/>\n		<path fill=\"#FFFFFF\" d=\"M138.44,25.59h-1.91c-0.4,0-0.72-0.06-0.95-0.18c-0.23-0.12-0.4-0.36-0.52-0.73l-0.38-1.26\n			c-0.45,0.4-0.89,0.75-1.32,1.06c-0.43,0.3-0.88,0.56-1.33,0.77c-0.46,0.21-0.95,0.36-1.46,0.47c-0.52,0.1-1.09,0.15-1.72,0.15\n			c-0.75,0-1.44-0.1-2.07-0.3c-0.63-0.2-1.17-0.5-1.63-0.91c-0.45-0.4-0.81-0.9-1.06-1.5c-0.25-0.6-0.38-1.3-0.38-2.09\n			c0-0.67,0.17-1.33,0.53-1.98c0.35-0.65,0.93-1.24,1.75-1.76c0.82-0.52,1.9-0.96,3.26-1.3c1.35-0.35,3.04-0.52,5.05-0.52v-1.04\n			c0-1.19-0.25-2.07-0.75-2.65c-0.5-0.57-1.23-0.86-2.18-0.86c-0.69,0-1.26,0.08-1.72,0.24c-0.46,0.16-0.86,0.34-1.2,0.54\n			c-0.34,0.2-0.65,0.38-0.94,0.54c-0.29,0.16-0.6,0.24-0.95,0.24c-0.29,0-0.53-0.07-0.74-0.22c-0.21-0.15-0.37-0.33-0.5-0.55\n			l-0.77-1.36c2.03-1.86,4.48-2.79,7.35-2.79c1.03,0,1.95,0.17,2.76,0.51c0.81,0.34,1.5,0.81,2.06,1.41\n			c0.56,0.6,0.99,1.32,1.28,2.16c0.29,0.84,0.44,1.76,0.44,2.76V25.59z M130.18,22.94c0.44,0,0.84-0.04,1.21-0.12\n			c0.37-0.08,0.71-0.2,1.04-0.36c0.33-0.16,0.64-0.35,0.95-0.58c0.3-0.23,0.61-0.51,0.92-0.82V18.1c-1.24,0-2.28,0.08-3.11,0.23\n			c-0.83,0.16-1.5,0.36-2.01,0.6c-0.51,0.24-0.86,0.53-1.08,0.85c-0.21,0.32-0.32,0.68-0.32,1.06c0,0.75,0.22,1.29,0.66,1.61\n			C128.89,22.78,129.46,22.94,130.18,22.94z\"/>\n		<path fill=\"#FFFFFF\" d=\"M145.78,0v25.59h-4.25V0H145.78z\"/>\n	</g>\n	<g>\n		<path fill=\"#1ABC9C\" d=\"M152.86,14.18v11.41h-1.82V0.37h6.43c2.91,0,5.08,0.56,6.52,1.68c1.44,1.12,2.16,2.77,2.16,4.95\n			c0,0.96-0.17,1.84-0.5,2.64c-0.33,0.8-0.81,1.49-1.43,2.09c-0.62,0.6-1.38,1.09-2.25,1.48c-0.88,0.39-1.87,0.64-2.98,0.76\n			c0.29,0.18,0.54,0.42,0.77,0.71l8.68,10.91h-1.59c-0.19,0-0.35-0.04-0.49-0.11c-0.14-0.07-0.27-0.19-0.4-0.36l-8.07-10.23\n			c-0.2-0.26-0.42-0.45-0.65-0.55c-0.23-0.11-0.59-0.16-1.08-0.16H152.86z M152.86,12.82h4.38c1.12,0,2.12-0.13,3-0.4\n			c0.88-0.27,1.63-0.65,2.25-1.15c0.61-0.5,1.08-1.1,1.4-1.8c0.32-0.7,0.48-1.49,0.48-2.37c0-1.79-0.59-3.12-1.76-3.99\n			c-1.18-0.87-2.89-1.3-5.13-1.3h-4.62V12.82z\"/>\n		<path fill=\"#1ABC9C\" d=\"M170.85,7.85v11.33c0,1.66,0.38,2.97,1.14,3.91c0.76,0.94,1.93,1.42,3.49,1.42c1.16,0,2.24-0.29,3.24-0.88\n			c1-0.59,1.9-1.4,2.7-2.45V7.85h1.69v17.73h-0.93c-0.33,0-0.5-0.15-0.51-0.46l-0.16-2.64c-0.82,1.02-1.77,1.84-2.85,2.46\n			c-1.08,0.62-2.28,0.93-3.6,0.93c-0.99,0-1.85-0.15-2.59-0.46c-0.74-0.31-1.35-0.75-1.84-1.34c-0.49-0.58-0.86-1.28-1.11-2.1\n			c-0.25-0.82-0.37-1.75-0.37-2.78V7.85H170.85z\"/>\n		<path fill=\"#1ABC9C\" d=\"M186.06,25.58V7.85h0.93c0.31,0,0.49,0.15,0.53,0.45l0.16,2.67c0.81-1.02,1.75-1.84,2.82-2.47\n			c1.08-0.62,2.27-0.94,3.59-0.94c0.97,0,1.83,0.15,2.58,0.46c0.74,0.31,1.36,0.75,1.84,1.34c0.49,0.58,0.86,1.28,1.1,2.1\n			c0.25,0.82,0.37,1.75,0.37,2.78v11.33h-1.69V14.25c0-1.66-0.38-2.97-1.14-3.91c-0.76-0.94-1.92-1.42-3.49-1.42\n			c-1.16,0-2.25,0.3-3.24,0.9c-1,0.6-1.89,1.42-2.67,2.47v13.29H186.06z\"/>\n	</g>\n	<g>\n		<polygon fill=\"#1ABC9C\" points=\"16.68,9.03 16.68,0.69 8.34,0.69 8.34,9.03 0,9.03 0,17.36 8.34,17.36 8.34,25.7 16.68,25.7\n			16.68,17.36 25.01,17.36 25.01,9.03 		\"/>\n	</g>\n</g>  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/menu-svg", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 6
          }
        },
        "moduleName": "hospitalrun/templates/components/menu-svg.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        dom.setNamespace("http://www.w3.org/2000/svg");
        var el1 = dom.createElement("svg");
        dom.setAttribute(el1, "version", "1.1");
        dom.setAttribute(el1, "class", "icon-nav");
        dom.setAttribute(el1, "xmlns", "http://www.w3.org/2000/svg");
        dom.setAttribute(el1, "xmlns:xlink", "http://www.w3.org/1999/xlink");
        dom.setAttribute(el1, "x", "0px");
        dom.setAttribute(el1, "y", "0px");
        dom.setAttribute(el1, "width", "28px");
        dom.setAttribute(el1, "height", "21px");
        dom.setAttribute(el1, "viewBox", "0 0 28 21");
        dom.setAttribute(el1, "enable-background", "new 0 0 28 21");
        dom.setAttributeNS(el1, "http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("path");
        dom.setAttribute(el2, "fill-rule", "evenodd");
        dom.setAttribute(el2, "clip-rule", "evenodd");
        dom.setAttribute(el2, "fill", "#FFFFFF");
        dom.setAttribute(el2, "d", "M2.154,16.8h23.692C27.036,16.8,28,17.74,28,18.9\n  c0,1.16-0.964,2.1-2.154,2.1H2.154C0.964,21,0,20.06,0,18.9C0,17.74,0.964,16.8,2.154,16.8z M2.154,8.4h23.692\n  C27.036,8.4,28,9.34,28,10.5c0,1.16-0.964,2.1-2.154,2.1H2.154C0.964,12.6,0,11.66,0,10.5C0,9.34,0.964,8.4,2.154,8.4z M2.154,0\n  h23.692C27.036,0,28,0.94,28,2.1c0,1.16-0.964,2.1-2.154,2.1H2.154C0.964,4.2,0,3.26,0,2.1C0,0.94,0.964,0,2.154,0z");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 16
            },
            "end": {
              "line": 14,
              "column": 16
            }
          },
          "moduleName": "hospitalrun/templates/components/modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'disabled');
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["btn btn-primary on-white ", ["get", "updateButtonClass", ["loc", [null, [13, 62], [13, 79]]]]]]], ["attribute", "disabled", ["get", "isUpdateDisabled", ["loc", [null, [13, 121], [13, 137]]]]], ["element", "action", ["updateAction"], [], ["loc", [null, [13, 83], [13, 109]]]], ["content", "updateButtonText", ["loc", [null, [13, 140], [13, 162]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 16
            },
            "end": {
              "line": 17,
              "column": 16
            }
          },
          "moduleName": "hospitalrun/templates/components/modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default warning");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["cancelAction"], [], ["loc", [null, [16, 60], [16, 85]]]], ["content", "cancelBtnText", ["loc", [null, [16, 86], [16, 103]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "modal fade");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "modal-dialog");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "modal-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "modal-header");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "button");
        dom.setAttribute(el5, "class", "close");
        dom.setAttribute(el5, "data-dismiss", "modal");
        dom.setAttribute(el5, "aria-hidden", "true");
        var el6 = dom.createTextNode("×");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        dom.setAttribute(el5, "class", "modal-title");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "modal-body");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "modal-footer");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1, 1]);
        var element3 = dom.childAt(element2, [5]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1, 3]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 2, 2);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [6, 40], [6, 49]]]], ["content", "yield", ["loc", [null, [9, 16], [9, 25]]]], ["block", "unless", [["get", "hideUpdateButton", ["loc", [null, [12, 26], [12, 42]]]]], [], 0, null, ["loc", [null, [12, 16], [14, 27]]]], ["block", "unless", [["get", "hideCancelButton", ["loc", [null, [15, 26], [15, 42]]]]], [], 1, null, ["loc", [null, [15, 16], [17, 27]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/nav-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["mega-octicon ", ["get", "nav.iconClass", ["loc", [null, [4, 34], [4, 47]]]]]]], ["content", "nav.localizedTitle", ["loc", [null, [4, 58], [4, 80]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 13,
                        "column": 12
                      },
                      "end": {
                        "line": 15,
                        "column": 12
                      }
                    },
                    "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element1 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element1, 'class');
                    morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["octicon ", ["get", "subnav.iconClass", ["loc", [null, [14, 35], [14, 51]]]]]]], ["content", "subnav.localizedTitle", ["loc", [null, [14, 62], [14, 87]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 10
                    },
                    "end": {
                      "line": 16,
                      "column": 10
                    }
                  },
                  "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "link-to", [["get", "subnav.route", ["loc", [null, [13, 23], [13, 35]]]], ["get", "subnav.subroute", ["loc", [null, [13, 36], [13, 51]]]]], ["class", "category-sub-item nav-link"], 0, null, ["loc", [null, [13, 12], [15, 24]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 17,
                        "column": 12
                      },
                      "end": {
                        "line": 19,
                        "column": 12
                      }
                    },
                    "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element0, 'class');
                    morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["octicon ", ["get", "subnav.iconClass", ["loc", [null, [18, 35], [18, 51]]]]]]], ["content", "subnav.localizedTitle", ["loc", [null, [18, 62], [18, 87]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 10
                    },
                    "end": {
                      "line": 20,
                      "column": 10
                    }
                  },
                  "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "link-to", [["get", "subnav.route", ["loc", [null, [17, 23], [17, 35]]]]], ["class", "category-sub-item nav-link"], 0, null, ["loc", [null, [17, 12], [19, 24]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 8
                  },
                  "end": {
                    "line": 22,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element2);
                morphs[1] = dom.createMorphAt(element2, 1, 1);
                return morphs;
              },
              statements: [["element", "action", ["resetNav"], [], ["loc", [null, [11, 15], [11, 36]]]], ["block", "if", [["get", "subnav.subroute", ["loc", [null, [12, 16], [12, 31]]]]], [], 0, 1, ["loc", [null, [12, 10], [20, 17]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 6
                },
                "end": {
                  "line": 23,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "subnav.show", ["loc", [null, [10, 14], [10, 25]]]]], [], 0, null, ["loc", [null, [10, 8], [22, 15]]]]],
            locals: ["subnav"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "category-sub-items");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "nav.subnav", ["loc", [null, [9, 14], [9, 24]]]]], [], 0, null, ["loc", [null, [9, 6], [23, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "category-title");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element4);
          morphs[1] = dom.createMorphAt(element4, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["toggleContent"], [], ["loc", [null, [2, 30], [2, 56]]]], ["block", "link-to", [["get", "nav.route", ["loc", [null, [3, 15], [3, 24]]]]], ["class", "primary-section-link nav-link"], 0, null, ["loc", [null, [3, 4], [5, 16]]]], ["block", "if", [["get", "isShowing", ["loc", [null, [7, 8], [7, 17]]]]], [], 1, null, ["loc", [null, [7, 2], [25, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/nav-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "show", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [26, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/components/nav-paging", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/templates/components/nav-paging.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default on-white");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-step-backward");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'disabled');
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "paginationProps.disablePreviousPage", ["loc", [null, [3, 79], [3, 114]]]]], ["element", "action", ["firstPage"], [], ["loc", [null, [3, 45], [3, 67]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/templates/components/nav-paging.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default on-white");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-step-forward");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "paginationProps.disableNextPage", ["loc", [null, [14, 78], [14, 109]]]]], ["element", "action", ["lastPage"], [], ["loc", [null, [14, 45], [14, 66]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/nav-paging.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default on-white");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-chevron-left");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default on-white");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-chevron-right");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [2]);
          var element3 = dom.childAt(fragment, [4]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createAttrMorph(element2, 'disabled');
          morphs[2] = dom.createElementMorph(element2);
          morphs[3] = dom.createAttrMorph(element3, 'disabled');
          morphs[4] = dom.createElementMorph(element3);
          morphs[5] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "paginationProps.showFirstPageButton", ["loc", [null, [2, 8], [2, 43]]]]], [], 0, null, ["loc", [null, [2, 2], [6, 9]]]], ["attribute", "disabled", ["get", "paginationProps.disablePreviousPage", ["loc", [null, [7, 80], [7, 115]]]]], ["element", "action", ["previousPage"], [], ["loc", [null, [7, 43], [7, 68]]]], ["attribute", "disabled", ["get", "paginationProps.disableNextPage", ["loc", [null, [10, 76], [10, 107]]]]], ["element", "action", ["nextPage"], [], ["loc", [null, [10, 43], [10, 64]]]], ["block", "if", [["get", "paginationProps.showLastPageButton", ["loc", [null, [13, 8], [13, 42]]]]], [], 1, null, ["loc", [null, [13, 2], [17, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/nav-paging.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "paginationProps.showPagination", ["loc", [null, [1, 6], [1, 36]]]]], [], 0, null, ["loc", [null, [1, 0], [18, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/components/patient-summary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 29,
                  "column": 37
                }
              },
              "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(", ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" (");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(")\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
            return morphs;
          },
          statements: [["block", "unless", [["get", "diagnosis.first", ["loc", [null, [29, 18], [29, 33]]]]], [], 0, null, ["loc", [null, [29, 8], [29, 48]]]], ["content", "diagnosis.description", ["loc", [null, [30, 8], [30, 33]]]], ["inline", "date-format", [["get", "diagnosis.date", ["loc", [null, [30, 57], [30, 71]]]]], [], ["loc", [null, [30, 43], [30, 73]]]]],
          locals: ["diagnosis"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 34,
              "column": 2
            }
          },
          "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ps-info-group long-form");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "ps-info-label wide");
          var el3 = dom.createTextNode("Primary Diagnoses");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ps-info-data-block");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "primaryDiagnoses", ["loc", [null, [28, 14], [28, 30]]]]], [], 0, null, ["loc", [null, [28, 6], [31, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 37
                }
              },
              "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(", ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 6
              },
              "end": {
                "line": 43,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" (");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(")\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
            return morphs;
          },
          statements: [["block", "unless", [["get", "diagnosis.first", ["loc", [null, [41, 18], [41, 33]]]]], [], 0, null, ["loc", [null, [41, 8], [41, 48]]]], ["content", "diagnosis.description", ["loc", [null, [42, 8], [42, 33]]]], ["inline", "date-format", [["get", "diagnosis.date", ["loc", [null, [42, 57], [42, 71]]]]], [], ["loc", [null, [42, 43], [42, 73]]]]],
          locals: ["diagnosis"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 46,
              "column": 2
            }
          },
          "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ps-info-group long-form");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "ps-info-label wide");
          var el3 = dom.createTextNode("Secondary Diagnoses");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ps-info-data-block");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "secondaryDiagnoses", ["loc", [null, [40, 14], [40, 32]]]]], [], 0, null, ["loc", [null, [40, 6], [43, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 8
                },
                "end": {
                  "line": 53,
                  "column": 37
                }
              },
              "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(", ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 6
              },
              "end": {
                "line": 57,
                "column": 6
              }
            },
            "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "clickable");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" (");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(")\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createElementMorph(element0);
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            return morphs;
          },
          statements: [["block", "unless", [["get", "procedure.first", ["loc", [null, [53, 18], [53, 33]]]]], [], 0, null, ["loc", [null, [53, 8], [53, 48]]]], ["element", "action", ["editProcedure", ["get", "procedure", ["loc", [null, [54, 39], [54, 48]]]]], [], ["loc", [null, [54, 14], [54, 50]]]], ["content", "procedure.description", ["loc", [null, [55, 12], [55, 37]]]], ["inline", "date-format", [["get", "procedure.procedureDate", ["loc", [null, [55, 61], [55, 84]]]]], [], ["loc", [null, [55, 47], [55, 86]]]]],
          locals: ["procedure"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ps-info-group long-form");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "ps-info-label wide");
          var el3 = dom.createTextNode("Procedures");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ps-info-data-block");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "patientProcedures", ["loc", [null, [52, 14], [52, 31]]]]], [], 0, null, ["loc", [null, [52, 6], [57, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 63,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/patient-summary.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "clearfix");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ps-info-group patient-id");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "ps-info-label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "ps-info-data");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ps-info-group patient-name");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "ps-info-label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "ps-info-data");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ps-info-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "ps-info-label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "ps-info-data");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ps-info-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "ps-info-label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "ps-info-data");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" (");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(")");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element1, [5]);
        var element5 = dom.childAt(element1, [7]);
        var element6 = dom.childAt(element5, [3]);
        var morphs = new Array(13);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[8] = dom.createMorphAt(element6, 0, 0);
        morphs[9] = dom.createMorphAt(dom.childAt(element6, [2]), 0, 0);
        morphs[10] = dom.createMorphAt(element1, 9, 9);
        morphs[11] = dom.createMorphAt(element1, 11, 11);
        morphs[12] = dom.createMorphAt(element1, 13, 13);
        return morphs;
      },
      statements: [["element", "action", ["linkToPatient"], [], ["loc", [null, [1, 5], [1, 31]]]], ["inline", "t", ["labels.id"], [], ["loc", [null, [4, 33], [4, 50]]]], ["content", "patient.displayPatientId", ["loc", [null, [5, 31], [5, 59]]]], ["inline", "t", ["labels.name"], [], ["loc", [null, [9, 33], [9, 52]]]], ["content", "patient.displayName", ["loc", [null, [10, 31], [10, 54]]]], ["inline", "t", ["labels.sex"], [], ["loc", [null, [14, 33], [14, 51]]]], ["content", "patient.sex", ["loc", [null, [15, 31], [15, 46]]]], ["inline", "t", ["labels.age"], [], ["loc", [null, [19, 33], [19, 51]]]], ["content", "patient.age", ["loc", [null, [20, 31], [20, 46]]]], ["inline", "date-format", [["get", "patient.dateOfBirth", ["loc", [null, [20, 70], [20, 89]]]]], [], ["loc", [null, [20, 56], [20, 91]]]], ["block", "if", [["get", "havePrimaryDiagnoses", ["loc", [null, [24, 8], [24, 28]]]]], [], 0, null, ["loc", [null, [24, 2], [34, 9]]]], ["block", "if", [["get", "haveSecondaryDiagnoses", ["loc", [null, [36, 8], [36, 30]]]]], [], 1, null, ["loc", [null, [36, 2], [46, 9]]]], ["block", "if", [["get", "haveProcedures", ["loc", [null, [48, 8], [48, 22]]]]], [], 2, null, ["loc", [null, [48, 2], [60, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("hospitalrun/templates/components/photo-display", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 72
          }
        },
        "moduleName": "hospitalrun/templates/components/photo-display.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("img");
        dom.setAttribute(el1, "class", "img-responsive");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'alt');
        morphs[1] = dom.createAttrMorph(element0, 'src');
        return morphs;
      },
      statements: [["attribute", "alt", ["concat", [["get", "photo.caption", ["loc", [null, [1, 12], [1, 25]]]]]]], ["attribute", "src", ["concat", [["get", "photoUrl", ["loc", [null, [1, 36], [1, 44]]]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/price-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 24
              },
              "end": {
                "line": 14,
                "column": 24
              }
            },
            "moduleName": "hospitalrun/templates/components/price-list.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "charge-quantity", [], ["pricingItem", ["subexpr", "@mut", [["get", "price", ["loc", [null, [13, 56], [13, 61]]]]], [], []], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [13, 68], [13, 73]]]]], [], []]], ["loc", [null, [13, 26], [13, 75]]]]],
          locals: ["price"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 16
            },
            "end": {
              "line": 16,
              "column": 16
            }
          },
          "moduleName": "hospitalrun/templates/components/price-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "pricingList", ["loc", [null, [12, 32], [12, 43]]]]], [], 0, null, ["loc", [null, [12, 24], [14, 33]]]]],
        locals: ["pricingList"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/price-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel detail-section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-heading");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        dom.setAttribute(el3, "class", "panel-title");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" charges\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body detail-section-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table table-bordered");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1, 1]), 1, 1);
        return morphs;
      },
      statements: [["content", "pricingType", ["loc", [null, [4, 12], [4, 27]]]], ["block", "each", [["get", "pricingListByType", ["loc", [null, [10, 24], [10, 41]]]]], [], 0, null, ["loc", [null, [10, 16], [16, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/components/quantity-calc", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/quantity-calc.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "quantity-conv", [], ["unit", ["subexpr", "@mut", [["get", "quantityGroup.unit", ["loc", [null, [3, 13], [3, 31]]]]], [], []], "firstQuantity", ["subexpr", "@mut", [["get", "quantityGroup.firstQuantity", ["loc", [null, [4, 22], [4, 49]]]]], [], []], "unitName", ["subexpr", "@mut", [["get", "quantityGroup.unitName", ["loc", [null, [5, 17], [5, 39]]]]], [], []], "index", ["subexpr", "@mut", [["get", "quantityGroup.index", ["loc", [null, [6, 14], [6, 33]]]]], [], []], "quantity", ["subexpr", "@mut", [["get", "quantityGroup.quantity", ["loc", [null, [7, 17], [7, 39]]]]], [], []], "unitList", ["subexpr", "@mut", [["get", "unitList", ["loc", [null, [8, 17], [8, 25]]]]], [], []]], ["loc", [null, [2, 4], [9, 6]]]]],
        locals: ["quantityGroup"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/quantity-calc.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-6");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "form-group");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" total: ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1, 1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 0, 0);
          morphs[1] = dom.createMorphAt(element0, 2, 2);
          return morphs;
        },
        statements: [["content", "targetUnit", ["loc", [null, [15, 23], [15, 37]]]], ["content", "calculated", ["loc", [null, [15, 45], [15, 59]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/quantity-calc.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "currentQuantityGroups", ["loc", [null, [1, 8], [1, 29]]]]], [], 0, null, ["loc", [null, [1, 0], [10, 9]]]], ["block", "if", [["get", "showTotal", ["loc", [null, [11, 6], [11, 15]]]]], [], 1, null, ["loc", [null, [11, 0], [19, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/quantity-conv", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/quantity-conv.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-5");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          dom.setAttribute(el4, "class", "control-label");
          var el5 = dom.createTextNode("What does 1 ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" contain?");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["form-group required ", ["get", "quantityClass", ["loc", [null, [4, 46], [4, 59]]]]]]], ["content", "unitName", ["loc", [null, [5, 57], [5, 69]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 12
            },
            "end": {
              "line": 15,
              "column": 12
            }
          },
          "moduleName": "hospitalrun/templates/components/quantity-conv.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["labels.quantity"], [], ["loc", [null, [14, 45], [14, 68]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 12
            },
            "end": {
              "line": 26,
              "column": 12
            }
          },
          "moduleName": "hospitalrun/templates/components/quantity-conv.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "class", "control-label");
          var el2 = dom.createTextNode("Unit");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/quantity-conv.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-3");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "help-block");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-3");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "help-block");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var element2 = dom.childAt(element1, [1, 1]);
        var element3 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element2, 'class');
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createMorphAt(element2, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
        morphs[5] = dom.createAttrMorph(element3, 'class');
        morphs[6] = dom.createMorphAt(element3, 1, 1);
        morphs[7] = dom.createMorphAt(element3, 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element3, [5]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "firstQuantity", ["loc", [null, [1, 10], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [9, 11]]]], ["attribute", "class", ["concat", ["form-group required ", ["get", "quantityClass", ["loc", [null, [12, 42], [12, 55]]]], " test-inv-quantity"]]], ["block", "if", [["get", "firstQuantity", ["loc", [null, [13, 18], [13, 31]]]]], [], 1, null, ["loc", [null, [13, 12], [15, 19]]]], ["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "quantity", ["loc", [null, [16, 38], [16, 46]]]]], [], []], "class", "form-control"], ["loc", [null, [16, 12], [16, 69]]]], ["content", "quantityHelp", ["loc", [null, [17, 37], [17, 53]]]], ["attribute", "class", ["concat", ["form-group required ", ["get", "unitClass", ["loc", [null, [23, 42], [23, 51]]]]]]], ["block", "if", [["get", "firstQuantity", ["loc", [null, [24, 18], [24, 31]]]]], [], 2, null, ["loc", [null, [24, 12], [26, 19]]]], ["inline", "select-list", [], ["class", "form-control test-inv-unit", "content", ["subexpr", "@mut", [["get", "unitList", ["loc", [null, [29, 24], [29, 32]]]]], [], []], "value", ["subexpr", "@mut", [["get", "unit", ["loc", [null, [30, 22], [30, 26]]]]], [], []], "action", ["subexpr", "action", [["subexpr", "mut", [["get", "unit", ["loc", [null, [31, 36], [31, 40]]]]], [], ["loc", [null, [31, 31], [31, 41]]]]], [], ["loc", [null, [31, 23], [31, 42]]]], "prompt", " "], ["loc", [null, [27, 12], [33, 14]]]], ["content", "unitHelp", ["loc", [null, [34, 37], [34, 49]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("hospitalrun/templates/components/render-typeahead", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/render-typeahead.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "pricing-typeahead", [], ["class", ["subexpr", "@mut", [["get", "className", ["loc", [null, [2, 30], [2, 39]]]]], [], []], "property", ["subexpr", "@mut", [["get", "property", ["loc", [null, [2, 49], [2, 57]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [3, 14], [3, 19]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [3, 28], [3, 35]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [4, 18], [4, 27]]]]], [], []]], ["loc", [null, [2, 4], [5, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/render-typeahead.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "type-ahead", [], ["class", ["subexpr", "@mut", [["get", "className", ["loc", [null, [7, 23], [7, 32]]]]], [], []], "property", ["subexpr", "@mut", [["get", "property", ["loc", [null, [7, 42], [7, 50]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [8, 14], [8, 19]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [8, 28], [8, 35]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [9, 18], [9, 27]]]]], [], []], "setOnBlur", ["subexpr", "@mut", [["get", "setOnBlur", ["loc", [null, [9, 38], [9, 47]]]]], [], []], "hint", ["subexpr", "@mut", [["get", "hint", ["loc", [null, [9, 53], [9, 57]]]]], [], []]], ["loc", [null, [7, 4], [10, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 7
          }
        },
        "moduleName": "hospitalrun/templates/components/render-typeahead.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "usePricingTypeAhead", ["loc", [null, [1, 6], [1, 25]]]]], [], 0, 1, ["loc", [null, [1, 0], [11, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/role-select", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "hospitalrun/templates/components/role-select.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "disabled", "");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'selected');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "selected", ["subexpr", "is-not", [["get", "selection", ["loc", [null, [3, 39], [3, 48]]]]], [], ["loc", [null, [3, 30], [3, 50]]]]], ["content", "prompt", ["loc", [null, [4, 6], [4, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "hospitalrun/templates/components/role-select.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          morphs[1] = dom.createAttrMorph(element0, 'selected');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["subexpr", "read-path", [["get", "item", ["loc", [null, [9, 31], [9, 35]]]], ["get", "optionLabelPath", ["loc", [null, [9, 36], [9, 51]]]]], [], ["loc", [null, [9, 19], [9, 53]]]]]]], ["attribute", "selected", ["subexpr", "is-equal-array", [["get", "item.roles", ["loc", [null, [10, 38], [10, 48]]]], ["get", "selection", ["loc", [null, [10, 49], [10, 58]]]]], [], ["loc", [null, [10, 21], [10, 60]]]]], ["inline", "read-path", [["get", "item", ["loc", [null, [11, 18], [11, 22]]]], ["get", "optionLabelPath", ["loc", [null, [11, 23], [11, 38]]]]], [], ["loc", [null, [11, 6], [11, 40]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 9
          }
        },
        "moduleName": "hospitalrun/templates/components/role-select.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("select");
        dom.setAttribute(el1, "class", "form-control");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element2);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["change"], ["on", "change"], ["loc", [null, [1, 8], [1, 39]]]], ["block", "if", [["get", "prompt", ["loc", [null, [2, 8], [2, 14]]]]], [], 0, null, ["loc", [null, [2, 2], [6, 9]]]], ["block", "each", [["get", "content", ["loc", [null, [8, 10], [8, 17]]]]], ["key", "@identity"], 1, null, ["loc", [null, [8, 2], [13, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/search-listing", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 89
          }
        },
        "moduleName": "hospitalrun/templates/components/search-listing.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-primary");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "btn btn-primary on-white");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createElementMorph(element0);
        morphs[2] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [3, 8], [3, 17]]]], ["element", "action", ["allItems"], [], ["loc", [null, [6, 41], [6, 62]]]], ["content", "allButtonText", ["loc", [null, [6, 63], [6, 80]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/components/select-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/select-list.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "value", "");
          dom.setAttribute(el1, "disabled", "");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'selected');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "selected", ["subexpr", "is-not", [["get", "selection", ["loc", [null, [2, 46], [2, 55]]]]], [], ["loc", [null, [2, 37], [2, 57]]]]], ["content", "prompt", ["loc", [null, [3, 4], [3, 14]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/select-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          morphs[1] = dom.createAttrMorph(element0, 'selected');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["subexpr", "read-path", [["get", "item", ["loc", [null, [8, 29], [8, 33]]]], ["get", "optionValuePath", ["loc", [null, [8, 34], [8, 49]]]]], [], ["loc", [null, [8, 17], [8, 51]]]]]]], ["attribute", "selected", ["subexpr", "is-equal-by-path", [["get", "item", ["loc", [null, [8, 81], [8, 85]]]], ["get", "value", ["loc", [null, [8, 86], [8, 91]]]], ["get", "optionValuePath", ["loc", [null, [8, 92], [8, 107]]]]], [], ["loc", [null, [8, 62], [8, 109]]]]], ["inline", "read-path", [["get", "item", ["loc", [null, [9, 16], [9, 20]]]], ["get", "optionLabelPath", ["loc", [null, [9, 21], [9, 36]]]]], [], ["loc", [null, [9, 4], [9, 38]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/select-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "prompt", ["loc", [null, [1, 6], [1, 12]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["block", "each", [["get", "content", ["loc", [null, [7, 8], [7, 15]]]]], ["key", "@identity"], 1, null, ["loc", [null, [7, 0], [11, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/select-or-typeahead", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/select-or-typeahead.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/render-typeahead"], [], ["loc", [null, [2, 4], [2, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/select-or-typeahead.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "em-select", [], ["class", ["subexpr", "@mut", [["get", "className", ["loc", [null, [4, 22], [4, 31]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [4, 38], [4, 43]]]]], [], []], "property", ["subexpr", "@mut", [["get", "property", ["loc", [null, [5, 17], [5, 25]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [5, 34], [5, 41]]]]], [], []], "optionValuePath", ["subexpr", "@mut", [["get", "optionValuePath", ["loc", [null, [6, 24], [6, 39]]]]], [], []], "optionLabelPath", ["subexpr", "@mut", [["get", "optionLabelPath", ["loc", [null, [6, 56], [6, 71]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [7, 17], [7, 26]]]]], [], []], "prompt", ["subexpr", "@mut", [["get", "prompt", ["loc", [null, [7, 34], [7, 40]]]]], [], []]], ["loc", [null, [4, 4], [8, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 7
          }
        },
        "moduleName": "hospitalrun/templates/components/select-or-typeahead.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "userCanAdd", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/sortable-column", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/sortable-column.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["glyphicon ", ["subexpr", "if", [["get", "sortDesc", ["loc", [null, [2, 32], [2, 40]]]], "glyphicon-arrow-down", "glyphicon-arrow-up"], [], ["loc", [null, [2, 27], [2, 86]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/sortable-column.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "sorted", ["loc", [null, [1, 6], [1, 12]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/components/static-text", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 8
            },
            "end": {
              "line": 6,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/templates/components/static-text.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [5, 12], [5, 21]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 8,
              "column": 8
            }
          },
          "moduleName": "hospitalrun/templates/components/static-text.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [7, 12], [7, 21]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/static-text.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "class", "control-label");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "form-control-static");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["form-group ", ["get", "class", ["loc", [null, [1, 25], [1, 30]]]]]]], ["content", "label", ["loc", [null, [2, 33], [2, 42]]]], ["block", "if", [["get", "value", ["loc", [null, [4, 14], [4, 19]]]]], [], 0, 1, ["loc", [null, [4, 8], [8, 15]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/components/take-photo", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/templates/components/take-photo.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            dom.setAttribute(el2, "for", "camera");
            var el3 = dom.createTextNode("Camera");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
            return morphs;
          },
          statements: [["inline", "select-list", [], ["action", ["subexpr", "@mut", [["get", "cameraChange", ["loc", [null, [16, 17], [16, 29]]]]], [], []], "class", "form-control", "content", ["subexpr", "@mut", [["get", "videoSources", ["loc", [null, [18, 18], [18, 30]]]]], [], []], "id", "camera", "label", "Camera", "optionLabelPath", "label", "optionValuePath", "id", "value", ["subexpr", "@mut", [["get", "selectedCamera", ["loc", [null, [23, 16], [23, 30]]]]], [], []]], ["loc", [null, [15, 6], [24, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/components/take-photo.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "control-label");
          dom.setAttribute(el2, "for", "photo-source");
          var el3 = dom.createTextNode("How Do You Want To Add A Photo?");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "camera panel panel-success");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-sm-4");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h2");
          var el5 = dom.createTextNode("Preview");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("video");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-sm-2");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-sm-4");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h2");
          var el5 = dom.createTextNode("Photo");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("canvas");
          dom.setAttribute(el4, "id", "canvas");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-footer");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default neutral");
          var el4 = dom.createTextNode("Take photo");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [5, 3, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["inline", "select-list", [], ["action", ["subexpr", "@mut", [["get", "photoSourceChange", ["loc", [null, [5, 13], [5, 30]]]]], [], []], "class", "form-control", "content", ["subexpr", "@mut", [["get", "photoSources", ["loc", [null, [7, 14], [7, 26]]]]], [], []], "id", "photo-source", "value", ["subexpr", "@mut", [["get", "photoSource", ["loc", [null, [9, 12], [9, 23]]]]], [], []]], ["loc", [null, [4, 4], [10, 6]]]], ["block", "if", [["get", "showCameraSelect", ["loc", [null, [12, 8], [12, 24]]]]], [], 0, null, ["loc", [null, [12, 2], [26, 9]]]], ["element", "action", ["takePhoto"], [], ["loc", [null, [41, 46], [41, 68]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/components/take-photo.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "fileupload row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("Upload Photo");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "canCaptureVideo", ["loc", [null, [1, 6], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [44, 7]]]], ["inline", "image-upload", [], ["label", "Upload File", "property", "fileName", "selectedFile", ["subexpr", "@mut", [["get", "photoFile", ["loc", [null, [47, 70], [47, 79]]]]], [], []]], ["loc", [null, [47, 2], [47, 82]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/error", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 10
          }
        },
        "moduleName": "hospitalrun/templates/error.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "view error");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "view-top-bar");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        dom.setAttribute(el3, "class", "view-current-title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "alert alert-info");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["messages.sorry"], [], ["loc", [null, [4, 35], [4, 57]]]], ["content", "message", ["loc", [null, [8, 2], [8, 13]]]], ["content", "stack", ["loc", [null, [10, 2], [10, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "view index");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "view-top-bar");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        dom.setAttribute(el3, "class", "view-current-title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 0, 0);
        return morphs;
      },
      statements: [["inline", "t", ["dashboard.title"], [], ["loc", [null, [4, 35], [4, 58]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/inv-purchase", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/inv-purchase.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "quantity-calc", [], ["calculated", ["subexpr", "@mut", [["get", "model.originalQuantity", ["loc", [null, [6, 31], [6, 53]]]]], [], []], "targetUnit", ["subexpr", "@mut", [["get", "model.distributionUnit", ["loc", [null, [6, 65], [6, 87]]]]], [], []], "quantityGroups", ["subexpr", "@mut", [["get", "model.quantityGroups", ["loc", [null, [6, 103], [6, 123]]]]], [], []], "unitList", ["subexpr", "@mut", [["get", "unitList", ["loc", [null, [6, 133], [6, 141]]]]], [], []]], ["loc", [null, [6, 4], [6, 143]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/inv-purchase.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["labels.quantity"], [], ["loc", [null, [9, 15], [9, 38]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "model.originalQuantity", ["loc", [null, [10, 43], [10, 65]]]]], [], []], "type", "text", "disabled", true], ["loc", [null, [10, 8], [10, 94]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/inv-purchase.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "select-or-typeahead", [], ["property", "location", "label", ["subexpr", "t", ["inventory.labels.location"], [], ["loc", [null, [25, 52], [25, 83]]]], "list", ["subexpr", "@mut", [["get", "warehouseList", ["loc", [null, [25, 89], [25, 102]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.location", ["loc", [null, [25, 113], [25, 127]]]]], [], []]], ["loc", [null, [25, 4], [25, 130]]]], ["inline", "select-or-typeahead", [], ["property", "aisleLocation", "label", ["subexpr", "t", ["inventory.labels.aisle_location"], [], ["loc", [null, [26, 57], [26, 94]]]], "list", ["subexpr", "@mut", [["get", "aisleLocationList", ["loc", [null, [26, 100], [26, 117]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.aisleLocation", ["loc", [null, [26, 128], [26, 147]]]]], [], []]], ["loc", [null, [26, 4], [26, 150]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/inv-purchase.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(fragment, [7]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createMorphAt(element2, 3, 3);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
        morphs[6] = dom.createMorphAt(element3, 1, 1);
        morphs[7] = dom.createMorphAt(element3, 3, 3);
        morphs[8] = dom.createMorphAt(fragment, 9, 9, contextualElement);
        morphs[9] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        return morphs;
      },
      statements: [["inline", "date-picker", [], ["property", "dateReceived", "label", ["subexpr", "t", ["inventory.labels.date_received"], [], ["loc", [null, [2, 48], [2, 84]]]], "class", "col-sm-4"], ["loc", [null, [2, 4], [2, 103]]]], ["inline", "em-input", [], ["property", "invoiceNo", "label", ["subexpr", "t", ["inventory.labels.invoice_number"], [], ["loc", [null, [3, 42], [3, 79]]]], "class", "col-sm-4"], ["loc", [null, [3, 4], [3, 98]]]], ["block", "if", [["get", "canEditQuantity", ["loc", [null, [5, 6], [5, 21]]]]], [], 0, 1, ["loc", [null, [5, 0], [12, 7]]]], ["inline", "em-input", [], ["property", "purchaseCost", "label", ["subexpr", "t", ["inventory.labels.purchase_cost"], [], ["loc", [null, [14, 45], [14, 81]]]], "class", "required col-sm-4 test-inv-cost"], ["loc", [null, [14, 4], [14, 123]]]], ["inline", "em-input", [], ["property", "lotNumber", "label", ["subexpr", "t", ["inventory.labels.serial_number"], [], ["loc", [null, [15, 42], [15, 78]]]], "class", "col-sm-4"], ["loc", [null, [15, 4], [15, 97]]]], ["inline", "date-picker", [], ["property", "expirationDate", "label", ["subexpr", "t", ["inventory.labels.expiration_date"], [], ["loc", [null, [18, 50], [18, 88]]]], "minDate", "now", "class", "col-sm-4"], ["loc", [null, [18, 4], [18, 121]]]], ["inline", "select-or-typeahead", [], ["property", "vendor", "label", ["subexpr", "t", ["inventory.labels.vendor"], [], ["loc", [null, [21, 50], [21, 79]]]], "list", ["subexpr", "@mut", [["get", "vendorList", ["loc", [null, [21, 85], [21, 95]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.vendor", ["loc", [null, [21, 106], [21, 118]]]]], [], []], "className", "col-sm-6 required test-vendor"], ["loc", [null, [21, 4], [21, 162]]]], ["inline", "em-input", [], ["property", "vendorItemNo", "label", ["subexpr", "t", ["inventory.labels.vendor_item_number"], [], ["loc", [null, [22, 45], [22, 86]]]], "class", "col-sm-6"], ["loc", [null, [22, 4], [22, 105]]]], ["block", "if", [["get", "model.isNew", ["loc", [null, [24, 6], [24, 17]]]]], [], 2, null, ["loc", [null, [24, 0], [27, 7]]]], ["inline", "em-checkbox", [], ["label", ["subexpr", "t", ["inventory.labels.gift"], [], ["loc", [null, [28, 20], [28, 47]]]], "property", "giftInKind"], ["loc", [null, [28, 0], [28, 71]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("hospitalrun/templates/inventory-basic", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/templates/inventory-basic.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group col-sm-2");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["labels.id"], [], ["loc", [null, [4, 19], [4, 36]]]], ["inline", "input", [], ["class", "form-control test-item-id", "value", ["subexpr", "@mut", [["get", "model.friendlyId", ["loc", [null, [5, 60], [5, 76]]]]], [], []], "type", "text", "disabled", true], ["loc", [null, [5, 12], [5, 105]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/templates/inventory-basic.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group col-sm-2");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "form-control-static");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["labels.quantity"], [], ["loc", [null, [12, 19], [12, 42]]]], ["content", "model.quantity", ["loc", [null, [13, 43], [13, 61]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 6
          }
        },
        "moduleName": "hospitalrun/templates/inventory-basic.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(fragment, [4]);
        var element4 = dom.childAt(fragment, [6]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        morphs[2] = dom.createMorphAt(element2, 5, 5);
        morphs[3] = dom.createMorphAt(element2, 7, 7);
        morphs[4] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[5] = dom.createMorphAt(element3, 1, 1);
        morphs[6] = dom.createMorphAt(element3, 3, 3);
        morphs[7] = dom.createMorphAt(element4, 1, 1);
        morphs[8] = dom.createMorphAt(element4, 3, 3);
        morphs[9] = dom.createMorphAt(element4, 5, 5);
        return morphs;
      },
      statements: [["block", "unless", [["get", "model.isNew", ["loc", [null, [2, 14], [2, 25]]]]], [], 0, null, ["loc", [null, [2, 4], [7, 15]]]], ["inline", "em-input", [], ["property", "name", "label", ["subexpr", "t", ["labels.name"], [], ["loc", [null, [8, 37], [8, 54]]]], "class", "required  col-sm-6 test-inv-name"], ["loc", [null, [8, 4], [8, 97]]]], ["inline", "inventory/rank-select", [], ["property", "rank"], ["loc", [null, [9, 4], [9, 45]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [10, 14], [10, 25]]]]], [], 1, null, ["loc", [null, [10, 4], [15, 15]]]], ["inline", "em-text", [], ["label", ["subexpr", "t", ["labels.description"], [], ["loc", [null, [18, 16], [18, 40]]]], "property", "description", "rows", 1], ["loc", [null, [18, 0], [18, 73]]]], ["inline", "em-select", [], ["label", ["subexpr", "t", ["labels.type"], [], ["loc", [null, [20, 22], [20, 39]]]], "property", "inventoryType", "content", ["subexpr", "@mut", [["get", "inventoryTypes", ["loc", [null, [21, 16], [21, 30]]]]], [], []], "class", "required col-sm-4 test-inv-type", "prompt", " "], ["loc", [null, [20, 4], [24, 6]]]], ["inline", "em-input", [], ["property", "crossReference", "label", ["subexpr", "t", ["inventory.labels.cross_reference"], [], ["loc", [null, [25, 47], [25, 85]]]], "class", "col-sm-8 test-inv-cross"], ["loc", [null, [25, 4], [25, 119]]]], ["inline", "em-input", [], ["property", "reorderPoint", "label", ["subexpr", "t", ["inventory.labels.reorder_point"], [], ["loc", [null, [28, 45], [28, 81]]]], "class", "col-sm-3 test-inv-reorder"], ["loc", [null, [28, 4], [28, 117]]]], ["inline", "em-input", [], ["property", "price", "label", ["subexpr", "t", ["inventory.labels.sale_price_per_unit"], [], ["loc", [null, [29, 38], [29, 80]]]], "class", "col-sm-3 test-inv-price"], ["loc", [null, [29, 4], [29, 114]]]], ["inline", "em-select", [], ["label", ["subexpr", "t", ["inventory.labels.distribution_unit"], [], ["loc", [null, [30, 22], [30, 62]]]], "class", "col-sm-3 required test-inv-dist-unit", "property", "distributionUnit", "content", ["subexpr", "@mut", [["get", "unitListForSelect", ["loc", [null, [32, 16], [32, 33]]]]], [], []], "prompt", " "], ["loc", [null, [30, 4], [34, 6]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/item-charges", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/item-charges.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["charges-by-type"], [], ["loc", [null, [2, 4], [2, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 16
              },
              "end": {
                "line": 10,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/templates/item-charges.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary align-right");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "octicon octicon-plus");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("Add Item");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [["element", "action", ["showAddCharge"], ["bubbles", false], ["loc", [null, [9, 64], [9, 105]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 28,
                    "column": 32
                  },
                  "end": {
                    "line": 33,
                    "column": 32
                  }
                },
                "moduleName": "hospitalrun/templates/item-charges.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-default neutral");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-default warning");
                var el2 = dom.createTextNode("\n                                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "octicon octicon-x");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("Delete\n                                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(fragment, [3]);
                var morphs = new Array(3);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                morphs[2] = dom.createElementMorph(element1);
                return morphs;
              },
              statements: [["element", "action", ["showEditCharge", ["get", "charge", ["loc", [null, [29, 102], [29, 108]]]]], [], ["loc", [null, [29, 76], [29, 110]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [29, 111], [29, 130]]]], ["element", "action", ["showDeleteCharge", ["get", "charge", ["loc", [null, [30, 104], [30, 110]]]]], ["bubbles", false], ["loc", [null, [30, 76], [30, 127]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 20
                },
                "end": {
                  "line": 36,
                  "column": 20
                }
              },
              "moduleName": "hospitalrun/templates/item-charges.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [7]), 1, 1);
              return morphs;
            },
            statements: [["inline", "date-format", [["get", "charge.dateCharged", ["loc", [null, [24, 46], [24, 64]]]]], [], ["loc", [null, [24, 32], [24, 66]]]], ["content", "charge.pricingItem.name", ["loc", [null, [25, 32], [25, 59]]]], ["content", "charge.quantity", ["loc", [null, [26, 32], [26, 51]]]], ["block", "if", [["get", "canAddCharge", ["loc", [null, [28, 38], [28, 50]]]]], [], 0, null, ["loc", [null, [28, 32], [33, 39]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 16
              },
              "end": {
                "line": 37,
                "column": 16
              }
            },
            "moduleName": "hospitalrun/templates/item-charges.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "charge.medicationCharge", ["loc", [null, [22, 30], [22, 53]]]]], [], 0, null, ["loc", [null, [22, 20], [36, 31]]]]],
          locals: ["charge"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/item-charges.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel detail-section");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createTextNode("\n                Charged Items\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body detail-section-content");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          dom.setAttribute(el4, "class", "table-header");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Date");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Item");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [3, 1]);
          var element6 = dom.childAt(element5, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element4, [1, 1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element6, [5]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element6, [7]), 0, 0);
          morphs[3] = dom.createMorphAt(element5, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "canAddCharge", ["loc", [null, [8, 22], [8, 34]]]]], [], 0, null, ["loc", [null, [8, 16], [10, 23]]]], ["inline", "t", ["labels.quantity"], [], ["loc", [null, [18, 24], [18, 47]]]], ["inline", "t", ["labels.action"], [], ["loc", [null, [19, 24], [19, 45]]]], ["block", "each", [["get", "model.charges", ["loc", [null, [21, 24], [21, 37]]]]], [], 1, null, ["loc", [null, [21, 16], [37, 25]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/item-charges.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "organizeByType", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [41, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("hospitalrun/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 6
          }
        },
        "moduleName": "hospitalrun/templates/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-notice");
        dom.setAttribute(el1, "role", "alert");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "wrapper");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "rect1");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "rect2");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "rect3");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "rect4");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "rect5");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "loading-text");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 3]), 0, 0);
        return morphs;
      },
      statements: [["inline", "t", ["labels.loading"], [], ["loc", [null, [10, 28], [10, 50]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/login", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 10
            },
            "end": {
              "line": 13,
              "column": 10
            }
          },
          "moduleName": "hospitalrun/templates/login.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger form-signin-alert");
          dom.setAttribute(el1, "role", "alert");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["login.messages.error"], [], ["loc", [null, [12, 77], [12, 105]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/login.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2, "class", "form-signin");
        dom.setAttribute(el2, "role", "form");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "signin-logo");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "signin-contents");
        var el4 = dom.createTextNode("\n\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        dom.setAttribute(el4, "class", "form-signin-heading");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn btn-lg btn-primary btn-block");
        dom.setAttribute(el4, "type", "submit");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" /container ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element1, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [7]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [9]), 0, 0);
        return morphs;
      },
      statements: [["element", "action", ["authenticate"], ["on", "submit"], ["loc", [null, [2, 42], [2, 79]]]], ["inline", "partial", ["components/logo-dark-svg"], [], ["loc", [null, [5, 10], [5, 48]]]], ["inline", "t", ["login.messages.sign_in"], [], ["loc", [null, [10, 42], [10, 72]]]], ["block", "if", [["get", "errorMessage", ["loc", [null, [11, 16], [11, 28]]]]], [], 0, null, ["loc", [null, [11, 10], [13, 17]]]], ["inline", "input", [], ["id", "identification", "value", ["subexpr", "@mut", [["get", "identification", ["loc", [null, [15, 48], [15, 62]]]]], [], []], "placeholder", ["subexpr", "t", ["login.labels.username"], [], ["loc", [null, [15, 75], [15, 102]]]], "class", "form-control"], ["loc", [null, [15, 14], [15, 125]]]], ["inline", "input", [], ["id", "password", "type", "password", "value", ["subexpr", "@mut", [["get", "password", ["loc", [null, [18, 58], [18, 66]]]]], [], []], "placeholder", ["subexpr", "t", ["login.labels.password"], [], ["loc", [null, [18, 79], [18, 106]]]], "class", "form-control"], ["loc", [null, [18, 14], [18, 129]]]], ["inline", "t", ["login.labels.sign_in"], [], ["loc", [null, [21, 73], [21, 101]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/navigation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/navigation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1, "class", "view sidebar-nav hidden-print");
        dom.setAttribute(el1, "role", "navigation");
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "scroll-container");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(element1, 5, 5);
        return morphs;
      },
      statements: [["inline", "partial", ["sidebar_nav/header"], [], ["loc", [null, [3, 4], [3, 36]]]], ["inline", "partial", ["sidebar_nav/search"], [], ["loc", [null, [7, 8], [7, 40]]]], ["inline", "partial", ["sidebar_nav/primary_nav"], [], ["loc", [null, [9, 8], [9, 45]]]], ["inline", "partial", ["sidebar_nav/message"], [], ["loc", [null, [11, 8], [11, 41]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/report-rows", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 12
                },
                "end": {
                  "line": 6,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/templates/report-rows.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "array-display", [], ["content", ["subexpr", "@mut", [["get", "column", ["loc", [null, [5, 44], [5, 50]]]]], [], []]], ["loc", [null, [5, 20], [5, 53]]]]],
            locals: ["column"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/report-rows.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", [["get", "reportRow.rowAction.action", ["loc", [null, [3, 21], [3, 47]]]], ["get", "reportRow.rowAction.model", ["loc", [null, [3, 48], [3, 73]]]]], [], ["loc", [null, [3, 12], [3, 75]]]], ["block", "each", [["get", "reportRow.row", ["loc", [null, [4, 20], [4, 33]]]]], [], 0, null, ["loc", [null, [4, 12], [6, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 12
                },
                "end": {
                  "line": 12,
                  "column": 12
                }
              },
              "moduleName": "hospitalrun/templates/report-rows.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("td");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "array-display", [], ["content", ["subexpr", "@mut", [["get", "column", ["loc", [null, [11, 44], [11, 50]]]]], [], []]], ["loc", [null, [11, 20], [11, 53]]]]],
            locals: ["column"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "hospitalrun/templates/report-rows.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "reportRow", ["loc", [null, [10, 20], [10, 29]]]]], [], 0, null, ["loc", [null, [10, 12], [12, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/report-rows.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "reportRow.rowAction", ["loc", [null, [2, 10], [2, 29]]]]], [], 0, 1, ["loc", [null, [2, 4], [14, 11]]]]],
        locals: ["reportRow"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/report-rows.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "currentReportRows", ["loc", [null, [1, 8], [1, 25]]]]], [], 0, null, ["loc", [null, [1, 0], [15, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/section", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 16
            },
            "end": {
              "line": 10,
              "column": 16
            }
          },
          "moduleName": "hospitalrun/templates/section.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-primary");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["element", "action", [["get", "newButtonAction", ["loc", [null, [9, 57], [9, 72]]]]], [], ["loc", [null, [9, 48], [9, 74]]]], ["content", "newButtonText", ["loc", [null, [9, 75], [9, 92]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 26
                },
                "end": {
                  "line": 14,
                  "column": 85
                }
              },
              "moduleName": "hospitalrun/templates/section.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              return morphs;
            },
            statements: [["attribute", "class", ["get", "button.buttonIcon", ["loc", [null, [14, 58], [14, 75]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 20
              },
              "end": {
                "line": 16,
                "column": 20
              }
            },
            "moduleName": "hospitalrun/templates/section.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n                          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            morphs[3] = dom.createMorphAt(element1, 3, 3);
            return morphs;
          },
          statements: [["attribute", "class", ["get", "button.class", ["loc", [null, [13, 40], [13, 52]]]]], ["element", "action", [["get", "button.buttonAction", ["loc", [null, [13, 64], [13, 83]]]]], [], ["loc", [null, [13, 55], [13, 85]]]], ["block", "if", [["get", "buttonIcon", ["loc", [null, [14, 32], [14, 42]]]]], [], 0, null, ["loc", [null, [14, 26], [14, 92]]]], ["content", "button.buttonText", ["loc", [null, [15, 24], [15, 45]]]]],
          locals: ["button"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 16
            },
            "end": {
              "line": 17,
              "column": 16
            }
          },
          "moduleName": "hospitalrun/templates/section.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "additionalButtons", ["loc", [null, [12, 28], [12, 45]]]]], [], 0, null, ["loc", [null, [12, 20], [16, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 26
                  },
                  "end": {
                    "line": 28,
                    "column": 26
                  }
                },
                "moduleName": "hospitalrun/templates/section.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "subAction.text", ["loc", [null, [27, 28], [27, 46]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 24
                },
                "end": {
                  "line": 29,
                  "column": 24
                }
              },
              "moduleName": "hospitalrun/templates/section.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "subAction.linkTo", ["loc", [null, [26, 37], [26, 53]]]], ["subexpr", "query-params", [], ["status", ["get", "subAction.statusQuery", ["loc", [null, [26, 75], [26, 96]]]]], ["loc", [null, [26, 54], [26, 97]]]]], [], 0, null, ["loc", [null, [26, 26], [28, 38]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 20
              },
              "end": {
                "line": 30,
                "column": 20
              }
            },
            "moduleName": "hospitalrun/templates/section.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "active-link", [], [], 0, null, ["loc", [null, [25, 24], [29, 40]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 26
                  },
                  "end": {
                    "line": 32,
                    "column": 73
                  }
                },
                "moduleName": "hospitalrun/templates/section.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "subAction.text", ["loc", [null, [32, 55], [32, 73]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 24
                },
                "end": {
                  "line": 33,
                  "column": 24
                }
              },
              "moduleName": "hospitalrun/templates/section.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "subAction.linkTo", ["loc", [null, [32, 37], [32, 53]]]]], [], 0, null, ["loc", [null, [32, 26], [32, 85]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 20
              },
              "end": {
                "line": 34,
                "column": 20
              }
            },
            "moduleName": "hospitalrun/templates/section.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "active-link", [], [], 0, null, ["loc", [null, [31, 24], [33, 40]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 16
            },
            "end": {
              "line": 35,
              "column": 16
            }
          },
          "moduleName": "hospitalrun/templates/section.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "subAction.statusQuery", ["loc", [null, [24, 26], [24, 47]]]]], [], 0, 1, ["loc", [null, [24, 20], [34, 27]]]]],
        locals: ["subAction"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/section.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel panel-default");
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-heading clearfix");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "view-top-bar");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h1");
        dom.setAttribute(el4, "class", "view-current-title");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "view-action-buttons");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "view-sub-bar");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4, "class", "nav nav-pills view-sub-nav");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(element6, 1, 1);
        morphs[2] = dom.createMorphAt(element6, 2, 2);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [3, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        return morphs;
      },
      statements: [["content", "currentScreenTitle", ["loc", [null, [6, 43], [6, 65]]]], ["block", "if", [["get", "newButtonAction", ["loc", [null, [8, 22], [8, 37]]]]], [], 0, null, ["loc", [null, [8, 16], [10, 23]]]], ["block", "if", [["get", "additionalButtons", ["loc", [null, [11, 22], [11, 39]]]]], [], 1, null, ["loc", [null, [11, 16], [17, 23]]]], ["block", "each", [["get", "subActions", ["loc", [null, [23, 24], [23, 34]]]]], [], 2, null, ["loc", [null, [23, 16], [35, 25]]]], ["content", "outlet", ["loc", [null, [42, 8], [42, 18]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("hospitalrun/templates/sidebar_nav/header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/templates/sidebar_nav/header.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "href", "#");
            dom.setAttribute(el1, "class", "logout");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["invalidateSession"], [], ["loc", [null, [12, 39], [12, 71]]]], ["inline", "t", ["navigation.actions.logout"], [], ["loc", [null, [12, 72], [12, 105]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 12
                },
                "end": {
                  "line": 14,
                  "column": 64
                }
              },
              "moduleName": "hospitalrun/templates/sidebar_nav/header.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["navigation.actions.login"], [], ["loc", [null, [14, 32], [14, 64]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 15,
                "column": 8
              }
            },
            "moduleName": "hospitalrun/templates/sidebar_nav/header.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "link-to", ["login"], [], 0, null, ["loc", [null, [14, 12], [14, 76]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "hospitalrun/templates/sidebar_nav/header.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("nav");
          dom.setAttribute(el1, "class", "settings-nav");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "href", "#");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element1, 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [11, 14], [11, 37]]]]], [], 0, 1, ["loc", [null, [11, 8], [15, 15]]]], ["element", "action", ["about"], [], ["loc", [null, [16, 22], [16, 42]]]], ["inline", "t", ["navigation.about"], [], ["loc", [null, [16, 43], [16, 67]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/sidebar_nav/header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "sidebar-nav-header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "class", "sidebar-nav-logo");
        dom.setAttribute(el2, "href", "#");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "#");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "mega-octicon octicon-gear");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[1] = dom.createAttrMorph(element4, 'class');
        morphs[2] = dom.createElementMorph(element4);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        return morphs;
      },
      statements: [["inline", "partial", ["components/logo-svg"], [], ["loc", [null, [3, 6], [3, 39]]]], ["attribute", "class", ["concat", ["settings-trigger ", ["subexpr", "if", [["get", "isShowingSettings", ["loc", [null, [5, 45], [5, 62]]]], "active"], [], ["loc", [null, [5, 40], [5, 73]]]]]]], ["element", "action", ["toggleSettings"], [], ["loc", [null, [5, 75], [5, 102]]]], ["block", "if", [["get", "isShowingSettings", ["loc", [null, [9, 10], [9, 27]]]]], [], 0, null, ["loc", [null, [9, 4], [18, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/sidebar_nav/message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 41
          }
        },
        "moduleName": "hospitalrun/templates/sidebar_nav/message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        dom.setAttribute(el1, "class", "sync-status");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        return morphs;
      },
      statements: [["content", "syncStatus", ["loc", [null, [1, 23], [1, 37]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("hospitalrun/templates/sidebar_nav/primary_nav", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "hospitalrun/templates/sidebar_nav/primary_nav.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "nav-menu", [], ["nav", ["subexpr", "@mut", [["get", "nav", ["loc", [null, [3, 19], [3, 22]]]]], [], []], "session", ["subexpr", "@mut", [["get", "session", ["loc", [null, [3, 31], [3, 38]]]]], [], []]], ["loc", [null, [3, 4], [3, 41]]]]],
        locals: ["nav"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/sidebar_nav/primary_nav.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "primary-nav");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "localizedNavItems", ["loc", [null, [2, 10], [2, 27]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("hospitalrun/templates/sidebar_nav/search", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/templates/sidebar_nav/search.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "sidebar-nav-search sidebar-nav-section");
          dom.setAttribute(el1, "role", "search");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "btn btn-default");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "glyphicon glyphicon-search");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "text-search", [], ["value", ["subexpr", "@mut", [["get", "searchText", ["loc", [null, [4, 28], [4, 38]]]]], [], []], "placeholder", "Search", "class", "form-control"], ["loc", [null, [4, 8], [4, 82]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/templates/sidebar_nav/search.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "allowSearch", ["loc", [null, [1, 6], [1, 17]]]]], [], 0, null, ["loc", [null, [1, 0], [8, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/tests/fixtures/admin', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.5","db_type":"http","start_time":"2015-11-06T20:51:28.290Z","db_info":{"db_name":"main","doc_count":24,"doc_del_count":0,"update_seq":34,"purge_seq":0,"compact_running":false,"disk_size":82020,"data_size":14033,"instance_start_time":"1446840837775589","disk_format_version":6,"committed_update_seq":34,"host":"http://localhost:5984/main/","auto_compaction":false,"adapter":"http"}}\n{"docs":[{"_id":"_design/appointments_by_patient","_rev":"1-9868b6586898a48c3fd68722ca3fe1d4","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}}}]}\n{"seq":2}\n{"docs":[{"_id":"_design/imaging_by_status","_rev":"1-9236042e1fb9f567d1d527bbb429cd8e","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}}}]}\n{"seq":3}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"1-03951858f9232df2e774548b0f5fd068","version":4,"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n      var i,\\n          filterBy = null,\\n          includeRow = true;\\n      if (req.query && req.query.filterBy) {\\n        filterBy = JSON.parse(req.query.filterBy);\\n      }\\n      if (!filterBy) {\\n        return true;\\n      }\\n      for (i = 0; i < filterBy.length; i++) {\\n        var currentValue = row.doc.data[filterBy[i].name];\\n        if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n          currentValue = \'Scheduled\';\\n        }\\n        if (currentValue !== filterBy[i].value) {\\n          includeRow = false;\\n          break;\\n        }\\n      }\\n      return includeRow;\\n    });rows.sort(function (a, b) {\\n      function defaultStatus(value) {\\n        if (!value || value === \'\') {\\n          return \'Scheduled\';\\n        } else {\\n          return value;\\n        }\\n      }\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'appointmentType\':\\n        case \'location\':\\n        case \'provider\':\\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n        case \'date\':\\n          {\\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n            if (startDiff === 0) {\\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n            } else {\\n              return startDiff;\\n            }\\n            break;\\n          }\\n        case \'status\':\\n          {\\n            var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                bStatus = defaultStatus(b.doc.data[sortBy]);\\n            return compareStrings(aStatus, bStatus);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"}},{"_id":"_design/inventory_by_name","_rev":"1-304304d63beaffd8d1ae4ae1cddf4b2b","version":3,"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'crossReference\':\\n        case \'description\':\\n        case \'friendlyId\':\\n        case \'name\':\\n        case \'price\':\\n        case \'quantity\':\\n        case \'inventoryType\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"}},{"_id":"_design/inventory_by_type","_rev":"1-003ef699ab0f2b8628c0bf613fabf7a2","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}}},{"_id":"_design/inventory_purchase_by_date_received","_rev":"1-78939ec45bef330bbfa87763dbbfce37","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"1-17bd9d3619ae03155d9929d3ebcd5023","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}}},{"_id":"_design/inventory_request_by_item","_rev":"1-7e7ef275a9fc15f2b5f328b1479c6097","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}}},{"_id":"_design/inventory_request_by_status","_rev":"1-187394c79d3206e11e112891f0d63550","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}}},{"_id":"_design/invoice_by_status","_rev":"1-73e3e45673ed0c4f4ae1cee855f216f0","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}}},{"_id":"_design/lab_by_status","_rev":"1-db4393c6856b98a40afd6ceef31db2a7","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}}},{"_id":"_design/medication_by_status","_rev":"1-36ce9e9853552f5eb646ed26de7184dc","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}}},{"_id":"_design/patient_by_display_id","_rev":"1-6f596cec9eb82609308fd9d25a9f9df2","version":4,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'gender\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"}},{"_id":"_design/patient_by_status","_rev":"1-ff26a12cdb8747aae5bf26f9af3a1953","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}}},{"_id":"_design/photo_by_patient","_rev":"1-e3dc5506f7f370535b85be0adc59c7cc","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}}},{"_id":"_design/pricing_by_category","_rev":"1-23d44e44019170eadd086734c87e3976","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}}},{"_id":"_design/procedure_by_date","_rev":"1-25ccef2a9dff3addd8c0d15cc79c363c","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}}},{"_id":"_design/sequence_by_prefix","_rev":"1-8ac3a62b4c0b624ebed3b68b27cd197e","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}}},{"_id":"_design/visit_by_date","_rev":"1-367a7fa42f1067f645190d560f83ef5e","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_discharge_date","_rev":"1-e53c95160dacaf007fe01c01215729ce","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_patient","_rev":"1-412252178488867e2350dcd13da779ea","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}}},{"_id":"lookup_2_anesthesia_types","_rev":"9-d77994ca90296681be7de203fea0430a","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Epidural"]},"_revisions":{"start":9,"ids":["d77994ca90296681be7de203fea0430a","1d1ae87c72651a279f4d2c1538bdc098","35208a178d11903681c43f9b98ec6513","575acff9e89f60a3ac9df9f4e22e3e04","66570c168285e90d2b69a114f56a648e","281f6900e4c336126ea848f4629312d6","b6a2997fdff472cc26879f1e2c7fb534","739c522ef659467bceea962699319751","f44ab6ebc23a2e0fabdae6239f2c9aa5"]}},{"_id":"lookup_2_anesthesiologists","_rev":"2-15912b0c0e68bb5e33a3a1f6a3e6b9e4","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":[]},"_revisions":{"start":2,"ids":["15912b0c0e68bb5e33a3a1f6a3e6b9e4","1dcbe81d2cdb89574a56ab17f3f0f26c"]}},{"_id":"lookup_2_visit_types","_rev":"1-52a2e0e0211f6cbdb55e97318d8fc790","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Admission","Clinic","Imaging","Lab","Pharmacy"]}}]}\n{"seq":34}\n';
});
define('hospitalrun/tests/fixtures/appointments', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.5","db_type":"http","start_time":"2016-02-22T22:20:29.648Z","db_info":{"db_name":"main","doc_count":60,"doc_del_count":21,"update_seq":86,"purge_seq":0,"compact_running":false,"disk_size":53359,"data_size":46031,"instance_start_time":"1456179513685726","disk_format_version":6,"committed_update_seq":86,"host":"http://localhost:5984/main/","auto_compaction":false,"adapter":"http"}}\n{"docs":[{"_id":"_design/imaging_by_status","_rev":"1-9236042e1fb9f567d1d527bbb429cd8e","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}}}]}\n{"seq":1}\n{"docs":[{"_id":"_design/appointments_by_patient","_rev":"1-9868b6586898a48c3fd68722ca3fe1d4","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}}}]}\n{"seq":4}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"1-03951858f9232df2e774548b0f5fd068","version":4,"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n      var i,\\n          filterBy = null,\\n          includeRow = true;\\n      if (req.query && req.query.filterBy) {\\n        filterBy = JSON.parse(req.query.filterBy);\\n      }\\n      if (!filterBy) {\\n        return true;\\n      }\\n      for (i = 0; i < filterBy.length; i++) {\\n        var currentValue = row.doc.data[filterBy[i].name];\\n        if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n          currentValue = \'Scheduled\';\\n        }\\n        if (currentValue !== filterBy[i].value) {\\n          includeRow = false;\\n          break;\\n        }\\n      }\\n      return includeRow;\\n    });rows.sort(function (a, b) {\\n      function defaultStatus(value) {\\n        if (!value || value === \'\') {\\n          return \'Scheduled\';\\n        } else {\\n          return value;\\n        }\\n      }\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'appointmentType\':\\n        case \'location\':\\n        case \'provider\':\\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n        case \'date\':\\n          {\\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n            if (startDiff === 0) {\\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n            } else {\\n              return startDiff;\\n            }\\n            break;\\n          }\\n        case \'status\':\\n          {\\n            var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                bStatus = defaultStatus(b.doc.data[sortBy]);\\n            return compareStrings(aStatus, bStatus);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["03951858f9232df2e774548b0f5fd068"]}},{"_id":"_design/appointments_by_date","_rev":"1-3c37df4fed5a034aedc1a295f4a672fd","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n            var i,\\n                filterBy = null,\\n                includeRow = true;\\n            if (req.query && req.query.filterBy) {\\n                filterBy = JSON.parse(req.query.filterBy);\\n            }\\n            if (!filterBy) {\\n                return true;\\n            }\\n            for (i = 0; i < filterBy.length; i++) {\\n                var currentValue = row.doc[filterBy[i].name];\\n                if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n                    currentValue = \'Scheduled\';\\n                }\\n                if (currentValue !== filterBy[i].value) {\\n                    includeRow = false;\\n                    break;\\n                }\\n            }\\n            return includeRow;\\n        });rows.sort(function (a, b) {\\n            function defaultStatus(value) {\\n                if (!value || value === \'\') {\\n                    return \'Scheduled\';\\n                } else {\\n                    return value;\\n                }\\n            }\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'appointmentType\':\\n                case \'location\':\\n                case \'provider\':\\n                    return compareStrings(a.doc[sortBy], b.doc[sortBy]);\\n                case \'date\':\\n                    {\\n                        var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n                        if (startDiff === 0) {\\n                            return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n                        } else {\\n                            return startDiff;\\n                        }\\n                        break;\\n                    }\\n                case \'status\':\\n                    {\\n                        var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                            bStatus = defaultStatus(b.doc.data[sortBy]);\\n                        return compareStrings(aStatus, bStatus);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"_revisions":{"start":1,"ids":["3c37df4fed5a034aedc1a295f4a672fd"]}},{"_id":"_design/inventory_by_name","_rev":"1-304304d63beaffd8d1ae4ae1cddf4b2b","version":3,"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'crossReference\':\\n        case \'description\':\\n        case \'friendlyId\':\\n        case \'name\':\\n        case \'price\':\\n        case \'quantity\':\\n        case \'inventoryType\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["304304d63beaffd8d1ae4ae1cddf4b2b"]}},{"_id":"_design/inventory_by_name","_rev":"1-3eb498726e0d057818618808c0db46bf","version":3,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'crossReference\':\\n                case \'description\':\\n                case \'friendlyId\':\\n                case \'name\':\\n                case \'price\':\\n                case \'quantity\':\\n                case \'inventoryType\':\\n                    {\\n                        return compareStrings(a.doc[sortBy], b.doc[sortBy]);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"_revisions":{"start":1,"ids":["3eb498726e0d057818618808c0db46bf"]}},{"_id":"_design/inventory_by_type","_rev":"1-003ef699ab0f2b8628c0bf613fabf7a2","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}}},{"_id":"_design/inventory_purchase_by_date_received","_rev":"1-78939ec45bef330bbfa87763dbbfce37","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"1-17bd9d3619ae03155d9929d3ebcd5023","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}}},{"_id":"_design/inventory_request_by_item","_rev":"1-7e7ef275a9fc15f2b5f328b1479c6097","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}}},{"_id":"_design/inventory_request_by_status","_rev":"1-187394c79d3206e11e112891f0d63550","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}}},{"_id":"_design/invoice_by_status","_rev":"1-73e3e45673ed0c4f4ae1cee855f216f0","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}}},{"_id":"_design/lab_by_status","_rev":"1-db4393c6856b98a40afd6ceef31db2a7","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}}},{"_id":"_design/medication_by_status","_rev":"1-36ce9e9853552f5eb646ed26de7184dc","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}}},{"_id":"_design/patient_by_display_id","_rev":"1-e6d44a1448953362319c910bf33a8668","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'firstName\':\\n                case \'gender\':\\n                case \'lastName\':\\n                case \'status\':\\n                    {\\n                        return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n                    }\\n                case \'dateOfBirth\':\\n                    {\\n                        return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"_revisions":{"start":1,"ids":["e6d44a1448953362319c910bf33a8668"]}},{"_id":"_design/patient_by_display_id","_rev":"1-0b75ee7c82a1aadebd0bc0fd403622fb","version":5,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'sex\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["0b75ee7c82a1aadebd0bc0fd403622fb"]}},{"_id":"_design/patient_by_status","_rev":"1-ff26a12cdb8747aae5bf26f9af3a1953","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}}},{"_id":"_design/photo_by_patient","_rev":"1-e3dc5506f7f370535b85be0adc59c7cc","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}}},{"_id":"_design/pricing_by_category","_rev":"1-23d44e44019170eadd086734c87e3976","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}}},{"_id":"_design/procedure_by_date","_rev":"1-25ccef2a9dff3addd8c0d15cc79c363c","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}}},{"_id":"_design/sequence_by_prefix","_rev":"1-8ac3a62b4c0b624ebed3b68b27cd197e","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}}},{"_id":"_design/visit_by_date","_rev":"1-367a7fa42f1067f645190d560f83ef5e","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_discharge_date","_rev":"1-e53c95160dacaf007fe01c01215729ce","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_patient","_rev":"1-412252178488867e2350dcd13da779ea","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}}},{"_id":"appointment_2_D0C3934D-E023-66E4-97D4-FC58F3595409","_rev":"1-5775c0c9cdf58099fa3ae4197634505f","data":{"allDay":true,"provider":"Dr Test","location":"Harare","appointmentType":"Admission","startDate":"2015-10-29T22:00:00.000Z","endDate":"2015-10-29T22:00:00.000Z","notes":"Admission","status":"Scheduled","lastModified":"2015-10-30T15:08:29.970Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"allDay":"2015-10-30T15:08:29.970Z","startDate":"2015-10-30T15:08:29.970Z","endDate":"2015-10-30T15:08:29.970Z","provider":"2015-10-30T15:08:29.970Z","location":"2015-10-30T15:08:29.970Z","appointmentType":"2015-10-30T15:08:29.970Z","notes":"2015-10-30T15:08:29.970Z"}}},{"_id":"imaging_2_07CC6746-C7D9-A410-9B8C-C4B4E095A96D","_rev":"2-ffa7adb60618346cba98a559d81df36a","data":{"imagingDate":"2015-10-15T09:39:44.603Z","notes":"random notes","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T09:39:37.866Z","result":"to collect","status":"Completed","lastModified":"2015-10-15T09:39:44.603Z","modifiedBy":"hradmin","imagingType":"22208FBE-9C6E-079D-A1E6-A562F9310FE5","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","modifiedFields":{"radiologist":"2015-10-15T09:39:38.088Z","result":"2015-10-15T09:39:38.088Z","notes":"2015-10-15T09:39:38.088Z","status":"2015-10-15T09:39:44.603Z","requestedBy":"2015-10-15T09:39:38.088Z","requestedDate":"2015-10-15T09:39:38.088Z","imagingDate":"2015-10-15T09:39:44.603Z"},"charges":[]},"_revisions":{"start":2,"ids":["ffa7adb60618346cba98a559d81df36a","be0a6780ba1f2b7e3e8d49ebf20ed8d6"]}},{"_id":"imaging_2_1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB","_rev":"1-83a3398c448faf2ea1962004c5652a52","data":{"imagingDate":null,"notes":"jkmn","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T10:37:57.852Z","result":"hu","status":"Requested","lastModified":"2015-10-15T10:37:58.038Z","modifiedBy":"hradmin","imagingType":"4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","modifiedFields":{"radiologist":"2015-10-15T10:37:58.038Z","result":"2015-10-15T10:37:58.038Z","notes":"2015-10-15T10:37:58.038Z","status":"2015-10-15T10:37:58.038Z","requestedBy":"2015-10-15T10:37:58.038Z","requestedDate":"2015-10-15T10:37:58.038Z"},"charges":[]}},{"_id":"imaging_2_4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99","_rev":"2-0ddb54b6d0376b87fdf409eb6d205f82","data":{"imagingDate":"2015-10-28T07:32:45.311Z","notes":null,"radiologist":null,"requestedBy":"hradmin","requestedDate":"2015-10-26T11:49:08.227Z","result":null,"status":"Completed","lastModified":"2015-10-28T07:32:45.314Z","modifiedBy":"hradmin","imagingType":"CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"C5C296AC-E238-CBA5-8DD8-99942843BC5A","modifiedFields":{"status":"2015-10-28T07:32:45.314Z","requestedBy":"2015-10-26T11:49:08.483Z","requestedDate":"2015-10-26T11:49:08.483Z","imagingDate":"2015-10-28T07:32:45.314Z"},"charges":[]},"_revisions":{"start":2,"ids":["0ddb54b6d0376b87fdf409eb6d205f82","0cefb2d2a3e8ba76052c1a08c27df1eb"]}},{"_id":"imaging_2_51D8DC28-78EB-62B1-942A-1158F5862F34","_rev":"2-40eac78a67beecaa77b17ea5e7481866","data":{"imagingDate":"2015-10-28T07:32:55.293Z","notes":"Chest is ok","radiologist":"Mr Test","requestedBy":"hradmin","requestedDate":"2015-10-28T07:23:34.834Z","result":"Ok","status":"Completed","lastModified":"2015-10-28T07:32:55.294Z","modifiedBy":"hradmin","imagingType":"E53305F3-BA40-B305-B2DC-0732C7AB0042","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","modifiedFields":{"radiologist":"2015-10-28T07:23:35.055Z","result":"2015-10-28T07:23:35.055Z","notes":"2015-10-28T07:23:35.055Z","status":"2015-10-28T07:32:55.294Z","requestedBy":"2015-10-28T07:23:35.055Z","requestedDate":"2015-10-28T07:23:35.055Z","imagingDate":"2015-10-28T07:32:55.294Z"},"charges":[]},"_revisions":{"start":2,"ids":["40eac78a67beecaa77b17ea5e7481866","fb212193dfed510d7935aed17e5f0456"]}},{"_id":"imaging_2_91B061E9-2986-D539-90C8-CD14EC2010B0","_rev":"1-2abe559a8f8075862b282ed4f9d54da5","data":{"imagingDate":null,"notes":"jbkj","radiologist":"b","requestedBy":"hradmin","requestedDate":"2015-10-28T07:39:18.255Z","result":"jjjk","status":"Requested","lastModified":"2015-10-28T07:39:18.406Z","modifiedBy":"hradmin","imagingType":null,"patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"6AD00ED1-670A-2C3F-BC10-0742B1F99264","modifiedFields":{"radiologist":"2015-10-28T07:39:18.406Z","result":"2015-10-28T07:39:18.406Z","notes":"2015-10-28T07:39:18.406Z","status":"2015-10-28T07:39:18.406Z","requestedBy":"2015-10-28T07:39:18.406Z","requestedDate":"2015-10-28T07:39:18.406Z"},"charges":[]}},{"_id":"imaging_2_D0F299E4-CD8D-557D-8C23-216FD23EF844","_rev":"3-8b87996abf9161e5d7908be6676a64d7","data":{"imagingDate":"2015-10-22T07:09:04.249Z","notes":"vbj nkm","radiologist":"fcgvb","requestedBy":"hradmin","requestedDate":"2015-10-22T07:08:38.080Z","result":"cgvhbj n","status":"Completed","lastModified":"2015-10-22T07:09:04.251Z","modifiedBy":"hradmin","imagingType":"B492AA26-22F2-52A9-93C7-17106A57A62E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"9F1A65ED-683F-056E-8D50-A8AF63201CE2","modifiedFields":{"radiologist":"2015-10-22T07:08:38.523Z","result":"2015-10-22T07:08:38.523Z","notes":"2015-10-22T07:08:38.523Z","status":"2015-10-22T07:08:59.403Z","requestedBy":"2015-10-22T07:08:38.523Z","requestedDate":"2015-10-22T07:08:38.523Z","imagingDate":"2015-10-22T07:09:04.251Z"},"charges":[]},"_revisions":{"start":3,"ids":["8b87996abf9161e5d7908be6676a64d7","9f159b24551a1fa5acd7b84cd8d51994","c676b60d0d69556786f283da75b51c77"]}},{"_id":"imaging_2_DBE152F6-9508-2E12-81AC-39BC2CAFE08C","_rev":"2-69b11e7856d8b0fc3bd62debbfca3e55","data":{"imagingDate":"2015-10-28T07:33:17.867Z","notes":"ss","radiologist":"ss","requestedBy":"hradmin","requestedDate":"2015-10-28T07:31:20.891Z","result":"sss","status":"Completed","lastModified":"2015-10-28T07:33:17.868Z","modifiedBy":"hradmin","imagingType":"F51616AE-EB96-2778-824F-386DEAFFD2F9","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"D6938BD3-6346-F62B-8B19-5207B2E5A6AF","modifiedFields":{"radiologist":"2015-10-28T07:31:21.091Z","result":"2015-10-28T07:31:21.091Z","notes":"2015-10-28T07:31:21.091Z","status":"2015-10-28T07:33:17.868Z","requestedBy":"2015-10-28T07:31:21.091Z","requestedDate":"2015-10-28T07:31:21.091Z","imagingDate":"2015-10-28T07:33:17.868Z"},"charges":[]},"_revisions":{"start":2,"ids":["69b11e7856d8b0fc3bd62debbfca3e55","222ad15ae5eed89c6d8abe1c9e07c145"]}},{"_id":"imaging_2_EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B","_rev":"2-63da6e42fb59a811a5468e32bda0eb76","data":{"imagingDate":"2015-10-28T07:33:05.759Z","notes":"hbjn","radiologist":"cgvhbn","requestedBy":"hradmin","requestedDate":"2015-10-28T07:27:44.346Z","result":"fcghvj","status":"Completed","lastModified":"2015-10-28T07:33:05.759Z","modifiedBy":"hradmin","imagingType":"C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","modifiedFields":{"radiologist":"2015-10-28T07:27:44.514Z","result":"2015-10-28T07:27:44.514Z","notes":"2015-10-28T07:27:44.514Z","status":"2015-10-28T07:33:05.759Z","requestedBy":"2015-10-28T07:27:44.514Z","requestedDate":"2015-10-28T07:27:44.514Z","imagingDate":"2015-10-28T07:33:05.759Z"},"charges":[]},"_revisions":{"start":2,"ids":["63da6e42fb59a811a5468e32bda0eb76","51a7194f0c4b6b172b5d0b059285e118"]}},{"_id":"invLocation_2_B7B86EC1-6CCE-30B7-B4ED-FF2061879E03","_rev":"3-28a915c1093e6e8497c2742a4806f926","data":{"quantity":950,"location":null,"aisleLocation":null,"lastModified":"2015-10-30T12:44:28.530Z","modifiedBy":"hradmin","modifiedFields":{"quantity":"2015-10-30T12:44:28.530Z"}},"_revisions":{"start":3,"ids":["28a915c1093e6e8497c2742a4806f926","6b49176eeeafb82a88a10aa5d954d965","e7ffcb12925c148d50279cc2ee012d25"]}},{"_id":"invPurchase_2_CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC","_rev":"2-4f1115c8c7b03b0bf06059d01e5ff7bd","data":{"purchaseCost":4000,"lotNumber":null,"dateReceived":"2015-10-28T22:00:00.000Z","originalQuantity":1000,"currentQuantity":950,"expirationDate":null,"expired":false,"location":null,"aisleLocation":null,"giftInKind":false,"inventoryItem":"igbmk5zf_is","vendor":"Alpha Pharmacy","vendorItemNo":null,"distributionUnit":null,"invoiceNo":null,"lastModified":"2015-10-30T12:44:28.533Z","modifiedBy":"hradmin","modifiedFields":{"dateReceived":"2015-10-29T02:44:10.493Z","purchaseCost":"2015-10-29T02:44:10.493Z","vendor":"2015-10-29T02:44:10.493Z","originalQuantity":"2015-10-29T02:44:10.493Z","currentQuantity":"2015-10-30T12:44:28.533Z","inventoryItem":"2015-10-29T02:44:10.493Z"}},"_revisions":{"start":2,"ids":["4f1115c8c7b03b0bf06059d01e5ff7bd","d0a2104fa76a4161da3f527b23a6d61a"]}},{"_id":"invRequest_2_4691AB2D-AEF3-1AA8-A11E-790BA5788239","_rev":"2-cf9eeeed6d9004aa0479660df622e08c","data":{"adjustPurchases":true,"completedBy":"hradmin","costPerUnit":4,"dateCompleted":"2015-10-29T22:00:00.000Z","dateRequested":"2015-10-29T08:35:51.495Z","deliveryAisle":"C100","deliveryLocation":"Harare","expenseAccount":"Accounts","markAsConsumed":true,"quantity":50,"quantityAtCompletion":1000,"reason":null,"requestedBy":"hradmin","status":"Completed","transactionType":"Fulfillment","lastModified":"2015-10-30T12:44:28.623Z","modifiedBy":"hradmin","inventoryItem":"igbmk5zf_is","patient":null,"visit":null,"locationsAffected":[{"name":"No Location","quantity":50}],"purchasesAffected":[{"id":"CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC","quantity":50}],"modifiedFields":{"transactionType":"2015-10-30T12:44:28.623Z","quantity":"2015-10-29T08:35:51.497Z","deliveryLocation":"2015-10-29T08:35:51.497Z","deliveryAisle":"2015-10-29T08:35:51.497Z","expenseAccount":"2015-10-29T08:35:51.497Z","dateRequested":"2015-10-29T08:35:51.497Z","requestedBy":"2015-10-29T08:35:51.497Z","status":"2015-10-30T12:44:28.623Z","dateCompleted":"2015-10-30T12:44:28.623Z","adjustPurchases":"2015-10-30T12:44:28.623Z","costPerUnit":"2015-10-30T12:44:28.623Z","quantityAtCompletion":"2015-10-30T12:44:28.623Z","purchasesAffected":"2015-10-30T12:44:28.623Z","locationsAffected":"2015-10-30T12:44:28.623Z","completedBy":"2015-10-30T12:44:28.623Z"}},"_revisions":{"start":2,"ids":["cf9eeeed6d9004aa0479660df622e08c","0e093fbeafc9c59eaeaaf0739ad56e13"]}},{"_id":"inventory_2_igbmk5zf_is","_rev":"2-586df5949f0c9046947fae0fcf009b6f","data":{"description":"Biogesic nga medisina","friendlyId":"m00001","name":"Biogesic","quantity":950,"crossReference":"2600","inventoryType":"Medication","price":5,"reorderPoint":100,"distributionUnit":"tablet","lastModified":"2015-10-30T12:44:28.620Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-29T02:44:10.610Z","inventoryType":"2015-10-29T02:44:10.610Z","crossReference":"2015-10-29T02:44:10.610Z","description":"2015-10-29T02:44:10.610Z","reorderPoint":"2015-10-29T02:44:10.610Z","price":"2015-10-29T02:44:10.610Z","distributionUnit":"2015-10-29T02:44:10.610Z","quantity":"2015-10-30T12:44:28.620Z","friendlyId":"2015-10-29T02:44:10.610Z"},"purchases":["CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC"],"locations":["B7B86EC1-6CCE-30B7-B4ED-FF2061879E03"]},"_revisions":{"start":2,"ids":["586df5949f0c9046947fae0fcf009b6f","26fffdb13350d70c54f01078f7ea7058"]}},{"_id":"lookup_2_aisle_location_list","_rev":"1-7257ef0f361f763b2692f692dab6bb7c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["C100"]}},{"_id":"lookup_2_expense_account_list","_rev":"1-bb8267ec5987084be9890734e55df7e0","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Accounts"]}},{"_id":"lookup_2_physician_list","_rev":"1-539fb71896153ad54253f5eb86f508cd","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Dr Test"]}},{"_id":"lookup_2_radiologists","_rev":"6-38c1cbc8559ef893d7ebd043e93ce427","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Mr Test","b","cgvhbn","fcgvb","ss","zinyando"]},"_revisions":{"start":6,"ids":["38c1cbc8559ef893d7ebd043e93ce427","515694dee3f8a35894f6287347485e40","10ef5b07a7d56f64ac26e84507484d41","33cff401403de9c1efd0a9edbec7e50b","cb3dd07e07a6fa2f9e9323b7e15c48fd","864e65b754e2ec13fe2eb8c452bce282"]}},{"_id":"lookup_2_sex","_rev":"1-c433c64d3ecf2a60e4539b1d1dc43d27","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Male"]}},{"_id":"lookup_2_vendor_list","_rev":"1-3b1a6a2565242e3db9cbdb6c579de2af","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Alpha Pharmacy"]}},{"_id":"lookup_2_visit_location_list","_rev":"1-578a5af6fd231a89f2fdeb1baae7036c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Harare"]}},{"_id":"lookup_2_warehouse_list","_rev":"1-578a5af6fd231a89f2fdeb1baae7036c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Harare"]}},{"_id":"patient_2_19A03BBC-71F3-9F39-8B18-15773F446731","_rev":"3-c021a07297d99585de08b3fd96719914","_deleted":true,"_revisions":{"start":3,"ids":["c021a07297d99585de08b3fd96719914","a7323c9135948b4689f52c01826affe2","6ed64fbe474b36dac7c8ac071e33786d"]}},{"_id":"patient_2_2D1BEC2C-EA03-E737-9EC9-D2AEAF2C9EE6","_rev":"2-a587941fb557366a6b87122548a9ba0c","_deleted":true,"_revisions":{"start":2,"ids":["a587941fb557366a6b87122548a9ba0c","0048675586c8e2fd24c8cc2edc545769"]}},{"_id":"patient_2_3C01C5E5-7E64-B147-88F9-D127903B31D7","_rev":"4-be8dd294f8df42bcf220e1a4372340fd","_deleted":true,"_revisions":{"start":4,"ids":["be8dd294f8df42bcf220e1a4372340fd","74d74986cffc330788b0fc5e47f40788","1ed40ad430dba87ec4c0773779fac6aa","34e84dc96007fc737d932ebf875ce340"]}},{"_id":"patient_2_423A476C-2012-6339-8FED-D2E404037268","_rev":"4-263b75936a4ead5058dc1e17535c536c","_deleted":true,"_revisions":{"start":4,"ids":["263b75936a4ead5058dc1e17535c536c","12c22dbd6548922b326bd28b2f05ddb0","a4a9b0e7ed53aea140c1d3259c9b1e94","15ebcd46a46d830899afc17450d4b229"]}},{"_id":"patient_2_519E056C-BF04-2A3F-84D2-8963EAD04261","_rev":"2-13e0330c4610ea3dc8a8dcb64a9b61ae","_deleted":true,"_revisions":{"start":2,"ids":["13e0330c4610ea3dc8a8dcb64a9b61ae","193c2c5d9fcb17698411febac4015547"]}},{"_id":"patient_2_5DD90350-3A67-F3B7-BB4A-A6837A667697","_rev":"2-812e681275f7181b96e1428d5b2eb555","_deleted":true,"_revisions":{"start":2,"ids":["812e681275f7181b96e1428d5b2eb555","a9b1e632e8d3f96d106873396f7f04de"]}},{"_id":"patient_2_63165A06-C866-A0C2-BB43-5DE9A0146737","_rev":"2-5989c5e25baace8df71d475ae164bf40","_deleted":true,"_revisions":{"start":2,"ids":["5989c5e25baace8df71d475ae164bf40","4178d1d23fb9d40a647d573026480dad"]}},{"_id":"patient_2_632DBDA3-5DBF-DDCC-A2C6-915E357319BA","_rev":"2-6ce428f8cdb8d1ea864f976c1ade08e4","_deleted":true,"_revisions":{"start":2,"ids":["6ce428f8cdb8d1ea864f976c1ade08e4","abe897a1411af9ce5df82d2ddbe726f2"]}}]}\n{"seq":53}\n{"docs":[{"_id":"patient_2_688E30F1-E068-A2E3-8986-C224AF671CDD","_rev":"2-cb950343c60eb7116359fb50dc58fb87","_deleted":true,"_revisions":{"start":2,"ids":["cb950343c60eb7116359fb50dc58fb87","949f54bb01a90f17a91a7b392aecd58e"]}},{"_id":"patient_2_694DF805-F7CD-9513-9EF5-4CF8EE009BE9","_rev":"2-005d256252779d14fb83b9614a75d84f","_deleted":true,"_revisions":{"start":2,"ids":["005d256252779d14fb83b9614a75d84f","79cbdb6ba8075de8b19b61f4ebd194b2"]}},{"_id":"patient_2_9C269C48-EE3E-FBEC-9371-A235EEFDA40E","_rev":"2-6d94af1fdf669e3d012e3370c17c7d0f","_deleted":true,"_revisions":{"start":2,"ids":["6d94af1fdf669e3d012e3370c17c7d0f","ba40f943d16f3594cdf2a1c0e7ce36eb"]}},{"_id":"patient_2_9ED02049-6F10-E89D-9BAA-9C113B3AA6E4","_rev":"2-472c94a0e9c78fde3be4c15a71e0f336","_deleted":true,"_revisions":{"start":2,"ids":["472c94a0e9c78fde3be4c15a71e0f336","c61b0ba276e4c88cfda15ae4b5d0768b"]}},{"_id":"patient_2_B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","_rev":"2-fdce7421d92a349d7b613a90d86dbef1","data":{"admitted":false,"address":null,"address2":null,"address3":null,"address4":null,"bloodType":null,"clinic":null,"country":null,"dateOfBirth":null,"economicClassification":null,"email":null,"externalPatientId":null,"familySupport1":null,"familySupport2":null,"familySupport3":null,"familySupport4":null,"familySupport5":null,"friendlyId":"P00017","firstName":"Lennex","sex":"Male","history":null,"insurance":null,"lastName":"Zinyando","livingArrangement":null,"middleName":"","notes":null,"otherIncome":null,"patientType":null,"parent":null,"phone":null,"placeOfBirth":null,"referredDate":null,"referredBy":null,"religion":null,"socialActionTaken":null,"socialRecommendation":null,"status":null,"lastModified":"2016-02-22T21:32:30.568Z","modifiedBy":"Admin User","paymentProfile":null,"payments":[],"modifiedFields":{"friendlyId":"2015-10-06T10:56:52.507Z","firstName":"2015-10-06T10:56:52.507Z","middleName":"2015-10-06T10:56:52.507Z","lastName":"2015-10-06T10:56:52.507Z","sex":"2016-02-22T21:32:30.568Z"}},"_revisions":{"start":2,"ids":["fdce7421d92a349d7b613a90d86dbef1","e5548781a44e741ceac358e5e3413d76"]}},{"_id":"patient_2_BB4E9598-BD8B-528B-9D9E-AD9C3980787B","_rev":"3-957a69aebfae063d61ee8aaa55006803","_deleted":true,"_revisions":{"start":3,"ids":["957a69aebfae063d61ee8aaa55006803","0345093ba84e9c117c7dbb94b45edb8f","3e24d132e3bcc29db9d41a4d9f4296bf"]}},{"_id":"patient_2_C0361670-8B10-F212-9F51-B889D5BF92DF","_rev":"2-7b2217e2c2cb01610c32e0de44910282","_deleted":true,"_revisions":{"start":2,"ids":["7b2217e2c2cb01610c32e0de44910282","13ecb169a07f0e5a78a11209c26ede78"]}},{"_id":"patient_2_C680710A-BFBB-2868-8E5E-F4DD648CA24E","_rev":"2-d9acde506f230ec53a1cff9c97fe58bf","_deleted":true,"_revisions":{"start":2,"ids":["d9acde506f230ec53a1cff9c97fe58bf","9d954090afc2085fb97060446f8e4da0"]}},{"_id":"patient_2_E011AC5D-6F55-A16E-AB47-148E418071EE","_rev":"2-c263c9e9cf93e6d7b98f445b0d800809","_deleted":true,"_revisions":{"start":2,"ids":["c263c9e9cf93e6d7b98f445b0d800809","66c46fd3db8b057d58a35aba6ca99a5a"]}},{"_id":"patient_2_E54A8685-A36F-D1D1-B938-080545EABD0E","_rev":"2-a53992302cf7a33bad522d2dc5835b6e","_deleted":true,"_revisions":{"start":2,"ids":["a53992302cf7a33bad522d2dc5835b6e","5cebaf4e3ffef745a70ef22a1be1f0e8"]}},{"_id":"patient_2_E5EF1B7A-51B7-1610-BFBA-B1B21365C574","_rev":"2-182384c7dc0a26973583a692bfecbce8","_deleted":true,"_revisions":{"start":2,"ids":["182384c7dc0a26973583a692bfecbce8","497eb6ebf5074eeb32e2c02aab754a18"]}},{"_id":"patient_2_F3AA5446-1DE5-AC50-B9CF-B0D491E1D45E","_rev":"2-036325f33884580d2785dadf44527e25","_deleted":true,"_revisions":{"start":2,"ids":["036325f33884580d2785dadf44527e25","9eb866d5ca50209aec98d96470acce98"]}},{"_id":"photo_2_CF5189F1-5BDA-6896-B350-6A1A9B6A217B","_rev":"3-82a9b8e6b9f827259083f9bc560d9ee6","_deleted":true,"_revisions":{"start":3,"ids":["82a9b8e6b9f827259083f9bc560d9ee6","ee9b1e0283b24f4a02b00f92ed70f0ab","5ee18d0589c4ac578fe4e8a5350f725b"]}},{"_id":"photo_2_D2B805B1-8F22-B5D2-956B-AFF6372D18FF","_rev":"3-734e1f5956d3d438f8ba6e187aa4d97f","_deleted":true,"_revisions":{"start":3,"ids":["734e1f5956d3d438f8ba6e187aa4d97f","f574559c84a634ca88d1d10d41c93953","112ad019aa78ef8e06584c9109a9a850"]}},{"_id":"pricing_2_22208FBE-9C6E-079D-A1E6-A562F9310FE5","_rev":"1-7f1b8398ae5dbed5782085efbfdf5ee8","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T09:39:37.879Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T09:39:37.879Z","category":"2015-10-15T09:39:37.879Z","pricingType":"2015-10-15T09:39:37.879Z"},"pricingOverrides":[]}},{"_id":"pricing_2_4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","_rev":"1-866a210b1d9063493c97d580845fc13d","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T10:37:57.867Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T10:37:57.867Z","category":"2015-10-15T10:37:57.867Z","pricingType":"2015-10-15T10:37:57.867Z"},"pricingOverrides":[]}},{"_id":"pricing_2_B492AA26-22F2-52A9-93C7-17106A57A62E","_rev":"1-a03187de833a34d46302b5a740244353","data":{"category":"Imaging","expenseAccount":null,"name":"fghj","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-22T07:08:38.099Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-22T07:08:38.099Z","category":"2015-10-22T07:08:38.099Z","pricingType":"2015-10-22T07:08:38.099Z"},"pricingOverrides":[]}},{"_id":"pricing_2_C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","_rev":"1-fcefadf7300a60430090a0b91df95cce","data":{"category":"Imaging","expenseAccount":null,"name":"dfghn","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:27:44.358Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:27:44.358Z","category":"2015-10-28T07:27:44.358Z","pricingType":"2015-10-28T07:27:44.358Z"},"pricingOverrides":[]}},{"_id":"pricing_2_CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","_rev":"1-a34a6a2d89ae9d5cd57f532f8db1b02f","data":{"category":"Imaging","expenseAccount":null,"name":"hg","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-26T11:49:08.235Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-26T11:49:08.235Z","category":"2015-10-26T11:49:08.235Z","pricingType":"2015-10-26T11:49:08.235Z"},"pricingOverrides":[]}},{"_id":"pricing_2_E53305F3-BA40-B305-B2DC-0732C7AB0042","_rev":"1-5b2724a6d2dce84919a16388a8983a49","data":{"category":"Imaging","expenseAccount":null,"name":"Scan","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:23:34.851Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:23:34.851Z","category":"2015-10-28T07:23:34.851Z","pricingType":"2015-10-28T07:23:34.851Z"},"pricingOverrides":[]}},{"_id":"pricing_2_F51616AE-EB96-2778-824F-386DEAFFD2F9","_rev":"1-13d626d1730a99b3da4dee1a25146ddd","data":{"category":"Imaging","expenseAccount":null,"name":"sss","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:31:20.903Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:31:20.903Z","category":"2015-10-28T07:31:20.903Z","pricingType":"2015-10-28T07:31:20.903Z"},"pricingOverrides":[]}},{"_id":"sequence_2_inventory_Medication","_rev":"1-1acccea88a50973cbe8840a31911aa7c","data":{"prefix":"m","value":1}},{"_id":"sequence_2_patient","_rev":"130-943328c138b701637a579574f516e90b","data":{"prefix":null,"value":130},"_revisions":{"start":130,"ids":["943328c138b701637a579574f516e90b","b527a87cb4f86205dcc62a9ea0fa7a63","973262d1b9be91e82f997cf103481c55","44582fef141bcd8b558595514d3ba0ff","4a8d8f8ca25aa960aef16e5c1e489b81","2a48a9bc803b0d60b5018c07017aedeb","fe6186b5bd38fce211c0dc76ef4a619b","4d41059d2cd8accf225fce92edbbc428","449ad29c390c73126670290e2a351dce","ef33fac6f75c92df977deadcefd2ea21","bde0d0a9a34c662a05458f1d379c6038","4e2b60d439b5001f0562aaa5e836de72","9b7cf30a3a428b0ffbc5c08469b60dc4","fdfa70107c954a955eddc00f1710a412","acb0081b558f7dfc06520ce59abdca9d","b611e8c2f6823f040262e4e983aa8b3e","803c06167d785dca413153687432b9da","e2c71646996df37f91cabb3881395db4","e07b6a9914e89ef9b68e6412801e47db","5c4e63e3ec27823d46d7048c34f1035c","85c90147d202a4eb1a047e2633fdc911","e7dae8e43e473a4b347f5c22161844b4","471182bdd694919456395e3b8ee81d85","c45ce9b872e266344359c0637f9dd5d0","962ad8bf64b30813c4fef6958e83e3f3","5b281c4ea003d026419d35d05dd0b87a","9ed77096845040620cd2354c1ed74001","409143da04d5575669e515f6214f6220","c35ff5c786890aa0005b360749cefdd2","48cba21a512868f2c8e3beb5646ff1c1","58fcaf249567f43db62a1c77a1440b8e","71c619fe66ac2a2246708c6733e7af9e","0e2a21c17d44457443a58dd2db6824fb","7449d0f1ba104902ca08b888dfdc546f","20f7d87b7b4a5326bb93f84c11ae627d","bef379849a35ec5a7408f26a83026e2b","5dd124839c582c23e9279eda6f821796","15a041f1e149ae2989eba580b93969b0","93e7694e1741666512f83bd1bd5064f3","002edd9949b2993af6ce18817d0bc666","a8795752b4a5c9e587d5bbbd05ef41d4","c6f60912813f86724b49110221b713fe","728c2adfea6754b048f7acae42edd25f","b1ddbe8c27e77a561d22fec546349409","923830cdb237b3ba2088779642bca716","85f7e7891658b988333439ee84dfcd39","a52f2c92c951c2c7266a9ad170d3ae9d","79cfca9fdd7b6cdae2396862f103599e","87221151cfb4cb5bbdf73eb694a7eb34","f1c5faf2bc8f82ec5a29071b6156e5e2","84612c5298273469c586955ee8427555","cc81c865b33cf6d967bde9ff60b9af6d","8b16de2d23b9c7e216215085a08caea8","8be1c3c951d7c2355f910f785cac2534","696488469a9aa721643875029f6de938","04ffb420af095d229c45a69d0e1c56c2","f8fc0538d0eacb22a767c9eb449f4c84","6adb4264d4dd3b13829ffc7e17ba58c2","f50856bf682db17eee3d3cafb366a6be","743e61dcfce262c16251ed396ee76eb7","4fcdf09a763ec5da89d41dab6dd9edc8","912874972749c40ea838145828c14173","fd8c5a0d7662b27c8cbdfbfdd45ee32d","173fe5c207973de53fd984078bbd73a2","4e9ef14c62f9312cd0fb1b47e7fabe1e","ce6f1f9584656970cfd92f1e361e2fed","cf8cf83cf02c266b75af0bc69467a07f","5816c2ba418d387facd7b6ed0a0e6054","b3839c763f128f2ccf99cfb874a2413e","68b05605500c0109d046a56680a5a7a1","a13d320fed2c85ed0b173d6645ec0274","ba1dad02a90e4ac18632c1a53a90b759","c5e7e81e97d0fc7d0797bd9822685176","b580fcf4f4291b408f4dda64a4bdec96","bb1a562af157e3c24d23c3e2f1171b29","e9f245d9566dd9e116caf7d074792d36","30b587f2b5204d237572c86a545756fb","7df53a1742b52647118fec21f331e94d","0a4c120f78fa5899d0cea5d87d92c9b0","e62f1b02721a75fd1ea290da9acdc199","3e39b429ea4cda00c9ac9d3f0b61029c","038d82911c8979c0cd58e807871a09ca","618d916a14cfa55aa8e65d42b3761ca5","8d24a6b355e64a680f0f03ab0f738b8c","999e1fa6e5175dad02e4f2db0cd41843","782e7a1c4097f1aa1d117a7fbd01c443","67b3c03ea8609652c494a22242ce5a1f","3b1fc1b83a352ef9c672110a69306064","8a0da1966531daede44592906bf8df99","279e844131c96ca7b647cacfa3508022","42733f5f658de7ee440c02286fd4e21c","e3a50044a3cb2ac901b5b65653d0fc7f","b7fb5627bee7f642f8e608be1bb1e859","2fdb16832a0ed61b7f9e780750b70898","e38f4adbab987a8c628599ea9052ca44","7ece3f9fcff7b57b28f1237ba1107a0f","8fb6c171e3c6a345d199a8884e42951a","c76709145ca58dfcf67c1f397b772689","76182e657f0b0aa6fa07bf5491d2b427","ab161b88c332f3df338f1f4aa2b2e307","e00a3184b07c0459cf4ebdeb825f991f","cee6a3aac677927abaf3ae61508954a2","86bed2b62e1e6b6f98790ecafefcc17f","ae44899fdbc41d69076ec6a8f7563181","61cce97f5cd6ff092f28fe9ec9da4f27","f9008b952322c32322ef0e7e42fdf383","8fdecd159563a90d7cbc9c9aedc3068f","9b1f0f8f0e4db1f8931d290966f3bc3c","a9b5402ea07343a1b6d5612312e07a34","25ef3d2573778c3ebda4ef7860fe310f","3e39e8d6ceabb2079042e81613858906","b4e15c555737aa9573724407ce84b667","b2538362e8afb57e3e11e5231ae60d5d","04add3d3926f54232b0e0ed7a9fc141a","e924dcf4bb51c7c552538273e08901bb","77b6f226033c656d3a9768085ff3e80a","676dd4835b46e8f62ec2ce5908d1c60a","762481b2c71611cce80a5a9ef03aa48d","b9b73bf1d2df1598cc164089375ed7bc","0a581f677e6d8f7a484fa0a80156d95b","6b51cfdb83336973df284e4d5c2f308b","4a27247e93fabb86b6a5a9676f47ec8e","8b542908965798dd683a68f507635a83","515d8987a1e11acb866ede87612b53b1","d19e3759adc65398cf6a42a61345cdae","ac63c129bee25dc4c59a639e2721fb81","17c1209032c06df436ad0a4fa76723cc","f0ef6923c78e739d9228517a4813b646","f9a8fd6c55cd4e5fb0064b7767586e05","5bc31ffefa482f2e66299cf0704623c8"]}},{"_id":"visit_2_0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","_rev":"2-0ddd43cbcc57cc5d6ff082a283d881ac","data":{"dischargeInfo":null,"endDate":"2015-10-15T10:37:57.902Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T10:37:57.902Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T10:37:57.915Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T10:37:57.915Z","endDate":"2015-10-15T10:37:57.915Z","outPatient":"2015-10-15T10:37:57.915Z","visitType":"2015-10-15T10:37:57.915Z"},"charges":[],"imaging":["1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["0ddd43cbcc57cc5d6ff082a283d881ac","e4540f9cf2a236335662116d4e0a66da"]}},{"_id":"visit_2_377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","_rev":"2-ee5b0686e20e1011d11b3051b93e7a93","data":{"dischargeInfo":null,"endDate":"2015-10-15T09:39:37.940Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T09:39:37.940Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T09:39:37.948Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T09:39:37.948Z","endDate":"2015-10-15T09:39:37.948Z","outPatient":"2015-10-15T09:39:37.948Z","visitType":"2015-10-15T09:39:37.948Z"},"charges":[],"imaging":["07CC6746-C7D9-A410-9B8C-C4B4E095A96D"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["ee5b0686e20e1011d11b3051b93e7a93","5fee255cf57220ddf1c19977118a540e"]}},{"_id":"visit_2_6AD00ED1-670A-2C3F-BC10-0742B1F99264","_rev":"2-9bf9856192b6c8ef34d2fcdb27296593","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:39:18.257Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:39:18.257Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:39:18.275Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:39:18.275Z","endDate":"2015-10-28T07:39:18.275Z","outPatient":"2015-10-28T07:39:18.275Z","visitType":"2015-10-28T07:39:18.275Z"},"charges":[],"imaging":["91B061E9-2986-D539-90C8-CD14EC2010B0"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["9bf9856192b6c8ef34d2fcdb27296593","e50477b58f5edd257b9ce20ea65b1bca"]}},{"_id":"visit_2_74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","_rev":"2-c24a52b04610b293fff293b18dd0bb15","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:27:44.394Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:27:44.394Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:27:44.406Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:27:44.406Z","endDate":"2015-10-28T07:27:44.406Z","outPatient":"2015-10-28T07:27:44.406Z","visitType":"2015-10-28T07:27:44.406Z"},"charges":[],"imaging":["EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["c24a52b04610b293fff293b18dd0bb15","5a6ae8f033eb99448ad898f164d822e8"]}},{"_id":"visit_2_9F1A65ED-683F-056E-8D50-A8AF63201CE2","_rev":"2-e19734a8deff62722e6e023af4b8e130","data":{"dischargeInfo":null,"endDate":"2015-10-22T07:08:38.175Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-22T07:08:38.175Z","status":null,"visitType":"Imaging","lastModified":"2015-10-22T07:08:38.189Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-22T07:08:38.189Z","endDate":"2015-10-22T07:08:38.189Z","outPatient":"2015-10-22T07:08:38.189Z","visitType":"2015-10-22T07:08:38.189Z"},"charges":[],"imaging":["D0F299E4-CD8D-557D-8C23-216FD23EF844"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["e19734a8deff62722e6e023af4b8e130","bd81a41820526c8c0450ee544867c6fa"]}},{"_id":"visit_2_C5C296AC-E238-CBA5-8DD8-99942843BC5A","_rev":"2-57e6740d8dac593d790cd7f76c4ad0c3","data":{"dischargeInfo":null,"endDate":"2015-10-26T11:49:08.277Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-26T11:49:08.277Z","status":null,"visitType":"Imaging","lastModified":"2015-10-26T11:49:08.282Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-26T11:49:08.282Z","endDate":"2015-10-26T11:49:08.282Z","outPatient":"2015-10-26T11:49:08.282Z","visitType":"2015-10-26T11:49:08.282Z"},"charges":[],"imaging":["4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["57e6740d8dac593d790cd7f76c4ad0c3","253e8d9f8c0865cb3e9ffd1f6849bcde"]}},{"_id":"visit_2_CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","_rev":"2-f781f118fd87b036d8cbfbf7771cda99","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:23:34.906Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:23:34.906Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:23:34.914Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:23:34.914Z","endDate":"2015-10-28T07:23:34.914Z","outPatient":"2015-10-28T07:23:34.914Z","visitType":"2015-10-28T07:23:34.914Z"},"charges":[],"imaging":["51D8DC28-78EB-62B1-942A-1158F5862F34"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["f781f118fd87b036d8cbfbf7771cda99","e2b8bf1f76ea01c32b414c184905511e"]}},{"_id":"visit_2_D6938BD3-6346-F62B-8B19-5207B2E5A6AF","_rev":"2-631f62b5121ccfcd1a8de2bc9d3d252f","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:31:20.941Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:31:20.941Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:31:20.953Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:31:20.953Z","endDate":"2015-10-28T07:31:20.953Z","outPatient":"2015-10-28T07:31:20.953Z","visitType":"2015-10-28T07:31:20.953Z"},"charges":[],"imaging":["DBE152F6-9508-2E12-81AC-39BC2CAFE08C"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["631f62b5121ccfcd1a8de2bc9d3d252f","8b46887d52e3043d742262fc03ff48b8"]}}]}\n{"seq":86}\n';
});
define('hospitalrun/tests/fixtures/billing', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.5","db_type":"http","start_time":"2016-02-22T21:53:55.176Z","db_info":{"db_name":"main","doc_count":78,"doc_del_count":5,"update_seq":85,"purge_seq":0,"compact_running":false,"disk_size":53359,"data_size":45771,"instance_start_time":"1456177856106516","disk_format_version":6,"committed_update_seq":85,"host":"http://localhost:5984/main/","auto_compaction":false,"adapter":"http"}}\n{"docs":[{"_id":"_design/appointments_by_patient","_rev":"1-9868b6586898a48c3fd68722ca3fe1d4","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}}}]}\n{"seq":1}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"1-03951858f9232df2e774548b0f5fd068","version":4,"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n      var i,\\n          filterBy = null,\\n          includeRow = true;\\n      if (req.query && req.query.filterBy) {\\n        filterBy = JSON.parse(req.query.filterBy);\\n      }\\n      if (!filterBy) {\\n        return true;\\n      }\\n      for (i = 0; i < filterBy.length; i++) {\\n        var currentValue = row.doc.data[filterBy[i].name];\\n        if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n          currentValue = \'Scheduled\';\\n        }\\n        if (currentValue !== filterBy[i].value) {\\n          includeRow = false;\\n          break;\\n        }\\n      }\\n      return includeRow;\\n    });rows.sort(function (a, b) {\\n      function defaultStatus(value) {\\n        if (!value || value === \'\') {\\n          return \'Scheduled\';\\n        } else {\\n          return value;\\n        }\\n      }\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'appointmentType\':\\n        case \'location\':\\n        case \'provider\':\\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n        case \'date\':\\n          {\\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n            if (startDiff === 0) {\\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n            } else {\\n              return startDiff;\\n            }\\n            break;\\n          }\\n        case \'status\':\\n          {\\n            var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                bStatus = defaultStatus(b.doc.data[sortBy]);\\n            return compareStrings(aStatus, bStatus);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"}}]}\n{"seq":2}\n{"docs":[{"_id":"_design/imaging_by_status","_rev":"1-9236042e1fb9f567d1d527bbb429cd8e","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}}},{"_id":"_design/inventory_by_name","_rev":"1-304304d63beaffd8d1ae4ae1cddf4b2b","version":3,"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'crossReference\':\\n        case \'description\':\\n        case \'friendlyId\':\\n        case \'name\':\\n        case \'price\':\\n        case \'quantity\':\\n        case \'inventoryType\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"}},{"_id":"_design/inventory_by_type","_rev":"1-003ef699ab0f2b8628c0bf613fabf7a2","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}}},{"_id":"_design/inventory_purchase_by_date_received","_rev":"1-78939ec45bef330bbfa87763dbbfce37","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"1-17bd9d3619ae03155d9929d3ebcd5023","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}}},{"_id":"_design/inventory_request_by_item","_rev":"1-7e7ef275a9fc15f2b5f328b1479c6097","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}}},{"_id":"_design/inventory_request_by_status","_rev":"1-187394c79d3206e11e112891f0d63550","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}}},{"_id":"_design/invoice_by_status","_rev":"1-73e3e45673ed0c4f4ae1cee855f216f0","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}}},{"_id":"_design/lab_by_status","_rev":"1-db4393c6856b98a40afd6ceef31db2a7","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}}},{"_id":"_design/medication_by_status","_rev":"1-36ce9e9853552f5eb646ed26de7184dc","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}}},{"_id":"_design/patient_by_display_id","_rev":"1-6f596cec9eb82609308fd9d25a9f9df2","version":4,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'gender\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["6f596cec9eb82609308fd9d25a9f9df2"]}},{"_id":"_design/patient_by_display_id","_rev":"1-0b75ee7c82a1aadebd0bc0fd403622fb","version":5,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'sex\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["0b75ee7c82a1aadebd0bc0fd403622fb"]}},{"_id":"_design/patient_by_status","_rev":"1-ff26a12cdb8747aae5bf26f9af3a1953","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}}},{"_id":"_design/photo_by_patient","_rev":"1-e3dc5506f7f370535b85be0adc59c7cc","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}}},{"_id":"_design/pricing_by_category","_rev":"1-23d44e44019170eadd086734c87e3976","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}}},{"_id":"_design/procedure_by_date","_rev":"1-25ccef2a9dff3addd8c0d15cc79c363c","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}}},{"_id":"_design/sequence_by_prefix","_rev":"1-8ac3a62b4c0b624ebed3b68b27cd197e","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}}},{"_id":"_design/visit_by_date","_rev":"1-367a7fa42f1067f645190d560f83ef5e","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_discharge_date","_rev":"1-e53c95160dacaf007fe01c01215729ce","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_patient","_rev":"1-412252178488867e2350dcd13da779ea","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}}},{"_id":"billingLineItem_2_0CCADC1E-1A14-AD66-8423-7A3E6819AEBA","_rev":"2-11ec581b8c2c2f6c0a7dc18033f4e5fb","data":{"amountOwed":null,"category":"Hospital Charges","description":null,"discount":null,"name":"Test","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-12T21:17:00.771Z","modifiedBy":"Admin User","details":[],"modifiedFields":{"name":"2015-11-12T21:17:00.771Z","category":"2015-11-12T21:17:00.771Z"}},"_revisions":{"start":2,"ids":["11ec581b8c2c2f6c0a7dc18033f4e5fb","90fbdae0cfe722dbf01223fd001b95ab"]}},{"_id":"billingLineItem_2_5A0DDD6C-6A8B-D336-B0AC-2568B648DBA2","_rev":"5-1cbc6b21ccf94b7e42246c75c6bce181","data":{"amountOwed":120,"category":"Hospital Charges","description":null,"discount":null,"name":"Pharmacy","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-13T16:38:51.846Z","modifiedBy":"Admin User","details":["41A8F093-D8F1-30AD-A070-E9881F072F4C"],"modifiedFields":{"name":"2015-11-13T16:38:20.043Z","category":"2015-11-13T16:38:20.043Z","amountOwed":"2015-11-13T16:38:51.846Z"}},"_revisions":{"start":5,"ids":["1cbc6b21ccf94b7e42246c75c6bce181","e2f88432d42e3d68230146173e579b26","a9c69d3126d8f23d1de7ca2362997b0a","635b22c6bd2bebfb41d59375d4a26cc6","cbe1b2c0c29230d741875d4ae3cd46c1"]}},{"_id":"billingLineItem_2_7481C877-BCB1-EB99-BBCA-5E5DC4DADF7A","_rev":"1-b41fc57519199df35943d9c24fd047d7","data":{"amountOwed":null,"category":"Hospital Charges","description":null,"discount":null,"name":"Room/Accomodation","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-12T22:00:59.424Z","modifiedBy":"Admin User","details":["BAFBDD02-6953-5E5F-A7F6-59839997B2FC"],"modifiedFields":{"category":"2015-11-12T22:00:59.424Z","name":"2015-11-12T22:00:59.424Z"}}},{"_id":"billingLineItem_2_83D54C80-6493-9A02-9940-325B25A8C2B5","_rev":"1-063aa7e251503a018e8d3616f8e4f1f2","data":{"amountOwed":null,"category":"Hospital Charges","description":null,"discount":null,"name":"Physical Therapy","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-12T22:00:59.430Z","modifiedBy":"Admin User","details":[],"modifiedFields":{"name":"2015-11-12T22:00:59.430Z","category":"2015-11-12T22:00:59.430Z"}}},{"_id":"billingLineItem_2_87DA9B12-9822-ACA4-A5C4-1FFDD559635C","_rev":"1-e3d62a3ecceebeb32449b7aba49e24ad","data":{"amountOwed":null,"category":"Hospital Charges","description":null,"discount":null,"name":"Ward Items","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-12T22:00:59.429Z","modifiedBy":"Admin User","details":[],"modifiedFields":{"name":"2015-11-12T22:00:59.429Z","category":"2015-11-12T22:00:59.429Z"}}},{"_id":"billingLineItem_2_9733361B-5A85-9F2E-B9D5-F5C85872F7B9","_rev":"1-0e1922e2b361e48a37c6acd5f09dc417","data":{"amountOwed":null,"category":"Hospital Charges","description":null,"discount":null,"name":"Pharmacy","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-12T22:00:59.426Z","modifiedBy":"Admin User","details":[],"modifiedFields":{"name":"2015-11-12T22:00:59.426Z","category":"2015-11-12T22:00:59.426Z"}}},{"_id":"billingLineItem_2_9F1F38EA-168E-9F84-9F1D-C544D64DCD3D","_rev":"5-1c7e8423336ced251445be9ab2415e9a","data":{"amountOwed":0,"category":"Hospital Charges","description":null,"discount":null,"name":"Others/Misc","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-13T16:38:51.850Z","modifiedBy":"Admin User","details":[],"modifiedFields":{"name":"2015-11-13T16:38:20.049Z","category":"2015-11-13T16:38:20.049Z","amountOwed":"2015-11-13T16:38:51.850Z"}},"_revisions":{"start":5,"ids":["1c7e8423336ced251445be9ab2415e9a","5fd56534f9568ebbfedd24d87556c0f2","9a26cbbdec1ee0343e2fe4b7a77980c3","b70a6ee94f406a0b62f77b664819f193","4b741f261e7d842e66966d0878992a38"]}},{"_id":"billingLineItem_2_C193854D-A0D6-5E6B-A900-870904FE92DD","_rev":"5-c3555b12802aff9426590916449368d6","data":{"amountOwed":36,"category":"Hospital Charges","description":null,"discount":null,"name":"Ward Items","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-13T16:38:51.849Z","modifiedBy":"Admin User","details":["04A406D0-EB6B-7BD6-A328-4505150D5A70"],"modifiedFields":{"name":"2015-11-13T16:38:20.048Z","category":"2015-11-13T16:38:20.048Z","amountOwed":"2015-11-13T16:38:51.849Z"}},"_revisions":{"start":5,"ids":["c3555b12802aff9426590916449368d6","1857509859d8571c5e8c2cdc43de07ee","72437bd56ae7108eda0e66a11206f47c","d14d5f368af87d9f33338d31419bd855","9dfba0cdf988336e95ecd5e1eb15cda6"]}},{"_id":"billingLineItem_2_CCC87C0C-DD95-53E6-B645-C3DEAA1C266F","_rev":"5-1292a509ab23929242728137587fbef6","data":{"amountOwed":0,"category":"Hospital Charges","description":null,"discount":null,"name":"Physical Therapy","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-13T16:38:51.850Z","modifiedBy":"Admin User","details":[],"modifiedFields":{"name":"2015-11-13T16:38:20.048Z","category":"2015-11-13T16:38:20.048Z","amountOwed":"2015-11-13T16:38:51.850Z"}},"_revisions":{"start":5,"ids":["1292a509ab23929242728137587fbef6","6e8688e35c955a02bbfc595bda9ef10b","1955501435b44646703efaee24fe2b3b","3e169aeec3ba153a20ab6ac4de2f5423","1fb4106fed478276f3c3c5019e4c1022"]}},{"_id":"billingLineItem_2_D33B74D7-87A0-96F8-AAA1-8455635581A9","_rev":"5-7dbae08e82a6c48b6e46fa2d4baeed6a","data":{"amountOwed":495,"category":"Hospital Charges","description":null,"discount":null,"name":"Room/Accomodation","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-13T16:38:51.844Z","modifiedBy":"Admin User","details":["89E9DCF0-E5FD-F0FA-A34F-8A80A2892934"],"modifiedFields":{"category":"2015-11-13T16:38:20.041Z","name":"2015-11-13T16:38:20.041Z","amountOwed":"2015-11-13T16:38:51.844Z"}},"_revisions":{"start":5,"ids":["7dbae08e82a6c48b6e46fa2d4baeed6a","e54a02cebf64641ee0ee72d8ccc2e861","0e3bc753d21631cea51c1ba64965bb2a","72041c92e27af1a896ff8bf42592e8c7","6acbb6d7dae522de5c588959cda1279e"]}},{"_id":"billingLineItem_2_D6886EFD-5FD8-0048-8F18-70D1C2AF6B7B","_rev":"5-c7c6ba06c51bb71ff990f8032e238d89","data":{"amountOwed":14,"category":"Hospital Charges","description":null,"discount":null,"name":"X-ray/Lab/Supplies","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-13T16:38:51.848Z","modifiedBy":"Admin User","details":["EEA8B1B7-42DB-A4E1-BBB1-BDEDED85B17F","0195CE1B-EA11-CB34-8970-BD6378C11C0B"],"modifiedFields":{"name":"2015-11-13T16:38:20.047Z","category":"2015-11-13T16:38:20.047Z","amountOwed":"2015-11-13T16:38:51.848Z"}},"_revisions":{"start":5,"ids":["c7c6ba06c51bb71ff990f8032e238d89","d36d74e5e324a3fbfc2e9ff6f51204cf","ba5ece37936ad9017a6c225584f7e735","91075517952345cce4ca5d7106374174","83cf4f5966bdff2903a22158d1ff923e"]}},{"_id":"billingLineItem_2_E0882D10-63E3-024B-A8CF-9010FE23C75B","_rev":"1-3df9822ea1a19faeb0dbaf1aa00641e2","data":{"amountOwed":null,"category":"Hospital Charges","description":null,"discount":null,"name":"X-ray/Lab/Supplies","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-12T22:00:59.428Z","modifiedBy":"Admin User","details":["6006AE5D-5B16-4665-BF2A-0549CFA18B05"],"modifiedFields":{"name":"2015-11-12T22:00:59.428Z","category":"2015-11-12T22:00:59.428Z"}}},{"_id":"billingLineItem_2_FF5F6DA8-0359-1712-9E6E-AF50385E07A4","_rev":"1-9f11c1a15fdb9211cf994777d2ebffc7","data":{"amountOwed":null,"category":"Hospital Charges","description":null,"discount":null,"name":"Others/Misc","nationalInsurance":null,"privateInsurance":null,"lastModified":"2015-11-12T22:00:59.431Z","modifiedBy":"Admin User","details":[],"modifiedFields":{"name":"2015-11-12T22:00:59.431Z","category":"2015-11-12T22:00:59.431Z"}}},{"_id":"imaging_2_9DF8A9FF-D32D-371C-8F04-7D26B9EF5CB9","_rev":"2-ee8faaf2563a1aff848c3f1ac5c5eef4","data":{"imagingDate":"2015-11-12T21:54:33.372Z","notes":null,"radiologist":"","requestedBy":"Admin User","requestedDate":"2015-11-12T21:54:30.514Z","result":null,"status":"Completed","lastModified":"2015-11-12T21:54:33.372Z","modifiedBy":"Admin User","imagingType":"5931700E-7965-23B1-9835-2D1615E7E755","patient":"8F7CEF9B-D9C6-E4C4-8BE2-E4DC1E87FCDA","visit":"666DFC61-3230-A865-A145-C7D9139DA1CA","charges":[],"modifiedFields":{"radiologist":"2015-11-12T21:54:30.580Z","status":"2015-11-12T21:54:33.372Z","requestedBy":"2015-11-12T21:54:30.580Z","requestedDate":"2015-11-12T21:54:30.580Z","imagingDate":"2015-11-12T21:54:33.372Z"}},"_revisions":{"start":2,"ids":["ee8faaf2563a1aff848c3f1ac5c5eef4","86e7b70254a3e8d0d37cada4fe2c2dd5"]}},{"_id":"invLocation_2_871EBB5C-6F7A-8D53-A4D4-051E3AA3FFCF","_rev":"3-05c0170c92691e4cec16eaa5fd870093","data":{"quantity":14390,"location":"Pharmacy","aisleLocation":null,"lastModified":"2015-11-13T16:23:27.174Z","modifiedBy":"Admin User","modifiedFields":{"location":"2015-11-13T16:22:40.565Z","quantity":"2015-11-13T16:23:27.174Z"}},"_revisions":{"start":3,"ids":["05c0170c92691e4cec16eaa5fd870093","b12149871eb3a15641ed6288033fafc7","8ed685da9b4f64d6f1700feefd146c00"]}},{"_id":"invPurchase_2_C28F1C3D-2963-B8EB-903E-78913E9E2B32","_rev":"2-730d39d0cb831606ff5d92371b0e2ddf","data":{"purchaseCost":532,"lotNumber":null,"dateReceived":"2015-11-13T05:00:00.000Z","originalQuantity":14400,"currentQuantity":14390,"expirationDate":null,"expired":false,"location":"Pharmacy","aisleLocation":null,"giftInKind":false,"inventoryItem":"igxvfw26_lh","vendor":"ACME","vendorItemNo":null,"distributionUnit":null,"invoiceNo":null,"lastModified":"2015-11-13T16:23:27.174Z","modifiedBy":"Admin User","modifiedFields":{"dateReceived":"2015-11-13T16:22:40.557Z","purchaseCost":"2015-11-13T16:22:40.557Z","location":"2015-11-13T16:22:40.557Z","vendor":"2015-11-13T16:22:40.557Z","originalQuantity":"2015-11-13T16:22:40.557Z","currentQuantity":"2015-11-13T16:23:27.174Z","inventoryItem":"2015-11-13T16:22:40.557Z"}},"_revisions":{"start":2,"ids":["730d39d0cb831606ff5d92371b0e2ddf","fc582e29abb009231245cb59fdd2ccee"]}},{"_id":"invRequest_2_D3C66D97-6371-9453-94EC-8610D69A7152","_rev":"1-886cc49f90ce562971dad25d3fb8de65","data":{"adjustPurchases":true,"completedBy":"Admin User","costPerUnit":0.04,"dateCompleted":"2015-11-13T16:23:27.165Z","dateRequested":null,"deliveryAisle":null,"deliveryLocation":null,"expenseAccount":null,"markAsConsumed":true,"quantity":10,"quantityAtCompletion":14400,"reason":null,"requestedBy":null,"status":"Completed","transactionType":"Fulfillment","lastModified":"2015-11-13T16:23:27.346Z","modifiedBy":"Admin User","inventoryItem":"igxvfw26_lh","patient":"8F7CEF9B-D9C6-E4C4-8BE2-E4DC1E87FCDA","visit":null,"modifiedFields":{"dateCompleted":"2015-11-13T16:23:27.346Z","quantity":"2015-11-13T16:23:27.346Z","transactionType":"2015-11-13T16:23:27.346Z","markAsConsumed":"2015-11-13T16:23:27.346Z","adjustPurchases":"2015-11-13T16:23:27.346Z","costPerUnit":"2015-11-13T16:23:27.346Z","quantityAtCompletion":"2015-11-13T16:23:27.346Z","purchasesAffected":"2015-11-13T16:23:27.346Z","locationsAffected":"2015-11-13T16:23:27.346Z","status":"2015-11-13T16:23:27.346Z","completedBy":"2015-11-13T16:23:27.346Z"},"purchasesAffected":[{"id":"C28F1C3D-2963-B8EB-903E-78913E9E2B32","quantity":10}],"locationsAffected":[{"name":"Pharmacy","quantity":10}]}},{"_id":"inventory_2_igxvfw26_lh","_rev":"3-386a7bd74bfb2bbb81f1c5e9b599d2b9","data":{"description":null,"friendlyId":"m00001","name":"Acetaminophen 500 MG","quantity":14390,"crossReference":null,"inventoryType":"Medication","price":12,"reorderPoint":null,"distributionUnit":"tablet","lastModified":"2015-11-13T16:23:27.345Z","modifiedBy":"Admin User","locations":["871EBB5C-6F7A-8D53-A4D4-051E3AA3FFCF"],"purchases":["C28F1C3D-2963-B8EB-903E-78913E9E2B32"],"modifiedFields":{"name":"2015-11-13T16:22:40.649Z","inventoryType":"2015-11-13T16:22:40.649Z","distributionUnit":"2015-11-13T16:22:40.649Z","quantity":"2015-11-13T16:23:27.345Z","friendlyId":"2015-11-13T16:22:40.649Z","price":"2015-11-13T16:22:52.229Z"}},"_revisions":{"start":3,"ids":["386a7bd74bfb2bbb81f1c5e9b599d2b9","1c30ca3a4b102090fc0598cd7bbdf3ae","391bee3a85ef66bda23c89cabdd67956"]}},{"_id":"invoice_2_6414F250-C6F0-9B1F-94D7-621A539737AF","_rev":"2-e1898aa278789e1d7c91c4e59289344d","_deleted":true,"_revisions":{"start":2,"ids":["e1898aa278789e1d7c91c4e59289344d","8fad9853ba8f801a3375fb0149c140bf"]}},{"_id":"invoice_2_7596419D-F512-29A0-81EE-346D6D42BB54","_rev":"2-31502fbbe7a5e4ec4f56bc4c7abd1fe3","_deleted":true,"_revisions":{"start":2,"ids":["31502fbbe7a5e4ec4f56bc4c7abd1fe3","dba012716b2add05d20b765a72bca9bd"]}},{"_id":"invoice_2_8929C38C-B621-B2FB-ABB7-DE15C61DFCC8","_rev":"5-7a7d93b820b6085c5beea49fc3efb520","data":{"externalInvoiceNumber":"inv00001","patientInfo":"Joe Bagadonuts - TCH 00001","status":"Billed","remarks":null,"billDate":"2015-11-13T05:00:00.000Z","paidTotal":0,"lastModified":"2015-11-13T16:50:24.904Z","modifiedBy":"Admin User","patient":"8F7CEF9B-D9C6-E4C4-8BE2-E4DC1E87FCDA","visit":"666DFC61-3230-A865-A145-C7D9139DA1CA","paymentProfile":null,"lineItems":["D33B74D7-87A0-96F8-AAA1-8455635581A9","5A0DDD6C-6A8B-D336-B0AC-2568B648DBA2","D6886EFD-5FD8-0048-8F18-70D1C2AF6B7B","C193854D-A0D6-5E6B-A900-870904FE92DD","CCC87C0C-DD95-53E6-B645-C3DEAA1C266F","9F1F38EA-168E-9F84-9F1D-C544D64DCD3D"],"payments":[],"modifiedFields":{"billDate":"2015-11-13T16:38:21.206Z","status":"2015-11-13T16:50:24.904Z","patientInfo":"2015-11-13T16:38:21.206Z","externalInvoiceNumber":"2015-11-13T16:44:21.692Z","paidTotal":"2015-11-13T16:50:24.904Z"}},"_revisions":{"start":5,"ids":["7a7d93b820b6085c5beea49fc3efb520","dd0fbb2e7a00eb9ee9be70696621571a","831c42f1a919ec0ad0592bc301c3f48f","db6828f498d4ec6147ef996cfb4b809a","3aeae1614fd7caa7178cf470bc62c366"]}},{"_id":"lab_2_0762040A-CAC7-130F-8D0C-E3DE9245EE38","_rev":"1-f7d92c5e72cc67fc22c1e7634ca08881","data":{"labDate":"2015-11-12T21:46:23.129Z","notes":null,"requestedBy":"Admin User","requestedDate":"2015-11-12T21:46:24.462Z","result":"Good","status":"Completed","lastModified":"2015-11-12T21:46:50.177Z","modifiedBy":"Admin User","labType":"F71A1788-3407-515B-8006-F9CC788CA8EA","patient":"8F7CEF9B-D9C6-E4C4-8BE2-E4DC1E87FCDA","visit":"666DFC61-3230-A865-A145-C7D9139DA1CA","charges":[],"modifiedFields":{"result":"2015-11-12T21:46:50.177Z","status":"2015-11-12T21:46:50.177Z","labDate":"2015-11-12T21:46:50.177Z","requestedBy":"2015-11-12T21:46:50.177Z","requestedDate":"2015-11-12T21:46:50.177Z"}}},{"_id":"lineItemDetail_2_0195CE1B-EA11-CB34-8970-BD6378C11C0B","_rev":"5-50e91d40fbef6f01247cdc2c797df755","data":{"department":"Imaging","expenseAccount":null,"name":"Xray Hand","price":12,"quantity":1,"total":null,"lastModified":"2015-11-13T16:38:20.046Z","modifiedBy":"Admin User","pricingItem":"5931700E-7965-23B1-9835-2D1615E7E755","modifiedFields":{"name":"2015-11-13T16:38:20.046Z","expenseAccount":"2015-11-13T16:38:20.046Z","quantity":"2015-11-13T16:38:20.046Z","price":"2015-11-13T16:38:20.046Z","department":"2015-11-13T16:38:20.046Z"}},"_revisions":{"start":5,"ids":["50e91d40fbef6f01247cdc2c797df755","b784cb137af68027834c22b372b7abab","0694194f05c3b79c026ff540d9736043","5cbe22057ba23a8ee0f81d8526d8fc8b","91688cbe5d5da849ea8d4cc2516bd0e6"]}},{"_id":"lineItemDetail_2_04A406D0-EB6B-7BD6-A328-4505150D5A70","_rev":"5-3c5cfebc1004ba1adc877f79101943b9","data":{"department":"Ward","expenseAccount":null,"name":"Gauze pad","price":3,"quantity":12,"total":null,"lastModified":"2015-11-13T16:38:20.047Z","modifiedBy":"Admin User","pricingItem":"5029F0F9-BBCF-62F5-BA2B-E8990AC7D151","modifiedFields":{"name":"2015-11-13T16:38:20.047Z","expenseAccount":"2015-11-13T16:38:20.047Z","quantity":"2015-11-13T16:38:20.047Z","price":"2015-11-13T16:38:20.047Z","department":"2015-11-13T16:38:20.047Z"}},"_revisions":{"start":5,"ids":["3c5cfebc1004ba1adc877f79101943b9","aa24b7d5f6f4be91b9f148bb3c090e5e","442c20d22e8ee94f549dbcd12f86f5db","4ee7bf808212cbaefddbcb1e6cd4bd16","46a4da005639ebeefc736b3cc305354c"]}},{"_id":"lineItemDetail_2_41A8F093-D8F1-30AD-A070-E9881F072F4C","_rev":"5-bb70abfec5de06d15fdc8bddb0153c50","data":{"department":"Pharmacy","expenseAccount":null,"name":"Acetaminophen 500 MG","price":12,"quantity":10,"total":null,"lastModified":"2015-11-13T16:38:20.042Z","modifiedBy":"Admin User","pricingItem":null,"modifiedFields":{"name":"2015-11-13T16:38:20.042Z","quantity":"2015-11-13T16:38:20.042Z","price":"2015-11-13T16:38:20.042Z","department":"2015-11-13T16:38:20.042Z"}},"_revisions":{"start":5,"ids":["bb70abfec5de06d15fdc8bddb0153c50","4da37ad0ef6925a3838db19d86c306e7","d7d4a2a5502c92b6225a354639f503d2","882434ab090177ffc5da7f5a20ec1663","f189693c2c4fac5b634b703dc3e253d7"]}},{"_id":"lineItemDetail_2_6006AE5D-5B16-4665-BF2A-0549CFA18B05","_rev":"1-b16638cf08bbd83f98e84c1b682249f9","data":{"department":"Imaging","expenseAccount":null,"name":"Xray Hand","price":12,"quantity":1,"total":null,"lastModified":"2015-11-12T22:00:59.427Z","modifiedBy":"Admin User","pricingItem":"5931700E-7965-23B1-9835-2D1615E7E755","modifiedFields":{"name":"2015-11-12T22:00:59.427Z","expenseAccount":"2015-11-12T22:00:59.427Z","quantity":"2015-11-12T22:00:59.427Z","price":"2015-11-12T22:00:59.427Z","department":"2015-11-12T22:00:59.427Z"}}},{"_id":"lineItemDetail_2_89E9DCF0-E5FD-F0FA-A34F-8A80A2892934","_rev":"5-4008862e1efdded3cc2c5e77e445f214","data":{"department":null,"expenseAccount":null,"name":"Days","price":45,"quantity":11,"total":null,"lastModified":"2015-11-13T16:38:51.843Z","modifiedBy":"Admin User","pricingItem":null,"modifiedFields":{"name":"2015-11-13T16:38:20.039Z","quantity":"2015-11-13T16:38:20.039Z","price":"2015-11-13T16:38:51.843Z"}},"_revisions":{"start":5,"ids":["4008862e1efdded3cc2c5e77e445f214","03d46eaecd46f6336d0ccc07f6881cfd","376b97227567079e8dfd82bad223e1de","d18636e346ef69fa1d9617e177148704","74f4293f387b050c85e3a520eccfeb1a"]}},{"_id":"lineItemDetail_2_BAFBDD02-6953-5E5F-A7F6-59839997B2FC","_rev":"1-461b69d47c783b5fddc3e697d42d0764","data":{"department":null,"expenseAccount":null,"name":"Days","price":null,"quantity":11,"total":null,"lastModified":"2015-11-12T22:00:59.422Z","modifiedBy":"Admin User","pricingItem":null,"modifiedFields":{"name":"2015-11-12T22:00:59.422Z","quantity":"2015-11-12T22:00:59.422Z"}}},{"_id":"lineItemDetail_2_EEA8B1B7-42DB-A4E1-BBB1-BDEDED85B17F","_rev":"5-b4ecd3a3ca2ec72abb2b265aa6a865a0","data":{"department":"O.R.","expenseAccount":null,"name":"Leg Casting","price":2,"quantity":1,"total":null,"lastModified":"2015-11-13T16:38:20.044Z","modifiedBy":"Admin User","pricingItem":"1D198B41-338B-6E49-8BB1-4696D5DAD715","modifiedFields":{"name":"2015-11-13T16:38:20.044Z","expenseAccount":"2015-11-13T16:38:20.044Z","quantity":"2015-11-13T16:38:20.044Z","price":"2015-11-13T16:38:20.044Z","department":"2015-11-13T16:38:20.044Z"}},"_revisions":{"start":5,"ids":["b4ecd3a3ca2ec72abb2b265aa6a865a0","88e87af8cff7a93b0d14ad1152dc40bf","d9d966a397398a53cf66ad2452e904e2","48400862e9be71150140585017cf0b3e","a2a39c01032abf83c945fc5dcbfa1fdc"]}}]}\n{"seq":51}\n{"docs":[{"_id":"lookup_2_cpt_code_list","_rev":"1-13d3772f546b5c7a9dfcbb9ad8c27a63","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Leg casting"]}},{"_id":"lookup_2_imaging_pricing_types","_rev":"1-508f1018b1af1f65de250cd110e8ae4a","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Imaging Procedure"]}},{"_id":"lookup_2_lab_pricing_types","_rev":"1-f64bac71fc698147e7b5802e38d326ec","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Lab Procedure"]}},{"_id":"lookup_2_physician_list","_rev":"1-fe60344a75c70341b869b5211a85d89c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Dr Watson"]}},{"_id":"lookup_2_procedure_list","_rev":"2-5818e879a750999f9f317d262b70cabd","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Fix broken leg","Leg casting"]},"_revisions":{"start":2,"ids":["5818e879a750999f9f317d262b70cabd","13d3772f546b5c7a9dfcbb9ad8c27a63"]}},{"_id":"lookup_2_sex","_rev":"1-c433c64d3ecf2a60e4539b1d1dc43d27","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Male"]}},{"_id":"lookup_2_vendor_list","_rev":"1-e4823048fbfcefa1b230c38548dd6465","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["ACME"]}},{"_id":"lookup_2_warehouse_list","_rev":"1-4f316909ed8500d0f80cf20a684ce343","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Pharmacy"]}},{"_id":"medication_2_7F51BB93-6086-49D0-A284-FEB6C6690C95","_rev":"2-c438baf544b44547413edf90837cab1a","data":{"notes":null,"prescription":"Take two once a day for 5 days","prescriptionDate":"2015-11-13T05:00:00.000Z","quantity":10,"refills":null,"requestedDate":"2015-11-13T16:23:27.163Z","requestedBy":"Admin User","status":"Fulfilled","lastModified":"2015-11-13T16:23:27.176Z","modifiedBy":"Admin User","inventoryItem":"igxvfw26_lh","patient":"8F7CEF9B-D9C6-E4C4-8BE2-E4DC1E87FCDA","visit":"666DFC61-3230-A865-A145-C7D9139DA1CA","medicationTitle":"Acetaminophen 500 MG","priceOfMedication":null,"modifiedFields":{"prescriptionDate":"2015-11-13T16:23:27.176Z","prescription":"2015-11-13T16:23:27.176Z","quantity":"2015-11-13T16:23:27.176Z","status":"2015-11-13T16:23:27.176Z","requestedBy":"2015-11-13T16:23:27.176Z","requestedDate":"2015-11-13T16:23:27.176Z"}},"_revisions":{"start":2,"ids":["c438baf544b44547413edf90837cab1a","f441e894d0aaaab3c3c394186e0cad67"]}},{"_id":"overridePrice_2_9C4DC6CF-EC9B-B303-A483-6B80930CC658","_rev":"1-73b042aa49125ce4f3961ed9316756f7","data":{"price":4,"lastModified":"2015-11-11T21:52:55.514Z","modifiedBy":"Admin User","profile":"5331626A-EF59-E723-AC44-A063049201DC","modifiedFields":{"price":"2015-11-11T21:52:55.514Z"}}},{"_id":"overridePrice_2_FBF5B1A6-BBEE-6D17-99C8-EB4A91358183","_rev":"1-87dc3dc101c2d1b1a122e74de183281a","data":{"price":2,"lastModified":"2015-11-11T21:06:20.663Z","modifiedBy":"Admin User","profile":"5331626A-EF59-E723-AC44-A063049201DC","modifiedFields":{"price":"2015-11-11T21:06:20.663Z"}}},{"_id":"patient_2_8F7CEF9B-D9C6-E4C4-8BE2-E4DC1E87FCDA","_rev":"3-63565b6c7b01bbb4af8dbd37a6cd7ca2","data":{"admitted":true,"address":null,"address2":null,"address3":null,"address4":null,"bloodType":null,"clinic":null,"country":null,"dateOfBirth":null,"economicClassification":null,"email":null,"externalPatientId":null,"familySupport1":null,"familySupport2":null,"familySupport3":null,"familySupport4":null,"familySupport5":null,"friendlyId":"TCH 00001","firstName":"Joe","sex":"Male","history":null,"insurance":null,"lastName":"Bagadonuts","livingArrangement":null,"middleName":"","notes":null,"otherIncome":null,"patientType":null,"parent":null,"phone":null,"placeOfBirth":null,"referredDate":null,"referredBy":null,"religion":null,"socialActionTaken":null,"socialRecommendation":null,"status":null,"lastModified":"2016-02-22T21:51:59.117Z","modifiedBy":"Admin User","paymentProfile":null,"payments":[],"modifiedFields":{"friendlyId":"2015-11-12T21:13:52.796Z","firstName":"2015-11-12T21:13:52.796Z","middleName":"2015-11-12T21:13:52.796Z","lastName":"2015-11-12T21:13:52.796Z","admitted":"2015-11-12T21:15:12.204Z","sex":"2016-02-22T21:51:59.117Z"}},"_revisions":{"start":3,"ids":["63565b6c7b01bbb4af8dbd37a6cd7ca2","7ab83617d991bfa730e55757d90c35ad","d5bb9506d7ebd07a2fd7e2bd8a9afc03"]}},{"_id":"priceProfile_2_5331626A-EF59-E723-AC44-A063049201DC","_rev":"1-c9ede1cd1775d2ccc9e0bcc5d099d614","data":{"name":"Half off","discountAmount":null,"discountPercentage":50,"lastModified":"2015-11-11T21:05:25.047Z","modifiedBy":"Admin User","modifiedFields":{"name":"2015-11-11T21:05:25.047Z","discountPercentage":"2015-11-11T21:05:25.047Z"}}},{"_id":"pricing_2_1D198B41-338B-6E49-8BB1-4696D5DAD715","_rev":"1-5fd5619f2cc1dcf4e7c051add2deaf5d","data":{"category":"Procedure","expenseAccount":null,"name":"Leg Casting","price":2,"pricingType":null,"lastModified":"2015-11-11T21:53:29.953Z","modifiedBy":"Admin User","pricingOverrides":[],"modifiedFields":{"category":"2015-11-11T21:53:29.953Z","name":"2015-11-11T21:53:29.953Z","price":"2015-11-11T21:53:29.953Z"}}},{"_id":"pricing_2_5029F0F9-BBCF-62F5-BA2B-E8990AC7D151","_rev":"1-7f85b8fb293360badee861fb4a685721","data":{"category":"Ward","expenseAccount":null,"name":"Gauze pad","price":3,"pricingType":null,"lastModified":"2015-11-11T21:53:52.661Z","modifiedBy":"Admin User","pricingOverrides":[],"modifiedFields":{"category":"2015-11-11T21:53:52.661Z","name":"2015-11-11T21:53:52.661Z","price":"2015-11-11T21:53:52.661Z"}}},{"_id":"pricing_2_5931700E-7965-23B1-9835-2D1615E7E755","_rev":"2-300f644f420f7f76581093329a9aa519","data":{"category":"Imaging","expenseAccount":null,"name":"Xray Hand","price":12,"pricingType":"Imaging Procedure","lastModified":"2015-11-11T21:52:55.549Z","modifiedBy":"Admin User","pricingOverrides":["9C4DC6CF-EC9B-B303-A483-6B80930CC658"],"modifiedFields":{"category":"2015-11-11T21:52:55.549Z","name":"2015-11-11T21:52:55.549Z","price":"2015-11-11T21:52:55.549Z","pricingType":"2015-11-11T21:52:55.549Z"}},"_revisions":{"start":2,"ids":["300f644f420f7f76581093329a9aa519","9f00f9d6a35374e7d7fcbeffd8d4697b"]}},{"_id":"pricing_2_F71A1788-3407-515B-8006-F9CC788CA8EA","_rev":"2-9762d8a2d76d242671a3bea610a0904f","data":{"category":"Lab","expenseAccount":null,"name":"Blood test","price":123,"pricingType":"Lab Procedure","lastModified":"2015-11-11T21:06:20.719Z","modifiedBy":"Admin User","pricingOverrides":["FBF5B1A6-BBEE-6D17-99C8-EB4A91358183"],"modifiedFields":{"category":"2015-11-11T21:06:20.719Z","name":"2015-11-11T21:06:20.719Z","price":"2015-11-11T21:06:20.719Z","pricingType":"2015-11-11T21:06:20.719Z"}},"_revisions":{"start":2,"ids":["9762d8a2d76d242671a3bea610a0904f","e6eada16de79ddba78e890c01837a3f5"]}},{"_id":"procCharge_2_0834BF27-A2E0-5ADD-9509-B97CA547E532","_rev":"1-0bb58d85915b11cbcb1547ba44b86f5f","data":{"quantity":1,"dateCharged":"2015-11-13T05:00:00.000Z","lastModified":"2015-11-13T16:11:54.012Z","modifiedBy":"Admin User","medication":null,"pricingItem":"1D198B41-338B-6E49-8BB1-4696D5DAD715","modifiedFields":{"dateCharged":"2015-11-13T16:11:54.012Z","quantity":"2015-11-13T16:11:54.012Z"}}},{"_id":"procCharge_2_17BC9913-E49F-FB8A-AA42-4F617D839510","_rev":"1-2917bd58af0d9cbb9e3835013c857d2f","data":{"quantity":1,"dateCharged":"2015-11-12T05:00:00.000Z","lastModified":"2015-11-12T21:53:52.879Z","modifiedBy":"Admin User","medication":null,"pricingItem":"1D198B41-338B-6E49-8BB1-4696D5DAD715","modifiedFields":{"dateCharged":"2015-11-12T21:53:52.879Z","quantity":"2015-11-12T21:53:52.879Z"}}},{"_id":"procCharge_2_2648E500-C287-2EE4-B569-99D6291FB46C","_rev":"2-1875764ed6d4a41e96277d678bcda2b3","_deleted":true,"_revisions":{"start":2,"ids":["1875764ed6d4a41e96277d678bcda2b3","f0554786c3ad14c941dced65e1df8649"]}},{"_id":"procCharge_2_412AD48B-EDD4-E5E2-8134-BB3B5E459972","_rev":"1-2cdee6e8d8fd1207c073b5e6f33b4c6e","data":{"quantity":12,"dateCharged":"2015-11-03T05:00:00.000Z","lastModified":"2015-11-12T21:18:30.366Z","modifiedBy":"Admin User","medication":null,"pricingItem":"5029F0F9-BBCF-62F5-BA2B-E8990AC7D151","modifiedFields":{"dateCharged":"2015-11-12T21:18:30.366Z","quantity":"2015-11-12T21:18:30.366Z"}}},{"_id":"procCharge_2_561AD584-144B-D21F-840A-8600B8D900CF","_rev":"1-8f30246e0bba661deeb2c08617ec1128","data":{"quantity":12,"dateCharged":"2015-11-11T05:00:00.000Z","lastModified":"2015-11-13T16:24:24.528Z","modifiedBy":"Admin User","medication":null,"pricingItem":"5029F0F9-BBCF-62F5-BA2B-E8990AC7D151","modifiedFields":{"dateCharged":"2015-11-13T16:24:24.528Z","quantity":"2015-11-13T16:24:24.528Z"}}},{"_id":"procCharge_2_704FA289-CA15-A178-B571-D0ECCE8229F3","_rev":"2-6d00bf1656e7ef89bc6ba38c3711982b","_deleted":true,"_revisions":{"start":2,"ids":["6d00bf1656e7ef89bc6ba38c3711982b","2103b76190a412ab081bae469ef27dee"]}},{"_id":"procCharge_2_A28911F7-FC62-9F3D-A82E-8EB0D43B9B68","_rev":"2-3959e9c3eb93a0fd7bc1d36ece0dbcd9","_deleted":true,"_revisions":{"start":2,"ids":["3959e9c3eb93a0fd7bc1d36ece0dbcd9","b5b4fd9fa56d91b689be62a9fc0506ae"]}},{"_id":"procCharge_2_A2F0320B-AFD0-BB29-AFFE-6470FD537D05","_rev":"1-d29a0c613aa6282b87a3e3eb37278453","data":{"medicationTitle":"Acetaminophen 500 MG","priceOfMedication":12,"quantity":12,"dateCharged":"2016-02-09T20:18:54.966Z","lastModified":"2016-02-09T20:18:59.012Z","modifiedBy":"Admin User","medication":"igxvfw26_lh","pricingItem":null,"modifiedFields":{"dateCharged":"2016-02-09T20:18:59.012Z","quantity":"2016-02-09T20:18:59.012Z","medicationTitle":"2016-02-09T20:18:59.012Z","priceOfMedication":"2016-02-09T20:18:59.012Z"}}},{"_id":"procCharge_2_BDAC9E94-96A0-1994-9196-BD3F56F891CA","_rev":"1-090a8baf0cf5219ab842f6a5f85c98b2","data":{"medicationTitle":"Acetaminophen 500 MG","priceOfMedication":12,"medication":"<hospitalrun@model:inventory::ember1608:igxvfw26_lh>","quantity":12,"dateCharged":"2016-02-09T19:20:16.119Z","lastModified":"2016-02-09T19:20:22.089Z","modifiedBy":"Admin User","pricingItem":null,"modifiedFields":{"dateCharged":"2016-02-09T19:20:22.089Z","quantity":"2016-02-09T19:20:22.089Z","medication":"2016-02-09T19:20:22.089Z","medicationTitle":"2016-02-09T19:20:22.089Z","priceOfMedication":"2016-02-09T19:20:22.089Z"}}},{"_id":"procCharge_2_F632124D-557D-0B35-8213-F7054DE6AFB0","_rev":"1-f88672a41bab0bf53f3d744944b623e5","data":{"medicationTitle":"Acetaminophen 500 MG","priceOfMedication":12,"medication":"<hospitalrun@model:inventory::ember2102:igxvfw26_lh>","quantity":12,"dateCharged":"2016-02-09T19:16:13.269Z","lastModified":"2016-02-09T19:16:22.209Z","modifiedBy":"Admin User","pricingItem":null,"modifiedFields":{"dateCharged":"2016-02-09T19:16:22.209Z","quantity":"2016-02-09T19:16:22.209Z","medication":"2016-02-09T19:16:22.209Z","medicationTitle":"2016-02-09T19:16:22.209Z","priceOfMedication":"2016-02-09T19:16:22.209Z"}}},{"_id":"procedure_2_539C4B9B-B275-EF14-8BA2-9CAC6403424A","_rev":"1-e4a243fe73d67885206ff1d406beba1a","data":{"anesthesiaType":null,"anesthesiologist":null,"assistant":null,"description":"Leg casting","cptCode":"Leg casting","location":null,"notes":null,"physician":"Dr Watson","procedureDate":"2015-11-12T05:00:00.000Z","timeStarted":"","timeEnded":"","lastModified":"2015-11-12T21:54:00.381Z","modifiedBy":"Admin User","visit":"666DFC61-3230-A865-A145-C7D9139DA1CA","charges":["17BC9913-E49F-FB8A-AA42-4F617D839510"],"modifiedFields":{"procedureDate":"2015-11-12T21:54:00.381Z","description":"2015-11-12T21:54:00.381Z","cptCode":"2015-11-12T21:54:00.381Z","timeStarted":"2015-11-12T21:54:00.381Z","timeEnded":"2015-11-12T21:54:00.381Z","physician":"2015-11-12T21:54:00.381Z"}}},{"_id":"procedure_2_653A07CE-66E2-1DC8-A83C-4A25934559F0","_rev":"11-9852c642c6108359ec3d1a1915be7d77","data":{"anesthesiaType":"","anesthesiologist":null,"assistant":null,"description":"Fix broken leg","cptCode":null,"location":null,"notes":null,"physician":"Dr Watson","procedureDate":"2015-11-13T05:00:00.000Z","timeStarted":"","timeEnded":"","lastModified":"2015-11-13T16:11:57.940Z","modifiedBy":"Admin User","visit":"666DFC61-3230-A865-A145-C7D9139DA1CA","charges":["0834BF27-A2E0-5ADD-9509-B97CA547E532","A2F0320B-AFD0-BB29-AFFE-6470FD537D05"],"modifiedFields":{"procedureDate":"2015-11-13T16:11:57.940Z","description":"2015-11-13T16:11:57.940Z","timeStarted":"2015-11-13T16:11:57.940Z","timeEnded":"2015-11-13T16:11:57.940Z","physician":"2015-11-13T16:11:57.940Z","anesthesiaType":"2015-11-13T16:11:57.940Z"}},"_revisions":{"start":11,"ids":["9852c642c6108359ec3d1a1915be7d77","32f7b134f4a1489bad30b20b41a402b7","79317aa8224c831799a41588c9c00572","25edbe7f3e8f872997aec5b8e57959c0","53e45632484af05ac967f6af430bced9","8700b634cefddb7c2ef0b810e4d8241a","e0abfee94018abcefb7b541c6bb7b242","715ed4e72deba043868bfbe500f964a0","483b770e04706f935dc6275abf496a3a","0f22a93f70def208660a024b0fa6a6c6","b078e6e7004154529f8fd0901b60ed19"]}},{"_id":"sequence_2_inventory_Medication","_rev":"1-1acccea88a50973cbe8840a31911aa7c","data":{"prefix":"m","value":1}},{"_id":"sequence_2_invoice","_rev":"3-f0ef6923c78e739d9228517a4813b646","data":{"prefix":null,"value":3},"_revisions":{"start":3,"ids":["f0ef6923c78e739d9228517a4813b646","f9a8fd6c55cd4e5fb0064b7767586e05","5bc31ffefa482f2e66299cf0704623c8"]}},{"_id":"sequence_2_patient","_rev":"1-5bc31ffefa482f2e66299cf0704623c8","data":{"prefix":null,"value":1}},{"_id":"visit_2_666DFC61-3230-A865-A145-C7D9139DA1CA","_rev":"12-9f26178fcda83e39cc9df1950035a7fc","data":{"dischargeInfo":null,"endDate":"2015-11-12T05:00:00.000Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-01T04:00:00.000Z","status":"Discharged","visitType":"Admission","lastModified":"2015-11-12T21:47:53.994Z","modifiedBy":"Admin User","patient":"8F7CEF9B-D9C6-E4C4-8BE2-E4DC1E87FCDA","vitals":[],"procedures":["653A07CE-66E2-1DC8-A83C-4A25934559F0"],"medication":["7F51BB93-6086-49D0-A284-FEB6C6690C95"],"labs":["0762040A-CAC7-130F-8D0C-E3DE9245EE38"],"imaging":["9DF8A9FF-D32D-371C-8F04-7D26B9EF5CB9"],"charges":["561AD584-144B-D21F-840A-8600B8D900CF"],"modifiedFields":{"visitType":"2015-11-12T21:15:12.160Z","startDate":"2015-11-12T21:15:12.160Z","status":"2015-11-12T21:47:53.994Z","outPatient":"2015-11-12T21:15:12.160Z","endDate":"2015-11-12T21:47:53.994Z"}},"_revisions":{"start":12,"ids":["9f26178fcda83e39cc9df1950035a7fc","64ef0abb729090bd64b948f9ca2318de","19a1560274f7e5dc07c3b6b0543278a1","793cb2bc5919ef9ced471818f5e7c3b5","8201fa77027c3929455f4c9368ce1c32","4f345e06fefbc87fa23fa1a0d194d1ee","e82f9737c00c8b9004653355ed0cb743","03b09430dde4f6d3c5b62f1c5c6b1378","1db70a4f91b8ed3da25df05dcc91713d","5745b4455c849281c543b2c447feb480","37ad5eae5583240c5143012937658d48","c35ad6c0332fc471d3a8fa485a48d1de"]}}]}\n{"seq":85}\n';
});
define('hospitalrun/tests/fixtures/default', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.4","db_type":"http","start_time":"2015-09-28T17:32:33.881Z","db_info":{"db_name":"main","doc_count":21,"doc_del_count":0,"update_seq":22,"purge_seq":0,"compact_running":false,"disk_size":36964,"data_size":12859,"instance_start_time":"1443461538466714","disk_format_version":6,"committed_update_seq":22,"host":"http://localhost:4200/db/main/","auto_compaction":false}}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"1-4bdc8957d4338cde0bdce05a2ecfe7b5","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n            var i,\\n                filterBy = null,\\n                includeRow = true;\\n            if (req.query && req.query.filterBy) {\\n                filterBy = JSON.parse(req.query.filterBy);\\n            }\\n            if (!filterBy) {\\n                return true;\\n            }\\n            for (i = 0; i < filterBy.length; i++) {\\n                var currentValue = row.doc.data[filterBy[i].name];\\n                if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n                    currentValue = \'Scheduled\';\\n                }\\n                if (currentValue !== filterBy[i].value) {\\n                    includeRow = false;\\n                    break;\\n                }\\n            }\\n            return includeRow;\\n        });rows.sort(function (a, b) {\\n            function defaultStatus(value) {\\n                if (!value || value === \'\') {\\n                    return \'Scheduled\';\\n                } else {\\n                    return value;\\n                }\\n            }\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'appointmentType\':\\n                case \'location\':\\n                case \'provider\':\\n                    return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n                case \'date\':\\n                    {\\n                        var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n                        if (startDiff === 0) {\\n                            return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n                        } else {\\n                            return startDiff;\\n                        }\\n                        break;\\n                    }\\n                case \'status\':\\n                    {\\n                        var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                            bStatus = defaultStatus(b.doc.data[sortBy]);\\n                        return compareStrings(aStatus, bStatus);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}}]}\n{"seq":2}\n{"docs":[{"_id":"_design/appointments_by_patient","_rev":"1-9868b6586898a48c3fd68722ca3fe1d4","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}}}]}\n{"seq":3}\n{"docs":[{"_id":"_design/imaging_by_status","_rev":"1-9236042e1fb9f567d1d527bbb429cd8e","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}}},{"_id":"_design/inventory_by_name","_rev":"1-a1cd6b8922ed0f24a090ba9fd96f5c05","version":3,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'crossReference\':\\n                case \'description\':\\n                case \'friendlyId\':\\n                case \'name\':\\n                case \'price\':\\n                case \'quantity\':\\n                case \'inventoryType\':\\n                    {\\n                        return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}}},{"_id":"_design/inventory_by_type","_rev":"1-003ef699ab0f2b8628c0bf613fabf7a2","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}}},{"_id":"_design/inventory_purchase_by_date_received","_rev":"1-78939ec45bef330bbfa87763dbbfce37","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"1-17bd9d3619ae03155d9929d3ebcd5023","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}}},{"_id":"_design/inventory_request_by_item","_rev":"1-7e7ef275a9fc15f2b5f328b1479c6097","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}}},{"_id":"_design/inventory_request_by_status","_rev":"1-187394c79d3206e11e112891f0d63550","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}}},{"_id":"_design/invoice_by_status","_rev":"1-73e3e45673ed0c4f4ae1cee855f216f0","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}}},{"_id":"_design/lab_by_status","_rev":"1-db4393c6856b98a40afd6ceef31db2a7","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}}},{"_id":"_design/medication_by_status","_rev":"1-36ce9e9853552f5eb646ed26de7184dc","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}}},{"_id":"_design/patient_by_display_id","_rev":"1-e6d44a1448953362319c910bf33a8668","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'firstName\':\\n                case \'gender\':\\n                case \'lastName\':\\n                case \'status\':\\n                    {\\n                        return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n                    }\\n                case \'dateOfBirth\':\\n                    {\\n                        return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}}},{"_id":"_design/patient_by_status","_rev":"1-ff26a12cdb8747aae5bf26f9af3a1953","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}}},{"_id":"_design/photo_by_patient","_rev":"1-e3dc5506f7f370535b85be0adc59c7cc","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}}},{"_id":"_design/pricing_by_category","_rev":"1-23d44e44019170eadd086734c87e3976","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}}},{"_id":"_design/procedure_by_date","_rev":"1-25ccef2a9dff3addd8c0d15cc79c363c","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}}},{"_id":"_design/sequence_by_prefix","_rev":"1-8ac3a62b4c0b624ebed3b68b27cd197e","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}}},{"_id":"_design/visit_by_date","_rev":"1-367a7fa42f1067f645190d560f83ef5e","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_discharge_date","_rev":"1-e53c95160dacaf007fe01c01215729ce","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_patient","_rev":"1-412252178488867e2350dcd13da779ea","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}}}]}\n{"seq":22}\n';
});
define('hospitalrun/tests/fixtures/imaging', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.5","db_type":"http","start_time":"2016-02-22T21:58:19.566Z","db_info":{"db_name":"main","doc_count":66,"doc_del_count":0,"update_seq":68,"purge_seq":0,"compact_running":false,"disk_size":45167,"data_size":38490,"instance_start_time":"1456178147060899","disk_format_version":6,"committed_update_seq":68,"host":"http://localhost:5984/main/","auto_compaction":false,"adapter":"http"}}\n{"docs":[{"_id":"_design/appointments_by_patient","_rev":"1-9868b6586898a48c3fd68722ca3fe1d4","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}}}]}\n{"seq":1}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"1-03951858f9232df2e774548b0f5fd068","version":4,"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n      var i,\\n          filterBy = null,\\n          includeRow = true;\\n      if (req.query && req.query.filterBy) {\\n        filterBy = JSON.parse(req.query.filterBy);\\n      }\\n      if (!filterBy) {\\n        return true;\\n      }\\n      for (i = 0; i < filterBy.length; i++) {\\n        var currentValue = row.doc.data[filterBy[i].name];\\n        if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n          currentValue = \'Scheduled\';\\n        }\\n        if (currentValue !== filterBy[i].value) {\\n          includeRow = false;\\n          break;\\n        }\\n      }\\n      return includeRow;\\n    });rows.sort(function (a, b) {\\n      function defaultStatus(value) {\\n        if (!value || value === \'\') {\\n          return \'Scheduled\';\\n        } else {\\n          return value;\\n        }\\n      }\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'appointmentType\':\\n        case \'location\':\\n        case \'provider\':\\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n        case \'date\':\\n          {\\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n            if (startDiff === 0) {\\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n            } else {\\n              return startDiff;\\n            }\\n            break;\\n          }\\n        case \'status\':\\n          {\\n            var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                bStatus = defaultStatus(b.doc.data[sortBy]);\\n            return compareStrings(aStatus, bStatus);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"}}]}\n{"seq":2}\n{"docs":[{"_id":"_design/imaging_by_status","_rev":"1-9236042e1fb9f567d1d527bbb429cd8e","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}}},{"_id":"_design/inventory_by_name","_rev":"1-304304d63beaffd8d1ae4ae1cddf4b2b","version":3,"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'crossReference\':\\n        case \'description\':\\n        case \'friendlyId\':\\n        case \'name\':\\n        case \'price\':\\n        case \'quantity\':\\n        case \'inventoryType\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"}},{"_id":"_design/inventory_by_type","_rev":"1-003ef699ab0f2b8628c0bf613fabf7a2","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}}},{"_id":"_design/inventory_purchase_by_date_received","_rev":"1-78939ec45bef330bbfa87763dbbfce37","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"1-17bd9d3619ae03155d9929d3ebcd5023","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}}},{"_id":"_design/inventory_request_by_item","_rev":"1-7e7ef275a9fc15f2b5f328b1479c6097","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}}},{"_id":"_design/inventory_request_by_status","_rev":"1-187394c79d3206e11e112891f0d63550","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}}},{"_id":"_design/invoice_by_status","_rev":"1-73e3e45673ed0c4f4ae1cee855f216f0","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}}},{"_id":"_design/lab_by_status","_rev":"1-db4393c6856b98a40afd6ceef31db2a7","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}}},{"_id":"_design/medication_by_status","_rev":"1-36ce9e9853552f5eb646ed26de7184dc","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}}},{"_id":"_design/patient_by_display_id","_rev":"1-6f596cec9eb82609308fd9d25a9f9df2","version":4,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'gender\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["6f596cec9eb82609308fd9d25a9f9df2"]}},{"_id":"_design/patient_by_display_id","_rev":"1-0b75ee7c82a1aadebd0bc0fd403622fb","version":5,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'sex\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["0b75ee7c82a1aadebd0bc0fd403622fb"]}},{"_id":"_design/patient_by_status","_rev":"1-ff26a12cdb8747aae5bf26f9af3a1953","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}}},{"_id":"_design/photo_by_patient","_rev":"1-e3dc5506f7f370535b85be0adc59c7cc","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}}},{"_id":"_design/pricing_by_category","_rev":"1-23d44e44019170eadd086734c87e3976","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}}},{"_id":"_design/procedure_by_date","_rev":"1-25ccef2a9dff3addd8c0d15cc79c363c","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}}},{"_id":"_design/sequence_by_prefix","_rev":"1-8ac3a62b4c0b624ebed3b68b27cd197e","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}}},{"_id":"_design/visit_by_date","_rev":"1-367a7fa42f1067f645190d560f83ef5e","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_discharge_date","_rev":"1-e53c95160dacaf007fe01c01215729ce","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_patient","_rev":"1-412252178488867e2350dcd13da779ea","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}}},{"_id":"appointment_2_C47BE127-E509-6322-BB33-2E6ABE03D0F0","_rev":"2-44597ea8b1cdd20dc8d2c0ad9b2edbb6","data":{"allDay":true,"provider":"Dr Nick","location":"Hospital","appointmentType":"Followup","startDate":"2015-12-30T06:00:00.000Z","endDate":"2015-12-30T06:00:00.000Z","notes":null,"status":"Scheduled","lastModified":"2015-12-29T04:14:36.585Z","modifiedBy":"Admin User","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","modifiedFields":{"appointmentType":"2015-12-29T04:14:21.124Z","allDay":"2015-12-29T04:14:21.124Z","startDate":"2015-12-29T04:14:36.585Z","endDate":"2015-12-29T04:14:36.585Z","location":"2015-12-29T04:14:21.124Z","provider":"2015-12-29T04:14:21.124Z"}},"_revisions":{"start":2,"ids":["44597ea8b1cdd20dc8d2c0ad9b2edbb6","953a11c67a694ef2daa469bd8c0f40ec"]}},{"_id":"imaging_2_12DEDA58-4670-7A74-BA8B-9CC5E5CA82E7","_rev":"1-3237f1a60f7ef9869553893a25e91e87","data":{"imagingDate":null,"notes":null,"radiologist":"","requestedBy":"Admin User","requestedDate":"2015-12-29T04:15:41.380Z","result":null,"status":"Requested","lastModified":"2015-12-29T04:15:41.382Z","modifiedBy":"Admin User","imagingType":"B93625F1-3C41-2D3E-94B9-3A8BAF87EBE8","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","visit":"03C7BF8B-04E0-DD9E-9469-96A5604F5340","charges":[],"modifiedFields":{"radiologist":"2015-12-29T04:15:41.382Z","status":"2015-12-29T04:15:41.382Z","requestedBy":"2015-12-29T04:15:41.382Z","requestedDate":"2015-12-29T04:15:41.382Z"}}},{"_id":"imaging_2_51AFF85A-69C0-97C1-B22C-716A1BA7B80B","_rev":"1-3e1a5d957291144f7ba1e9c0c7c2cb12","data":{"imagingDate":"2015-12-29T04:07:03.693Z","notes":null,"radiologist":"Dr Xray","requestedBy":"Admin User","requestedDate":"2015-12-29T04:07:03.694Z","result":null,"status":"Completed","lastModified":"2015-12-29T04:07:03.744Z","modifiedBy":"Admin User","imagingType":"B93625F1-3C41-2D3E-94B9-3A8BAF87EBE8","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","visit":"03C7BF8B-04E0-DD9E-9469-96A5604F5340","charges":[],"modifiedFields":{"radiologist":"2015-12-29T04:07:03.744Z","status":"2015-12-29T04:07:03.744Z","imagingDate":"2015-12-29T04:07:03.744Z","requestedBy":"2015-12-29T04:07:03.744Z","requestedDate":"2015-12-29T04:07:03.744Z"}}},{"_id":"invLocation_2_0323721B-EDD0-6C91-BB34-52FBEACBA7DE","_rev":"3-f43e02982eff2b35453b4dcf537fec3f","data":{"quantity":0,"location":null,"aisleLocation":null,"lastModified":"2015-12-29T03:13:47.396Z","modifiedBy":"Admin User","modifiedFields":{"quantity":"2015-12-29T03:13:47.396Z"}},"_revisions":{"start":3,"ids":["f43e02982eff2b35453b4dcf537fec3f","e8c15241efd7bb6c8bf891c28558d83b","c2e397e9ebd1266da5de2e1a3033fcc6"]}},{"_id":"invLocation_2_24BB235E-B271-AF61-9A3D-9ACD77CE25AF","_rev":"3-b8964e3b548efa84d5602224e88a1126","data":{"quantity":0,"location":null,"aisleLocation":null,"lastModified":"2015-12-29T03:08:57.289Z","modifiedBy":"Admin User","modifiedFields":{"quantity":"2015-12-29T03:08:57.289Z"}},"_revisions":{"start":3,"ids":["b8964e3b548efa84d5602224e88a1126","dff7e3f8434279a562a3d4ffc0106c6e","2d8c410350e7ecfffd6e496f6f05ca30"]}},{"_id":"invLocation_2_32BCC947-E272-1564-90E1-C6E2ECE14881","_rev":"2-74b9d0e13f10a766c8e02a411b21bc9e","data":{"quantity":12,"location":"Warehouse","aisleLocation":"A1","lastModified":"2015-12-29T03:47:25.988Z","modifiedBy":"Admin User","modifiedFields":{"aisleLocation":"2015-12-29T03:47:25.919Z","location":"2015-12-29T03:47:25.919Z","quantity":"2015-12-29T03:47:25.988Z"}},"_revisions":{"start":2,"ids":["74b9d0e13f10a766c8e02a411b21bc9e","8adc0c9f4543aebccdfce691b8c1199d"]}},{"_id":"invLocation_2_7FD0F94A-6D4E-6365-A4EF-F7B4F8D35C22","_rev":"3-85e5ea976718b1331eade5d9f567654b","data":{"quantity":0,"location":"Warehouse","aisleLocation":null,"lastModified":"2015-12-29T03:46:41.557Z","modifiedBy":"Admin User","modifiedFields":{"location":"2015-12-29T03:13:47.288Z","quantity":"2015-12-29T03:46:41.557Z"}},"_revisions":{"start":3,"ids":["85e5ea976718b1331eade5d9f567654b","eb663365f6944558113da9820789b8fd","ac3af5754777c65209c3d9c7cc03dfb2"]}},{"_id":"invLocation_2_DBCF3E06-B812-B6C7-930E-74F9372D384A","_rev":"3-a15f0e36baae0abfa52ae68b42e3ad0e","data":{"quantity":999998,"location":"Pharmacy","aisleLocation":null,"lastModified":"2015-12-29T04:01:16.092Z","modifiedBy":"Admin User","modifiedFields":{"location":"2015-12-29T03:08:57.191Z","quantity":"2015-12-29T04:01:16.092Z"}},"_revisions":{"start":3,"ids":["a15f0e36baae0abfa52ae68b42e3ad0e","d365a641356ccd999cf5f91ec842f5a9","e8dfec40fbf6418583392d73b24a9b32"]}},{"_id":"invPurchase_2_05760051-8BD1-ACC0-8013-0C59A545FB8D","_rev":"2-d7477df9559ec794be0e3084f09c310b","data":{"purchaseCost":12,"lotNumber":"","dateReceived":"2015-11-01T05:00:00.000Z","originalQuantity":25,"currentQuantity":0,"expirationDate":null,"expired":false,"location":null,"aisleLocation":null,"giftInKind":false,"inventoryItem":"iiqtim0c_ex","vendor":"ACME INC","vendorItemNo":"","distributionUnit":null,"invoiceNo":null,"lastModified":"2015-12-29T03:46:41.558Z","modifiedBy":"Admin User","modifiedFields":{"dateReceived":"2015-12-29T03:12:56.853Z","purchaseCost":"2015-12-29T03:12:56.853Z","lotNumber":"2015-12-29T03:12:56.853Z","vendor":"2015-12-29T03:12:56.853Z","vendorItemNo":"2015-12-29T03:12:56.853Z","originalQuantity":"2015-12-29T03:12:56.853Z","currentQuantity":"2015-12-29T03:46:41.558Z","inventoryItem":"2015-12-29T03:12:56.853Z"}},"_revisions":{"start":2,"ids":["d7477df9559ec794be0e3084f09c310b","2b41a3edbfe25818058eca69712b2033"]}},{"_id":"invPurchase_2_155B2B94-6C47-E6B5-BD1E-11F375CB2C29","_rev":"1-8308be24f6677a3a6aefc7cdde9b1c13","data":{"purchaseCost":6,"lotNumber":null,"dateReceived":"2015-12-03T06:00:00.000Z","originalQuantity":12,"currentQuantity":12,"expirationDate":null,"expired":false,"location":"Warehouse","aisleLocation":"A1","giftInKind":false,"inventoryItem":"iiqtim0c_ex","vendor":"ACME INC","vendorItemNo":"","distributionUnit":"pcs","invoiceNo":"","lastModified":"2015-12-29T03:47:25.866Z","modifiedBy":"Admin User","modifiedFields":{"dateReceived":"2015-12-29T03:47:25.866Z","distributionUnit":"2015-12-29T03:47:25.866Z","inventoryItem":"2015-12-29T03:47:25.866Z","invoiceNo":"2015-12-29T03:47:25.866Z","originalQuantity":"2015-12-29T03:47:25.866Z","quantityGroups":"2015-12-29T03:47:25.866Z","purchaseCost":"2015-12-29T03:47:25.866Z","vendor":"2015-12-29T03:47:25.866Z","vendorItemNo":"2015-12-29T03:47:25.866Z","location":"2015-12-29T03:47:25.866Z","aisleLocation":"2015-12-29T03:47:25.866Z","currentQuantity":"2015-12-29T03:47:25.866Z"},"quantityGroups":[{"index":0,"unit":"pcs","firstQuantity":true,"quantity":"12"}]}},{"_id":"invPurchase_2_E3B2184F-4ECA-3B76-92C8-437846C2E3DC","_rev":"2-846e30db369e739e0603938b12776d45","data":{"purchaseCost":12345,"lotNumber":null,"dateReceived":"2015-12-01T06:00:00.000Z","originalQuantity":1000000,"currentQuantity":999998,"expirationDate":null,"expired":false,"location":null,"aisleLocation":null,"giftInKind":false,"inventoryItem":"iiqtc6w3_31","vendor":"ACME INC","vendorItemNo":null,"distributionUnit":null,"invoiceNo":null,"lastModified":"2015-12-29T04:01:16.093Z","modifiedBy":"Admin User","modifiedFields":{"dateReceived":"2015-12-29T03:08:23.921Z","purchaseCost":"2015-12-29T03:08:23.921Z","vendor":"2015-12-29T03:08:23.921Z","originalQuantity":"2015-12-29T03:08:23.921Z","currentQuantity":"2015-12-29T04:01:16.093Z","inventoryItem":"2015-12-29T03:08:23.921Z"}},"_revisions":{"start":2,"ids":["846e30db369e739e0603938b12776d45","03ddad7882d9ed7041637de509902109"]}},{"_id":"invRequest_2_2A5251B5-1919-CB55-8757-A53DC057A77E","_rev":"1-222c0c115dc924e7d90cbde2b6023ebd","data":{"adjustPurchases":false,"completedBy":"Admin User","costPerUnit":null,"dateCompleted":"2015-12-01T06:00:00.000Z","dateRequested":null,"deliveryAisle":null,"deliveryLocation":"Pharmacy","expenseAccount":null,"markAsConsumed":true,"quantity":1000000,"quantityAtCompletion":null,"reason":null,"requestedBy":null,"status":"Completed","transactionType":"Transfer","lastModified":"2015-12-29T03:08:57.351Z","modifiedBy":"Admin User","inventoryItem":"iiqtc6w3_31","patient":null,"visit":null,"modifiedFields":{"adjustPurchases":"2015-12-29T03:08:57.351Z","dateCompleted":"2015-12-29T03:08:57.351Z","quantity":"2015-12-29T03:08:57.351Z","deliveryLocation":"2015-12-29T03:08:57.351Z","transactionType":"2015-12-29T03:08:57.351Z","locationsAffected":"2015-12-29T03:08:57.351Z","status":"2015-12-29T03:08:57.351Z","completedBy":"2015-12-29T03:08:57.351Z"},"locationsAffected":[{"name":"No Location","quantity":"1000000"}]}},{"_id":"invRequest_2_6F095231-0D58-E48D-B59F-8D4CB3965802","_rev":"1-f709e83b929a4ac8e25c39de04bb36d9","data":{"adjustPurchases":true,"completedBy":"Admin User","costPerUnit":0.01,"dateCompleted":"2015-12-29T04:01:16.080Z","dateRequested":null,"deliveryAisle":null,"deliveryLocation":null,"expenseAccount":null,"markAsConsumed":true,"quantity":2,"quantityAtCompletion":1000000,"reason":null,"requestedBy":null,"status":"Completed","transactionType":"Fulfillment","lastModified":"2015-12-29T04:01:16.251Z","modifiedBy":"Admin User","inventoryItem":"iiqtc6w3_31","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","visit":null,"modifiedFields":{"dateCompleted":"2015-12-29T04:01:16.251Z","quantity":"2015-12-29T04:01:16.251Z","transactionType":"2015-12-29T04:01:16.251Z","markAsConsumed":"2015-12-29T04:01:16.251Z","adjustPurchases":"2015-12-29T04:01:16.251Z","costPerUnit":"2015-12-29T04:01:16.251Z","quantityAtCompletion":"2015-12-29T04:01:16.251Z","purchasesAffected":"2015-12-29T04:01:16.251Z","locationsAffected":"2015-12-29T04:01:16.251Z","status":"2015-12-29T04:01:16.251Z","completedBy":"2015-12-29T04:01:16.251Z"},"purchasesAffected":[{"id":"E3B2184F-4ECA-3B76-92C8-437846C2E3DC","quantity":2}],"locationsAffected":[{"name":"Pharmacy","quantity":2}]}},{"_id":"invRequest_2_91481B28-0A00-9C72-9094-E34D6B70442D","_rev":"1-c1b1d2ef55725427ea6f31fafd43a776","data":{"adjustPurchases":false,"completedBy":null,"costPerUnit":null,"dateCompleted":null,"dateRequested":"2015-12-29T03:47:47.911Z","deliveryAisle":null,"deliveryLocation":"Pharmacy","expenseAccount":"Pharmacy","markAsConsumed":true,"quantity":2,"quantityAtCompletion":null,"reason":null,"requestedBy":"Admin User","status":"Requested","transactionType":"Request","lastModified":"2015-12-29T03:47:47.912Z","modifiedBy":"Admin User","inventoryItem":"iiqtim0c_ex","patient":null,"visit":null,"modifiedFields":{"transactionType":"2015-12-29T03:47:47.912Z","quantity":"2015-12-29T03:47:47.912Z","deliveryLocation":"2015-12-29T03:47:47.912Z","expenseAccount":"2015-12-29T03:47:47.912Z","dateRequested":"2015-12-29T03:47:47.912Z","requestedBy":"2015-12-29T03:47:47.912Z","status":"2015-12-29T03:47:47.912Z"}}},{"_id":"invRequest_2_B419E42C-87A8-1AFC-BDEF-3145ED774BE7","_rev":"1-a61eb2eac18550ed06ae528db3de51f0","data":{"adjustPurchases":false,"completedBy":"Admin User","costPerUnit":null,"dateCompleted":"2015-12-01T06:00:00.000Z","dateRequested":null,"deliveryAisle":null,"deliveryLocation":"Warehouse","expenseAccount":null,"markAsConsumed":true,"quantity":25,"quantityAtCompletion":null,"reason":null,"requestedBy":null,"status":"Completed","transactionType":"Transfer","lastModified":"2015-12-29T03:13:47.447Z","modifiedBy":"Admin User","inventoryItem":"iiqtim0c_ex","patient":null,"visit":null,"modifiedFields":{"adjustPurchases":"2015-12-29T03:13:47.447Z","dateCompleted":"2015-12-29T03:13:47.447Z","quantity":"2015-12-29T03:13:47.447Z","deliveryLocation":"2015-12-29T03:13:47.447Z","transactionType":"2015-12-29T03:13:47.447Z","locationsAffected":"2015-12-29T03:13:47.447Z","status":"2015-12-29T03:13:47.447Z","completedBy":"2015-12-29T03:13:47.447Z"},"locationsAffected":[{"name":"No Location","quantity":"25"}]}},{"_id":"invRequest_2_CA5F4301-1600-1230-B276-0B3C98402C13","_rev":"1-9c9872e5caf5f80fe4cf434e014fcfe3","data":{"adjustPurchases":true,"completedBy":"Admin User","costPerUnit":0.48,"dateCompleted":"2015-12-28T06:00:00.000Z","dateRequested":"2015-12-29T03:46:41.543Z","deliveryAisle":null,"deliveryLocation":"Ward 1","expenseAccount":"Ward","markAsConsumed":true,"quantity":25,"quantityAtCompletion":25,"reason":null,"requestedBy":"Admin User","status":"Completed","transactionType":"Fulfillment","lastModified":"2015-12-29T03:46:41.732Z","modifiedBy":"Admin User","inventoryItem":"iiqtim0c_ex","patient":null,"visit":null,"modifiedFields":{"transactionType":"2015-12-29T03:46:41.732Z","quantity":"2015-12-29T03:46:41.732Z","dateCompleted":"2015-12-29T03:46:41.732Z","deliveryLocation":"2015-12-29T03:46:41.732Z","expenseAccount":"2015-12-29T03:46:41.732Z","dateRequested":"2015-12-29T03:46:41.732Z","requestedBy":"2015-12-29T03:46:41.732Z","adjustPurchases":"2015-12-29T03:46:41.732Z","costPerUnit":"2015-12-29T03:46:41.732Z","quantityAtCompletion":"2015-12-29T03:46:41.732Z","purchasesAffected":"2015-12-29T03:46:41.732Z","locationsAffected":"2015-12-29T03:46:41.732Z","status":"2015-12-29T03:46:41.732Z","completedBy":"2015-12-29T03:46:41.732Z"},"purchasesAffected":[{"id":"05760051-8BD1-ACC0-8013-0C59A545FB8D","quantity":25}],"locationsAffected":[{"name":"Warehouse","quantity":25}]}},{"_id":"inventory_2_iiqtc6w3_31","_rev":"3-0c0a71f273bf0633cafce271b0f35007","data":{"description":null,"friendlyId":"m00001","name":"Cefazolin 500mg vial (Hazolin)","quantity":999998,"crossReference":null,"inventoryType":"Medication","price":null,"reorderPoint":null,"distributionUnit":"vial","rank":null,"lastModified":"2015-12-29T04:01:16.249Z","modifiedBy":"Admin User","locations":["24BB235E-B271-AF61-9A3D-9ACD77CE25AF","DBCF3E06-B812-B6C7-930E-74F9372D384A"],"purchases":["E3B2184F-4ECA-3B76-92C8-437846C2E3DC"],"modifiedFields":{"name":"2015-12-29T03:08:24.053Z","inventoryType":"2015-12-29T03:08:24.053Z","distributionUnit":"2015-12-29T03:08:24.053Z","quantity":"2015-12-29T04:01:16.249Z","friendlyId":"2015-12-29T03:08:24.053Z"}},"_revisions":{"start":3,"ids":["0c0a71f273bf0633cafce271b0f35007","42bc38c66d9a87103c7871aa9aadb6b5","295e3c0d1de3d7a7d384ae5090d82125"]}},{"_id":"inventory_2_iiqtim0c_ex","_rev":"4-6900f25cb0aa33334fb6c69e4a828718","data":{"description":null,"friendlyId":"s00001","name":"Pumpset Kangaroo 1000ml","quantity":12,"crossReference":null,"inventoryType":"Supply","price":null,"reorderPoint":null,"distributionUnit":"pcs","rank":null,"lastModified":"2015-12-29T03:47:26.017Z","modifiedBy":"Admin User","locations":["0323721B-EDD0-6C91-BB34-52FBEACBA7DE","7FD0F94A-6D4E-6365-A4EF-F7B4F8D35C22","32BCC947-E272-1564-90E1-C6E2ECE14881"],"purchases":["05760051-8BD1-ACC0-8013-0C59A545FB8D","155B2B94-6C47-E6B5-BD1E-11F375CB2C29"],"modifiedFields":{"name":"2015-12-29T03:12:56.959Z","inventoryType":"2015-12-29T03:12:56.959Z","distributionUnit":"2015-12-29T03:12:56.959Z","quantity":"2015-12-29T03:47:26.017Z","friendlyId":"2015-12-29T03:12:56.959Z"}},"_revisions":{"start":4,"ids":["6900f25cb0aa33334fb6c69e4a828718","03eb3fc36799eb0e78c1d4f5b45e50a0","064996d833372bc743ccd60baa1174b9","1622cc9c6428d24950f02c88112840f4"]}},{"_id":"lab_2_C9274C34-248C-FF7C-9E8B-F3110467C941","_rev":"2-78aaf934410f626a7dc64c8ce640ad17","data":{"labDate":"2015-12-29T04:07:25.725Z","notes":null,"requestedBy":"Admin User","requestedDate":"2015-12-29T04:03:22.879Z","result":"Normal","status":"Completed","lastModified":"2015-12-29T04:07:25.725Z","modifiedBy":"Admin User","labType":"A33BFA09-AFBB-CA35-A01C-702B568FFAE8","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","visit":"03C7BF8B-04E0-DD9E-9469-96A5604F5340","charges":[],"modifiedFields":{"status":"2015-12-29T04:07:25.725Z","requestedBy":"2015-12-29T04:03:22.927Z","requestedDate":"2015-12-29T04:03:22.927Z","result":"2015-12-29T04:07:25.725Z","labDate":"2015-12-29T04:07:25.725Z"}},"_revisions":{"start":2,"ids":["78aaf934410f626a7dc64c8ce640ad17","0e55563ae178ae5b340c29a50f168925"]}},{"_id":"lab_2_EE3063E6-832D-930D-AD4E-D27341709886","_rev":"1-b0364bd6b060df4a2084ca292de1ad71","data":{"labDate":null,"notes":null,"requestedBy":"Admin User","requestedDate":"2015-12-29T04:18:34.699Z","result":null,"status":"Requested","lastModified":"2015-12-29T04:18:34.731Z","modifiedBy":"Admin User","labType":"4C0FA251-6FEA-8DDA-9DEB-83993EAB25F2","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","visit":"03C7BF8B-04E0-DD9E-9469-96A5604F5340","charges":[],"modifiedFields":{"status":"2015-12-29T04:18:34.731Z","requestedBy":"2015-12-29T04:18:34.731Z","requestedDate":"2015-12-29T04:18:34.731Z"}}},{"_id":"lookup_2_aisle_location_list","_rev":"1-255c62c74fb06e5c13664e9e70aebef5","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["A1"]}},{"_id":"lookup_2_cpt_code_list","_rev":"1-499cca90fccff759c62b2fc781010226","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["27001"]}},{"_id":"lookup_2_diagnosis_list","_rev":"1-889e0d198f50d28df33bf522106b9438","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Fall from in-line roller-skates, initial encounter"]}},{"_id":"lookup_2_expense_account_list","_rev":"2-3404736b154767f3fe30e297704480be","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Pharmacy","Ward"]},"_revisions":{"start":2,"ids":["3404736b154767f3fe30e297704480be","36426f839aa10324a85e92d34fcf2c26"]}},{"_id":"lookup_2_patient_status_list","_rev":"1-01d7dfb8ec77de492bf913c5c763578c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Scheduled for surgery"]}},{"_id":"lookup_2_physician_list","_rev":"1-99c8212cef905d552ab95fc88b8c3d5b","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Dr Nick"]}},{"_id":"lookup_2_procedure_list","_rev":"1-d48989bf01a1ae70a26e397c43266278","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["hip adductor release"]}},{"_id":"lookup_2_radiologists","_rev":"1-f029e944b51dcc7fd6f980d72c7027c7","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Dr Xray"]}},{"_id":"lookup_2_vendor_list","_rev":"1-a2760a7c86532da3f92ac75899b37e06","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["ACME INC"]}}]}\n{"seq":51}\n{"docs":[{"_id":"lookup_2_sex","_rev":"1-c433c64d3ecf2a60e4539b1d1dc43d27","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Male"]}},{"_id":"lookup_2_visit_location_list","_rev":"1-d373d65b719c266173d92d3bb8f14e9f","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Hospital"]}},{"_id":"lookup_2_warehouse_list","_rev":"3-86923622f95bb3f49a906cb7cbacdc85","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Pharmacy","Ward 1","Warehouse"]},"_revisions":{"start":3,"ids":["86923622f95bb3f49a906cb7cbacdc85","64a1b3813d337c7000044dbc2de21892","4f316909ed8500d0f80cf20a684ce343"]}},{"_id":"medication_2_7B63E873-D056-CCC5-A69C-60064472A16E","_rev":"1-1ebd1e9a0f4dd4d90b52eb37db7fb493","data":{"notes":null,"prescription":"Twice a day for two days","prescriptionDate":"2015-12-28T06:00:00.000Z","quantity":4,"refills":null,"requestedDate":"2015-12-29T04:16:44.877Z","requestedBy":"Admin User","status":"Requested","lastModified":"2015-12-29T04:16:44.879Z","modifiedBy":"Admin User","inventoryItem":"iiqtc6w3_31","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","visit":"03C7BF8B-04E0-DD9E-9469-96A5604F5340","modifiedFields":{"prescriptionDate":"2015-12-29T04:16:44.879Z","prescription":"2015-12-29T04:16:44.879Z","quantity":"2015-12-29T04:16:44.879Z","status":"2015-12-29T04:16:44.879Z","requestedBy":"2015-12-29T04:16:44.879Z","requestedDate":"2015-12-29T04:16:44.879Z"}}},{"_id":"medication_2_9187CEE0-13EC-1816-A2A4-95E9797999BF","_rev":"1-271cd0960f61b322d66b57a994141733","data":{"notes":null,"prescription":"Once a day for 2 days","prescriptionDate":"2015-12-01T06:00:00.000Z","quantity":2,"refills":null,"requestedDate":"2015-12-29T04:01:16.079Z","requestedBy":"Admin User","status":"Fulfilled","lastModified":"2015-12-29T04:01:16.096Z","modifiedBy":"Admin User","inventoryItem":"iiqtc6w3_31","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","visit":"03C7BF8B-04E0-DD9E-9469-96A5604F5340","modifiedFields":{"prescriptionDate":"2015-12-29T04:01:16.096Z","prescription":"2015-12-29T04:01:16.096Z","quantity":"2015-12-29T04:01:16.096Z","status":"2015-12-29T04:01:16.096Z","requestedBy":"2015-12-29T04:01:16.096Z","requestedDate":"2015-12-29T04:01:16.096Z"}}},{"_id":"patient_2_C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","_rev":"4-dfabed4aec7088c46df7dac9bce8bc3f","data":{"admitted":true,"address":null,"address2":null,"address3":null,"address4":null,"bloodType":null,"clinic":null,"country":null,"dateOfBirth":"2013-08-06T04:00:00.000Z","economicClassification":null,"email":null,"externalPatientId":null,"familySupport1":null,"familySupport2":null,"familySupport3":null,"familySupport4":null,"familySupport5":null,"friendlyId":"P00001","firstName":"Joe","sex":"Male","history":null,"insurance":null,"lastName":"Bagadonuts","livingArrangement":null,"middleName":"","notes":null,"otherIncome":null,"patientType":null,"parent":null,"phone":null,"placeOfBirth":null,"referredDate":null,"referredBy":null,"religion":null,"socialActionTaken":null,"socialRecommendation":null,"status":"Scheduled for surgery","lastModified":"2016-02-22T21:57:21.549Z","modifiedBy":"Admin User","paymentProfile":null,"payments":[],"modifiedFields":{"friendlyId":"2015-12-29T03:51:02.781Z","firstName":"2015-12-29T03:51:02.781Z","middleName":"2015-12-29T03:51:02.781Z","lastName":"2015-12-29T03:51:02.781Z","gender":"2015-12-29T03:51:02.781Z","dateOfBirth":"2016-02-22T21:57:21.549Z","status":"2015-12-29T03:53:17.032Z","admitted":"2015-12-29T03:53:58.574Z","sex":"2016-02-22T21:57:21.549Z"}},"_revisions":{"start":4,"ids":["dfabed4aec7088c46df7dac9bce8bc3f","1351af326b99acc03278830f30192916","105429e78d710023d6d490e880a3132a","fa6de36be0214f08f09477729bdfb339"]}},{"_id":"pricing_2_4C0FA251-6FEA-8DDA-9DEB-83993EAB25F2","_rev":"1-410ff865070244eac14c5cad5db0ad80","data":{"category":"Lab","expenseAccount":null,"name":"Fasting Blood Sugar (FBS)","price":null,"pricingType":"Lab Procedure","lastModified":"2015-12-29T04:18:34.703Z","modifiedBy":"Admin User","pricingOverrides":[],"modifiedFields":{"name":"2015-12-29T04:18:34.703Z","category":"2015-12-29T04:18:34.703Z","pricingType":"2015-12-29T04:18:34.703Z"}}},{"_id":"pricing_2_A33BFA09-AFBB-CA35-A01C-702B568FFAE8","_rev":"1-70ff211de7621293ffbd91df901f6d0f","data":{"category":"Lab","expenseAccount":null,"name":"Bleeding Time","price":null,"pricingType":"Lab Procedure","lastModified":"2015-12-29T04:03:22.884Z","modifiedBy":"Admin User","pricingOverrides":[],"modifiedFields":{"name":"2015-12-29T04:03:22.884Z","category":"2015-12-29T04:03:22.884Z","pricingType":"2015-12-29T04:03:22.884Z"}}},{"_id":"pricing_2_B93625F1-3C41-2D3E-94B9-3A8BAF87EBE8","_rev":"1-30c9df5437c85bb21539024c7222d307","data":{"category":"Imaging","expenseAccount":null,"name":"Ankle (Any Single View)","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-12-29T04:07:03.700Z","modifiedBy":"Admin User","pricingOverrides":[],"modifiedFields":{"name":"2015-12-29T04:07:03.700Z","category":"2015-12-29T04:07:03.700Z","pricingType":"2015-12-29T04:07:03.700Z"}}},{"_id":"procCharge_2_0AD46995-188B-EFB9-8A33-E47B3980476C","_rev":"1-3f577e28daa86e12c2ad71799e383c3b","data":{"quantity":1,"dateCharged":"2015-12-29T04:00:00.093Z","lastModified":"2015-12-29T04:00:08.611Z","modifiedBy":"Admin User","medication":"iiqtc6w3_31","pricingItem":null,"modifiedFields":{"dateCharged":"2015-12-29T04:00:08.611Z","quantity":"2015-12-29T04:00:08.611Z"}}},{"_id":"procedure_2_398B4F58-152F-1476-8ED1-329C4D85E25F","_rev":"5-979bd8081e0ae3ccebf595c28bafd145","data":{"anesthesiaType":"","anesthesiologist":null,"assistant":null,"description":"hip adductor release","cptCode":"27001","location":null,"notes":null,"physician":"Dr Nick","procedureDate":"2015-12-01T06:00:00.000Z","timeStarted":null,"timeEnded":null,"lastModified":"2015-12-29T04:00:33.229Z","modifiedBy":"Admin User","visit":"03C7BF8B-04E0-DD9E-9469-96A5604F5340","charges":["0AD46995-188B-EFB9-8A33-E47B3980476C"],"modifiedFields":{"procedureDate":"2015-12-29T03:59:55.401Z","description":"2015-12-29T03:59:37.244Z","physician":"2015-12-29T03:59:37.244Z","anesthesiaType":"2015-12-29T03:59:37.244Z","cptCode":"2015-12-29T04:00:33.229Z"}},"_revisions":{"start":5,"ids":["979bd8081e0ae3ccebf595c28bafd145","561ab91abdd5e0f240a3ec30c9a3e09c","0a938774f0f0e600f15dd29d08b98b50","5570e1e8726f29f430a5de6e81a36e60","6c0abd3cf72cb182b05caa21150fb113"]}},{"_id":"sequence_2_inventory_Medication","_rev":"1-1acccea88a50973cbe8840a31911aa7c","data":{"prefix":"m","value":1}},{"_id":"sequence_2_inventory_Supply","_rev":"1-538fc2bf7cd4745eea01fcf24ced6164","data":{"prefix":"s","value":1}},{"_id":"sequence_2_patient","_rev":"5-f6fd8c9cb7b07567399a04a72f02822a","data":{"prefix":null,"value":1},"_revisions":{"start":5,"ids":["f6fd8c9cb7b07567399a04a72f02822a","79dabe4ed5c7897e103171a7bf8bf1b6","945c072575a32fca103968a3cd425c31","f9a8fd6c55cd4e5fb0064b7767586e05","5bc31ffefa482f2e66299cf0704623c8"]}},{"_id":"visit_2_03C7BF8B-04E0-DD9E-9469-96A5604F5340","_rev":"12-48973daa88a2567931f70586aa5f4b6e","data":{"dischargeInfo":null,"endDate":"2015-12-29T04:11:00.724Z","examiner":"Dr Nick","history":null,"historySince":null,"location":null,"notes":null,"outPatient":false,"primaryDiagnosis":"Fall from in-line roller-skates, initial encounter","primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-12-01T15:53:00.000Z","status":"Discharged","visitType":"Admission","lastModified":"2015-12-29T04:11:47.272Z","modifiedBy":"Admin User","patient":"C87BFCB2-F772-7A7B-8FC7-AD00C018C32A","vitals":["B9FDB59B-BA3F-40A2-9D42-2A9B0E7270FC"],"procedures":["398B4F58-152F-1476-8ED1-329C4D85E25F"],"medication":["9187CEE0-13EC-1816-A2A4-95E9797999BF","7B63E873-D056-CCC5-A69C-60064472A16E"],"labs":["C9274C34-248C-FF7C-9E8B-F3110467C941","EE3063E6-832D-930D-AD4E-D27341709886"],"imaging":["51AFF85A-69C0-97C1-B22C-716A1BA7B80B","12DEDA58-4670-7A74-BA8B-9CC5E5CA82E7"],"charges":[],"modifiedFields":{"visitType":"2015-12-29T03:53:58.543Z","startDate":"2015-12-29T04:11:47.272Z","status":"2015-12-29T04:11:47.272Z","outPatient":"2015-12-29T03:53:58.543Z","primaryDiagnosis":"2015-12-29T03:59:37.312Z","examiner":"2015-12-29T04:06:19.274Z","endDate":"2015-12-29T04:11:47.272Z"}},"_revisions":{"start":12,"ids":["48973daa88a2567931f70586aa5f4b6e","0baeb91a16dad77c0d8e55e6b38e6c8e","e26c621939e57cdf40fe92362f5dac3a","7315d0ff5e6eac570c2b47fd6e9d9406","d1be40a55f4329d18cc6c8f8b8b2d55a","e8567f5b5576aa5d4141f2776b24ab58","d54e63df97dd964288c6dd66d049dae9","210c948fb309be4793ca14cec7f3a335","29e6bb7a6732517b79f8c90fbcebdedd","a83b26f6b056f7c54d917160b366a75b","ebed6471bdd978af39c5acfc3f1f34b7","284cb8e69ca4b392156fe1d22866fcfb"]}},{"_id":"vital_2_B9FDB59B-BA3F-40A2-9D42-2A9B0E7270FC","_rev":"1-62233a35020adba2b7d65fd09e5e3cba","data":{"dateRecorded":"2015-12-04T04:08:00.000Z","temperature":36.67,"weight":"57lb","height":"3\'6\\"","sbp":117,"dbp":76,"heartRate":60,"respiratoryRate":12,"lastModified":"2015-12-29T04:11:11.942Z","modifiedBy":"Admin User","modifiedFields":{"dateRecorded":"2015-12-29T04:11:11.942Z","temperature":"2015-12-29T04:11:11.942Z","weight":"2015-12-29T04:11:11.942Z","height":"2015-12-29T04:11:11.942Z","sbp":"2015-12-29T04:11:11.942Z","dbp":"2015-12-29T04:11:11.942Z","heartRate":"2015-12-29T04:11:11.942Z","respiratoryRate":"2015-12-29T04:11:11.942Z"}}}]}\n{"seq":68}\n';
});
define('hospitalrun/tests/fixtures/inventory', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.5","db_type":"http","start_time":"2016-02-22T22:23:54.091Z","db_info":{"db_name":"main","doc_count":57,"doc_del_count":21,"update_seq":83,"purge_seq":0,"compact_running":false,"disk_size":49263,"data_size":44657,"instance_start_time":"1456179715811167","disk_format_version":6,"committed_update_seq":83,"host":"http://localhost:5984/main/","auto_compaction":false,"adapter":"http"}}\n{"docs":[{"_id":"_design/inventory_purchase_by_date_received","_rev":"1-78939ec45bef330bbfa87763dbbfce37","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}}}]}\n{"seq":2}\n{"docs":[{"_id":"_design/appointments_by_patient","_rev":"1-9868b6586898a48c3fd68722ca3fe1d4","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}}}]}\n{"seq":3}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"1-03951858f9232df2e774548b0f5fd068","version":4,"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n      var i,\\n          filterBy = null,\\n          includeRow = true;\\n      if (req.query && req.query.filterBy) {\\n        filterBy = JSON.parse(req.query.filterBy);\\n      }\\n      if (!filterBy) {\\n        return true;\\n      }\\n      for (i = 0; i < filterBy.length; i++) {\\n        var currentValue = row.doc.data[filterBy[i].name];\\n        if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n          currentValue = \'Scheduled\';\\n        }\\n        if (currentValue !== filterBy[i].value) {\\n          includeRow = false;\\n          break;\\n        }\\n      }\\n      return includeRow;\\n    });rows.sort(function (a, b) {\\n      function defaultStatus(value) {\\n        if (!value || value === \'\') {\\n          return \'Scheduled\';\\n        } else {\\n          return value;\\n        }\\n      }\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'appointmentType\':\\n        case \'location\':\\n        case \'provider\':\\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n        case \'date\':\\n          {\\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n            if (startDiff === 0) {\\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n            } else {\\n              return startDiff;\\n            }\\n            break;\\n          }\\n        case \'status\':\\n          {\\n            var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                bStatus = defaultStatus(b.doc.data[sortBy]);\\n            return compareStrings(aStatus, bStatus);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["03951858f9232df2e774548b0f5fd068"]}},{"_id":"_design/appointments_by_date","_rev":"1-3c37df4fed5a034aedc1a295f4a672fd","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n            var i,\\n                filterBy = null,\\n                includeRow = true;\\n            if (req.query && req.query.filterBy) {\\n                filterBy = JSON.parse(req.query.filterBy);\\n            }\\n            if (!filterBy) {\\n                return true;\\n            }\\n            for (i = 0; i < filterBy.length; i++) {\\n                var currentValue = row.doc[filterBy[i].name];\\n                if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n                    currentValue = \'Scheduled\';\\n                }\\n                if (currentValue !== filterBy[i].value) {\\n                    includeRow = false;\\n                    break;\\n                }\\n            }\\n            return includeRow;\\n        });rows.sort(function (a, b) {\\n            function defaultStatus(value) {\\n                if (!value || value === \'\') {\\n                    return \'Scheduled\';\\n                } else {\\n                    return value;\\n                }\\n            }\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'appointmentType\':\\n                case \'location\':\\n                case \'provider\':\\n                    return compareStrings(a.doc[sortBy], b.doc[sortBy]);\\n                case \'date\':\\n                    {\\n                        var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n                        if (startDiff === 0) {\\n                            return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n                        } else {\\n                            return startDiff;\\n                        }\\n                        break;\\n                    }\\n                case \'status\':\\n                    {\\n                        var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                            bStatus = defaultStatus(b.doc.data[sortBy]);\\n                        return compareStrings(aStatus, bStatus);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"_revisions":{"start":1,"ids":["3c37df4fed5a034aedc1a295f4a672fd"]}},{"_id":"_design/imaging_by_status","_rev":"1-9236042e1fb9f567d1d527bbb429cd8e","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}}},{"_id":"_design/inventory_by_name","_rev":"1-3eb498726e0d057818618808c0db46bf","version":3,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'crossReference\':\\n                case \'description\':\\n                case \'friendlyId\':\\n                case \'name\':\\n                case \'price\':\\n                case \'quantity\':\\n                case \'inventoryType\':\\n                    {\\n                        return compareStrings(a.doc[sortBy], b.doc[sortBy]);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"_revisions":{"start":1,"ids":["3eb498726e0d057818618808c0db46bf"]}},{"_id":"_design/inventory_by_name","_rev":"1-304304d63beaffd8d1ae4ae1cddf4b2b","version":3,"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'crossReference\':\\n        case \'description\':\\n        case \'friendlyId\':\\n        case \'name\':\\n        case \'price\':\\n        case \'quantity\':\\n        case \'inventoryType\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["304304d63beaffd8d1ae4ae1cddf4b2b"]}},{"_id":"_design/inventory_by_type","_rev":"1-003ef699ab0f2b8628c0bf613fabf7a2","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"1-17bd9d3619ae03155d9929d3ebcd5023","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}}},{"_id":"_design/inventory_request_by_item","_rev":"1-7e7ef275a9fc15f2b5f328b1479c6097","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}}},{"_id":"_design/inventory_request_by_status","_rev":"1-187394c79d3206e11e112891f0d63550","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}}},{"_id":"_design/invoice_by_status","_rev":"1-73e3e45673ed0c4f4ae1cee855f216f0","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}}},{"_id":"_design/lab_by_status","_rev":"1-db4393c6856b98a40afd6ceef31db2a7","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}}},{"_id":"_design/medication_by_status","_rev":"1-36ce9e9853552f5eb646ed26de7184dc","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}}},{"_id":"_design/patient_by_display_id","_rev":"1-e6d44a1448953362319c910bf33a8668","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'firstName\':\\n                case \'gender\':\\n                case \'lastName\':\\n                case \'status\':\\n                    {\\n                        return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n                    }\\n                case \'dateOfBirth\':\\n                    {\\n                        return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"_revisions":{"start":1,"ids":["e6d44a1448953362319c910bf33a8668"]}},{"_id":"_design/patient_by_display_id","_rev":"1-0b75ee7c82a1aadebd0bc0fd403622fb","version":5,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'sex\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["0b75ee7c82a1aadebd0bc0fd403622fb"]}},{"_id":"_design/patient_by_status","_rev":"1-ff26a12cdb8747aae5bf26f9af3a1953","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}}},{"_id":"_design/photo_by_patient","_rev":"1-e3dc5506f7f370535b85be0adc59c7cc","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}}},{"_id":"_design/pricing_by_category","_rev":"1-23d44e44019170eadd086734c87e3976","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}}},{"_id":"_design/procedure_by_date","_rev":"1-25ccef2a9dff3addd8c0d15cc79c363c","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}}},{"_id":"_design/sequence_by_prefix","_rev":"1-8ac3a62b4c0b624ebed3b68b27cd197e","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}}},{"_id":"_design/visit_by_date","_rev":"1-367a7fa42f1067f645190d560f83ef5e","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_discharge_date","_rev":"1-e53c95160dacaf007fe01c01215729ce","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_patient","_rev":"1-412252178488867e2350dcd13da779ea","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}}},{"_id":"imaging_2_07CC6746-C7D9-A410-9B8C-C4B4E095A96D","_rev":"2-ffa7adb60618346cba98a559d81df36a","data":{"imagingDate":"2015-10-15T09:39:44.603Z","notes":"random notes","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T09:39:37.866Z","result":"to collect","status":"Completed","lastModified":"2015-10-15T09:39:44.603Z","modifiedBy":"hradmin","imagingType":"22208FBE-9C6E-079D-A1E6-A562F9310FE5","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","modifiedFields":{"radiologist":"2015-10-15T09:39:38.088Z","result":"2015-10-15T09:39:38.088Z","notes":"2015-10-15T09:39:38.088Z","status":"2015-10-15T09:39:44.603Z","requestedBy":"2015-10-15T09:39:38.088Z","requestedDate":"2015-10-15T09:39:38.088Z","imagingDate":"2015-10-15T09:39:44.603Z"},"charges":[]},"_revisions":{"start":2,"ids":["ffa7adb60618346cba98a559d81df36a","be0a6780ba1f2b7e3e8d49ebf20ed8d6"]}},{"_id":"imaging_2_1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB","_rev":"1-83a3398c448faf2ea1962004c5652a52","data":{"imagingDate":null,"notes":"jkmn","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T10:37:57.852Z","result":"hu","status":"Requested","lastModified":"2015-10-15T10:37:58.038Z","modifiedBy":"hradmin","imagingType":"4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","modifiedFields":{"radiologist":"2015-10-15T10:37:58.038Z","result":"2015-10-15T10:37:58.038Z","notes":"2015-10-15T10:37:58.038Z","status":"2015-10-15T10:37:58.038Z","requestedBy":"2015-10-15T10:37:58.038Z","requestedDate":"2015-10-15T10:37:58.038Z"},"charges":[]}},{"_id":"imaging_2_4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99","_rev":"2-0ddb54b6d0376b87fdf409eb6d205f82","data":{"imagingDate":"2015-10-28T07:32:45.311Z","notes":null,"radiologist":null,"requestedBy":"hradmin","requestedDate":"2015-10-26T11:49:08.227Z","result":null,"status":"Completed","lastModified":"2015-10-28T07:32:45.314Z","modifiedBy":"hradmin","imagingType":"CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"C5C296AC-E238-CBA5-8DD8-99942843BC5A","modifiedFields":{"status":"2015-10-28T07:32:45.314Z","requestedBy":"2015-10-26T11:49:08.483Z","requestedDate":"2015-10-26T11:49:08.483Z","imagingDate":"2015-10-28T07:32:45.314Z"},"charges":[]},"_revisions":{"start":2,"ids":["0ddb54b6d0376b87fdf409eb6d205f82","0cefb2d2a3e8ba76052c1a08c27df1eb"]}},{"_id":"imaging_2_51D8DC28-78EB-62B1-942A-1158F5862F34","_rev":"2-40eac78a67beecaa77b17ea5e7481866","data":{"imagingDate":"2015-10-28T07:32:55.293Z","notes":"Chest is ok","radiologist":"Mr Test","requestedBy":"hradmin","requestedDate":"2015-10-28T07:23:34.834Z","result":"Ok","status":"Completed","lastModified":"2015-10-28T07:32:55.294Z","modifiedBy":"hradmin","imagingType":"E53305F3-BA40-B305-B2DC-0732C7AB0042","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","modifiedFields":{"radiologist":"2015-10-28T07:23:35.055Z","result":"2015-10-28T07:23:35.055Z","notes":"2015-10-28T07:23:35.055Z","status":"2015-10-28T07:32:55.294Z","requestedBy":"2015-10-28T07:23:35.055Z","requestedDate":"2015-10-28T07:23:35.055Z","imagingDate":"2015-10-28T07:32:55.294Z"},"charges":[]},"_revisions":{"start":2,"ids":["40eac78a67beecaa77b17ea5e7481866","fb212193dfed510d7935aed17e5f0456"]}},{"_id":"imaging_2_91B061E9-2986-D539-90C8-CD14EC2010B0","_rev":"1-2abe559a8f8075862b282ed4f9d54da5","data":{"imagingDate":null,"notes":"jbkj","radiologist":"b","requestedBy":"hradmin","requestedDate":"2015-10-28T07:39:18.255Z","result":"jjjk","status":"Requested","lastModified":"2015-10-28T07:39:18.406Z","modifiedBy":"hradmin","imagingType":null,"patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"6AD00ED1-670A-2C3F-BC10-0742B1F99264","modifiedFields":{"radiologist":"2015-10-28T07:39:18.406Z","result":"2015-10-28T07:39:18.406Z","notes":"2015-10-28T07:39:18.406Z","status":"2015-10-28T07:39:18.406Z","requestedBy":"2015-10-28T07:39:18.406Z","requestedDate":"2015-10-28T07:39:18.406Z"},"charges":[]}},{"_id":"imaging_2_D0F299E4-CD8D-557D-8C23-216FD23EF844","_rev":"3-8b87996abf9161e5d7908be6676a64d7","data":{"imagingDate":"2015-10-22T07:09:04.249Z","notes":"vbj nkm","radiologist":"fcgvb","requestedBy":"hradmin","requestedDate":"2015-10-22T07:08:38.080Z","result":"cgvhbj n","status":"Completed","lastModified":"2015-10-22T07:09:04.251Z","modifiedBy":"hradmin","imagingType":"B492AA26-22F2-52A9-93C7-17106A57A62E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"9F1A65ED-683F-056E-8D50-A8AF63201CE2","modifiedFields":{"radiologist":"2015-10-22T07:08:38.523Z","result":"2015-10-22T07:08:38.523Z","notes":"2015-10-22T07:08:38.523Z","status":"2015-10-22T07:08:59.403Z","requestedBy":"2015-10-22T07:08:38.523Z","requestedDate":"2015-10-22T07:08:38.523Z","imagingDate":"2015-10-22T07:09:04.251Z"},"charges":[]},"_revisions":{"start":3,"ids":["8b87996abf9161e5d7908be6676a64d7","9f159b24551a1fa5acd7b84cd8d51994","c676b60d0d69556786f283da75b51c77"]}},{"_id":"imaging_2_DBE152F6-9508-2E12-81AC-39BC2CAFE08C","_rev":"2-69b11e7856d8b0fc3bd62debbfca3e55","data":{"imagingDate":"2015-10-28T07:33:17.867Z","notes":"ss","radiologist":"ss","requestedBy":"hradmin","requestedDate":"2015-10-28T07:31:20.891Z","result":"sss","status":"Completed","lastModified":"2015-10-28T07:33:17.868Z","modifiedBy":"hradmin","imagingType":"F51616AE-EB96-2778-824F-386DEAFFD2F9","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"D6938BD3-6346-F62B-8B19-5207B2E5A6AF","modifiedFields":{"radiologist":"2015-10-28T07:31:21.091Z","result":"2015-10-28T07:31:21.091Z","notes":"2015-10-28T07:31:21.091Z","status":"2015-10-28T07:33:17.868Z","requestedBy":"2015-10-28T07:31:21.091Z","requestedDate":"2015-10-28T07:31:21.091Z","imagingDate":"2015-10-28T07:33:17.868Z"},"charges":[]},"_revisions":{"start":2,"ids":["69b11e7856d8b0fc3bd62debbfca3e55","222ad15ae5eed89c6d8abe1c9e07c145"]}},{"_id":"imaging_2_EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B","_rev":"2-63da6e42fb59a811a5468e32bda0eb76","data":{"imagingDate":"2015-10-28T07:33:05.759Z","notes":"hbjn","radiologist":"cgvhbn","requestedBy":"hradmin","requestedDate":"2015-10-28T07:27:44.346Z","result":"fcghvj","status":"Completed","lastModified":"2015-10-28T07:33:05.759Z","modifiedBy":"hradmin","imagingType":"C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","modifiedFields":{"radiologist":"2015-10-28T07:27:44.514Z","result":"2015-10-28T07:27:44.514Z","notes":"2015-10-28T07:27:44.514Z","status":"2015-10-28T07:33:05.759Z","requestedBy":"2015-10-28T07:27:44.514Z","requestedDate":"2015-10-28T07:27:44.514Z","imagingDate":"2015-10-28T07:33:05.759Z"},"charges":[]},"_revisions":{"start":2,"ids":["63da6e42fb59a811a5468e32bda0eb76","51a7194f0c4b6b172b5d0b059285e118"]}},{"_id":"invLocation_2_B7B86EC1-6CCE-30B7-B4ED-FF2061879E03","_rev":"2-6b49176eeeafb82a88a10aa5d954d965","data":{"quantity":1000,"location":null,"aisleLocation":null,"lastModified":"2015-10-29T02:44:10.582Z","modifiedBy":"hradmin","modifiedFields":{"quantity":"2015-10-29T02:44:10.582Z"}},"_revisions":{"start":2,"ids":["6b49176eeeafb82a88a10aa5d954d965","e7ffcb12925c148d50279cc2ee012d25"]}},{"_id":"invPurchase_2_CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC","_rev":"1-d0a2104fa76a4161da3f527b23a6d61a","data":{"purchaseCost":4000,"lotNumber":null,"dateReceived":"2015-10-28T22:00:00.000Z","originalQuantity":1000,"currentQuantity":1000,"expirationDate":null,"expired":false,"location":null,"aisleLocation":null,"giftInKind":false,"inventoryItem":"igbmk5zf_is","vendor":"Alpha Pharmacy","vendorItemNo":null,"distributionUnit":null,"invoiceNo":null,"lastModified":"2015-10-29T02:44:10.493Z","modifiedBy":"hradmin","modifiedFields":{"dateReceived":"2015-10-29T02:44:10.493Z","purchaseCost":"2015-10-29T02:44:10.493Z","vendor":"2015-10-29T02:44:10.493Z","originalQuantity":"2015-10-29T02:44:10.493Z","currentQuantity":"2015-10-29T02:44:10.493Z","inventoryItem":"2015-10-29T02:44:10.493Z"}}},{"_id":"invRequest_2_4691AB2D-AEF3-1AA8-A11E-790BA5788239","_rev":"1-0e093fbeafc9c59eaeaaf0739ad56e13","data":{"adjustPurchases":false,"completedBy":null,"costPerUnit":null,"dateCompleted":null,"dateRequested":"2015-10-29T08:35:51.495Z","deliveryAisle":"C100","deliveryLocation":"Harare","expenseAccount":"Accounts","markAsConsumed":true,"quantity":50,"quantityAtCompletion":null,"reason":null,"requestedBy":"hradmin","status":"Requested","transactionType":"Request","lastModified":"2015-10-29T08:35:51.497Z","modifiedBy":"hradmin","inventoryItem":"igbmk5zf_is","patient":null,"visit":null,"modifiedFields":{"transactionType":"2015-10-29T08:35:51.497Z","quantity":"2015-10-29T08:35:51.497Z","deliveryLocation":"2015-10-29T08:35:51.497Z","deliveryAisle":"2015-10-29T08:35:51.497Z","expenseAccount":"2015-10-29T08:35:51.497Z","dateRequested":"2015-10-29T08:35:51.497Z","requestedBy":"2015-10-29T08:35:51.497Z","status":"2015-10-29T08:35:51.497Z"}}},{"_id":"inventory_2_igbmk5zf_is","_rev":"1-26fffdb13350d70c54f01078f7ea7058","data":{"description":"Biogesic nga medisina","friendlyId":"m00001","name":"Biogesic","quantity":1000,"crossReference":"2600","inventoryType":"Medication","price":5,"reorderPoint":100,"distributionUnit":"tablet","lastModified":"2015-10-29T02:44:10.610Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-29T02:44:10.610Z","inventoryType":"2015-10-29T02:44:10.610Z","crossReference":"2015-10-29T02:44:10.610Z","description":"2015-10-29T02:44:10.610Z","reorderPoint":"2015-10-29T02:44:10.610Z","price":"2015-10-29T02:44:10.610Z","distributionUnit":"2015-10-29T02:44:10.610Z","quantity":"2015-10-29T02:44:10.610Z","friendlyId":"2015-10-29T02:44:10.610Z"},"purchases":["CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC"],"locations":["B7B86EC1-6CCE-30B7-B4ED-FF2061879E03"]}},{"_id":"lookup_2_aisle_location_list","_rev":"1-7257ef0f361f763b2692f692dab6bb7c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["C100"]}},{"_id":"lookup_2_expense_account_list","_rev":"1-bb8267ec5987084be9890734e55df7e0","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Accounts"]}},{"_id":"lookup_2_radiologists","_rev":"6-38c1cbc8559ef893d7ebd043e93ce427","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Mr Test","b","cgvhbn","fcgvb","ss","zinyando"]},"_revisions":{"start":6,"ids":["38c1cbc8559ef893d7ebd043e93ce427","515694dee3f8a35894f6287347485e40","10ef5b07a7d56f64ac26e84507484d41","33cff401403de9c1efd0a9edbec7e50b","cb3dd07e07a6fa2f9e9323b7e15c48fd","864e65b754e2ec13fe2eb8c452bce282"]}},{"_id":"lookup_2_sex","_rev":"1-c433c64d3ecf2a60e4539b1d1dc43d27","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Male"]}},{"_id":"lookup_2_vendor_list","_rev":"1-3b1a6a2565242e3db9cbdb6c579de2af","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Alpha Pharmacy"]}},{"_id":"lookup_2_warehouse_list","_rev":"1-578a5af6fd231a89f2fdeb1baae7036c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Harare"]}},{"_id":"patient_2_19A03BBC-71F3-9F39-8B18-15773F446731","_rev":"3-c021a07297d99585de08b3fd96719914","_deleted":true,"_revisions":{"start":3,"ids":["c021a07297d99585de08b3fd96719914","a7323c9135948b4689f52c01826affe2","6ed64fbe474b36dac7c8ac071e33786d"]}},{"_id":"patient_2_2D1BEC2C-EA03-E737-9EC9-D2AEAF2C9EE6","_rev":"2-a587941fb557366a6b87122548a9ba0c","_deleted":true,"_revisions":{"start":2,"ids":["a587941fb557366a6b87122548a9ba0c","0048675586c8e2fd24c8cc2edc545769"]}},{"_id":"patient_2_3C01C5E5-7E64-B147-88F9-D127903B31D7","_rev":"4-be8dd294f8df42bcf220e1a4372340fd","_deleted":true,"_revisions":{"start":4,"ids":["be8dd294f8df42bcf220e1a4372340fd","74d74986cffc330788b0fc5e47f40788","1ed40ad430dba87ec4c0773779fac6aa","34e84dc96007fc737d932ebf875ce340"]}},{"_id":"patient_2_423A476C-2012-6339-8FED-D2E404037268","_rev":"4-263b75936a4ead5058dc1e17535c536c","_deleted":true,"_revisions":{"start":4,"ids":["263b75936a4ead5058dc1e17535c536c","12c22dbd6548922b326bd28b2f05ddb0","a4a9b0e7ed53aea140c1d3259c9b1e94","15ebcd46a46d830899afc17450d4b229"]}},{"_id":"patient_2_519E056C-BF04-2A3F-84D2-8963EAD04261","_rev":"2-13e0330c4610ea3dc8a8dcb64a9b61ae","_deleted":true,"_revisions":{"start":2,"ids":["13e0330c4610ea3dc8a8dcb64a9b61ae","193c2c5d9fcb17698411febac4015547"]}},{"_id":"patient_2_5DD90350-3A67-F3B7-BB4A-A6837A667697","_rev":"2-812e681275f7181b96e1428d5b2eb555","_deleted":true,"_revisions":{"start":2,"ids":["812e681275f7181b96e1428d5b2eb555","a9b1e632e8d3f96d106873396f7f04de"]}},{"_id":"patient_2_63165A06-C866-A0C2-BB43-5DE9A0146737","_rev":"2-5989c5e25baace8df71d475ae164bf40","_deleted":true,"_revisions":{"start":2,"ids":["5989c5e25baace8df71d475ae164bf40","4178d1d23fb9d40a647d573026480dad"]}},{"_id":"patient_2_632DBDA3-5DBF-DDCC-A2C6-915E357319BA","_rev":"2-6ce428f8cdb8d1ea864f976c1ade08e4","_deleted":true,"_revisions":{"start":2,"ids":["6ce428f8cdb8d1ea864f976c1ade08e4","abe897a1411af9ce5df82d2ddbe726f2"]}},{"_id":"patient_2_688E30F1-E068-A2E3-8986-C224AF671CDD","_rev":"2-cb950343c60eb7116359fb50dc58fb87","_deleted":true,"_revisions":{"start":2,"ids":["cb950343c60eb7116359fb50dc58fb87","949f54bb01a90f17a91a7b392aecd58e"]}},{"_id":"patient_2_694DF805-F7CD-9513-9EF5-4CF8EE009BE9","_rev":"2-005d256252779d14fb83b9614a75d84f","_deleted":true,"_revisions":{"start":2,"ids":["005d256252779d14fb83b9614a75d84f","79cbdb6ba8075de8b19b61f4ebd194b2"]}},{"_id":"patient_2_9C269C48-EE3E-FBEC-9371-A235EEFDA40E","_rev":"2-6d94af1fdf669e3d012e3370c17c7d0f","_deleted":true,"_revisions":{"start":2,"ids":["6d94af1fdf669e3d012e3370c17c7d0f","ba40f943d16f3594cdf2a1c0e7ce36eb"]}}]}\n{"seq":53}\n{"docs":[{"_id":"patient_2_9ED02049-6F10-E89D-9BAA-9C113B3AA6E4","_rev":"2-472c94a0e9c78fde3be4c15a71e0f336","_deleted":true,"_revisions":{"start":2,"ids":["472c94a0e9c78fde3be4c15a71e0f336","c61b0ba276e4c88cfda15ae4b5d0768b"]}},{"_id":"patient_2_B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","_rev":"2-abadab1984c60d7e4e1a67576335a2bc","data":{"admitted":false,"address":null,"address2":null,"address3":null,"address4":null,"bloodType":null,"clinic":null,"country":null,"dateOfBirth":null,"economicClassification":null,"email":null,"externalPatientId":null,"familySupport1":null,"familySupport2":null,"familySupport3":null,"familySupport4":null,"familySupport5":null,"friendlyId":"P00017","firstName":"Lennex","sex":"Male","history":null,"insurance":null,"lastName":"Zinyando","livingArrangement":null,"middleName":"","notes":null,"otherIncome":null,"patientType":null,"parent":null,"phone":null,"placeOfBirth":null,"referredDate":null,"referredBy":null,"religion":null,"socialActionTaken":null,"socialRecommendation":null,"status":null,"lastModified":"2016-02-22T22:00:07.816Z","modifiedBy":"Admin User","paymentProfile":null,"payments":[],"modifiedFields":{"friendlyId":"2015-10-06T10:56:52.507Z","firstName":"2015-10-06T10:56:52.507Z","middleName":"2015-10-06T10:56:52.507Z","lastName":"2015-10-06T10:56:52.507Z","sex":"2016-02-22T22:00:07.816Z"}},"_revisions":{"start":2,"ids":["abadab1984c60d7e4e1a67576335a2bc","e5548781a44e741ceac358e5e3413d76"]}},{"_id":"patient_2_BB4E9598-BD8B-528B-9D9E-AD9C3980787B","_rev":"3-957a69aebfae063d61ee8aaa55006803","_deleted":true,"_revisions":{"start":3,"ids":["957a69aebfae063d61ee8aaa55006803","0345093ba84e9c117c7dbb94b45edb8f","3e24d132e3bcc29db9d41a4d9f4296bf"]}},{"_id":"patient_2_C0361670-8B10-F212-9F51-B889D5BF92DF","_rev":"2-7b2217e2c2cb01610c32e0de44910282","_deleted":true,"_revisions":{"start":2,"ids":["7b2217e2c2cb01610c32e0de44910282","13ecb169a07f0e5a78a11209c26ede78"]}},{"_id":"patient_2_C680710A-BFBB-2868-8E5E-F4DD648CA24E","_rev":"2-d9acde506f230ec53a1cff9c97fe58bf","_deleted":true,"_revisions":{"start":2,"ids":["d9acde506f230ec53a1cff9c97fe58bf","9d954090afc2085fb97060446f8e4da0"]}},{"_id":"patient_2_E011AC5D-6F55-A16E-AB47-148E418071EE","_rev":"2-c263c9e9cf93e6d7b98f445b0d800809","_deleted":true,"_revisions":{"start":2,"ids":["c263c9e9cf93e6d7b98f445b0d800809","66c46fd3db8b057d58a35aba6ca99a5a"]}},{"_id":"patient_2_E54A8685-A36F-D1D1-B938-080545EABD0E","_rev":"2-a53992302cf7a33bad522d2dc5835b6e","_deleted":true,"_revisions":{"start":2,"ids":["a53992302cf7a33bad522d2dc5835b6e","5cebaf4e3ffef745a70ef22a1be1f0e8"]}},{"_id":"patient_2_E5EF1B7A-51B7-1610-BFBA-B1B21365C574","_rev":"2-182384c7dc0a26973583a692bfecbce8","_deleted":true,"_revisions":{"start":2,"ids":["182384c7dc0a26973583a692bfecbce8","497eb6ebf5074eeb32e2c02aab754a18"]}},{"_id":"patient_2_F3AA5446-1DE5-AC50-B9CF-B0D491E1D45E","_rev":"2-036325f33884580d2785dadf44527e25","_deleted":true,"_revisions":{"start":2,"ids":["036325f33884580d2785dadf44527e25","9eb866d5ca50209aec98d96470acce98"]}},{"_id":"photo_2_CF5189F1-5BDA-6896-B350-6A1A9B6A217B","_rev":"3-82a9b8e6b9f827259083f9bc560d9ee6","_deleted":true,"_revisions":{"start":3,"ids":["82a9b8e6b9f827259083f9bc560d9ee6","ee9b1e0283b24f4a02b00f92ed70f0ab","5ee18d0589c4ac578fe4e8a5350f725b"]}},{"_id":"photo_2_D2B805B1-8F22-B5D2-956B-AFF6372D18FF","_rev":"3-734e1f5956d3d438f8ba6e187aa4d97f","_deleted":true,"_revisions":{"start":3,"ids":["734e1f5956d3d438f8ba6e187aa4d97f","f574559c84a634ca88d1d10d41c93953","112ad019aa78ef8e06584c9109a9a850"]}},{"_id":"pricing_2_22208FBE-9C6E-079D-A1E6-A562F9310FE5","_rev":"1-7f1b8398ae5dbed5782085efbfdf5ee8","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T09:39:37.879Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T09:39:37.879Z","category":"2015-10-15T09:39:37.879Z","pricingType":"2015-10-15T09:39:37.879Z"},"pricingOverrides":[]}},{"_id":"pricing_2_4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","_rev":"1-866a210b1d9063493c97d580845fc13d","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T10:37:57.867Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T10:37:57.867Z","category":"2015-10-15T10:37:57.867Z","pricingType":"2015-10-15T10:37:57.867Z"},"pricingOverrides":[]}},{"_id":"pricing_2_B492AA26-22F2-52A9-93C7-17106A57A62E","_rev":"1-a03187de833a34d46302b5a740244353","data":{"category":"Imaging","expenseAccount":null,"name":"fghj","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-22T07:08:38.099Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-22T07:08:38.099Z","category":"2015-10-22T07:08:38.099Z","pricingType":"2015-10-22T07:08:38.099Z"},"pricingOverrides":[]}},{"_id":"pricing_2_C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","_rev":"1-fcefadf7300a60430090a0b91df95cce","data":{"category":"Imaging","expenseAccount":null,"name":"dfghn","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:27:44.358Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:27:44.358Z","category":"2015-10-28T07:27:44.358Z","pricingType":"2015-10-28T07:27:44.358Z"},"pricingOverrides":[]}},{"_id":"pricing_2_CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","_rev":"1-a34a6a2d89ae9d5cd57f532f8db1b02f","data":{"category":"Imaging","expenseAccount":null,"name":"hg","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-26T11:49:08.235Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-26T11:49:08.235Z","category":"2015-10-26T11:49:08.235Z","pricingType":"2015-10-26T11:49:08.235Z"},"pricingOverrides":[]}},{"_id":"pricing_2_E53305F3-BA40-B305-B2DC-0732C7AB0042","_rev":"1-5b2724a6d2dce84919a16388a8983a49","data":{"category":"Imaging","expenseAccount":null,"name":"Scan","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:23:34.851Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:23:34.851Z","category":"2015-10-28T07:23:34.851Z","pricingType":"2015-10-28T07:23:34.851Z"},"pricingOverrides":[]}},{"_id":"pricing_2_F51616AE-EB96-2778-824F-386DEAFFD2F9","_rev":"1-13d626d1730a99b3da4dee1a25146ddd","data":{"category":"Imaging","expenseAccount":null,"name":"sss","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:31:20.903Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:31:20.903Z","category":"2015-10-28T07:31:20.903Z","pricingType":"2015-10-28T07:31:20.903Z"},"pricingOverrides":[]}},{"_id":"sequence_2_inventory_Medication","_rev":"1-1acccea88a50973cbe8840a31911aa7c","data":{"prefix":"m","value":1}},{"_id":"sequence_2_patient","_rev":"130-943328c138b701637a579574f516e90b","data":{"prefix":null,"value":130},"_revisions":{"start":130,"ids":["943328c138b701637a579574f516e90b","b527a87cb4f86205dcc62a9ea0fa7a63","973262d1b9be91e82f997cf103481c55","44582fef141bcd8b558595514d3ba0ff","4a8d8f8ca25aa960aef16e5c1e489b81","2a48a9bc803b0d60b5018c07017aedeb","fe6186b5bd38fce211c0dc76ef4a619b","4d41059d2cd8accf225fce92edbbc428","449ad29c390c73126670290e2a351dce","ef33fac6f75c92df977deadcefd2ea21","bde0d0a9a34c662a05458f1d379c6038","4e2b60d439b5001f0562aaa5e836de72","9b7cf30a3a428b0ffbc5c08469b60dc4","fdfa70107c954a955eddc00f1710a412","acb0081b558f7dfc06520ce59abdca9d","b611e8c2f6823f040262e4e983aa8b3e","803c06167d785dca413153687432b9da","e2c71646996df37f91cabb3881395db4","e07b6a9914e89ef9b68e6412801e47db","5c4e63e3ec27823d46d7048c34f1035c","85c90147d202a4eb1a047e2633fdc911","e7dae8e43e473a4b347f5c22161844b4","471182bdd694919456395e3b8ee81d85","c45ce9b872e266344359c0637f9dd5d0","962ad8bf64b30813c4fef6958e83e3f3","5b281c4ea003d026419d35d05dd0b87a","9ed77096845040620cd2354c1ed74001","409143da04d5575669e515f6214f6220","c35ff5c786890aa0005b360749cefdd2","48cba21a512868f2c8e3beb5646ff1c1","58fcaf249567f43db62a1c77a1440b8e","71c619fe66ac2a2246708c6733e7af9e","0e2a21c17d44457443a58dd2db6824fb","7449d0f1ba104902ca08b888dfdc546f","20f7d87b7b4a5326bb93f84c11ae627d","bef379849a35ec5a7408f26a83026e2b","5dd124839c582c23e9279eda6f821796","15a041f1e149ae2989eba580b93969b0","93e7694e1741666512f83bd1bd5064f3","002edd9949b2993af6ce18817d0bc666","a8795752b4a5c9e587d5bbbd05ef41d4","c6f60912813f86724b49110221b713fe","728c2adfea6754b048f7acae42edd25f","b1ddbe8c27e77a561d22fec546349409","923830cdb237b3ba2088779642bca716","85f7e7891658b988333439ee84dfcd39","a52f2c92c951c2c7266a9ad170d3ae9d","79cfca9fdd7b6cdae2396862f103599e","87221151cfb4cb5bbdf73eb694a7eb34","f1c5faf2bc8f82ec5a29071b6156e5e2","84612c5298273469c586955ee8427555","cc81c865b33cf6d967bde9ff60b9af6d","8b16de2d23b9c7e216215085a08caea8","8be1c3c951d7c2355f910f785cac2534","696488469a9aa721643875029f6de938","04ffb420af095d229c45a69d0e1c56c2","f8fc0538d0eacb22a767c9eb449f4c84","6adb4264d4dd3b13829ffc7e17ba58c2","f50856bf682db17eee3d3cafb366a6be","743e61dcfce262c16251ed396ee76eb7","4fcdf09a763ec5da89d41dab6dd9edc8","912874972749c40ea838145828c14173","fd8c5a0d7662b27c8cbdfbfdd45ee32d","173fe5c207973de53fd984078bbd73a2","4e9ef14c62f9312cd0fb1b47e7fabe1e","ce6f1f9584656970cfd92f1e361e2fed","cf8cf83cf02c266b75af0bc69467a07f","5816c2ba418d387facd7b6ed0a0e6054","b3839c763f128f2ccf99cfb874a2413e","68b05605500c0109d046a56680a5a7a1","a13d320fed2c85ed0b173d6645ec0274","ba1dad02a90e4ac18632c1a53a90b759","c5e7e81e97d0fc7d0797bd9822685176","b580fcf4f4291b408f4dda64a4bdec96","bb1a562af157e3c24d23c3e2f1171b29","e9f245d9566dd9e116caf7d074792d36","30b587f2b5204d237572c86a545756fb","7df53a1742b52647118fec21f331e94d","0a4c120f78fa5899d0cea5d87d92c9b0","e62f1b02721a75fd1ea290da9acdc199","3e39b429ea4cda00c9ac9d3f0b61029c","038d82911c8979c0cd58e807871a09ca","618d916a14cfa55aa8e65d42b3761ca5","8d24a6b355e64a680f0f03ab0f738b8c","999e1fa6e5175dad02e4f2db0cd41843","782e7a1c4097f1aa1d117a7fbd01c443","67b3c03ea8609652c494a22242ce5a1f","3b1fc1b83a352ef9c672110a69306064","8a0da1966531daede44592906bf8df99","279e844131c96ca7b647cacfa3508022","42733f5f658de7ee440c02286fd4e21c","e3a50044a3cb2ac901b5b65653d0fc7f","b7fb5627bee7f642f8e608be1bb1e859","2fdb16832a0ed61b7f9e780750b70898","e38f4adbab987a8c628599ea9052ca44","7ece3f9fcff7b57b28f1237ba1107a0f","8fb6c171e3c6a345d199a8884e42951a","c76709145ca58dfcf67c1f397b772689","76182e657f0b0aa6fa07bf5491d2b427","ab161b88c332f3df338f1f4aa2b2e307","e00a3184b07c0459cf4ebdeb825f991f","cee6a3aac677927abaf3ae61508954a2","86bed2b62e1e6b6f98790ecafefcc17f","ae44899fdbc41d69076ec6a8f7563181","61cce97f5cd6ff092f28fe9ec9da4f27","f9008b952322c32322ef0e7e42fdf383","8fdecd159563a90d7cbc9c9aedc3068f","9b1f0f8f0e4db1f8931d290966f3bc3c","a9b5402ea07343a1b6d5612312e07a34","25ef3d2573778c3ebda4ef7860fe310f","3e39e8d6ceabb2079042e81613858906","b4e15c555737aa9573724407ce84b667","b2538362e8afb57e3e11e5231ae60d5d","04add3d3926f54232b0e0ed7a9fc141a","e924dcf4bb51c7c552538273e08901bb","77b6f226033c656d3a9768085ff3e80a","676dd4835b46e8f62ec2ce5908d1c60a","762481b2c71611cce80a5a9ef03aa48d","b9b73bf1d2df1598cc164089375ed7bc","0a581f677e6d8f7a484fa0a80156d95b","6b51cfdb83336973df284e4d5c2f308b","4a27247e93fabb86b6a5a9676f47ec8e","8b542908965798dd683a68f507635a83","515d8987a1e11acb866ede87612b53b1","d19e3759adc65398cf6a42a61345cdae","ac63c129bee25dc4c59a639e2721fb81","17c1209032c06df436ad0a4fa76723cc","f0ef6923c78e739d9228517a4813b646","f9a8fd6c55cd4e5fb0064b7767586e05","5bc31ffefa482f2e66299cf0704623c8"]}},{"_id":"visit_2_0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","_rev":"2-0ddd43cbcc57cc5d6ff082a283d881ac","data":{"dischargeInfo":null,"endDate":"2015-10-15T10:37:57.902Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T10:37:57.902Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T10:37:57.915Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T10:37:57.915Z","endDate":"2015-10-15T10:37:57.915Z","outPatient":"2015-10-15T10:37:57.915Z","visitType":"2015-10-15T10:37:57.915Z"},"charges":[],"imaging":["1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["0ddd43cbcc57cc5d6ff082a283d881ac","e4540f9cf2a236335662116d4e0a66da"]}},{"_id":"visit_2_377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","_rev":"2-ee5b0686e20e1011d11b3051b93e7a93","data":{"dischargeInfo":null,"endDate":"2015-10-15T09:39:37.940Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T09:39:37.940Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T09:39:37.948Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T09:39:37.948Z","endDate":"2015-10-15T09:39:37.948Z","outPatient":"2015-10-15T09:39:37.948Z","visitType":"2015-10-15T09:39:37.948Z"},"charges":[],"imaging":["07CC6746-C7D9-A410-9B8C-C4B4E095A96D"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["ee5b0686e20e1011d11b3051b93e7a93","5fee255cf57220ddf1c19977118a540e"]}},{"_id":"visit_2_6AD00ED1-670A-2C3F-BC10-0742B1F99264","_rev":"2-9bf9856192b6c8ef34d2fcdb27296593","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:39:18.257Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:39:18.257Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:39:18.275Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:39:18.275Z","endDate":"2015-10-28T07:39:18.275Z","outPatient":"2015-10-28T07:39:18.275Z","visitType":"2015-10-28T07:39:18.275Z"},"charges":[],"imaging":["91B061E9-2986-D539-90C8-CD14EC2010B0"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["9bf9856192b6c8ef34d2fcdb27296593","e50477b58f5edd257b9ce20ea65b1bca"]}},{"_id":"visit_2_74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","_rev":"2-c24a52b04610b293fff293b18dd0bb15","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:27:44.394Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:27:44.394Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:27:44.406Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:27:44.406Z","endDate":"2015-10-28T07:27:44.406Z","outPatient":"2015-10-28T07:27:44.406Z","visitType":"2015-10-28T07:27:44.406Z"},"charges":[],"imaging":["EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["c24a52b04610b293fff293b18dd0bb15","5a6ae8f033eb99448ad898f164d822e8"]}},{"_id":"visit_2_9F1A65ED-683F-056E-8D50-A8AF63201CE2","_rev":"2-e19734a8deff62722e6e023af4b8e130","data":{"dischargeInfo":null,"endDate":"2015-10-22T07:08:38.175Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-22T07:08:38.175Z","status":null,"visitType":"Imaging","lastModified":"2015-10-22T07:08:38.189Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-22T07:08:38.189Z","endDate":"2015-10-22T07:08:38.189Z","outPatient":"2015-10-22T07:08:38.189Z","visitType":"2015-10-22T07:08:38.189Z"},"charges":[],"imaging":["D0F299E4-CD8D-557D-8C23-216FD23EF844"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["e19734a8deff62722e6e023af4b8e130","bd81a41820526c8c0450ee544867c6fa"]}},{"_id":"visit_2_C5C296AC-E238-CBA5-8DD8-99942843BC5A","_rev":"2-57e6740d8dac593d790cd7f76c4ad0c3","data":{"dischargeInfo":null,"endDate":"2015-10-26T11:49:08.277Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-26T11:49:08.277Z","status":null,"visitType":"Imaging","lastModified":"2015-10-26T11:49:08.282Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-26T11:49:08.282Z","endDate":"2015-10-26T11:49:08.282Z","outPatient":"2015-10-26T11:49:08.282Z","visitType":"2015-10-26T11:49:08.282Z"},"charges":[],"imaging":["4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["57e6740d8dac593d790cd7f76c4ad0c3","253e8d9f8c0865cb3e9ffd1f6849bcde"]}},{"_id":"visit_2_CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","_rev":"2-f781f118fd87b036d8cbfbf7771cda99","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:23:34.906Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:23:34.906Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:23:34.914Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:23:34.914Z","endDate":"2015-10-28T07:23:34.914Z","outPatient":"2015-10-28T07:23:34.914Z","visitType":"2015-10-28T07:23:34.914Z"},"charges":[],"imaging":["51D8DC28-78EB-62B1-942A-1158F5862F34"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["f781f118fd87b036d8cbfbf7771cda99","e2b8bf1f76ea01c32b414c184905511e"]}},{"_id":"visit_2_D6938BD3-6346-F62B-8B19-5207B2E5A6AF","_rev":"2-631f62b5121ccfcd1a8de2bc9d3d252f","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:31:20.941Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:31:20.941Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:31:20.953Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:31:20.953Z","endDate":"2015-10-28T07:31:20.953Z","outPatient":"2015-10-28T07:31:20.953Z","visitType":"2015-10-28T07:31:20.953Z"},"charges":[],"imaging":["DBE152F6-9508-2E12-81AC-39BC2CAFE08C"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["631f62b5121ccfcd1a8de2bc9d3d252f","8b46887d52e3043d742262fc03ff48b8"]}}]}\n{"seq":83}\n';
});
define('hospitalrun/tests/fixtures/labs', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.5","db_type":"http","start_time":"2016-02-22T22:09:42.133Z","db_info":{"db_name":"main","doc_count":96,"doc_del_count":21,"update_seq":189,"purge_seq":0,"compact_running":false,"disk_size":180335,"data_size":69858,"instance_start_time":"1456178497951237","disk_format_version":6,"committed_update_seq":189,"host":"http://localhost:5984/main/","auto_compaction":false,"adapter":"http"}}\n{"docs":[{"_id":"appointment_2_D0C3934D-E023-66E4-97D4-FC58F3595409","_rev":"1-5775c0c9cdf58099fa3ae4197634505f","data":{"allDay":true,"provider":"Dr Test","location":"Harare","appointmentType":"Admission","startDate":"2015-10-29T22:00:00.000Z","endDate":"2015-10-29T22:00:00.000Z","notes":"Admission","status":"Scheduled","lastModified":"2015-10-30T15:08:29.970Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"allDay":"2015-10-30T15:08:29.970Z","startDate":"2015-10-30T15:08:29.970Z","endDate":"2015-10-30T15:08:29.970Z","provider":"2015-10-30T15:08:29.970Z","location":"2015-10-30T15:08:29.970Z","appointmentType":"2015-10-30T15:08:29.970Z","notes":"2015-10-30T15:08:29.970Z"}}}]}\n{"seq":25}\n{"docs":[{"_id":"appointment_2_EE5D1ABE-2625-645B-9F84-5B0DD4B4D5EC","_rev":"1-1bb336da899bbd4807cde6620d630bd1","data":{"allDay":true,"provider":"Dr Test","location":"Harare","appointmentType":"Admission","startDate":"2015-11-02T22:00:00.000Z","endDate":"2015-11-02T22:00:00.000Z","notes":"Basic Checkup","status":"Scheduled","lastModified":"2015-11-03T06:50:48.404Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"allDay":"2015-11-03T06:50:48.404Z","startDate":"2015-11-03T06:50:48.404Z","endDate":"2015-11-03T06:50:48.404Z","appointmentType":"2015-11-03T06:50:48.404Z","provider":"2015-11-03T06:50:48.404Z","location":"2015-11-03T06:50:48.404Z","notes":"2015-11-03T06:50:48.404Z"}}}]}\n{"seq":26}\n{"docs":[{"_id":"imaging_2_07CC6746-C7D9-A410-9B8C-C4B4E095A96D","_rev":"2-ffa7adb60618346cba98a559d81df36a","data":{"imagingDate":"2015-10-15T09:39:44.603Z","notes":"random notes","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T09:39:37.866Z","result":"to collect","status":"Completed","lastModified":"2015-10-15T09:39:44.603Z","modifiedBy":"hradmin","imagingType":"22208FBE-9C6E-079D-A1E6-A562F9310FE5","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","modifiedFields":{"radiologist":"2015-10-15T09:39:38.088Z","result":"2015-10-15T09:39:38.088Z","notes":"2015-10-15T09:39:38.088Z","status":"2015-10-15T09:39:44.603Z","requestedBy":"2015-10-15T09:39:38.088Z","requestedDate":"2015-10-15T09:39:38.088Z","imagingDate":"2015-10-15T09:39:44.603Z"},"charges":[]},"_revisions":{"start":2,"ids":["ffa7adb60618346cba98a559d81df36a","be0a6780ba1f2b7e3e8d49ebf20ed8d6"]}},{"_id":"imaging_2_1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB","_rev":"1-83a3398c448faf2ea1962004c5652a52","data":{"imagingDate":null,"notes":"jkmn","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T10:37:57.852Z","result":"hu","status":"Requested","lastModified":"2015-10-15T10:37:58.038Z","modifiedBy":"hradmin","imagingType":"4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","modifiedFields":{"radiologist":"2015-10-15T10:37:58.038Z","result":"2015-10-15T10:37:58.038Z","notes":"2015-10-15T10:37:58.038Z","status":"2015-10-15T10:37:58.038Z","requestedBy":"2015-10-15T10:37:58.038Z","requestedDate":"2015-10-15T10:37:58.038Z"},"charges":[]}},{"_id":"imaging_2_4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99","_rev":"2-0ddb54b6d0376b87fdf409eb6d205f82","data":{"imagingDate":"2015-10-28T07:32:45.311Z","notes":null,"radiologist":null,"requestedBy":"hradmin","requestedDate":"2015-10-26T11:49:08.227Z","result":null,"status":"Completed","lastModified":"2015-10-28T07:32:45.314Z","modifiedBy":"hradmin","imagingType":"CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"C5C296AC-E238-CBA5-8DD8-99942843BC5A","modifiedFields":{"status":"2015-10-28T07:32:45.314Z","requestedBy":"2015-10-26T11:49:08.483Z","requestedDate":"2015-10-26T11:49:08.483Z","imagingDate":"2015-10-28T07:32:45.314Z"},"charges":[]},"_revisions":{"start":2,"ids":["0ddb54b6d0376b87fdf409eb6d205f82","0cefb2d2a3e8ba76052c1a08c27df1eb"]}},{"_id":"imaging_2_51D8DC28-78EB-62B1-942A-1158F5862F34","_rev":"2-40eac78a67beecaa77b17ea5e7481866","data":{"imagingDate":"2015-10-28T07:32:55.293Z","notes":"Chest is ok","radiologist":"Mr Test","requestedBy":"hradmin","requestedDate":"2015-10-28T07:23:34.834Z","result":"Ok","status":"Completed","lastModified":"2015-10-28T07:32:55.294Z","modifiedBy":"hradmin","imagingType":"E53305F3-BA40-B305-B2DC-0732C7AB0042","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","modifiedFields":{"radiologist":"2015-10-28T07:23:35.055Z","result":"2015-10-28T07:23:35.055Z","notes":"2015-10-28T07:23:35.055Z","status":"2015-10-28T07:32:55.294Z","requestedBy":"2015-10-28T07:23:35.055Z","requestedDate":"2015-10-28T07:23:35.055Z","imagingDate":"2015-10-28T07:32:55.294Z"},"charges":[]},"_revisions":{"start":2,"ids":["40eac78a67beecaa77b17ea5e7481866","fb212193dfed510d7935aed17e5f0456"]}},{"_id":"imaging_2_91B061E9-2986-D539-90C8-CD14EC2010B0","_rev":"1-2abe559a8f8075862b282ed4f9d54da5","data":{"imagingDate":null,"notes":"jbkj","radiologist":"b","requestedBy":"hradmin","requestedDate":"2015-10-28T07:39:18.255Z","result":"jjjk","status":"Requested","lastModified":"2015-10-28T07:39:18.406Z","modifiedBy":"hradmin","imagingType":null,"patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"6AD00ED1-670A-2C3F-BC10-0742B1F99264","modifiedFields":{"radiologist":"2015-10-28T07:39:18.406Z","result":"2015-10-28T07:39:18.406Z","notes":"2015-10-28T07:39:18.406Z","status":"2015-10-28T07:39:18.406Z","requestedBy":"2015-10-28T07:39:18.406Z","requestedDate":"2015-10-28T07:39:18.406Z"},"charges":[]}},{"_id":"imaging_2_D0F299E4-CD8D-557D-8C23-216FD23EF844","_rev":"3-8b87996abf9161e5d7908be6676a64d7","data":{"imagingDate":"2015-10-22T07:09:04.249Z","notes":"vbj nkm","radiologist":"fcgvb","requestedBy":"hradmin","requestedDate":"2015-10-22T07:08:38.080Z","result":"cgvhbj n","status":"Completed","lastModified":"2015-10-22T07:09:04.251Z","modifiedBy":"hradmin","imagingType":"B492AA26-22F2-52A9-93C7-17106A57A62E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"9F1A65ED-683F-056E-8D50-A8AF63201CE2","modifiedFields":{"radiologist":"2015-10-22T07:08:38.523Z","result":"2015-10-22T07:08:38.523Z","notes":"2015-10-22T07:08:38.523Z","status":"2015-10-22T07:08:59.403Z","requestedBy":"2015-10-22T07:08:38.523Z","requestedDate":"2015-10-22T07:08:38.523Z","imagingDate":"2015-10-22T07:09:04.251Z"},"charges":[]},"_revisions":{"start":3,"ids":["8b87996abf9161e5d7908be6676a64d7","9f159b24551a1fa5acd7b84cd8d51994","c676b60d0d69556786f283da75b51c77"]}},{"_id":"imaging_2_DBE152F6-9508-2E12-81AC-39BC2CAFE08C","_rev":"2-69b11e7856d8b0fc3bd62debbfca3e55","data":{"imagingDate":"2015-10-28T07:33:17.867Z","notes":"ss","radiologist":"ss","requestedBy":"hradmin","requestedDate":"2015-10-28T07:31:20.891Z","result":"sss","status":"Completed","lastModified":"2015-10-28T07:33:17.868Z","modifiedBy":"hradmin","imagingType":"F51616AE-EB96-2778-824F-386DEAFFD2F9","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"D6938BD3-6346-F62B-8B19-5207B2E5A6AF","modifiedFields":{"radiologist":"2015-10-28T07:31:21.091Z","result":"2015-10-28T07:31:21.091Z","notes":"2015-10-28T07:31:21.091Z","status":"2015-10-28T07:33:17.868Z","requestedBy":"2015-10-28T07:31:21.091Z","requestedDate":"2015-10-28T07:31:21.091Z","imagingDate":"2015-10-28T07:33:17.868Z"},"charges":[]},"_revisions":{"start":2,"ids":["69b11e7856d8b0fc3bd62debbfca3e55","222ad15ae5eed89c6d8abe1c9e07c145"]}},{"_id":"imaging_2_EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B","_rev":"2-63da6e42fb59a811a5468e32bda0eb76","data":{"imagingDate":"2015-10-28T07:33:05.759Z","notes":"hbjn","radiologist":"cgvhbn","requestedBy":"hradmin","requestedDate":"2015-10-28T07:27:44.346Z","result":"fcghvj","status":"Completed","lastModified":"2015-10-28T07:33:05.759Z","modifiedBy":"hradmin","imagingType":"C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","modifiedFields":{"radiologist":"2015-10-28T07:27:44.514Z","result":"2015-10-28T07:27:44.514Z","notes":"2015-10-28T07:27:44.514Z","status":"2015-10-28T07:33:05.759Z","requestedBy":"2015-10-28T07:27:44.514Z","requestedDate":"2015-10-28T07:27:44.514Z","imagingDate":"2015-10-28T07:33:05.759Z"},"charges":[]},"_revisions":{"start":2,"ids":["63da6e42fb59a811a5468e32bda0eb76","51a7194f0c4b6b172b5d0b059285e118"]}},{"_id":"invLocation_2_B7B86EC1-6CCE-30B7-B4ED-FF2061879E03","_rev":"3-28a915c1093e6e8497c2742a4806f926","data":{"quantity":950,"location":null,"aisleLocation":null,"lastModified":"2015-10-30T12:44:28.530Z","modifiedBy":"hradmin","modifiedFields":{"quantity":"2015-10-30T12:44:28.530Z"}},"_revisions":{"start":3,"ids":["28a915c1093e6e8497c2742a4806f926","6b49176eeeafb82a88a10aa5d954d965","e7ffcb12925c148d50279cc2ee012d25"]}},{"_id":"invPurchase_2_CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC","_rev":"2-4f1115c8c7b03b0bf06059d01e5ff7bd","data":{"purchaseCost":4000,"lotNumber":null,"dateReceived":"2015-10-28T22:00:00.000Z","originalQuantity":1000,"currentQuantity":950,"expirationDate":null,"expired":false,"location":null,"aisleLocation":null,"giftInKind":false,"inventoryItem":"igbmk5zf_is","vendor":"Alpha Pharmacy","vendorItemNo":null,"distributionUnit":null,"invoiceNo":null,"lastModified":"2015-10-30T12:44:28.533Z","modifiedBy":"hradmin","modifiedFields":{"dateReceived":"2015-10-29T02:44:10.493Z","purchaseCost":"2015-10-29T02:44:10.493Z","vendor":"2015-10-29T02:44:10.493Z","originalQuantity":"2015-10-29T02:44:10.493Z","currentQuantity":"2015-10-30T12:44:28.533Z","inventoryItem":"2015-10-29T02:44:10.493Z"}},"_revisions":{"start":2,"ids":["4f1115c8c7b03b0bf06059d01e5ff7bd","d0a2104fa76a4161da3f527b23a6d61a"]}},{"_id":"invRequest_2_4691AB2D-AEF3-1AA8-A11E-790BA5788239","_rev":"2-cf9eeeed6d9004aa0479660df622e08c","data":{"adjustPurchases":true,"completedBy":"hradmin","costPerUnit":4,"dateCompleted":"2015-10-29T22:00:00.000Z","dateRequested":"2015-10-29T08:35:51.495Z","deliveryAisle":"C100","deliveryLocation":"Harare","expenseAccount":"Accounts","markAsConsumed":true,"quantity":50,"quantityAtCompletion":1000,"reason":null,"requestedBy":"hradmin","status":"Completed","transactionType":"Fulfillment","lastModified":"2015-10-30T12:44:28.623Z","modifiedBy":"hradmin","inventoryItem":"igbmk5zf_is","patient":null,"visit":null,"locationsAffected":[{"name":"No Location","quantity":50}],"purchasesAffected":[{"id":"CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC","quantity":50}],"modifiedFields":{"transactionType":"2015-10-30T12:44:28.623Z","quantity":"2015-10-29T08:35:51.497Z","deliveryLocation":"2015-10-29T08:35:51.497Z","deliveryAisle":"2015-10-29T08:35:51.497Z","expenseAccount":"2015-10-29T08:35:51.497Z","dateRequested":"2015-10-29T08:35:51.497Z","requestedBy":"2015-10-29T08:35:51.497Z","status":"2015-10-30T12:44:28.623Z","dateCompleted":"2015-10-30T12:44:28.623Z","adjustPurchases":"2015-10-30T12:44:28.623Z","costPerUnit":"2015-10-30T12:44:28.623Z","quantityAtCompletion":"2015-10-30T12:44:28.623Z","purchasesAffected":"2015-10-30T12:44:28.623Z","locationsAffected":"2015-10-30T12:44:28.623Z","completedBy":"2015-10-30T12:44:28.623Z"}},"_revisions":{"start":2,"ids":["cf9eeeed6d9004aa0479660df622e08c","0e093fbeafc9c59eaeaaf0739ad56e13"]}},{"_id":"inventory_2_igbmk5zf_is","_rev":"2-586df5949f0c9046947fae0fcf009b6f","data":{"description":"Biogesic nga medisina","friendlyId":"m00001","name":"Biogesic","quantity":950,"crossReference":"2600","inventoryType":"Medication","price":5,"reorderPoint":100,"distributionUnit":"tablet","lastModified":"2015-10-30T12:44:28.620Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-29T02:44:10.610Z","inventoryType":"2015-10-29T02:44:10.610Z","crossReference":"2015-10-29T02:44:10.610Z","description":"2015-10-29T02:44:10.610Z","reorderPoint":"2015-10-29T02:44:10.610Z","price":"2015-10-29T02:44:10.610Z","distributionUnit":"2015-10-29T02:44:10.610Z","quantity":"2015-10-30T12:44:28.620Z","friendlyId":"2015-10-29T02:44:10.610Z"},"purchases":["CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC"],"locations":["B7B86EC1-6CCE-30B7-B4ED-FF2061879E03"]},"_revisions":{"start":2,"ids":["586df5949f0c9046947fae0fcf009b6f","26fffdb13350d70c54f01078f7ea7058"]}},{"_id":"lab_2_8F1C615D-8E59-5090-BC4A-BFA41C57FABE","_rev":"1-5cc96eeacaa8118793770bd5a80f0b4f","data":{"labDate":null,"notes":"Dr ordered another test","requestedBy":"hradmin","requestedDate":"2015-11-03T14:39:16.608Z","result":"Everything is clear","status":"Requested","lastModified":"2015-11-03T14:39:16.920Z","modifiedBy":"hradmin","labType":"5AB262C7-719D-19A6-ADC8-06CBA3088FA8","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"EC9C09F9-676F-AD32-AB61-DDAD615F2632","modifiedFields":{"result":"2015-11-03T14:39:16.920Z","notes":"2015-11-03T14:39:16.920Z","status":"2015-11-03T14:39:16.920Z","requestedBy":"2015-11-03T14:39:16.920Z","requestedDate":"2015-11-03T14:39:16.920Z"},"charges":[]}},{"_id":"lookup_2_aisle_location_list","_rev":"1-7257ef0f361f763b2692f692dab6bb7c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["C100"]}},{"_id":"lookup_2_expense_account_list","_rev":"1-bb8267ec5987084be9890734e55df7e0","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Accounts"]}},{"_id":"lookup_2_physician_list","_rev":"1-539fb71896153ad54253f5eb86f508cd","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Dr Test"]}},{"_id":"lookup_2_radiologists","_rev":"6-38c1cbc8559ef893d7ebd043e93ce427","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Mr Test","b","cgvhbn","fcgvb","ss","zinyando"]},"_revisions":{"start":6,"ids":["38c1cbc8559ef893d7ebd043e93ce427","515694dee3f8a35894f6287347485e40","10ef5b07a7d56f64ac26e84507484d41","33cff401403de9c1efd0a9edbec7e50b","cb3dd07e07a6fa2f9e9323b7e15c48fd","864e65b754e2ec13fe2eb8c452bce282"]}},{"_id":"lookup_2_vendor_list","_rev":"1-3b1a6a2565242e3db9cbdb6c579de2af","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Alpha Pharmacy"]}},{"_id":"lookup_2_visit_location_list","_rev":"1-578a5af6fd231a89f2fdeb1baae7036c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Harare"]}},{"_id":"lookup_2_warehouse_list","_rev":"1-578a5af6fd231a89f2fdeb1baae7036c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Harare"]}},{"_id":"patient_2_19A03BBC-71F3-9F39-8B18-15773F446731","_rev":"3-c021a07297d99585de08b3fd96719914","_deleted":true,"_revisions":{"start":3,"ids":["c021a07297d99585de08b3fd96719914","a7323c9135948b4689f52c01826affe2","6ed64fbe474b36dac7c8ac071e33786d"]}},{"_id":"patient_2_2D1BEC2C-EA03-E737-9EC9-D2AEAF2C9EE6","_rev":"2-a587941fb557366a6b87122548a9ba0c","_deleted":true,"_revisions":{"start":2,"ids":["a587941fb557366a6b87122548a9ba0c","0048675586c8e2fd24c8cc2edc545769"]}},{"_id":"patient_2_3C01C5E5-7E64-B147-88F9-D127903B31D7","_rev":"4-be8dd294f8df42bcf220e1a4372340fd","_deleted":true,"_revisions":{"start":4,"ids":["be8dd294f8df42bcf220e1a4372340fd","74d74986cffc330788b0fc5e47f40788","1ed40ad430dba87ec4c0773779fac6aa","34e84dc96007fc737d932ebf875ce340"]}},{"_id":"patient_2_423A476C-2012-6339-8FED-D2E404037268","_rev":"4-263b75936a4ead5058dc1e17535c536c","_deleted":true,"_revisions":{"start":4,"ids":["263b75936a4ead5058dc1e17535c536c","12c22dbd6548922b326bd28b2f05ddb0","a4a9b0e7ed53aea140c1d3259c9b1e94","15ebcd46a46d830899afc17450d4b229"]}},{"_id":"patient_2_519E056C-BF04-2A3F-84D2-8963EAD04261","_rev":"2-13e0330c4610ea3dc8a8dcb64a9b61ae","_deleted":true,"_revisions":{"start":2,"ids":["13e0330c4610ea3dc8a8dcb64a9b61ae","193c2c5d9fcb17698411febac4015547"]}},{"_id":"patient_2_5DD90350-3A67-F3B7-BB4A-A6837A667697","_rev":"2-812e681275f7181b96e1428d5b2eb555","_deleted":true,"_revisions":{"start":2,"ids":["812e681275f7181b96e1428d5b2eb555","a9b1e632e8d3f96d106873396f7f04de"]}},{"_id":"patient_2_63165A06-C866-A0C2-BB43-5DE9A0146737","_rev":"2-5989c5e25baace8df71d475ae164bf40","_deleted":true,"_revisions":{"start":2,"ids":["5989c5e25baace8df71d475ae164bf40","4178d1d23fb9d40a647d573026480dad"]}},{"_id":"patient_2_632DBDA3-5DBF-DDCC-A2C6-915E357319BA","_rev":"2-6ce428f8cdb8d1ea864f976c1ade08e4","_deleted":true,"_revisions":{"start":2,"ids":["6ce428f8cdb8d1ea864f976c1ade08e4","abe897a1411af9ce5df82d2ddbe726f2"]}},{"_id":"patient_2_688E30F1-E068-A2E3-8986-C224AF671CDD","_rev":"2-cb950343c60eb7116359fb50dc58fb87","_deleted":true,"_revisions":{"start":2,"ids":["cb950343c60eb7116359fb50dc58fb87","949f54bb01a90f17a91a7b392aecd58e"]}},{"_id":"patient_2_694DF805-F7CD-9513-9EF5-4CF8EE009BE9","_rev":"2-005d256252779d14fb83b9614a75d84f","_deleted":true,"_revisions":{"start":2,"ids":["005d256252779d14fb83b9614a75d84f","79cbdb6ba8075de8b19b61f4ebd194b2"]}},{"_id":"patient_2_9C269C48-EE3E-FBEC-9371-A235EEFDA40E","_rev":"2-6d94af1fdf669e3d012e3370c17c7d0f","_deleted":true,"_revisions":{"start":2,"ids":["6d94af1fdf669e3d012e3370c17c7d0f","ba40f943d16f3594cdf2a1c0e7ce36eb"]}},{"_id":"patient_2_9ED02049-6F10-E89D-9BAA-9C113B3AA6E4","_rev":"2-472c94a0e9c78fde3be4c15a71e0f336","_deleted":true,"_revisions":{"start":2,"ids":["472c94a0e9c78fde3be4c15a71e0f336","c61b0ba276e4c88cfda15ae4b5d0768b"]}},{"_id":"patient_2_BB4E9598-BD8B-528B-9D9E-AD9C3980787B","_rev":"3-957a69aebfae063d61ee8aaa55006803","_deleted":true,"_revisions":{"start":3,"ids":["957a69aebfae063d61ee8aaa55006803","0345093ba84e9c117c7dbb94b45edb8f","3e24d132e3bcc29db9d41a4d9f4296bf"]}},{"_id":"patient_2_C0361670-8B10-F212-9F51-B889D5BF92DF","_rev":"2-7b2217e2c2cb01610c32e0de44910282","_deleted":true,"_revisions":{"start":2,"ids":["7b2217e2c2cb01610c32e0de44910282","13ecb169a07f0e5a78a11209c26ede78"]}},{"_id":"patient_2_C680710A-BFBB-2868-8E5E-F4DD648CA24E","_rev":"2-d9acde506f230ec53a1cff9c97fe58bf","_deleted":true,"_revisions":{"start":2,"ids":["d9acde506f230ec53a1cff9c97fe58bf","9d954090afc2085fb97060446f8e4da0"]}},{"_id":"patient_2_E011AC5D-6F55-A16E-AB47-148E418071EE","_rev":"2-c263c9e9cf93e6d7b98f445b0d800809","_deleted":true,"_revisions":{"start":2,"ids":["c263c9e9cf93e6d7b98f445b0d800809","66c46fd3db8b057d58a35aba6ca99a5a"]}},{"_id":"patient_2_E54A8685-A36F-D1D1-B938-080545EABD0E","_rev":"2-a53992302cf7a33bad522d2dc5835b6e","_deleted":true,"_revisions":{"start":2,"ids":["a53992302cf7a33bad522d2dc5835b6e","5cebaf4e3ffef745a70ef22a1be1f0e8"]}},{"_id":"patient_2_E5EF1B7A-51B7-1610-BFBA-B1B21365C574","_rev":"2-182384c7dc0a26973583a692bfecbce8","_deleted":true,"_revisions":{"start":2,"ids":["182384c7dc0a26973583a692bfecbce8","497eb6ebf5074eeb32e2c02aab754a18"]}},{"_id":"patient_2_F3AA5446-1DE5-AC50-B9CF-B0D491E1D45E","_rev":"2-036325f33884580d2785dadf44527e25","_deleted":true,"_revisions":{"start":2,"ids":["036325f33884580d2785dadf44527e25","9eb866d5ca50209aec98d96470acce98"]}},{"_id":"pricing_2_22208FBE-9C6E-079D-A1E6-A562F9310FE5","_rev":"1-7f1b8398ae5dbed5782085efbfdf5ee8","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T09:39:37.879Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T09:39:37.879Z","category":"2015-10-15T09:39:37.879Z","pricingType":"2015-10-15T09:39:37.879Z"},"pricingOverrides":[]}},{"_id":"pricing_2_4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","_rev":"1-866a210b1d9063493c97d580845fc13d","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T10:37:57.867Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T10:37:57.867Z","category":"2015-10-15T10:37:57.867Z","pricingType":"2015-10-15T10:37:57.867Z"},"pricingOverrides":[]}},{"_id":"pricing_2_5AB262C7-719D-19A6-ADC8-06CBA3088FA8","_rev":"1-428c4aeffee433314c955d75e831332b","data":{"category":"Lab","expenseAccount":null,"name":"Chest","price":null,"pricingType":"Lab Procedure","lastModified":"2015-11-03T14:39:16.623Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-11-03T14:39:16.623Z","category":"2015-11-03T14:39:16.623Z","pricingType":"2015-11-03T14:39:16.623Z"},"pricingOverrides":[]}},{"_id":"pricing_2_B492AA26-22F2-52A9-93C7-17106A57A62E","_rev":"1-a03187de833a34d46302b5a740244353","data":{"category":"Imaging","expenseAccount":null,"name":"fghj","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-22T07:08:38.099Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-22T07:08:38.099Z","category":"2015-10-22T07:08:38.099Z","pricingType":"2015-10-22T07:08:38.099Z"},"pricingOverrides":[]}},{"_id":"pricing_2_C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","_rev":"1-fcefadf7300a60430090a0b91df95cce","data":{"category":"Imaging","expenseAccount":null,"name":"dfghn","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:27:44.358Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:27:44.358Z","category":"2015-10-28T07:27:44.358Z","pricingType":"2015-10-28T07:27:44.358Z"},"pricingOverrides":[]}},{"_id":"pricing_2_CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","_rev":"1-a34a6a2d89ae9d5cd57f532f8db1b02f","data":{"category":"Imaging","expenseAccount":null,"name":"hg","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-26T11:49:08.235Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-26T11:49:08.235Z","category":"2015-10-26T11:49:08.235Z","pricingType":"2015-10-26T11:49:08.235Z"},"pricingOverrides":[]}},{"_id":"pricing_2_E53305F3-BA40-B305-B2DC-0732C7AB0042","_rev":"1-5b2724a6d2dce84919a16388a8983a49","data":{"category":"Imaging","expenseAccount":null,"name":"Scan","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:23:34.851Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:23:34.851Z","category":"2015-10-28T07:23:34.851Z","pricingType":"2015-10-28T07:23:34.851Z"},"pricingOverrides":[]}},{"_id":"pricing_2_F51616AE-EB96-2778-824F-386DEAFFD2F9","_rev":"1-13d626d1730a99b3da4dee1a25146ddd","data":{"category":"Imaging","expenseAccount":null,"name":"sss","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:31:20.903Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:31:20.903Z","category":"2015-10-28T07:31:20.903Z","pricingType":"2015-10-28T07:31:20.903Z"},"pricingOverrides":[]}},{"_id":"sequence_2_inventory_Medication","_rev":"1-1acccea88a50973cbe8840a31911aa7c","data":{"prefix":"m","value":1}}]}\n{"seq":77}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"2-1fc384eae57485ff9100c0614780ab62","_deleted":true,"_revisions":{"start":2,"ids":["1fc384eae57485ff9100c0614780ab62","03951858f9232df2e774548b0f5fd068"]}},{"_id":"_design/appointments_by_date","_rev":"3-384efd51245c64e75b8307add874ff31","version":4,"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n      var i,\\n          filterBy = null,\\n          includeRow = true;\\n      if (req.query && req.query.filterBy) {\\n        filterBy = JSON.parse(req.query.filterBy);\\n      }\\n      if (!filterBy) {\\n        return true;\\n      }\\n      for (i = 0; i < filterBy.length; i++) {\\n        var currentValue = row.doc.data[filterBy[i].name];\\n        if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n          currentValue = \'Scheduled\';\\n        }\\n        if (currentValue !== filterBy[i].value) {\\n          includeRow = false;\\n          break;\\n        }\\n      }\\n      return includeRow;\\n    });rows.sort(function (a, b) {\\n      function defaultStatus(value) {\\n        if (!value || value === \'\') {\\n          return \'Scheduled\';\\n        } else {\\n          return value;\\n        }\\n      }\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'appointmentType\':\\n        case \'location\':\\n        case \'provider\':\\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n        case \'date\':\\n          {\\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n            if (startDiff === 0) {\\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n            } else {\\n              return startDiff;\\n            }\\n            break;\\n          }\\n        case \'status\':\\n          {\\n            var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                bStatus = defaultStatus(b.doc.data[sortBy]);\\n            return compareStrings(aStatus, bStatus);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":3,"ids":["384efd51245c64e75b8307add874ff31","32e2a3c0bdbdef4511fd301ea83e0b6e","3c37df4fed5a034aedc1a295f4a672fd"]}},{"_id":"_design/appointments_by_patient","_rev":"3-2c3d0116f9462d0945bba5d8092f1f13","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}},"_revisions":{"start":3,"ids":["2c3d0116f9462d0945bba5d8092f1f13","b07bbda1569b8575e3fb3f118584c0c2","9868b6586898a48c3fd68722ca3fe1d4"]}},{"_id":"_design/inventory_by_name","_rev":"2-48c47b3b2eb831a69fd6c3d0b9ad1713","_deleted":true,"_revisions":{"start":2,"ids":["48c47b3b2eb831a69fd6c3d0b9ad1713","3eb498726e0d057818618808c0db46bf"]}},{"_id":"_design/inventory_by_name","_rev":"3-7f9be41d3ceb65d74450e57d51152c10","version":3,"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'crossReference\':\\n        case \'description\':\\n        case \'friendlyId\':\\n        case \'name\':\\n        case \'price\':\\n        case \'quantity\':\\n        case \'inventoryType\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":3,"ids":["7f9be41d3ceb65d74450e57d51152c10","6970ab89b44af8c2703a89d6dea9b20b","304304d63beaffd8d1ae4ae1cddf4b2b"]}},{"_id":"_design/inventory_purchase_by_date_received","_rev":"3-0d58604e8df561f2a7e1f74df37aa699","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["0d58604e8df561f2a7e1f74df37aa699","65f020065c11403193b02742a05b91ae","78939ec45bef330bbfa87763dbbfce37"]}},{"_id":"lookup_2_sex","_rev":"1-c433c64d3ecf2a60e4539b1d1dc43d27","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Male"]}},{"_id":"patient_2_B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","_rev":"4-8c8179f150da9a8bb43bfd246f16f33b","data":{"admitted":true,"address":null,"address2":null,"address3":null,"address4":null,"bloodType":null,"clinic":null,"country":null,"dateOfBirth":null,"economicClassification":null,"email":null,"externalPatientId":null,"familySupport1":null,"familySupport2":null,"familySupport3":null,"familySupport4":null,"familySupport5":null,"friendlyId":"P00017","firstName":"Lennex","sex":"Male","history":null,"insurance":null,"lastName":"Zinyando","livingArrangement":null,"middleName":"","notes":null,"otherIncome":null,"patientType":null,"parent":null,"phone":null,"placeOfBirth":null,"referredDate":null,"referredBy":null,"religion":null,"socialActionTaken":null,"socialRecommendation":null,"status":null,"lastModified":"2016-02-22T22:02:54.249Z","modifiedBy":"Admin User","paymentProfile":null,"payments":[],"modifiedFields":{"friendlyId":"2015-10-06T10:56:52.507Z","firstName":"2015-10-06T10:56:52.507Z","middleName":"2015-10-06T10:56:52.507Z","lastName":"2015-10-06T10:56:52.507Z","admitted":"2015-11-03T07:08:13.749Z","sex":"2016-02-22T22:02:54.249Z"}},"_revisions":{"start":4,"ids":["8c8179f150da9a8bb43bfd246f16f33b","020fe2a48d4cbfcb78ce17b8dca2808a","09ad83b2ef8b869ecc41360ccee87e05","e5548781a44e741ceac358e5e3413d76"]}},{"_id":"photo_2_CF5189F1-5BDA-6896-B350-6A1A9B6A217B","_rev":"3-82a9b8e6b9f827259083f9bc560d9ee6","_deleted":true,"_revisions":{"start":3,"ids":["82a9b8e6b9f827259083f9bc560d9ee6","ee9b1e0283b24f4a02b00f92ed70f0ab","5ee18d0589c4ac578fe4e8a5350f725b"]}},{"_id":"photo_2_D2B805B1-8F22-B5D2-956B-AFF6372D18FF","_rev":"3-734e1f5956d3d438f8ba6e187aa4d97f","_deleted":true,"_revisions":{"start":3,"ids":["734e1f5956d3d438f8ba6e187aa4d97f","f574559c84a634ca88d1d10d41c93953","112ad019aa78ef8e06584c9109a9a850"]}},{"_id":"sequence_2_patient","_rev":"130-943328c138b701637a579574f516e90b","data":{"prefix":null,"value":130},"_revisions":{"start":130,"ids":["943328c138b701637a579574f516e90b","b527a87cb4f86205dcc62a9ea0fa7a63","973262d1b9be91e82f997cf103481c55","44582fef141bcd8b558595514d3ba0ff","4a8d8f8ca25aa960aef16e5c1e489b81","2a48a9bc803b0d60b5018c07017aedeb","fe6186b5bd38fce211c0dc76ef4a619b","4d41059d2cd8accf225fce92edbbc428","449ad29c390c73126670290e2a351dce","ef33fac6f75c92df977deadcefd2ea21","bde0d0a9a34c662a05458f1d379c6038","4e2b60d439b5001f0562aaa5e836de72","9b7cf30a3a428b0ffbc5c08469b60dc4","fdfa70107c954a955eddc00f1710a412","acb0081b558f7dfc06520ce59abdca9d","b611e8c2f6823f040262e4e983aa8b3e","803c06167d785dca413153687432b9da","e2c71646996df37f91cabb3881395db4","e07b6a9914e89ef9b68e6412801e47db","5c4e63e3ec27823d46d7048c34f1035c","85c90147d202a4eb1a047e2633fdc911","e7dae8e43e473a4b347f5c22161844b4","471182bdd694919456395e3b8ee81d85","c45ce9b872e266344359c0637f9dd5d0","962ad8bf64b30813c4fef6958e83e3f3","5b281c4ea003d026419d35d05dd0b87a","9ed77096845040620cd2354c1ed74001","409143da04d5575669e515f6214f6220","c35ff5c786890aa0005b360749cefdd2","48cba21a512868f2c8e3beb5646ff1c1","58fcaf249567f43db62a1c77a1440b8e","71c619fe66ac2a2246708c6733e7af9e","0e2a21c17d44457443a58dd2db6824fb","7449d0f1ba104902ca08b888dfdc546f","20f7d87b7b4a5326bb93f84c11ae627d","bef379849a35ec5a7408f26a83026e2b","5dd124839c582c23e9279eda6f821796","15a041f1e149ae2989eba580b93969b0","93e7694e1741666512f83bd1bd5064f3","002edd9949b2993af6ce18817d0bc666","a8795752b4a5c9e587d5bbbd05ef41d4","c6f60912813f86724b49110221b713fe","728c2adfea6754b048f7acae42edd25f","b1ddbe8c27e77a561d22fec546349409","923830cdb237b3ba2088779642bca716","85f7e7891658b988333439ee84dfcd39","a52f2c92c951c2c7266a9ad170d3ae9d","79cfca9fdd7b6cdae2396862f103599e","87221151cfb4cb5bbdf73eb694a7eb34","f1c5faf2bc8f82ec5a29071b6156e5e2","84612c5298273469c586955ee8427555","cc81c865b33cf6d967bde9ff60b9af6d","8b16de2d23b9c7e216215085a08caea8","8be1c3c951d7c2355f910f785cac2534","696488469a9aa721643875029f6de938","04ffb420af095d229c45a69d0e1c56c2","f8fc0538d0eacb22a767c9eb449f4c84","6adb4264d4dd3b13829ffc7e17ba58c2","f50856bf682db17eee3d3cafb366a6be","743e61dcfce262c16251ed396ee76eb7","4fcdf09a763ec5da89d41dab6dd9edc8","912874972749c40ea838145828c14173","fd8c5a0d7662b27c8cbdfbfdd45ee32d","173fe5c207973de53fd984078bbd73a2","4e9ef14c62f9312cd0fb1b47e7fabe1e","ce6f1f9584656970cfd92f1e361e2fed","cf8cf83cf02c266b75af0bc69467a07f","5816c2ba418d387facd7b6ed0a0e6054","b3839c763f128f2ccf99cfb874a2413e","68b05605500c0109d046a56680a5a7a1","a13d320fed2c85ed0b173d6645ec0274","ba1dad02a90e4ac18632c1a53a90b759","c5e7e81e97d0fc7d0797bd9822685176","b580fcf4f4291b408f4dda64a4bdec96","bb1a562af157e3c24d23c3e2f1171b29","e9f245d9566dd9e116caf7d074792d36","30b587f2b5204d237572c86a545756fb","7df53a1742b52647118fec21f331e94d","0a4c120f78fa5899d0cea5d87d92c9b0","e62f1b02721a75fd1ea290da9acdc199","3e39b429ea4cda00c9ac9d3f0b61029c","038d82911c8979c0cd58e807871a09ca","618d916a14cfa55aa8e65d42b3761ca5","8d24a6b355e64a680f0f03ab0f738b8c","999e1fa6e5175dad02e4f2db0cd41843","782e7a1c4097f1aa1d117a7fbd01c443","67b3c03ea8609652c494a22242ce5a1f","3b1fc1b83a352ef9c672110a69306064","8a0da1966531daede44592906bf8df99","279e844131c96ca7b647cacfa3508022","42733f5f658de7ee440c02286fd4e21c","e3a50044a3cb2ac901b5b65653d0fc7f","b7fb5627bee7f642f8e608be1bb1e859","2fdb16832a0ed61b7f9e780750b70898","e38f4adbab987a8c628599ea9052ca44","7ece3f9fcff7b57b28f1237ba1107a0f","8fb6c171e3c6a345d199a8884e42951a","c76709145ca58dfcf67c1f397b772689","76182e657f0b0aa6fa07bf5491d2b427","ab161b88c332f3df338f1f4aa2b2e307","e00a3184b07c0459cf4ebdeb825f991f","cee6a3aac677927abaf3ae61508954a2","86bed2b62e1e6b6f98790ecafefcc17f","ae44899fdbc41d69076ec6a8f7563181","61cce97f5cd6ff092f28fe9ec9da4f27","f9008b952322c32322ef0e7e42fdf383","8fdecd159563a90d7cbc9c9aedc3068f","9b1f0f8f0e4db1f8931d290966f3bc3c","a9b5402ea07343a1b6d5612312e07a34","25ef3d2573778c3ebda4ef7860fe310f","3e39e8d6ceabb2079042e81613858906","b4e15c555737aa9573724407ce84b667","b2538362e8afb57e3e11e5231ae60d5d","04add3d3926f54232b0e0ed7a9fc141a","e924dcf4bb51c7c552538273e08901bb","77b6f226033c656d3a9768085ff3e80a","676dd4835b46e8f62ec2ce5908d1c60a","762481b2c71611cce80a5a9ef03aa48d","b9b73bf1d2df1598cc164089375ed7bc","0a581f677e6d8f7a484fa0a80156d95b","6b51cfdb83336973df284e4d5c2f308b","4a27247e93fabb86b6a5a9676f47ec8e","8b542908965798dd683a68f507635a83","515d8987a1e11acb866ede87612b53b1","d19e3759adc65398cf6a42a61345cdae","ac63c129bee25dc4c59a639e2721fb81","17c1209032c06df436ad0a4fa76723cc","f0ef6923c78e739d9228517a4813b646","f9a8fd6c55cd4e5fb0064b7767586e05","5bc31ffefa482f2e66299cf0704623c8"]}},{"_id":"visit_2_0312A352-EF8B-C1A2-B9DF-3EC932C96AD8","_rev":"2-8eb7818cb7b808ea467b2e60f0a6a5e2","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Discharged","visitType":"Admission","lastModified":"2015-11-03T07:43:21.662Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:31:15.853Z","startDate":"2015-11-03T07:31:15.853Z","status":"2015-11-03T07:43:21.662Z","outPatient":"2015-11-03T07:31:15.853Z","endDate":"2015-11-03T07:43:21.662Z","location":"2015-11-03T07:31:15.853Z","examiner":"2015-11-03T07:31:15.853Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["8eb7818cb7b808ea467b2e60f0a6a5e2","3036466a87ec0a9967be1433386b0bdc"]}},{"_id":"visit_2_07AF1E0E-3CB2-3837-990C-968158E25235","_rev":"1-ce894ba889d506531e4cb2a36394cab4","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:46:16.594Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:46:16.594Z","startDate":"2015-11-03T07:46:16.594Z","status":"2015-11-03T07:46:16.594Z","outPatient":"2015-11-03T07:46:16.594Z","endDate":"2015-11-03T07:46:16.594Z","location":"2015-11-03T07:46:16.594Z","examiner":"2015-11-03T07:46:16.594Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_0B84AF59-A182-5840-9E7A-CEF7633D4071","_rev":"1-ce3b40be34d77ec1d9c29ccb99a7e905","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:37:46.164Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:37:46.164Z","startDate":"2015-11-03T07:37:46.164Z","status":"2015-11-03T07:37:46.164Z","outPatient":"2015-11-03T07:37:46.164Z","endDate":"2015-11-03T07:37:46.164Z","location":"2015-11-03T07:37:46.164Z","examiner":"2015-11-03T07:37:46.164Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","_rev":"2-0ddd43cbcc57cc5d6ff082a283d881ac","data":{"dischargeInfo":null,"endDate":"2015-10-15T10:37:57.902Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T10:37:57.902Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T10:37:57.915Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T10:37:57.915Z","endDate":"2015-10-15T10:37:57.915Z","outPatient":"2015-10-15T10:37:57.915Z","visitType":"2015-10-15T10:37:57.915Z"},"charges":[],"imaging":["1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["0ddd43cbcc57cc5d6ff082a283d881ac","e4540f9cf2a236335662116d4e0a66da"]}},{"_id":"visit_2_13340816-9F02-846D-85C3-C3278561BA23","_rev":"1-6ce02a99e4868c5a5bdb88a23f9ff400","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:24:20.451Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:24:20.451Z","startDate":"2015-11-03T07:24:20.451Z","status":"2015-11-03T07:24:20.451Z","outPatient":"2015-11-03T07:24:20.451Z","endDate":"2015-11-03T07:24:20.451Z","location":"2015-11-03T07:24:20.451Z","examiner":"2015-11-03T07:24:20.451Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_15759FA2-6691-6EF3-9636-21570F400F04","_rev":"1-d28274492b5b3cd306c3d38e535388a7","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:38:17.049Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:38:17.049Z","startDate":"2015-11-03T07:38:17.049Z","status":"2015-11-03T07:38:17.049Z","outPatient":"2015-11-03T07:38:17.049Z","endDate":"2015-11-03T07:38:17.049Z","location":"2015-11-03T07:38:17.049Z","examiner":"2015-11-03T07:38:17.049Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_17AB2BCF-5F9F-30FB-8B80-9FB82E51D0B3","_rev":"1-bc13c64ebb47144840cc91ce3087ebd6","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:23:03.461Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:23:03.461Z","startDate":"2015-11-03T07:23:03.461Z","status":"2015-11-03T07:23:03.461Z","outPatient":"2015-11-03T07:23:03.461Z","endDate":"2015-11-03T07:23:03.461Z","location":"2015-11-03T07:23:03.461Z","examiner":"2015-11-03T07:23:03.461Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_1800A65C-861C-CCA5-85C5-16950322C7E0","_rev":"1-a67e8d8a018844ef176184947055b683","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:40:08.177Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:40:08.177Z","startDate":"2015-11-03T07:40:08.177Z","status":"2015-11-03T07:40:08.177Z","outPatient":"2015-11-03T07:40:08.177Z","endDate":"2015-11-03T07:40:08.177Z","location":"2015-11-03T07:40:08.177Z","examiner":"2015-11-03T07:40:08.177Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_1EBA7E42-F96D-C5E2-923C-2F842FDFE714","_rev":"1-8fd6cfa23288f7394ce94970c4b3a8c2","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:19:45.676Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:19:45.676Z","startDate":"2015-11-03T07:19:45.676Z","status":"2015-11-03T07:19:45.676Z","outPatient":"2015-11-03T07:19:45.676Z","endDate":"2015-11-03T07:19:45.676Z","location":"2015-11-03T07:19:45.676Z","examiner":"2015-11-03T07:19:45.676Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_2D795EA3-DAEF-AA15-8846-607A873AD1AF","_rev":"1-4c665c9221069fe72f9d66ac458e92df","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:28:51.490Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:28:51.490Z","startDate":"2015-11-03T07:28:51.490Z","status":"2015-11-03T07:28:51.490Z","outPatient":"2015-11-03T07:28:51.490Z","endDate":"2015-11-03T07:28:51.490Z","location":"2015-11-03T07:28:51.490Z","examiner":"2015-11-03T07:28:51.490Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","_rev":"2-ee5b0686e20e1011d11b3051b93e7a93","data":{"dischargeInfo":null,"endDate":"2015-10-15T09:39:37.940Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T09:39:37.940Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T09:39:37.948Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T09:39:37.948Z","endDate":"2015-10-15T09:39:37.948Z","outPatient":"2015-10-15T09:39:37.948Z","visitType":"2015-10-15T09:39:37.948Z"},"charges":[],"imaging":["07CC6746-C7D9-A410-9B8C-C4B4E095A96D"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["ee5b0686e20e1011d11b3051b93e7a93","5fee255cf57220ddf1c19977118a540e"]}},{"_id":"visit_2_3A8FE46D-2CE6-C74E-98BB-ECFECB8F4AB9","_rev":"1-4c2559b35790501b6fae26a031a59cad","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:42:11.759Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:42:11.759Z","startDate":"2015-11-03T07:42:11.759Z","status":"2015-11-03T07:42:11.759Z","outPatient":"2015-11-03T07:42:11.759Z","endDate":"2015-11-03T07:42:11.759Z","location":"2015-11-03T07:42:11.759Z","examiner":"2015-11-03T07:42:11.759Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_50FD1C68-0889-0867-99D1-CFFDB3223154","_rev":"1-85d776e0088793e80073525cf6b7a501","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:47:59.399Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:47:59.399Z","startDate":"2015-11-03T07:47:59.399Z","status":"2015-11-03T07:47:59.399Z","outPatient":"2015-11-03T07:47:59.399Z","endDate":"2015-11-03T07:47:59.399Z","location":"2015-11-03T07:47:59.399Z","examiner":"2015-11-03T07:47:59.399Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_53E986EB-4C23-9B3B-B8D7-2C7A7ECDBC33","_rev":"1-fb5ce8d11793c3da21e06d1f88e48d00","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:23:24.134Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:23:24.134Z","startDate":"2015-11-03T07:23:24.134Z","status":"2015-11-03T07:23:24.134Z","outPatient":"2015-11-03T07:23:24.134Z","endDate":"2015-11-03T07:23:24.134Z","location":"2015-11-03T07:23:24.134Z","examiner":"2015-11-03T07:23:24.134Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_542BB0F0-27BB-7C5C-99BC-28B013DDB837","_rev":"1-6e3af7515e9b2d7fbcec6264b9194a17","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:32:40.937Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:32:40.937Z","startDate":"2015-11-03T07:32:40.937Z","status":"2015-11-03T07:32:40.937Z","outPatient":"2015-11-03T07:32:40.937Z","endDate":"2015-11-03T07:32:40.937Z","location":"2015-11-03T07:32:40.937Z","examiner":"2015-11-03T07:32:40.937Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_560E25D9-9736-BA05-B2A6-4555A93B2628","_rev":"2-04c2d6343f6d2a10ad1f891718cecab5","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:08:13.698Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:08:13.698Z","startDate":"2015-11-03T07:08:13.698Z","status":"2015-11-03T07:08:13.698Z","outPatient":"2015-11-03T07:08:13.698Z","endDate":"2015-11-03T07:08:13.698Z","location":"2015-11-03T07:08:13.698Z","examiner":"2015-11-03T07:08:13.698Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["04c2d6343f6d2a10ad1f891718cecab5","6bbe45974af0b60410ea29026a38e2ec"]}},{"_id":"visit_2_59F8FB60-9956-E93F-826D-11618BC95E13","_rev":"1-8489694a221cd2c43e7c39fdcaa89700","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:41:35.597Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:41:35.597Z","startDate":"2015-11-03T07:41:35.597Z","status":"2015-11-03T07:41:35.597Z","outPatient":"2015-11-03T07:41:35.597Z","endDate":"2015-11-03T07:41:35.597Z","location":"2015-11-03T07:41:35.597Z","examiner":"2015-11-03T07:41:35.597Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_5F404B11-D8B6-CE18-9557-2B563BCFD2F8","_rev":"1-2637dc1d6c95364743de0c97c7fb443d","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:34:38.929Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:34:38.929Z","startDate":"2015-11-03T07:34:38.929Z","status":"2015-11-03T07:34:38.929Z","outPatient":"2015-11-03T07:34:38.929Z","endDate":"2015-11-03T07:34:38.929Z","location":"2015-11-03T07:34:38.929Z","examiner":"2015-11-03T07:34:38.929Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_6AD00ED1-670A-2C3F-BC10-0742B1F99264","_rev":"2-9bf9856192b6c8ef34d2fcdb27296593","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:39:18.257Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:39:18.257Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:39:18.275Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:39:18.275Z","endDate":"2015-10-28T07:39:18.275Z","outPatient":"2015-10-28T07:39:18.275Z","visitType":"2015-10-28T07:39:18.275Z"},"charges":[],"imaging":["91B061E9-2986-D539-90C8-CD14EC2010B0"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["9bf9856192b6c8ef34d2fcdb27296593","e50477b58f5edd257b9ce20ea65b1bca"]}},{"_id":"visit_2_6D126583-2852-25C2-A352-E5BA4CBBD106","_rev":"1-222d722266f5d407204eb411f68ab4f0","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:20:56.778Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:20:56.778Z","startDate":"2015-11-03T07:20:56.778Z","status":"2015-11-03T07:20:56.778Z","outPatient":"2015-11-03T07:20:56.778Z","endDate":"2015-11-03T07:20:56.778Z","location":"2015-11-03T07:20:56.778Z","examiner":"2015-11-03T07:20:56.778Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","_rev":"2-c24a52b04610b293fff293b18dd0bb15","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:27:44.394Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:27:44.394Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:27:44.406Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:27:44.406Z","endDate":"2015-10-28T07:27:44.406Z","outPatient":"2015-10-28T07:27:44.406Z","visitType":"2015-10-28T07:27:44.406Z"},"charges":[],"imaging":["EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["c24a52b04610b293fff293b18dd0bb15","5a6ae8f033eb99448ad898f164d822e8"]}},{"_id":"visit_2_7916D533-54AE-55EB-8DE7-E4B83A4BBAB2","_rev":"1-269d23778ac6f89244ff93d17c73352c","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:46:45.358Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:46:45.358Z","startDate":"2015-11-03T07:46:45.358Z","status":"2015-11-03T07:46:45.358Z","outPatient":"2015-11-03T07:46:45.358Z","endDate":"2015-11-03T07:46:45.358Z","location":"2015-11-03T07:46:45.358Z","examiner":"2015-11-03T07:46:45.358Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_817CE5FB-FF79-B05D-8296-2FCE91B125CD","_rev":"1-410079742e88e59e0598107fd9ef40c1","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:33:16.393Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:33:16.393Z","startDate":"2015-11-03T07:33:16.393Z","status":"2015-11-03T07:33:16.393Z","outPatient":"2015-11-03T07:33:16.393Z","endDate":"2015-11-03T07:33:16.393Z","location":"2015-11-03T07:33:16.393Z","examiner":"2015-11-03T07:33:16.393Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_90FCADB8-7109-3906-94A3-269F29CFAB69","_rev":"1-7a8189c07dde6b9bf498545cdaa3e621","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:31:49.176Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:31:49.176Z","startDate":"2015-11-03T07:31:49.176Z","status":"2015-11-03T07:31:49.176Z","outPatient":"2015-11-03T07:31:49.176Z","endDate":"2015-11-03T07:31:49.176Z","location":"2015-11-03T07:31:49.176Z","examiner":"2015-11-03T07:31:49.176Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_9C962DF7-E239-966B-A47B-15F405899B62","_rev":"1-d5bc412bfa629333e6cd79c978ea8218","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:25:27.802Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:25:27.802Z","startDate":"2015-11-03T07:25:27.802Z","status":"2015-11-03T07:25:27.802Z","outPatient":"2015-11-03T07:25:27.802Z","endDate":"2015-11-03T07:25:27.802Z","location":"2015-11-03T07:25:27.802Z","examiner":"2015-11-03T07:25:27.802Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_9E627361-BA73-210A-8E76-2FA13B559DB9","_rev":"1-30a87dbc678b99d42b1a90bebff97834","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:21:48.053Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:21:48.053Z","startDate":"2015-11-03T07:21:48.053Z","status":"2015-11-03T07:21:48.053Z","outPatient":"2015-11-03T07:21:48.053Z","endDate":"2015-11-03T07:21:48.053Z","location":"2015-11-03T07:21:48.053Z","examiner":"2015-11-03T07:21:48.053Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_9F1A65ED-683F-056E-8D50-A8AF63201CE2","_rev":"2-e19734a8deff62722e6e023af4b8e130","data":{"dischargeInfo":null,"endDate":"2015-10-22T07:08:38.175Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-22T07:08:38.175Z","status":null,"visitType":"Imaging","lastModified":"2015-10-22T07:08:38.189Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-22T07:08:38.189Z","endDate":"2015-10-22T07:08:38.189Z","outPatient":"2015-10-22T07:08:38.189Z","visitType":"2015-10-22T07:08:38.189Z"},"charges":[],"imaging":["D0F299E4-CD8D-557D-8C23-216FD23EF844"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["e19734a8deff62722e6e023af4b8e130","bd81a41820526c8c0450ee544867c6fa"]}},{"_id":"visit_2_A6E37F8D-F740-8B01-93C9-D476A886E030","_rev":"1-d094eb56a680b4a8a6a354bd48d6bfe2","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:42:53.782Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:42:53.782Z","startDate":"2015-11-03T07:42:53.782Z","status":"2015-11-03T07:42:53.782Z","outPatient":"2015-11-03T07:42:53.782Z","endDate":"2015-11-03T07:42:53.782Z","location":"2015-11-03T07:42:53.782Z","examiner":"2015-11-03T07:42:53.782Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_AAB85ADA-7058-DF7A-9244-C6B60A2EF743","_rev":"1-1bd78b61646023aacce18b1efaa27646","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:39:09.272Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:39:09.272Z","startDate":"2015-11-03T07:39:09.272Z","status":"2015-11-03T07:39:09.272Z","outPatient":"2015-11-03T07:39:09.272Z","endDate":"2015-11-03T07:39:09.272Z","location":"2015-11-03T07:39:09.272Z","examiner":"2015-11-03T07:39:09.272Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_C15054D2-D062-DB01-A96D-80ED1B8F8CBD","_rev":"1-5a9a0e7eafe911586556666ad1a2bd27","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:46:09.735Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:46:09.735Z","startDate":"2015-11-03T07:46:09.735Z","status":"2015-11-03T07:46:09.735Z","outPatient":"2015-11-03T07:46:09.735Z","endDate":"2015-11-03T07:46:09.735Z","location":"2015-11-03T07:46:09.735Z","examiner":"2015-11-03T07:46:09.735Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_C5C296AC-E238-CBA5-8DD8-99942843BC5A","_rev":"2-57e6740d8dac593d790cd7f76c4ad0c3","data":{"dischargeInfo":null,"endDate":"2015-10-26T11:49:08.277Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-26T11:49:08.277Z","status":null,"visitType":"Imaging","lastModified":"2015-10-26T11:49:08.282Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-26T11:49:08.282Z","endDate":"2015-10-26T11:49:08.282Z","outPatient":"2015-10-26T11:49:08.282Z","visitType":"2015-10-26T11:49:08.282Z"},"charges":[],"imaging":["4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["57e6740d8dac593d790cd7f76c4ad0c3","253e8d9f8c0865cb3e9ffd1f6849bcde"]}},{"_id":"visit_2_CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","_rev":"2-f781f118fd87b036d8cbfbf7771cda99","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:23:34.906Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:23:34.906Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:23:34.914Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:23:34.914Z","endDate":"2015-10-28T07:23:34.914Z","outPatient":"2015-10-28T07:23:34.914Z","visitType":"2015-10-28T07:23:34.914Z"},"charges":[],"imaging":["51D8DC28-78EB-62B1-942A-1158F5862F34"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["f781f118fd87b036d8cbfbf7771cda99","e2b8bf1f76ea01c32b414c184905511e"]}},{"_id":"visit_2_D6938BD3-6346-F62B-8B19-5207B2E5A6AF","_rev":"2-631f62b5121ccfcd1a8de2bc9d3d252f","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:31:20.941Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:31:20.941Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:31:20.953Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:31:20.953Z","endDate":"2015-10-28T07:31:20.953Z","outPatient":"2015-10-28T07:31:20.953Z","visitType":"2015-10-28T07:31:20.953Z"},"charges":[],"imaging":["DBE152F6-9508-2E12-81AC-39BC2CAFE08C"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["631f62b5121ccfcd1a8de2bc9d3d252f","8b46887d52e3043d742262fc03ff48b8"]}},{"_id":"visit_2_D845EA6E-C4CD-3657-A6F6-3E40FE02B069","_rev":"1-16657f6b4014bf268d63323ed8832a56","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:50:55.344Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:50:55.344Z","startDate":"2015-11-03T07:50:55.344Z","status":"2015-11-03T07:50:55.344Z","outPatient":"2015-11-03T07:50:55.344Z","endDate":"2015-11-03T07:50:55.344Z","location":"2015-11-03T07:50:55.344Z","examiner":"2015-11-03T07:50:55.344Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_DA661CAB-1BB5-3119-B9DD-0A92D7C3913B","_rev":"1-ecb23bc4c60a32dd627969637f85d1fb","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:19:15.689Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:19:15.689Z","startDate":"2015-11-03T07:19:15.689Z","status":"2015-11-03T07:19:15.689Z","outPatient":"2015-11-03T07:19:15.689Z","endDate":"2015-11-03T07:19:15.689Z","location":"2015-11-03T07:19:15.689Z","examiner":"2015-11-03T07:19:15.689Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_E66983BC-BFB9-E361-A59F-AAC966A0FD3B","_rev":"1-8d0f4af9593120f2dfd0371303239e2b","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:15:24.456Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:15:24.456Z","startDate":"2015-11-03T07:15:24.456Z","status":"2015-11-03T07:15:24.456Z","outPatient":"2015-11-03T07:15:24.456Z","endDate":"2015-11-03T07:15:24.456Z","location":"2015-11-03T07:15:24.456Z","examiner":"2015-11-03T07:15:24.456Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_E8E7BD06-13EB-AA68-BBE2-51B9EEE85257","_rev":"1-c54a6aea31c6c3805edc706b4ed64d40","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:30:31.501Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:30:31.501Z","startDate":"2015-11-03T07:30:31.501Z","status":"2015-11-03T07:30:31.501Z","outPatient":"2015-11-03T07:30:31.501Z","endDate":"2015-11-03T07:30:31.501Z","location":"2015-11-03T07:30:31.501Z","examiner":"2015-11-03T07:30:31.501Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_E90C9A07-74D2-0589-8DDC-C94B09E0F238","_rev":"1-7a3d4f0d4056960dabad849d1da9bd7c","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:22:15.702Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:22:15.702Z","startDate":"2015-11-03T07:22:15.702Z","status":"2015-11-03T07:22:15.702Z","outPatient":"2015-11-03T07:22:15.702Z","endDate":"2015-11-03T07:22:15.702Z","location":"2015-11-03T07:22:15.702Z","examiner":"2015-11-03T07:22:15.702Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_EC9C09F9-676F-AD32-AB61-DDAD615F2632","_rev":"2-8ce10f08748bebcd2df0267258ec2433","data":{"dischargeInfo":null,"endDate":"2015-11-03T14:39:16.671Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-03T14:39:16.671Z","status":null,"visitType":"Lab","lastModified":"2015-11-03T14:39:16.679Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-11-03T14:39:16.679Z","endDate":"2015-11-03T14:39:16.679Z","outPatient":"2015-11-03T14:39:16.679Z","visitType":"2015-11-03T14:39:16.679Z"},"charges":[],"imaging":[],"labs":["8F1C615D-8E59-5090-BC4A-BFA41C57FABE"],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["8ce10f08748bebcd2df0267258ec2433","4a113155a529e6200ba18813cd922ad0"]}},{"_id":"visit_2_EF0D793D-346D-242A-8F4D-589448DA49A6","_rev":"1-413ff66d683c532d2be4cfa04632343c","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:26:35.010Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:26:35.010Z","startDate":"2015-11-03T07:26:35.010Z","status":"2015-11-03T07:26:35.010Z","outPatient":"2015-11-03T07:26:35.010Z","endDate":"2015-11-03T07:26:35.010Z","location":"2015-11-03T07:26:35.010Z","examiner":"2015-11-03T07:26:35.010Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_F9D51E3F-E938-1F24-9B19-D76F03E56892","_rev":"1-9e4fb077c716ccd6b149953e4c005aae","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:17:22.667Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:17:22.667Z","startDate":"2015-11-03T07:17:22.667Z","status":"2015-11-03T07:17:22.667Z","outPatient":"2015-11-03T07:17:22.667Z","endDate":"2015-11-03T07:17:22.667Z","location":"2015-11-03T07:17:22.667Z","examiner":"2015-11-03T07:17:22.667Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}}]}\n{"seq":172}\n{"docs":[{"_id":"_design/imaging_by_status","_rev":"3-ed2e6ee8dd0c31542cd651be11c27d30","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["ed2e6ee8dd0c31542cd651be11c27d30","26b4791796949ad78268d383e39a1ee5","9236042e1fb9f567d1d527bbb429cd8e"]}},{"_id":"_design/inventory_by_type","_rev":"3-5e78c81a3f3acc2cd577f4743233b5f6","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}},"_revisions":{"start":3,"ids":["5e78c81a3f3acc2cd577f4743233b5f6","2f0df4e3dc8ba6d384f896efd4a272cf","003ef699ab0f2b8628c0bf613fabf7a2"]}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"3-018a00a593301ef97818b36d89501387","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["018a00a593301ef97818b36d89501387","d900cddd5fcc673d77fbd2f6d783475d","17bd9d3619ae03155d9929d3ebcd5023"]}},{"_id":"_design/inventory_request_by_item","_rev":"3-0040cb66e900e1886780881cdbb5ec39","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}},"_revisions":{"start":3,"ids":["0040cb66e900e1886780881cdbb5ec39","c2f0efb7a0a9b3ece1cf9b7b0e88d37f","7e7ef275a9fc15f2b5f328b1479c6097"]}},{"_id":"_design/inventory_request_by_status","_rev":"3-0d7f2c75a57d13685e096bdbe9b42c20","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["0d7f2c75a57d13685e096bdbe9b42c20","0338b756f9c3471052577cadc4ed9505","187394c79d3206e11e112891f0d63550"]}},{"_id":"_design/invoice_by_status","_rev":"3-cf3a304d6172c15cc8ecfe3f6b4857ff","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["cf3a304d6172c15cc8ecfe3f6b4857ff","cda5e78ae504f4aaf101cc43d434d5ab","73e3e45673ed0c4f4ae1cee855f216f0"]}},{"_id":"_design/lab_by_status","_rev":"3-2ccbba6e4057a9b83d103aedefc00188","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["2ccbba6e4057a9b83d103aedefc00188","9fdf54dfbf4c6b9136d6addf5e624fcc","db4393c6856b98a40afd6ceef31db2a7"]}},{"_id":"_design/medication_by_status","_rev":"3-3284bca2c5c65c2518fddfb7f7868d16","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["3284bca2c5c65c2518fddfb7f7868d16","7949d287e31bd3487aa205ae3b23a352","36ce9e9853552f5eb646ed26de7184dc"]}},{"_id":"_design/patient_by_display_id","_rev":"2-3f200c7d54cda6b4fea8699bc1a3e6d0","_deleted":true,"_revisions":{"start":2,"ids":["3f200c7d54cda6b4fea8699bc1a3e6d0","e6d44a1448953362319c910bf33a8668"]}},{"_id":"_design/patient_by_display_id","_rev":"3-02ebb613cc059e0541a8bc9e0c999df4","version":5,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'sex\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":3,"ids":["02ebb613cc059e0541a8bc9e0c999df4","eae82996b36349ac1fce13b33546eaec","0b75ee7c82a1aadebd0bc0fd403622fb"]}},{"_id":"_design/patient_by_status","_rev":"3-56954022c675ccc9a4cd9f7807717559","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}},"_revisions":{"start":3,"ids":["56954022c675ccc9a4cd9f7807717559","9409c5c4fa24c2247009585f9d4a6833","ff26a12cdb8747aae5bf26f9af3a1953"]}},{"_id":"_design/photo_by_patient","_rev":"3-fa45a9cbe22c09f221ff666d54413588","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}},"_revisions":{"start":3,"ids":["fa45a9cbe22c09f221ff666d54413588","8f2b02b810676cb5af00f6e34aff987e","e3dc5506f7f370535b85be0adc59c7cc"]}},{"_id":"_design/pricing_by_category","_rev":"3-5462fbacd302cd763c692fb70c0eb521","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["5462fbacd302cd763c692fb70c0eb521","68d447e856a6194de82dcd9e506569ae","23d44e44019170eadd086734c87e3976"]}},{"_id":"_design/procedure_by_date","_rev":"3-3ad96e6c81fdac90bc4a3a1ccbe93047","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["3ad96e6c81fdac90bc4a3a1ccbe93047","5b5eb6c8ca33d0d3ff9c1f6ee70eb04c","25ccef2a9dff3addd8c0d15cc79c363c"]}},{"_id":"_design/sequence_by_prefix","_rev":"3-3909b0733e3185594d978e8a1cbe96bc","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}},"_revisions":{"start":3,"ids":["3909b0733e3185594d978e8a1cbe96bc","7c153bf61fed5e6742224f9df92cf676","8ac3a62b4c0b624ebed3b68b27cd197e"]}},{"_id":"_design/visit_by_date","_rev":"3-92b1278be8c3eecc884da20ef05ce626","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["92b1278be8c3eecc884da20ef05ce626","add6c18db9db449d2af501f6f3fc9a68","367a7fa42f1067f645190d560f83ef5e"]}},{"_id":"_design/visit_by_discharge_date","_rev":"3-ddcfa99c875a0579775dfa3a0c98aa3f","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["ddcfa99c875a0579775dfa3a0c98aa3f","6670d76cab3888a8c2c2a399beb1764f","e53c95160dacaf007fe01c01215729ce"]}},{"_id":"_design/visit_by_patient","_rev":"3-91f492ce3aab5449a7fb4ad4bbffea95","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}},"_revisions":{"start":3,"ids":["91f492ce3aab5449a7fb4ad4bbffea95","048bd179b127054d3279071160a6f314","412252178488867e2350dcd13da779ea"]}}]}\n{"seq":189}\n';
});
define('hospitalrun/tests/fixtures/medication', ['exports'], function (exports) {
  exports['default'] = '{"version":"1.2.5","db_type":"http","start_time":"2016-02-22T22:17:54.514Z","db_info":{"db_name":"main","doc_count":98,"doc_del_count":21,"update_seq":125,"purge_seq":0,"compact_running":false,"disk_size":77935,"data_size":72871,"instance_start_time":"1456179199466657","disk_format_version":6,"committed_update_seq":125,"host":"http://localhost:5984/main/","auto_compaction":false,"adapter":"http"}}\n{"docs":[{"_id":"_design/appointments_by_patient","_rev":"1-9868b6586898a48c3fd68722ca3fe1d4","version":3,"views":{"appointments_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate,doc._id]);}}}"}}}]}\n{"seq":1}\n{"docs":[{"_id":"_design/imaging_by_status","_rev":"1-9236042e1fb9f567d1d527bbb429cd8e","version":3,"views":{"imaging_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"imaging\\") {var imagingDate = doc.data.imagingDate;if (imagingDate && imagingDate !== \\"\\") {imagingDate = new Date(imagingDate);if (imagingDate.getTime) {imagingDate = imagingDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, imagingDate, doc._id]);}}}"}}}]}\n{"seq":2}\n{"docs":[{"_id":"_design/appointments_by_date","_rev":"1-3c37df4fed5a034aedc1a295f4a672fd","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n            var i,\\n                filterBy = null,\\n                includeRow = true;\\n            if (req.query && req.query.filterBy) {\\n                filterBy = JSON.parse(req.query.filterBy);\\n            }\\n            if (!filterBy) {\\n                return true;\\n            }\\n            for (i = 0; i < filterBy.length; i++) {\\n                var currentValue = row.doc[filterBy[i].name];\\n                if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n                    currentValue = \'Scheduled\';\\n                }\\n                if (currentValue !== filterBy[i].value) {\\n                    includeRow = false;\\n                    break;\\n                }\\n            }\\n            return includeRow;\\n        });rows.sort(function (a, b) {\\n            function defaultStatus(value) {\\n                if (!value || value === \'\') {\\n                    return \'Scheduled\';\\n                } else {\\n                    return value;\\n                }\\n            }\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'appointmentType\':\\n                case \'location\':\\n                case \'provider\':\\n                    return compareStrings(a.doc[sortBy], b.doc[sortBy]);\\n                case \'date\':\\n                    {\\n                        var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n                        if (startDiff === 0) {\\n                            return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n                        } else {\\n                            return startDiff;\\n                        }\\n                        break;\\n                    }\\n                case \'status\':\\n                    {\\n                        var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                            bStatus = defaultStatus(b.doc.data[sortBy]);\\n                        return compareStrings(aStatus, bStatus);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"_revisions":{"start":1,"ids":["3c37df4fed5a034aedc1a295f4a672fd"]}},{"_id":"_design/appointments_by_date","_rev":"1-03951858f9232df2e774548b0f5fd068","version":4,"views":{"appointments_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"appointment\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows = rows.filter(function (row) {\\n      var i,\\n          filterBy = null,\\n          includeRow = true;\\n      if (req.query && req.query.filterBy) {\\n        filterBy = JSON.parse(req.query.filterBy);\\n      }\\n      if (!filterBy) {\\n        return true;\\n      }\\n      for (i = 0; i < filterBy.length; i++) {\\n        var currentValue = row.doc.data[filterBy[i].name];\\n        if (filterBy[i].name === \'status\' && (!currentValue || currentValue === \'\')) {\\n          currentValue = \'Scheduled\';\\n        }\\n        if (currentValue !== filterBy[i].value) {\\n          includeRow = false;\\n          break;\\n        }\\n      }\\n      return includeRow;\\n    });rows.sort(function (a, b) {\\n      function defaultStatus(value) {\\n        if (!value || value === \'\') {\\n          return \'Scheduled\';\\n        } else {\\n          return value;\\n        }\\n      }\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'appointmentType\':\\n        case \'location\':\\n        case \'provider\':\\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n        case \'date\':\\n          {\\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\\n            if (startDiff === 0) {\\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\\n            } else {\\n              return startDiff;\\n            }\\n            break;\\n          }\\n        case \'status\':\\n          {\\n            var aStatus = defaultStatus(a.doc.data[sortBy]),\\n                bStatus = defaultStatus(b.doc.data[sortBy]);\\n            return compareStrings(aStatus, bStatus);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["03951858f9232df2e774548b0f5fd068"]}},{"_id":"_design/inventory_by_name","_rev":"1-3eb498726e0d057818618808c0db46bf","version":3,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'crossReference\':\\n                case \'description\':\\n                case \'friendlyId\':\\n                case \'name\':\\n                case \'price\':\\n                case \'quantity\':\\n                case \'inventoryType\':\\n                    {\\n                        return compareStrings(a.doc[sortBy], b.doc[sortBy]);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"_revisions":{"start":1,"ids":["3eb498726e0d057818618808c0db46bf"]}},{"_id":"_design/inventory_by_name","_rev":"1-304304d63beaffd8d1ae4ae1cddf4b2b","version":3,"views":{"inventory_by_name":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit([doc.data.name, doc._id]);}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'crossReference\':\\n        case \'description\':\\n        case \'friendlyId\':\\n        case \'name\':\\n        case \'price\':\\n        case \'quantity\':\\n        case \'inventoryType\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["304304d63beaffd8d1ae4ae1cddf4b2b"]}},{"_id":"_design/inventory_by_type","_rev":"1-003ef699ab0f2b8628c0bf613fabf7a2","version":4,"views":{"inventory_by_type":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"inventory\\") {emit(doc.data.inventoryType);}}}"}}},{"_id":"_design/inventory_purchase_by_date_received","_rev":"1-78939ec45bef330bbfa87763dbbfce37","version":4,"views":{"inventory_purchase_by_date_received":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var dateReceived = doc.data.dateReceived;if (dateReceived && dateReceived !== \\"\\") {dateReceived = new Date(dateReceived);if (dateReceived.getTime) {dateReceived = dateReceived.getTime();}}emit([dateReceived, doc._id]);}}}"}}},{"_id":"_design/inventory_purchase_by_expiration_date","_rev":"1-17bd9d3619ae03155d9929d3ebcd5023","version":4,"views":{"inventory_purchase_by_expiration_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invPurchase\\") {var expirationDate = doc.data.expirationDate;if (expirationDate && expirationDate !== \\"\\") {expirationDate = new Date(expirationDate);if (expirationDate.getTime) {expirationDate = expirationDate.getTime();}}emit([expirationDate, doc._id]);}}}"}}},{"_id":"_design/inventory_request_by_item","_rev":"1-7e7ef275a9fc15f2b5f328b1479c6097","version":4,"views":{"inventory_request_by_item":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);}}}"}}},{"_id":"_design/inventory_request_by_status","_rev":"1-187394c79d3206e11e112891f0d63550","version":4,"views":{"inventory_request_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invRequest\\") {var dateCompleted = doc.data.dateCompleted;if (dateCompleted && dateCompleted !== \\"\\") {dateCompleted = new Date(dateCompleted);if (dateCompleted.getTime) {dateCompleted = dateCompleted.getTime();}}emit([doc.data.status, dateCompleted, doc._id]);}}}"}}},{"_id":"_design/invoice_by_status","_rev":"1-73e3e45673ed0c4f4ae1cee855f216f0","version":3,"views":{"invoice_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"invoice\\") {var billDate = doc.data.billDate;if (billDate && billDate !== \\"\\") {billDate = new Date(billDate);if (billDate.getTime) {billDate = billDate.getTime();}}emit([doc.data.status, billDate, doc._id]);}}}"}}},{"_id":"_design/lab_by_status","_rev":"1-db4393c6856b98a40afd6ceef31db2a7","version":3,"views":{"lab_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"lab\\") {var labDate = doc.data.labDate;if (labDate && labDate !== \\"\\") {labDate = new Date(labDate);if (labDate.getTime) {labDate = labDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, labDate, doc._id]);}}}"}}},{"_id":"_design/medication_by_status","_rev":"1-36ce9e9853552f5eb646ed26de7184dc","version":3,"views":{"medication_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"medication\\") {var prescriptionDate = doc.data.prescriptionDate;if (prescriptionDate && prescriptionDate !== \\"\\") {prescriptionDate = new Date(prescriptionDate);if (prescriptionDate.getTime) {prescriptionDate = prescriptionDate.getTime();}}var requestedDate = doc.data.requestedDate;if (requestedDate && requestedDate !== \\"\\") {requestedDate = new Date(requestedDate);if (requestedDate.getTime) {requestedDate = requestedDate.getTime();}}emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);}}}"}}},{"_id":"_design/patient_by_display_id","_rev":"1-e6d44a1448953362319c910bf33a8668","version":4,"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n            var sortBy = \'\';\\n            if (req.query && req.query.sortKey) {\\n                sortBy = req.query.sortKey;\\n            }\\n            switch (sortBy) {\\n                case \'firstName\':\\n                case \'gender\':\\n                case \'lastName\':\\n                case \'status\':\\n                    {\\n                        return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n                    }\\n                case \'dateOfBirth\':\\n                    {\\n                        return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n                    }\\n                default:\\n                    {\\n                        return 0; //Don\'t sort\\n                    }\\n            }\\n        });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"_revisions":{"start":1,"ids":["e6d44a1448953362319c910bf33a8668"]}},{"_id":"_design/patient_by_display_id","_rev":"1-0b75ee7c82a1aadebd0bc0fd403622fb","version":5,"views":{"patient_by_display_id":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {if (doc.data.friendlyId) {emit([doc.data.friendlyId, doc._id]);} else if (doc.data.externalPatientId) {emit([doc.data.externalPatientId, doc._id]);} else {emit([doc._id, doc._id]);}}}}"}},"lists":{"sort":"function(head, req) {function keysEqual(keyA, keyB) {for (var i= 0; i < keyA.length; i++) {if (keyA[i] !== keyB[i]) {return false;}}return true;}function getCompareDate(dateString) {if (!dateString || dateString === \\"\\") {return 0;}return new Date(dateString).getTime();}function compareStrings(aString, bString) {if (!aString) {aString = \\"\\";}if (!bString) {bString = \\"\\";}if (aString < bString) {return -1;} else if (aString > bString) {return 1;} else {return 0;}}var row,rows=[],startingPosition = 0;while(row = getRow()) {rows.push(row);}rows.sort(function (a, b) {\\n      var sortBy = \'\';\\n      if (req.query && req.query.sortKey) {\\n        sortBy = req.query.sortKey;\\n      }\\n      switch (sortBy) {\\n        case \'firstName\':\\n        case \'sex\':\\n        case \'lastName\':\\n        case \'status\':\\n          {\\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\\n          }\\n        case \'dateOfBirth\':\\n          {\\n            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\\n          }\\n        default:\\n          {\\n            return 0; // Don\'t sort\\n          }\\n      }\\n    });if (req.query.sortStartKey) {var startKey = JSON.parse(req.query.sortStartKey);for (var i=0; i<rows.length; i++) {if (keysEqual(startKey, rows[i].key)) {startingPosition = i;break;}}}if (req.query.sortDesc) {rows = rows.reverse();}if (req.query.sortLimit) {rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);} else if (startingPosition > 0) {rows = rows.slice(startingPosition);}send(JSON.stringify({\\"rows\\" : rows}));}"},"_revisions":{"start":1,"ids":["0b75ee7c82a1aadebd0bc0fd403622fb"]}},{"_id":"_design/patient_by_status","_rev":"1-ff26a12cdb8747aae5bf26f9af3a1953","version":2,"views":{"patient_by_status":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"patient\\") {emit(doc.data.status);}}}"}}},{"_id":"_design/photo_by_patient","_rev":"1-e3dc5506f7f370535b85be0adc59c7cc","version":3,"views":{"photo_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"photo\\") {emit(doc.data.patient);}}}"}}},{"_id":"_design/pricing_by_category","_rev":"1-23d44e44019170eadd086734c87e3976","version":4,"views":{"pricing_by_category":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"pricing\\") {emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);}}}"}}},{"_id":"_design/procedure_by_date","_rev":"1-25ccef2a9dff3addd8c0d15cc79c363c","version":3,"views":{"procedure_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"procedure\\") {var procedureDate = doc.data.procedureDate;if (procedureDate && procedureDate !== \\"\\") {procedureDate = new Date(procedureDate);if (procedureDate.getTime) {procedureDate = procedureDate.getTime();}}emit([procedureDate, doc._id]);}}}"}}},{"_id":"_design/sequence_by_prefix","_rev":"1-8ac3a62b4c0b624ebed3b68b27cd197e","version":3,"views":{"sequence_by_prefix":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"sequence\\") {emit(doc.data.prefix);}}}"}}},{"_id":"_design/visit_by_date","_rev":"1-367a7fa42f1067f645190d560f83ef5e","version":3,"views":{"visit_by_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([startDate, endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_discharge_date","_rev":"1-e53c95160dacaf007fe01c01215729ce","version":1,"views":{"visit_by_discharge_date":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}emit([endDate, doc._id]);}}}"}}},{"_id":"_design/visit_by_patient","_rev":"1-412252178488867e2350dcd13da779ea","version":3,"views":{"visit_by_patient":{"map":"function(doc) {var doctype,uidx;if (doc._id && (uidx = doc._id.indexOf(\\"_\\")) > 0) {doctype = doc._id.substring(0, uidx);if(doctype === \\"visit\\") {var endDate = doc.data.endDate;if (endDate && endDate !== \\"\\") {endDate = new Date(endDate);if (endDate.getTime) {endDate = endDate.getTime();}}var startDate = doc.data.startDate;if (startDate && startDate !== \\"\\") {startDate = new Date(startDate);if (startDate.getTime) {startDate = startDate.getTime();}}emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);}}}"}}},{"_id":"appointment_2_D0C3934D-E023-66E4-97D4-FC58F3595409","_rev":"1-5775c0c9cdf58099fa3ae4197634505f","data":{"allDay":true,"provider":"Dr Test","location":"Harare","appointmentType":"Admission","startDate":"2015-10-29T22:00:00.000Z","endDate":"2015-10-29T22:00:00.000Z","notes":"Admission","status":"Scheduled","lastModified":"2015-10-30T15:08:29.970Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"allDay":"2015-10-30T15:08:29.970Z","startDate":"2015-10-30T15:08:29.970Z","endDate":"2015-10-30T15:08:29.970Z","provider":"2015-10-30T15:08:29.970Z","location":"2015-10-30T15:08:29.970Z","appointmentType":"2015-10-30T15:08:29.970Z","notes":"2015-10-30T15:08:29.970Z"}}},{"_id":"appointment_2_EE5D1ABE-2625-645B-9F84-5B0DD4B4D5EC","_rev":"1-1bb336da899bbd4807cde6620d630bd1","data":{"allDay":true,"provider":"Dr Test","location":"Harare","appointmentType":"Admission","startDate":"2015-11-02T22:00:00.000Z","endDate":"2015-11-02T22:00:00.000Z","notes":"Basic Checkup","status":"Scheduled","lastModified":"2015-11-03T06:50:48.404Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"allDay":"2015-11-03T06:50:48.404Z","startDate":"2015-11-03T06:50:48.404Z","endDate":"2015-11-03T06:50:48.404Z","appointmentType":"2015-11-03T06:50:48.404Z","provider":"2015-11-03T06:50:48.404Z","location":"2015-11-03T06:50:48.404Z","notes":"2015-11-03T06:50:48.404Z"}}},{"_id":"imaging_2_07CC6746-C7D9-A410-9B8C-C4B4E095A96D","_rev":"2-ffa7adb60618346cba98a559d81df36a","data":{"imagingDate":"2015-10-15T09:39:44.603Z","notes":"random notes","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T09:39:37.866Z","result":"to collect","status":"Completed","lastModified":"2015-10-15T09:39:44.603Z","modifiedBy":"hradmin","imagingType":"22208FBE-9C6E-079D-A1E6-A562F9310FE5","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","modifiedFields":{"radiologist":"2015-10-15T09:39:38.088Z","result":"2015-10-15T09:39:38.088Z","notes":"2015-10-15T09:39:38.088Z","status":"2015-10-15T09:39:44.603Z","requestedBy":"2015-10-15T09:39:38.088Z","requestedDate":"2015-10-15T09:39:38.088Z","imagingDate":"2015-10-15T09:39:44.603Z"},"charges":[]},"_revisions":{"start":2,"ids":["ffa7adb60618346cba98a559d81df36a","be0a6780ba1f2b7e3e8d49ebf20ed8d6"]}},{"_id":"imaging_2_1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB","_rev":"1-83a3398c448faf2ea1962004c5652a52","data":{"imagingDate":null,"notes":"jkmn","radiologist":"zinyando","requestedBy":"hradmin","requestedDate":"2015-10-15T10:37:57.852Z","result":"hu","status":"Requested","lastModified":"2015-10-15T10:37:58.038Z","modifiedBy":"hradmin","imagingType":"4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","modifiedFields":{"radiologist":"2015-10-15T10:37:58.038Z","result":"2015-10-15T10:37:58.038Z","notes":"2015-10-15T10:37:58.038Z","status":"2015-10-15T10:37:58.038Z","requestedBy":"2015-10-15T10:37:58.038Z","requestedDate":"2015-10-15T10:37:58.038Z"},"charges":[]}},{"_id":"imaging_2_4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99","_rev":"2-0ddb54b6d0376b87fdf409eb6d205f82","data":{"imagingDate":"2015-10-28T07:32:45.311Z","notes":null,"radiologist":null,"requestedBy":"hradmin","requestedDate":"2015-10-26T11:49:08.227Z","result":null,"status":"Completed","lastModified":"2015-10-28T07:32:45.314Z","modifiedBy":"hradmin","imagingType":"CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"C5C296AC-E238-CBA5-8DD8-99942843BC5A","modifiedFields":{"status":"2015-10-28T07:32:45.314Z","requestedBy":"2015-10-26T11:49:08.483Z","requestedDate":"2015-10-26T11:49:08.483Z","imagingDate":"2015-10-28T07:32:45.314Z"},"charges":[]},"_revisions":{"start":2,"ids":["0ddb54b6d0376b87fdf409eb6d205f82","0cefb2d2a3e8ba76052c1a08c27df1eb"]}},{"_id":"imaging_2_51D8DC28-78EB-62B1-942A-1158F5862F34","_rev":"2-40eac78a67beecaa77b17ea5e7481866","data":{"imagingDate":"2015-10-28T07:32:55.293Z","notes":"Chest is ok","radiologist":"Mr Test","requestedBy":"hradmin","requestedDate":"2015-10-28T07:23:34.834Z","result":"Ok","status":"Completed","lastModified":"2015-10-28T07:32:55.294Z","modifiedBy":"hradmin","imagingType":"E53305F3-BA40-B305-B2DC-0732C7AB0042","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","modifiedFields":{"radiologist":"2015-10-28T07:23:35.055Z","result":"2015-10-28T07:23:35.055Z","notes":"2015-10-28T07:23:35.055Z","status":"2015-10-28T07:32:55.294Z","requestedBy":"2015-10-28T07:23:35.055Z","requestedDate":"2015-10-28T07:23:35.055Z","imagingDate":"2015-10-28T07:32:55.294Z"},"charges":[]},"_revisions":{"start":2,"ids":["40eac78a67beecaa77b17ea5e7481866","fb212193dfed510d7935aed17e5f0456"]}},{"_id":"imaging_2_91B061E9-2986-D539-90C8-CD14EC2010B0","_rev":"1-2abe559a8f8075862b282ed4f9d54da5","data":{"imagingDate":null,"notes":"jbkj","radiologist":"b","requestedBy":"hradmin","requestedDate":"2015-10-28T07:39:18.255Z","result":"jjjk","status":"Requested","lastModified":"2015-10-28T07:39:18.406Z","modifiedBy":"hradmin","imagingType":null,"patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"6AD00ED1-670A-2C3F-BC10-0742B1F99264","modifiedFields":{"radiologist":"2015-10-28T07:39:18.406Z","result":"2015-10-28T07:39:18.406Z","notes":"2015-10-28T07:39:18.406Z","status":"2015-10-28T07:39:18.406Z","requestedBy":"2015-10-28T07:39:18.406Z","requestedDate":"2015-10-28T07:39:18.406Z"},"charges":[]}},{"_id":"imaging_2_D0F299E4-CD8D-557D-8C23-216FD23EF844","_rev":"3-8b87996abf9161e5d7908be6676a64d7","data":{"imagingDate":"2015-10-22T07:09:04.249Z","notes":"vbj nkm","radiologist":"fcgvb","requestedBy":"hradmin","requestedDate":"2015-10-22T07:08:38.080Z","result":"cgvhbj n","status":"Completed","lastModified":"2015-10-22T07:09:04.251Z","modifiedBy":"hradmin","imagingType":"B492AA26-22F2-52A9-93C7-17106A57A62E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"9F1A65ED-683F-056E-8D50-A8AF63201CE2","modifiedFields":{"radiologist":"2015-10-22T07:08:38.523Z","result":"2015-10-22T07:08:38.523Z","notes":"2015-10-22T07:08:38.523Z","status":"2015-10-22T07:08:59.403Z","requestedBy":"2015-10-22T07:08:38.523Z","requestedDate":"2015-10-22T07:08:38.523Z","imagingDate":"2015-10-22T07:09:04.251Z"},"charges":[]},"_revisions":{"start":3,"ids":["8b87996abf9161e5d7908be6676a64d7","9f159b24551a1fa5acd7b84cd8d51994","c676b60d0d69556786f283da75b51c77"]}},{"_id":"imaging_2_DBE152F6-9508-2E12-81AC-39BC2CAFE08C","_rev":"2-69b11e7856d8b0fc3bd62debbfca3e55","data":{"imagingDate":"2015-10-28T07:33:17.867Z","notes":"ss","radiologist":"ss","requestedBy":"hradmin","requestedDate":"2015-10-28T07:31:20.891Z","result":"sss","status":"Completed","lastModified":"2015-10-28T07:33:17.868Z","modifiedBy":"hradmin","imagingType":"F51616AE-EB96-2778-824F-386DEAFFD2F9","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"D6938BD3-6346-F62B-8B19-5207B2E5A6AF","modifiedFields":{"radiologist":"2015-10-28T07:31:21.091Z","result":"2015-10-28T07:31:21.091Z","notes":"2015-10-28T07:31:21.091Z","status":"2015-10-28T07:33:17.868Z","requestedBy":"2015-10-28T07:31:21.091Z","requestedDate":"2015-10-28T07:31:21.091Z","imagingDate":"2015-10-28T07:33:17.868Z"},"charges":[]},"_revisions":{"start":2,"ids":["69b11e7856d8b0fc3bd62debbfca3e55","222ad15ae5eed89c6d8abe1c9e07c145"]}},{"_id":"imaging_2_EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B","_rev":"2-63da6e42fb59a811a5468e32bda0eb76","data":{"imagingDate":"2015-10-28T07:33:05.759Z","notes":"hbjn","radiologist":"cgvhbn","requestedBy":"hradmin","requestedDate":"2015-10-28T07:27:44.346Z","result":"fcghvj","status":"Completed","lastModified":"2015-10-28T07:33:05.759Z","modifiedBy":"hradmin","imagingType":"C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","modifiedFields":{"radiologist":"2015-10-28T07:27:44.514Z","result":"2015-10-28T07:27:44.514Z","notes":"2015-10-28T07:27:44.514Z","status":"2015-10-28T07:33:05.759Z","requestedBy":"2015-10-28T07:27:44.514Z","requestedDate":"2015-10-28T07:27:44.514Z","imagingDate":"2015-10-28T07:33:05.759Z"},"charges":[]},"_revisions":{"start":2,"ids":["63da6e42fb59a811a5468e32bda0eb76","51a7194f0c4b6b172b5d0b059285e118"]}},{"_id":"invLocation_2_B7B86EC1-6CCE-30B7-B4ED-FF2061879E03","_rev":"3-28a915c1093e6e8497c2742a4806f926","data":{"quantity":950,"location":null,"aisleLocation":null,"lastModified":"2015-10-30T12:44:28.530Z","modifiedBy":"hradmin","modifiedFields":{"quantity":"2015-10-30T12:44:28.530Z"}},"_revisions":{"start":3,"ids":["28a915c1093e6e8497c2742a4806f926","6b49176eeeafb82a88a10aa5d954d965","e7ffcb12925c148d50279cc2ee012d25"]}},{"_id":"invPurchase_2_CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC","_rev":"2-4f1115c8c7b03b0bf06059d01e5ff7bd","data":{"purchaseCost":4000,"lotNumber":null,"dateReceived":"2015-10-28T22:00:00.000Z","originalQuantity":1000,"currentQuantity":950,"expirationDate":null,"expired":false,"location":null,"aisleLocation":null,"giftInKind":false,"inventoryItem":"igbmk5zf_is","vendor":"Alpha Pharmacy","vendorItemNo":null,"distributionUnit":null,"invoiceNo":null,"lastModified":"2015-10-30T12:44:28.533Z","modifiedBy":"hradmin","modifiedFields":{"dateReceived":"2015-10-29T02:44:10.493Z","purchaseCost":"2015-10-29T02:44:10.493Z","vendor":"2015-10-29T02:44:10.493Z","originalQuantity":"2015-10-29T02:44:10.493Z","currentQuantity":"2015-10-30T12:44:28.533Z","inventoryItem":"2015-10-29T02:44:10.493Z"}},"_revisions":{"start":2,"ids":["4f1115c8c7b03b0bf06059d01e5ff7bd","d0a2104fa76a4161da3f527b23a6d61a"]}},{"_id":"invRequest_2_4691AB2D-AEF3-1AA8-A11E-790BA5788239","_rev":"2-cf9eeeed6d9004aa0479660df622e08c","data":{"adjustPurchases":true,"completedBy":"hradmin","costPerUnit":4,"dateCompleted":"2015-10-29T22:00:00.000Z","dateRequested":"2015-10-29T08:35:51.495Z","deliveryAisle":"C100","deliveryLocation":"Harare","expenseAccount":"Accounts","markAsConsumed":true,"quantity":50,"quantityAtCompletion":1000,"reason":null,"requestedBy":"hradmin","status":"Completed","transactionType":"Fulfillment","lastModified":"2015-10-30T12:44:28.623Z","modifiedBy":"hradmin","inventoryItem":"igbmk5zf_is","patient":null,"visit":null,"locationsAffected":[{"name":"No Location","quantity":50}],"purchasesAffected":[{"id":"CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC","quantity":50}],"modifiedFields":{"transactionType":"2015-10-30T12:44:28.623Z","quantity":"2015-10-29T08:35:51.497Z","deliveryLocation":"2015-10-29T08:35:51.497Z","deliveryAisle":"2015-10-29T08:35:51.497Z","expenseAccount":"2015-10-29T08:35:51.497Z","dateRequested":"2015-10-29T08:35:51.497Z","requestedBy":"2015-10-29T08:35:51.497Z","status":"2015-10-30T12:44:28.623Z","dateCompleted":"2015-10-30T12:44:28.623Z","adjustPurchases":"2015-10-30T12:44:28.623Z","costPerUnit":"2015-10-30T12:44:28.623Z","quantityAtCompletion":"2015-10-30T12:44:28.623Z","purchasesAffected":"2015-10-30T12:44:28.623Z","locationsAffected":"2015-10-30T12:44:28.623Z","completedBy":"2015-10-30T12:44:28.623Z"}},"_revisions":{"start":2,"ids":["cf9eeeed6d9004aa0479660df622e08c","0e093fbeafc9c59eaeaaf0739ad56e13"]}},{"_id":"inventory_2_igbmk5zf_is","_rev":"2-586df5949f0c9046947fae0fcf009b6f","data":{"description":"Biogesic nga medisina","friendlyId":"m00001","name":"Biogesic","quantity":950,"crossReference":"2600","inventoryType":"Medication","price":5,"reorderPoint":100,"distributionUnit":"tablet","lastModified":"2015-10-30T12:44:28.620Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-29T02:44:10.610Z","inventoryType":"2015-10-29T02:44:10.610Z","crossReference":"2015-10-29T02:44:10.610Z","description":"2015-10-29T02:44:10.610Z","reorderPoint":"2015-10-29T02:44:10.610Z","price":"2015-10-29T02:44:10.610Z","distributionUnit":"2015-10-29T02:44:10.610Z","quantity":"2015-10-30T12:44:28.620Z","friendlyId":"2015-10-29T02:44:10.610Z"},"purchases":["CDC3AB7D-A0AD-E146-87A4-FDB1096C2EEC"],"locations":["B7B86EC1-6CCE-30B7-B4ED-FF2061879E03"]},"_revisions":{"start":2,"ids":["586df5949f0c9046947fae0fcf009b6f","26fffdb13350d70c54f01078f7ea7058"]}},{"_id":"lab_2_8F1C615D-8E59-5090-BC4A-BFA41C57FABE","_rev":"1-5cc96eeacaa8118793770bd5a80f0b4f","data":{"labDate":null,"notes":"Dr ordered another test","requestedBy":"hradmin","requestedDate":"2015-11-03T14:39:16.608Z","result":"Everything is clear","status":"Requested","lastModified":"2015-11-03T14:39:16.920Z","modifiedBy":"hradmin","labType":"5AB262C7-719D-19A6-ADC8-06CBA3088FA8","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"EC9C09F9-676F-AD32-AB61-DDAD615F2632","modifiedFields":{"result":"2015-11-03T14:39:16.920Z","notes":"2015-11-03T14:39:16.920Z","status":"2015-11-03T14:39:16.920Z","requestedBy":"2015-11-03T14:39:16.920Z","requestedDate":"2015-11-03T14:39:16.920Z"},"charges":[]}},{"_id":"lookup_2_aisle_location_list","_rev":"1-7257ef0f361f763b2692f692dab6bb7c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["C100"]}},{"_id":"lookup_2_expense_account_list","_rev":"1-bb8267ec5987084be9890734e55df7e0","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Accounts"]}},{"_id":"lookup_2_physician_list","_rev":"1-539fb71896153ad54253f5eb86f508cd","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Dr Test"]}},{"_id":"lookup_2_radiologists","_rev":"6-38c1cbc8559ef893d7ebd043e93ce427","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Mr Test","b","cgvhbn","fcgvb","ss","zinyando"]},"_revisions":{"start":6,"ids":["38c1cbc8559ef893d7ebd043e93ce427","515694dee3f8a35894f6287347485e40","10ef5b07a7d56f64ac26e84507484d41","33cff401403de9c1efd0a9edbec7e50b","cb3dd07e07a6fa2f9e9323b7e15c48fd","864e65b754e2ec13fe2eb8c452bce282"]}},{"_id":"lookup_2_vendor_list","_rev":"1-3b1a6a2565242e3db9cbdb6c579de2af","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Alpha Pharmacy"]}},{"_id":"lookup_2_visit_location_list","_rev":"1-578a5af6fd231a89f2fdeb1baae7036c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Harare"]}},{"_id":"lookup_2_warehouse_list","_rev":"1-578a5af6fd231a89f2fdeb1baae7036c","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Harare"]}},{"_id":"medication_2_35DC84B9-C25B-4C83-A287-D1DEC2FC6028","_rev":"1-03630e954041324546dba2254b04afd2","data":{"notes":null,"prescription":"60 Biogesic Pills","prescriptionDate":"2015-11-08T22:00:00.000Z","quantity":60,"refills":null,"requestedDate":"2015-11-09T10:09:25.619Z","requestedBy":"hradmin","status":"Requested","lastModified":"2015-11-09T10:09:25.950Z","modifiedBy":"hradmin","inventoryItem":"igbmk5zf_is","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","visit":"5108DC53-4E2D-53C8-A506-E55E554A3643","modifiedFields":{"prescriptionDate":"2015-11-09T10:09:25.950Z","prescription":"2015-11-09T10:09:25.950Z","quantity":"2015-11-09T10:09:25.950Z","status":"2015-11-09T10:09:25.950Z","requestedBy":"2015-11-09T10:09:25.950Z","requestedDate":"2015-11-09T10:09:25.950Z"}}},{"_id":"patient_2_19A03BBC-71F3-9F39-8B18-15773F446731","_rev":"3-c021a07297d99585de08b3fd96719914","_deleted":true,"_revisions":{"start":3,"ids":["c021a07297d99585de08b3fd96719914","a7323c9135948b4689f52c01826affe2","6ed64fbe474b36dac7c8ac071e33786d"]}},{"_id":"patient_2_2D1BEC2C-EA03-E737-9EC9-D2AEAF2C9EE6","_rev":"2-a587941fb557366a6b87122548a9ba0c","_deleted":true,"_revisions":{"start":2,"ids":["a587941fb557366a6b87122548a9ba0c","0048675586c8e2fd24c8cc2edc545769"]}},{"_id":"patient_2_3C01C5E5-7E64-B147-88F9-D127903B31D7","_rev":"4-be8dd294f8df42bcf220e1a4372340fd","_deleted":true,"_revisions":{"start":4,"ids":["be8dd294f8df42bcf220e1a4372340fd","74d74986cffc330788b0fc5e47f40788","1ed40ad430dba87ec4c0773779fac6aa","34e84dc96007fc737d932ebf875ce340"]}},{"_id":"patient_2_423A476C-2012-6339-8FED-D2E404037268","_rev":"4-263b75936a4ead5058dc1e17535c536c","_deleted":true,"_revisions":{"start":4,"ids":["263b75936a4ead5058dc1e17535c536c","12c22dbd6548922b326bd28b2f05ddb0","a4a9b0e7ed53aea140c1d3259c9b1e94","15ebcd46a46d830899afc17450d4b229"]}},{"_id":"patient_2_519E056C-BF04-2A3F-84D2-8963EAD04261","_rev":"2-13e0330c4610ea3dc8a8dcb64a9b61ae","_deleted":true,"_revisions":{"start":2,"ids":["13e0330c4610ea3dc8a8dcb64a9b61ae","193c2c5d9fcb17698411febac4015547"]}},{"_id":"patient_2_5DD90350-3A67-F3B7-BB4A-A6837A667697","_rev":"2-812e681275f7181b96e1428d5b2eb555","_deleted":true,"_revisions":{"start":2,"ids":["812e681275f7181b96e1428d5b2eb555","a9b1e632e8d3f96d106873396f7f04de"]}}]}\n{"seq":53}\n{"docs":[{"_id":"patient_2_63165A06-C866-A0C2-BB43-5DE9A0146737","_rev":"2-5989c5e25baace8df71d475ae164bf40","_deleted":true,"_revisions":{"start":2,"ids":["5989c5e25baace8df71d475ae164bf40","4178d1d23fb9d40a647d573026480dad"]}},{"_id":"patient_2_632DBDA3-5DBF-DDCC-A2C6-915E357319BA","_rev":"2-6ce428f8cdb8d1ea864f976c1ade08e4","_deleted":true,"_revisions":{"start":2,"ids":["6ce428f8cdb8d1ea864f976c1ade08e4","abe897a1411af9ce5df82d2ddbe726f2"]}},{"_id":"patient_2_688E30F1-E068-A2E3-8986-C224AF671CDD","_rev":"2-cb950343c60eb7116359fb50dc58fb87","_deleted":true,"_revisions":{"start":2,"ids":["cb950343c60eb7116359fb50dc58fb87","949f54bb01a90f17a91a7b392aecd58e"]}},{"_id":"patient_2_694DF805-F7CD-9513-9EF5-4CF8EE009BE9","_rev":"2-005d256252779d14fb83b9614a75d84f","_deleted":true,"_revisions":{"start":2,"ids":["005d256252779d14fb83b9614a75d84f","79cbdb6ba8075de8b19b61f4ebd194b2"]}},{"_id":"patient_2_9C269C48-EE3E-FBEC-9371-A235EEFDA40E","_rev":"2-6d94af1fdf669e3d012e3370c17c7d0f","_deleted":true,"_revisions":{"start":2,"ids":["6d94af1fdf669e3d012e3370c17c7d0f","ba40f943d16f3594cdf2a1c0e7ce36eb"]}},{"_id":"patient_2_9ED02049-6F10-E89D-9BAA-9C113B3AA6E4","_rev":"2-472c94a0e9c78fde3be4c15a71e0f336","_deleted":true,"_revisions":{"start":2,"ids":["472c94a0e9c78fde3be4c15a71e0f336","c61b0ba276e4c88cfda15ae4b5d0768b"]}},{"_id":"patient_2_BB4E9598-BD8B-528B-9D9E-AD9C3980787B","_rev":"3-957a69aebfae063d61ee8aaa55006803","_deleted":true,"_revisions":{"start":3,"ids":["957a69aebfae063d61ee8aaa55006803","0345093ba84e9c117c7dbb94b45edb8f","3e24d132e3bcc29db9d41a4d9f4296bf"]}},{"_id":"patient_2_C0361670-8B10-F212-9F51-B889D5BF92DF","_rev":"2-7b2217e2c2cb01610c32e0de44910282","_deleted":true,"_revisions":{"start":2,"ids":["7b2217e2c2cb01610c32e0de44910282","13ecb169a07f0e5a78a11209c26ede78"]}},{"_id":"patient_2_C680710A-BFBB-2868-8E5E-F4DD648CA24E","_rev":"2-d9acde506f230ec53a1cff9c97fe58bf","_deleted":true,"_revisions":{"start":2,"ids":["d9acde506f230ec53a1cff9c97fe58bf","9d954090afc2085fb97060446f8e4da0"]}},{"_id":"patient_2_E011AC5D-6F55-A16E-AB47-148E418071EE","_rev":"2-c263c9e9cf93e6d7b98f445b0d800809","_deleted":true,"_revisions":{"start":2,"ids":["c263c9e9cf93e6d7b98f445b0d800809","66c46fd3db8b057d58a35aba6ca99a5a"]}},{"_id":"patient_2_E54A8685-A36F-D1D1-B938-080545EABD0E","_rev":"2-a53992302cf7a33bad522d2dc5835b6e","_deleted":true,"_revisions":{"start":2,"ids":["a53992302cf7a33bad522d2dc5835b6e","5cebaf4e3ffef745a70ef22a1be1f0e8"]}},{"_id":"patient_2_E5EF1B7A-51B7-1610-BFBA-B1B21365C574","_rev":"2-182384c7dc0a26973583a692bfecbce8","_deleted":true,"_revisions":{"start":2,"ids":["182384c7dc0a26973583a692bfecbce8","497eb6ebf5074eeb32e2c02aab754a18"]}},{"_id":"patient_2_F3AA5446-1DE5-AC50-B9CF-B0D491E1D45E","_rev":"2-036325f33884580d2785dadf44527e25","_deleted":true,"_revisions":{"start":2,"ids":["036325f33884580d2785dadf44527e25","9eb866d5ca50209aec98d96470acce98"]}},{"_id":"pricing_2_22208FBE-9C6E-079D-A1E6-A562F9310FE5","_rev":"1-7f1b8398ae5dbed5782085efbfdf5ee8","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T09:39:37.879Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T09:39:37.879Z","category":"2015-10-15T09:39:37.879Z","pricingType":"2015-10-15T09:39:37.879Z"},"pricingOverrides":[]}},{"_id":"pricing_2_4CEB69E7-B54A-9D45-B0EF-7643F0D48FA0","_rev":"1-866a210b1d9063493c97d580845fc13d","data":{"category":"Imaging","expenseAccount":null,"name":"New","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-15T10:37:57.867Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-15T10:37:57.867Z","category":"2015-10-15T10:37:57.867Z","pricingType":"2015-10-15T10:37:57.867Z"},"pricingOverrides":[]}},{"_id":"pricing_2_5AB262C7-719D-19A6-ADC8-06CBA3088FA8","_rev":"1-428c4aeffee433314c955d75e831332b","data":{"category":"Lab","expenseAccount":null,"name":"Chest","price":null,"pricingType":"Lab Procedure","lastModified":"2015-11-03T14:39:16.623Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-11-03T14:39:16.623Z","category":"2015-11-03T14:39:16.623Z","pricingType":"2015-11-03T14:39:16.623Z"},"pricingOverrides":[]}},{"_id":"pricing_2_B492AA26-22F2-52A9-93C7-17106A57A62E","_rev":"1-a03187de833a34d46302b5a740244353","data":{"category":"Imaging","expenseAccount":null,"name":"fghj","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-22T07:08:38.099Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-22T07:08:38.099Z","category":"2015-10-22T07:08:38.099Z","pricingType":"2015-10-22T07:08:38.099Z"},"pricingOverrides":[]}},{"_id":"pricing_2_C8826ADA-C3AC-37CD-84AE-FA86A203AC6E","_rev":"1-fcefadf7300a60430090a0b91df95cce","data":{"category":"Imaging","expenseAccount":null,"name":"dfghn","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:27:44.358Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:27:44.358Z","category":"2015-10-28T07:27:44.358Z","pricingType":"2015-10-28T07:27:44.358Z"},"pricingOverrides":[]}},{"_id":"pricing_2_CBB4C9D5-CE8C-2BB5-86F4-3FC16AE2E85D","_rev":"1-a34a6a2d89ae9d5cd57f532f8db1b02f","data":{"category":"Imaging","expenseAccount":null,"name":"hg","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-26T11:49:08.235Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-26T11:49:08.235Z","category":"2015-10-26T11:49:08.235Z","pricingType":"2015-10-26T11:49:08.235Z"},"pricingOverrides":[]}},{"_id":"pricing_2_E53305F3-BA40-B305-B2DC-0732C7AB0042","_rev":"1-5b2724a6d2dce84919a16388a8983a49","data":{"category":"Imaging","expenseAccount":null,"name":"Scan","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:23:34.851Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:23:34.851Z","category":"2015-10-28T07:23:34.851Z","pricingType":"2015-10-28T07:23:34.851Z"},"pricingOverrides":[]}},{"_id":"pricing_2_F51616AE-EB96-2778-824F-386DEAFFD2F9","_rev":"1-13d626d1730a99b3da4dee1a25146ddd","data":{"category":"Imaging","expenseAccount":null,"name":"sss","price":null,"pricingType":"Imaging Procedure","lastModified":"2015-10-28T07:31:20.903Z","modifiedBy":"hradmin","modifiedFields":{"name":"2015-10-28T07:31:20.903Z","category":"2015-10-28T07:31:20.903Z","pricingType":"2015-10-28T07:31:20.903Z"},"pricingOverrides":[]}},{"_id":"sequence_2_inventory_Medication","_rev":"1-1acccea88a50973cbe8840a31911aa7c","data":{"prefix":"m","value":1}},{"_id":"sequence_2_patient","_rev":"130-943328c138b701637a579574f516e90b","data":{"prefix":null,"value":130},"_revisions":{"start":130,"ids":["943328c138b701637a579574f516e90b","b527a87cb4f86205dcc62a9ea0fa7a63","973262d1b9be91e82f997cf103481c55","44582fef141bcd8b558595514d3ba0ff","4a8d8f8ca25aa960aef16e5c1e489b81","2a48a9bc803b0d60b5018c07017aedeb","fe6186b5bd38fce211c0dc76ef4a619b","4d41059d2cd8accf225fce92edbbc428","449ad29c390c73126670290e2a351dce","ef33fac6f75c92df977deadcefd2ea21","bde0d0a9a34c662a05458f1d379c6038","4e2b60d439b5001f0562aaa5e836de72","9b7cf30a3a428b0ffbc5c08469b60dc4","fdfa70107c954a955eddc00f1710a412","acb0081b558f7dfc06520ce59abdca9d","b611e8c2f6823f040262e4e983aa8b3e","803c06167d785dca413153687432b9da","e2c71646996df37f91cabb3881395db4","e07b6a9914e89ef9b68e6412801e47db","5c4e63e3ec27823d46d7048c34f1035c","85c90147d202a4eb1a047e2633fdc911","e7dae8e43e473a4b347f5c22161844b4","471182bdd694919456395e3b8ee81d85","c45ce9b872e266344359c0637f9dd5d0","962ad8bf64b30813c4fef6958e83e3f3","5b281c4ea003d026419d35d05dd0b87a","9ed77096845040620cd2354c1ed74001","409143da04d5575669e515f6214f6220","c35ff5c786890aa0005b360749cefdd2","48cba21a512868f2c8e3beb5646ff1c1","58fcaf249567f43db62a1c77a1440b8e","71c619fe66ac2a2246708c6733e7af9e","0e2a21c17d44457443a58dd2db6824fb","7449d0f1ba104902ca08b888dfdc546f","20f7d87b7b4a5326bb93f84c11ae627d","bef379849a35ec5a7408f26a83026e2b","5dd124839c582c23e9279eda6f821796","15a041f1e149ae2989eba580b93969b0","93e7694e1741666512f83bd1bd5064f3","002edd9949b2993af6ce18817d0bc666","a8795752b4a5c9e587d5bbbd05ef41d4","c6f60912813f86724b49110221b713fe","728c2adfea6754b048f7acae42edd25f","b1ddbe8c27e77a561d22fec546349409","923830cdb237b3ba2088779642bca716","85f7e7891658b988333439ee84dfcd39","a52f2c92c951c2c7266a9ad170d3ae9d","79cfca9fdd7b6cdae2396862f103599e","87221151cfb4cb5bbdf73eb694a7eb34","f1c5faf2bc8f82ec5a29071b6156e5e2","84612c5298273469c586955ee8427555","cc81c865b33cf6d967bde9ff60b9af6d","8b16de2d23b9c7e216215085a08caea8","8be1c3c951d7c2355f910f785cac2534","696488469a9aa721643875029f6de938","04ffb420af095d229c45a69d0e1c56c2","f8fc0538d0eacb22a767c9eb449f4c84","6adb4264d4dd3b13829ffc7e17ba58c2","f50856bf682db17eee3d3cafb366a6be","743e61dcfce262c16251ed396ee76eb7","4fcdf09a763ec5da89d41dab6dd9edc8","912874972749c40ea838145828c14173","fd8c5a0d7662b27c8cbdfbfdd45ee32d","173fe5c207973de53fd984078bbd73a2","4e9ef14c62f9312cd0fb1b47e7fabe1e","ce6f1f9584656970cfd92f1e361e2fed","cf8cf83cf02c266b75af0bc69467a07f","5816c2ba418d387facd7b6ed0a0e6054","b3839c763f128f2ccf99cfb874a2413e","68b05605500c0109d046a56680a5a7a1","a13d320fed2c85ed0b173d6645ec0274","ba1dad02a90e4ac18632c1a53a90b759","c5e7e81e97d0fc7d0797bd9822685176","b580fcf4f4291b408f4dda64a4bdec96","bb1a562af157e3c24d23c3e2f1171b29","e9f245d9566dd9e116caf7d074792d36","30b587f2b5204d237572c86a545756fb","7df53a1742b52647118fec21f331e94d","0a4c120f78fa5899d0cea5d87d92c9b0","e62f1b02721a75fd1ea290da9acdc199","3e39b429ea4cda00c9ac9d3f0b61029c","038d82911c8979c0cd58e807871a09ca","618d916a14cfa55aa8e65d42b3761ca5","8d24a6b355e64a680f0f03ab0f738b8c","999e1fa6e5175dad02e4f2db0cd41843","782e7a1c4097f1aa1d117a7fbd01c443","67b3c03ea8609652c494a22242ce5a1f","3b1fc1b83a352ef9c672110a69306064","8a0da1966531daede44592906bf8df99","279e844131c96ca7b647cacfa3508022","42733f5f658de7ee440c02286fd4e21c","e3a50044a3cb2ac901b5b65653d0fc7f","b7fb5627bee7f642f8e608be1bb1e859","2fdb16832a0ed61b7f9e780750b70898","e38f4adbab987a8c628599ea9052ca44","7ece3f9fcff7b57b28f1237ba1107a0f","8fb6c171e3c6a345d199a8884e42951a","c76709145ca58dfcf67c1f397b772689","76182e657f0b0aa6fa07bf5491d2b427","ab161b88c332f3df338f1f4aa2b2e307","e00a3184b07c0459cf4ebdeb825f991f","cee6a3aac677927abaf3ae61508954a2","86bed2b62e1e6b6f98790ecafefcc17f","ae44899fdbc41d69076ec6a8f7563181","61cce97f5cd6ff092f28fe9ec9da4f27","f9008b952322c32322ef0e7e42fdf383","8fdecd159563a90d7cbc9c9aedc3068f","9b1f0f8f0e4db1f8931d290966f3bc3c","a9b5402ea07343a1b6d5612312e07a34","25ef3d2573778c3ebda4ef7860fe310f","3e39e8d6ceabb2079042e81613858906","b4e15c555737aa9573724407ce84b667","b2538362e8afb57e3e11e5231ae60d5d","04add3d3926f54232b0e0ed7a9fc141a","e924dcf4bb51c7c552538273e08901bb","77b6f226033c656d3a9768085ff3e80a","676dd4835b46e8f62ec2ce5908d1c60a","762481b2c71611cce80a5a9ef03aa48d","b9b73bf1d2df1598cc164089375ed7bc","0a581f677e6d8f7a484fa0a80156d95b","6b51cfdb83336973df284e4d5c2f308b","4a27247e93fabb86b6a5a9676f47ec8e","8b542908965798dd683a68f507635a83","515d8987a1e11acb866ede87612b53b1","d19e3759adc65398cf6a42a61345cdae","ac63c129bee25dc4c59a639e2721fb81","17c1209032c06df436ad0a4fa76723cc","f0ef6923c78e739d9228517a4813b646","f9a8fd6c55cd4e5fb0064b7767586e05","5bc31ffefa482f2e66299cf0704623c8"]}},{"_id":"visit_2_0312A352-EF8B-C1A2-B9DF-3EC932C96AD8","_rev":"2-8eb7818cb7b808ea467b2e60f0a6a5e2","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Discharged","visitType":"Admission","lastModified":"2015-11-03T07:43:21.662Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:31:15.853Z","startDate":"2015-11-03T07:31:15.853Z","status":"2015-11-03T07:43:21.662Z","outPatient":"2015-11-03T07:31:15.853Z","endDate":"2015-11-03T07:43:21.662Z","location":"2015-11-03T07:31:15.853Z","examiner":"2015-11-03T07:31:15.853Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["8eb7818cb7b808ea467b2e60f0a6a5e2","3036466a87ec0a9967be1433386b0bdc"]}},{"_id":"visit_2_07AF1E0E-3CB2-3837-990C-968158E25235","_rev":"1-ce894ba889d506531e4cb2a36394cab4","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:46:16.594Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:46:16.594Z","startDate":"2015-11-03T07:46:16.594Z","status":"2015-11-03T07:46:16.594Z","outPatient":"2015-11-03T07:46:16.594Z","endDate":"2015-11-03T07:46:16.594Z","location":"2015-11-03T07:46:16.594Z","examiner":"2015-11-03T07:46:16.594Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_0B84AF59-A182-5840-9E7A-CEF7633D4071","_rev":"1-ce3b40be34d77ec1d9c29ccb99a7e905","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:37:46.164Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:37:46.164Z","startDate":"2015-11-03T07:37:46.164Z","status":"2015-11-03T07:37:46.164Z","outPatient":"2015-11-03T07:37:46.164Z","endDate":"2015-11-03T07:37:46.164Z","location":"2015-11-03T07:37:46.164Z","examiner":"2015-11-03T07:37:46.164Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_0BD42BD9-0E5D-0533-A8FA-1C0ADB0F0D65","_rev":"2-0ddd43cbcc57cc5d6ff082a283d881ac","data":{"dischargeInfo":null,"endDate":"2015-10-15T10:37:57.902Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T10:37:57.902Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T10:37:57.915Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T10:37:57.915Z","endDate":"2015-10-15T10:37:57.915Z","outPatient":"2015-10-15T10:37:57.915Z","visitType":"2015-10-15T10:37:57.915Z"},"charges":[],"imaging":["1AC1DD3D-E7E7-15B4-A698-8A8AE62749EB"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["0ddd43cbcc57cc5d6ff082a283d881ac","e4540f9cf2a236335662116d4e0a66da"]}},{"_id":"visit_2_13340816-9F02-846D-85C3-C3278561BA23","_rev":"1-6ce02a99e4868c5a5bdb88a23f9ff400","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:24:20.451Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:24:20.451Z","startDate":"2015-11-03T07:24:20.451Z","status":"2015-11-03T07:24:20.451Z","outPatient":"2015-11-03T07:24:20.451Z","endDate":"2015-11-03T07:24:20.451Z","location":"2015-11-03T07:24:20.451Z","examiner":"2015-11-03T07:24:20.451Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_15759FA2-6691-6EF3-9636-21570F400F04","_rev":"1-d28274492b5b3cd306c3d38e535388a7","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:38:17.049Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:38:17.049Z","startDate":"2015-11-03T07:38:17.049Z","status":"2015-11-03T07:38:17.049Z","outPatient":"2015-11-03T07:38:17.049Z","endDate":"2015-11-03T07:38:17.049Z","location":"2015-11-03T07:38:17.049Z","examiner":"2015-11-03T07:38:17.049Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_17AB2BCF-5F9F-30FB-8B80-9FB82E51D0B3","_rev":"1-bc13c64ebb47144840cc91ce3087ebd6","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:23:03.461Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:23:03.461Z","startDate":"2015-11-03T07:23:03.461Z","status":"2015-11-03T07:23:03.461Z","outPatient":"2015-11-03T07:23:03.461Z","endDate":"2015-11-03T07:23:03.461Z","location":"2015-11-03T07:23:03.461Z","examiner":"2015-11-03T07:23:03.461Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_1800A65C-861C-CCA5-85C5-16950322C7E0","_rev":"1-a67e8d8a018844ef176184947055b683","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:40:08.177Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:40:08.177Z","startDate":"2015-11-03T07:40:08.177Z","status":"2015-11-03T07:40:08.177Z","outPatient":"2015-11-03T07:40:08.177Z","endDate":"2015-11-03T07:40:08.177Z","location":"2015-11-03T07:40:08.177Z","examiner":"2015-11-03T07:40:08.177Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_1EBA7E42-F96D-C5E2-923C-2F842FDFE714","_rev":"1-8fd6cfa23288f7394ce94970c4b3a8c2","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:19:45.676Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:19:45.676Z","startDate":"2015-11-03T07:19:45.676Z","status":"2015-11-03T07:19:45.676Z","outPatient":"2015-11-03T07:19:45.676Z","endDate":"2015-11-03T07:19:45.676Z","location":"2015-11-03T07:19:45.676Z","examiner":"2015-11-03T07:19:45.676Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_2D795EA3-DAEF-AA15-8846-607A873AD1AF","_rev":"1-4c665c9221069fe72f9d66ac458e92df","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:28:51.490Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:28:51.490Z","startDate":"2015-11-03T07:28:51.490Z","status":"2015-11-03T07:28:51.490Z","outPatient":"2015-11-03T07:28:51.490Z","endDate":"2015-11-03T07:28:51.490Z","location":"2015-11-03T07:28:51.490Z","examiner":"2015-11-03T07:28:51.490Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_377AA288-AAD4-F60B-ABD1-B5A0B9C75D50","_rev":"2-ee5b0686e20e1011d11b3051b93e7a93","data":{"dischargeInfo":null,"endDate":"2015-10-15T09:39:37.940Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-15T09:39:37.940Z","status":null,"visitType":"Imaging","lastModified":"2015-10-15T09:39:37.948Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-15T09:39:37.948Z","endDate":"2015-10-15T09:39:37.948Z","outPatient":"2015-10-15T09:39:37.948Z","visitType":"2015-10-15T09:39:37.948Z"},"charges":[],"imaging":["07CC6746-C7D9-A410-9B8C-C4B4E095A96D"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["ee5b0686e20e1011d11b3051b93e7a93","5fee255cf57220ddf1c19977118a540e"]}},{"_id":"visit_2_3A8FE46D-2CE6-C74E-98BB-ECFECB8F4AB9","_rev":"1-4c2559b35790501b6fae26a031a59cad","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:42:11.759Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:42:11.759Z","startDate":"2015-11-03T07:42:11.759Z","status":"2015-11-03T07:42:11.759Z","outPatient":"2015-11-03T07:42:11.759Z","endDate":"2015-11-03T07:42:11.759Z","location":"2015-11-03T07:42:11.759Z","examiner":"2015-11-03T07:42:11.759Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_50FD1C68-0889-0867-99D1-CFFDB3223154","_rev":"1-85d776e0088793e80073525cf6b7a501","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:47:59.399Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:47:59.399Z","startDate":"2015-11-03T07:47:59.399Z","status":"2015-11-03T07:47:59.399Z","outPatient":"2015-11-03T07:47:59.399Z","endDate":"2015-11-03T07:47:59.399Z","location":"2015-11-03T07:47:59.399Z","examiner":"2015-11-03T07:47:59.399Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_5108DC53-4E2D-53C8-A506-E55E554A3643","_rev":"2-884c940bde0d28898a94bb3d118fe89f","data":{"dischargeInfo":null,"endDate":"2015-11-09T10:09:25.619Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-09T10:09:25.619Z","status":null,"visitType":"Pharmacy","lastModified":"2015-11-09T10:09:25.628Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-11-09T10:09:25.628Z","endDate":"2015-11-09T10:09:25.628Z","outPatient":"2015-11-09T10:09:25.628Z","visitType":"2015-11-09T10:09:25.628Z"},"charges":[],"imaging":[],"labs":[],"medication":["35DC84B9-C25B-4C83-A287-D1DEC2FC6028"],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["884c940bde0d28898a94bb3d118fe89f","d84c4b4dda04554d6e41ca7e6368cc3d"]}},{"_id":"visit_2_53E986EB-4C23-9B3B-B8D7-2C7A7ECDBC33","_rev":"1-fb5ce8d11793c3da21e06d1f88e48d00","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:23:24.134Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:23:24.134Z","startDate":"2015-11-03T07:23:24.134Z","status":"2015-11-03T07:23:24.134Z","outPatient":"2015-11-03T07:23:24.134Z","endDate":"2015-11-03T07:23:24.134Z","location":"2015-11-03T07:23:24.134Z","examiner":"2015-11-03T07:23:24.134Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_542BB0F0-27BB-7C5C-99BC-28B013DDB837","_rev":"1-6e3af7515e9b2d7fbcec6264b9194a17","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:32:40.937Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:32:40.937Z","startDate":"2015-11-03T07:32:40.937Z","status":"2015-11-03T07:32:40.937Z","outPatient":"2015-11-03T07:32:40.937Z","endDate":"2015-11-03T07:32:40.937Z","location":"2015-11-03T07:32:40.937Z","examiner":"2015-11-03T07:32:40.937Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_560E25D9-9736-BA05-B2A6-4555A93B2628","_rev":"2-04c2d6343f6d2a10ad1f891718cecab5","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:08:13.698Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:08:13.698Z","startDate":"2015-11-03T07:08:13.698Z","status":"2015-11-03T07:08:13.698Z","outPatient":"2015-11-03T07:08:13.698Z","endDate":"2015-11-03T07:08:13.698Z","location":"2015-11-03T07:08:13.698Z","examiner":"2015-11-03T07:08:13.698Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["04c2d6343f6d2a10ad1f891718cecab5","6bbe45974af0b60410ea29026a38e2ec"]}},{"_id":"visit_2_59F8FB60-9956-E93F-826D-11618BC95E13","_rev":"1-8489694a221cd2c43e7c39fdcaa89700","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:41:35.597Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:41:35.597Z","startDate":"2015-11-03T07:41:35.597Z","status":"2015-11-03T07:41:35.597Z","outPatient":"2015-11-03T07:41:35.597Z","endDate":"2015-11-03T07:41:35.597Z","location":"2015-11-03T07:41:35.597Z","examiner":"2015-11-03T07:41:35.597Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_5F404B11-D8B6-CE18-9557-2B563BCFD2F8","_rev":"1-2637dc1d6c95364743de0c97c7fb443d","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:34:38.929Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:34:38.929Z","startDate":"2015-11-03T07:34:38.929Z","status":"2015-11-03T07:34:38.929Z","outPatient":"2015-11-03T07:34:38.929Z","endDate":"2015-11-03T07:34:38.929Z","location":"2015-11-03T07:34:38.929Z","examiner":"2015-11-03T07:34:38.929Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_6AD00ED1-670A-2C3F-BC10-0742B1F99264","_rev":"2-9bf9856192b6c8ef34d2fcdb27296593","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:39:18.257Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:39:18.257Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:39:18.275Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:39:18.275Z","endDate":"2015-10-28T07:39:18.275Z","outPatient":"2015-10-28T07:39:18.275Z","visitType":"2015-10-28T07:39:18.275Z"},"charges":[],"imaging":["91B061E9-2986-D539-90C8-CD14EC2010B0"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["9bf9856192b6c8ef34d2fcdb27296593","e50477b58f5edd257b9ce20ea65b1bca"]}},{"_id":"visit_2_6D126583-2852-25C2-A352-E5BA4CBBD106","_rev":"1-222d722266f5d407204eb411f68ab4f0","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:20:56.778Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:20:56.778Z","startDate":"2015-11-03T07:20:56.778Z","status":"2015-11-03T07:20:56.778Z","outPatient":"2015-11-03T07:20:56.778Z","endDate":"2015-11-03T07:20:56.778Z","location":"2015-11-03T07:20:56.778Z","examiner":"2015-11-03T07:20:56.778Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_74A4EF68-5D8D-BDF6-940F-33E50E50DDEA","_rev":"2-c24a52b04610b293fff293b18dd0bb15","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:27:44.394Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:27:44.394Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:27:44.406Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:27:44.406Z","endDate":"2015-10-28T07:27:44.406Z","outPatient":"2015-10-28T07:27:44.406Z","visitType":"2015-10-28T07:27:44.406Z"},"charges":[],"imaging":["EA6B989C-90B7-2E08-9D8F-CE4339BB9B4B"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["c24a52b04610b293fff293b18dd0bb15","5a6ae8f033eb99448ad898f164d822e8"]}},{"_id":"visit_2_7916D533-54AE-55EB-8DE7-E4B83A4BBAB2","_rev":"1-269d23778ac6f89244ff93d17c73352c","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:46:45.358Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:46:45.358Z","startDate":"2015-11-03T07:46:45.358Z","status":"2015-11-03T07:46:45.358Z","outPatient":"2015-11-03T07:46:45.358Z","endDate":"2015-11-03T07:46:45.358Z","location":"2015-11-03T07:46:45.358Z","examiner":"2015-11-03T07:46:45.358Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_817CE5FB-FF79-B05D-8296-2FCE91B125CD","_rev":"1-410079742e88e59e0598107fd9ef40c1","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:33:16.393Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:33:16.393Z","startDate":"2015-11-03T07:33:16.393Z","status":"2015-11-03T07:33:16.393Z","outPatient":"2015-11-03T07:33:16.393Z","endDate":"2015-11-03T07:33:16.393Z","location":"2015-11-03T07:33:16.393Z","examiner":"2015-11-03T07:33:16.393Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_90FCADB8-7109-3906-94A3-269F29CFAB69","_rev":"1-7a8189c07dde6b9bf498545cdaa3e621","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:31:49.176Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:31:49.176Z","startDate":"2015-11-03T07:31:49.176Z","status":"2015-11-03T07:31:49.176Z","outPatient":"2015-11-03T07:31:49.176Z","endDate":"2015-11-03T07:31:49.176Z","location":"2015-11-03T07:31:49.176Z","examiner":"2015-11-03T07:31:49.176Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_9C962DF7-E239-966B-A47B-15F405899B62","_rev":"1-d5bc412bfa629333e6cd79c978ea8218","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:25:27.802Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:25:27.802Z","startDate":"2015-11-03T07:25:27.802Z","status":"2015-11-03T07:25:27.802Z","outPatient":"2015-11-03T07:25:27.802Z","endDate":"2015-11-03T07:25:27.802Z","location":"2015-11-03T07:25:27.802Z","examiner":"2015-11-03T07:25:27.802Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_9E627361-BA73-210A-8E76-2FA13B559DB9","_rev":"1-30a87dbc678b99d42b1a90bebff97834","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:21:48.053Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:21:48.053Z","startDate":"2015-11-03T07:21:48.053Z","status":"2015-11-03T07:21:48.053Z","outPatient":"2015-11-03T07:21:48.053Z","endDate":"2015-11-03T07:21:48.053Z","location":"2015-11-03T07:21:48.053Z","examiner":"2015-11-03T07:21:48.053Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}}]}\n{"seq":106}\n{"docs":[{"_id":"lookup_2_sex","_rev":"1-c433c64d3ecf2a60e4539b1d1dc43d27","data":{"importFile":false,"organizeByType":false,"userCanAdd":true,"value":["Male"]}},{"_id":"patient_2_B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","_rev":"4-67b555cc65659782ad7e91606805b769","data":{"admitted":true,"address":null,"address2":null,"address3":null,"address4":null,"bloodType":null,"clinic":null,"country":null,"dateOfBirth":null,"economicClassification":null,"email":null,"externalPatientId":null,"familySupport1":null,"familySupport2":null,"familySupport3":null,"familySupport4":null,"familySupport5":null,"friendlyId":"P00017","firstName":"Lennex","sex":"Male","history":null,"insurance":null,"lastName":"Zinyando","livingArrangement":null,"middleName":"","notes":null,"otherIncome":null,"patientType":null,"parent":null,"phone":null,"placeOfBirth":null,"referredDate":null,"referredBy":null,"religion":null,"socialActionTaken":null,"socialRecommendation":null,"status":null,"lastModified":"2016-02-22T22:14:52.397Z","modifiedBy":"Admin User","paymentProfile":null,"payments":[],"modifiedFields":{"friendlyId":"2015-10-06T10:56:52.507Z","firstName":"2015-10-06T10:56:52.507Z","middleName":"2015-10-06T10:56:52.507Z","lastName":"2015-10-06T10:56:52.507Z","admitted":"2015-11-03T07:08:13.749Z","sex":"2016-02-22T22:14:52.397Z"}},"_revisions":{"start":4,"ids":["67b555cc65659782ad7e91606805b769","020fe2a48d4cbfcb78ce17b8dca2808a","09ad83b2ef8b869ecc41360ccee87e05","e5548781a44e741ceac358e5e3413d76"]}},{"_id":"photo_2_CF5189F1-5BDA-6896-B350-6A1A9B6A217B","_rev":"3-82a9b8e6b9f827259083f9bc560d9ee6","_deleted":true,"_revisions":{"start":3,"ids":["82a9b8e6b9f827259083f9bc560d9ee6","ee9b1e0283b24f4a02b00f92ed70f0ab","5ee18d0589c4ac578fe4e8a5350f725b"]}},{"_id":"photo_2_D2B805B1-8F22-B5D2-956B-AFF6372D18FF","_rev":"3-734e1f5956d3d438f8ba6e187aa4d97f","_deleted":true,"_revisions":{"start":3,"ids":["734e1f5956d3d438f8ba6e187aa4d97f","f574559c84a634ca88d1d10d41c93953","112ad019aa78ef8e06584c9109a9a850"]}},{"_id":"visit_2_9F1A65ED-683F-056E-8D50-A8AF63201CE2","_rev":"2-e19734a8deff62722e6e023af4b8e130","data":{"dischargeInfo":null,"endDate":"2015-10-22T07:08:38.175Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-22T07:08:38.175Z","status":null,"visitType":"Imaging","lastModified":"2015-10-22T07:08:38.189Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-22T07:08:38.189Z","endDate":"2015-10-22T07:08:38.189Z","outPatient":"2015-10-22T07:08:38.189Z","visitType":"2015-10-22T07:08:38.189Z"},"charges":[],"imaging":["D0F299E4-CD8D-557D-8C23-216FD23EF844"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["e19734a8deff62722e6e023af4b8e130","bd81a41820526c8c0450ee544867c6fa"]}},{"_id":"visit_2_A6E37F8D-F740-8B01-93C9-D476A886E030","_rev":"1-d094eb56a680b4a8a6a354bd48d6bfe2","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:42:53.782Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:42:53.782Z","startDate":"2015-11-03T07:42:53.782Z","status":"2015-11-03T07:42:53.782Z","outPatient":"2015-11-03T07:42:53.782Z","endDate":"2015-11-03T07:42:53.782Z","location":"2015-11-03T07:42:53.782Z","examiner":"2015-11-03T07:42:53.782Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_AAB85ADA-7058-DF7A-9244-C6B60A2EF743","_rev":"1-1bd78b61646023aacce18b1efaa27646","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:39:09.272Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:39:09.272Z","startDate":"2015-11-03T07:39:09.272Z","status":"2015-11-03T07:39:09.272Z","outPatient":"2015-11-03T07:39:09.272Z","endDate":"2015-11-03T07:39:09.272Z","location":"2015-11-03T07:39:09.272Z","examiner":"2015-11-03T07:39:09.272Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_C15054D2-D062-DB01-A96D-80ED1B8F8CBD","_rev":"1-5a9a0e7eafe911586556666ad1a2bd27","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:46:09.735Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:46:09.735Z","startDate":"2015-11-03T07:46:09.735Z","status":"2015-11-03T07:46:09.735Z","outPatient":"2015-11-03T07:46:09.735Z","endDate":"2015-11-03T07:46:09.735Z","location":"2015-11-03T07:46:09.735Z","examiner":"2015-11-03T07:46:09.735Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_C5C296AC-E238-CBA5-8DD8-99942843BC5A","_rev":"2-57e6740d8dac593d790cd7f76c4ad0c3","data":{"dischargeInfo":null,"endDate":"2015-10-26T11:49:08.277Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-26T11:49:08.277Z","status":null,"visitType":"Imaging","lastModified":"2015-10-26T11:49:08.282Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-26T11:49:08.282Z","endDate":"2015-10-26T11:49:08.282Z","outPatient":"2015-10-26T11:49:08.282Z","visitType":"2015-10-26T11:49:08.282Z"},"charges":[],"imaging":["4A7FC838-0B37-E151-AFD8-8DBAC9DE9D99"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["57e6740d8dac593d790cd7f76c4ad0c3","253e8d9f8c0865cb3e9ffd1f6849bcde"]}},{"_id":"visit_2_CBFA5C2C-191D-FC9C-AD19-14D26D5A3003","_rev":"2-f781f118fd87b036d8cbfbf7771cda99","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:23:34.906Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:23:34.906Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:23:34.914Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:23:34.914Z","endDate":"2015-10-28T07:23:34.914Z","outPatient":"2015-10-28T07:23:34.914Z","visitType":"2015-10-28T07:23:34.914Z"},"charges":[],"imaging":["51D8DC28-78EB-62B1-942A-1158F5862F34"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["f781f118fd87b036d8cbfbf7771cda99","e2b8bf1f76ea01c32b414c184905511e"]}},{"_id":"visit_2_D6938BD3-6346-F62B-8B19-5207B2E5A6AF","_rev":"2-631f62b5121ccfcd1a8de2bc9d3d252f","data":{"dischargeInfo":null,"endDate":"2015-10-28T07:31:20.941Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-10-28T07:31:20.941Z","status":null,"visitType":"Imaging","lastModified":"2015-10-28T07:31:20.953Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-10-28T07:31:20.953Z","endDate":"2015-10-28T07:31:20.953Z","outPatient":"2015-10-28T07:31:20.953Z","visitType":"2015-10-28T07:31:20.953Z"},"charges":[],"imaging":["DBE152F6-9508-2E12-81AC-39BC2CAFE08C"],"labs":[],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["631f62b5121ccfcd1a8de2bc9d3d252f","8b46887d52e3043d742262fc03ff48b8"]}},{"_id":"visit_2_D845EA6E-C4CD-3657-A6F6-3E40FE02B069","_rev":"1-16657f6b4014bf268d63323ed8832a56","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:50:55.344Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:50:55.344Z","startDate":"2015-11-03T07:50:55.344Z","status":"2015-11-03T07:50:55.344Z","outPatient":"2015-11-03T07:50:55.344Z","endDate":"2015-11-03T07:50:55.344Z","location":"2015-11-03T07:50:55.344Z","examiner":"2015-11-03T07:50:55.344Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_DA661CAB-1BB5-3119-B9DD-0A92D7C3913B","_rev":"1-ecb23bc4c60a32dd627969637f85d1fb","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:19:15.689Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:19:15.689Z","startDate":"2015-11-03T07:19:15.689Z","status":"2015-11-03T07:19:15.689Z","outPatient":"2015-11-03T07:19:15.689Z","endDate":"2015-11-03T07:19:15.689Z","location":"2015-11-03T07:19:15.689Z","examiner":"2015-11-03T07:19:15.689Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_E66983BC-BFB9-E361-A59F-AAC966A0FD3B","_rev":"1-8d0f4af9593120f2dfd0371303239e2b","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:15:24.456Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:15:24.456Z","startDate":"2015-11-03T07:15:24.456Z","status":"2015-11-03T07:15:24.456Z","outPatient":"2015-11-03T07:15:24.456Z","endDate":"2015-11-03T07:15:24.456Z","location":"2015-11-03T07:15:24.456Z","examiner":"2015-11-03T07:15:24.456Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_E8E7BD06-13EB-AA68-BBE2-51B9EEE85257","_rev":"1-c54a6aea31c6c3805edc706b4ed64d40","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:30:31.501Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:30:31.501Z","startDate":"2015-11-03T07:30:31.501Z","status":"2015-11-03T07:30:31.501Z","outPatient":"2015-11-03T07:30:31.501Z","endDate":"2015-11-03T07:30:31.501Z","location":"2015-11-03T07:30:31.501Z","examiner":"2015-11-03T07:30:31.501Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_E90C9A07-74D2-0589-8DDC-C94B09E0F238","_rev":"1-7a3d4f0d4056960dabad849d1da9bd7c","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:22:15.702Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:22:15.702Z","startDate":"2015-11-03T07:22:15.702Z","status":"2015-11-03T07:22:15.702Z","outPatient":"2015-11-03T07:22:15.702Z","endDate":"2015-11-03T07:22:15.702Z","location":"2015-11-03T07:22:15.702Z","examiner":"2015-11-03T07:22:15.702Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_EC9C09F9-676F-AD32-AB61-DDAD615F2632","_rev":"2-8ce10f08748bebcd2df0267258ec2433","data":{"dischargeInfo":null,"endDate":"2015-11-03T14:39:16.671Z","examiner":null,"history":null,"historySince":null,"location":null,"notes":null,"outPatient":true,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-03T14:39:16.671Z","status":null,"visitType":"Lab","lastModified":"2015-11-03T14:39:16.679Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"startDate":"2015-11-03T14:39:16.679Z","endDate":"2015-11-03T14:39:16.679Z","outPatient":"2015-11-03T14:39:16.679Z","visitType":"2015-11-03T14:39:16.679Z"},"charges":[],"imaging":[],"labs":["8F1C615D-8E59-5090-BC4A-BFA41C57FABE"],"medication":[],"procedures":[],"vitals":[]},"_revisions":{"start":2,"ids":["8ce10f08748bebcd2df0267258ec2433","4a113155a529e6200ba18813cd922ad0"]}},{"_id":"visit_2_EF0D793D-346D-242A-8F4D-589448DA49A6","_rev":"1-413ff66d683c532d2be4cfa04632343c","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:26:35.010Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:26:35.010Z","startDate":"2015-11-03T07:26:35.010Z","status":"2015-11-03T07:26:35.010Z","outPatient":"2015-11-03T07:26:35.010Z","endDate":"2015-11-03T07:26:35.010Z","location":"2015-11-03T07:26:35.010Z","examiner":"2015-11-03T07:26:35.010Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}},{"_id":"visit_2_F9D51E3F-E938-1F24-9B19-D76F03E56892","_rev":"1-9e4fb077c716ccd6b149953e4c005aae","data":{"dischargeInfo":null,"endDate":"2015-11-02T22:00:00.000Z","examiner":"Dr Test","history":null,"historySince":null,"location":"Harare","notes":null,"outPatient":false,"primaryDiagnosis":null,"primaryBillingDiagnosis":null,"primaryBillingDiagnosisId":null,"startDate":"2015-11-02T22:00:00.000Z","status":"Admitted","visitType":"Admission","lastModified":"2015-11-03T07:17:22.667Z","modifiedBy":"hradmin","patient":"B4D3E9EE-6EC0-6F1E-A397-87D9A8F8C13D","modifiedFields":{"visitType":"2015-11-03T07:17:22.667Z","startDate":"2015-11-03T07:17:22.667Z","status":"2015-11-03T07:17:22.667Z","outPatient":"2015-11-03T07:17:22.667Z","endDate":"2015-11-03T07:17:22.667Z","location":"2015-11-03T07:17:22.667Z","examiner":"2015-11-03T07:17:22.667Z"},"charges":[],"imaging":[],"labs":[],"medication":[],"procedures":[],"vitals":[]}}]}\n{"seq":125}\n';
});
define('hospitalrun/users/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _emberI18n) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    title: (0, _emberI18n.translationMacro)('labels.delete_user')
  });
});
define("hospitalrun/users/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/users/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["messages.are_you_sure_delete"], ["user", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [8, 44], [8, 54]]]]], [], []]], ["loc", [null, [8, 4], [8, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/users/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/users/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/user-roles'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUserRoles) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUserRoles['default'], {
    usersController: _ember['default'].inject.controller('users/index'),
    updateCapability: 'add_user',

    users: _ember['default'].computed.alias('usersController.model'),

    actions: {
      update: function update() {
        var updateModel = this.get('model'),
            users = this.get('users');

        if (updateModel.get('isNew')) {
          var newData = updateModel.getProperties('password', 'email', 'roles', 'displayName');
          newData.name = newData.email;
          newData.id = 'org.couchdb.user:' + newData.email;
          if (_ember['default'].isEmpty(newData.password)) {
            newData.password = uuid.v4() + uuid.v4();
          }
          updateModel.deleteRecord();
          updateModel = this.get('store').createRecord('user', newData);
          this.set('model', updateModel);
        }

        if (_ember['default'].isEmpty(updateModel.get('userPrefix'))) {
          var counter = 1,
              prefix = 'p',
              userPrefix = prefix + 0,
              usedPrefix = users.findBy('userPrefix', prefix);

          while (!_ember['default'].isEmpty(usedPrefix)) {
            prefix = userPrefix + counter++;
            usedPrefix = users.findBy('userPrefix', prefix);
          }
          updateModel.set('userPrefix', prefix);
        }
        updateModel.save().then((function () {
          this.displayAlert(this.get('i18n').t('messages.user_saved'), this.get('i18n').t('messages.user_has_been_saved'));
        }).bind(this));
      }
    }
  });
});
define('hospitalrun/users/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({
    editTitle: (0, _emberI18n.translationMacro)('labels.edit_user'),
    modelName: 'user',
    newTitle: (0, _emberI18n.translationMacro)('labels.new_user'),

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        roles: ['Data Entry', 'user']
      });
    }
  });
});
define("hospitalrun/users/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "hospitalrun/users/edit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group has-success");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "form-control");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["labels.username"], [], ["loc", [null, [5, 37], [5, 60]]]], ["content", "model.name", ["loc", [null, [7, 10], [7, 24]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/users/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group has-success");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [8]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[5] = dom.createMorphAt(element1, 3, 3);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "unless", [["get", "model.isNew", ["loc", [null, [3, 14], [3, 25]]]]], [], 0, null, ["loc", [null, [3, 4], [10, 15]]]], ["inline", "em-input", [], ["property", "displayName", "label", ["subexpr", "t", ["labels.display_name"], [], ["loc", [null, [11, 44], [11, 69]]]], "class", "user-display-name"], ["loc", [null, [11, 4], [11, 98]]]], ["inline", "em-input", [], ["property", "email", "type", "email", "label", ["subexpr", "t", ["labels.email"], [], ["loc", [null, [12, 51], [12, 69]]]], "class", "user-email"], ["loc", [null, [12, 4], [12, 91]]]], ["inline", "em-input", [], ["property", "password", "type", "password", "label", ["subexpr", "t", ["labels.password"], [], ["loc", [null, [13, 57], [13, 78]]]], "class", "user-password"], ["loc", [null, [13, 4], [13, 103]]]], ["inline", "t", ["labels.role"], [], ["loc", [null, [15, 35], [15, 54]]]], ["inline", "role-select", [], ["selection", ["subexpr", "@mut", [["get", "model.roles", ["loc", [null, [16, 30], [16, 41]]]]], [], []], "content", ["subexpr", "@mut", [["get", "userRoles", ["loc", [null, [16, 50], [16, 59]]]]], [], []], "action", ["subexpr", "action", [["subexpr", "mut", [["get", "model.roles", ["loc", [null, [16, 80], [16, 91]]]]], [], ["loc", [null, [16, 75], [16, 92]]]]], [], ["loc", [null, [16, 67], [16, 93]]]], "class", "user-role"], ["loc", [null, [16, 6], [16, 113]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/users/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [2, 2], [18, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/users/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "edit-panel", [], ["editPanelProps", ["subexpr", "@mut", [["get", "editPanelProps", ["loc", [null, [1, 29], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [19, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/users/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {
  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {
    addPermission: 'add_user',
    deletePermission: 'delete_user',
    sortProperties: ['displayName']

  });
});
define('hospitalrun/users/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {
  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {
    newButtonAction: (function () {
      if (this.currentUserCan('add_user')) {
        return 'newItem';
      } else {
        return null;
      }
    }).property(),
    newButtonText: (0, _emberI18n.translationMacro)('user.plus_new_user'),
    pageTitle: (0, _emberI18n.translationMacro)('user.users_page_tile'),
    model: function model() {
      return this.store.findAll('user');
    }
  });
});
define("hospitalrun/users/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "hospitalrun/users/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["labels.actions"], [], ["loc", [null, [10, 14], [10, 36]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 22,
                        "column": 16
                      },
                      "end": {
                        "line": 24,
                        "column": 16
                      }
                    },
                    "moduleName": "hospitalrun/users/index/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element3);
                    morphs[1] = dom.createMorphAt(element3, 0, 0);
                    return morphs;
                  },
                  statements: [["element", "action", ["editItem", ["get", "user", ["loc", [null, [23, 70], [23, 74]]]]], ["bubbles", false], ["loc", [null, [23, 50], [23, 91]]]], ["inline", "t", ["labels.edit"], [], ["loc", [null, [23, 92], [23, 111]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 25,
                        "column": 16
                      },
                      "end": {
                        "line": 27,
                        "column": 16
                      }
                    },
                    "moduleName": "hospitalrun/users/index/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-default");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element2 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element2);
                    morphs[1] = dom.createMorphAt(element2, 0, 0);
                    return morphs;
                  },
                  statements: [["element", "action", ["deleteItem", ["get", "user", ["loc", [null, [26, 72], [26, 76]]]]], ["bubbles", false], ["loc", [null, [26, 50], [26, 93]]]], ["inline", "t", ["labels.delete"], [], ["loc", [null, [26, 94], [26, 115]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 20,
                      "column": 12
                    },
                    "end": {
                      "line": 29,
                      "column": 12
                    }
                  },
                  "moduleName": "hospitalrun/users/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("td");
                  var el2 = dom.createTextNode("\n");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("              ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element4, 1, 1);
                  morphs[1] = dom.createMorphAt(element4, 2, 2);
                  return morphs;
                },
                statements: [["block", "if", [["get", "canAdd", ["loc", [null, [22, 22], [22, 28]]]]], [], 0, null, ["loc", [null, [22, 16], [24, 23]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [25, 22], [25, 31]]]]], [], 1, null, ["loc", [null, [25, 16], [27, 23]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 8
                  },
                  "end": {
                    "line": 31,
                    "column": 8
                  }
                },
                "moduleName": "hospitalrun/users/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                dom.setAttribute(el1, "class", "clickable");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "user-name");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "user-display-name");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "user-email");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "class", "user-role");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var morphs = new Array(6);
                morphs[0] = dom.createElementMorph(element5);
                morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element5, [5]), 0, 0);
                morphs[4] = dom.createMorphAt(dom.childAt(element5, [7]), 0, 0);
                morphs[5] = dom.createMorphAt(element5, 9, 9);
                return morphs;
              },
              statements: [["element", "action", ["editItem", ["get", "user", ["loc", [null, [15, 34], [15, 38]]]]], [], ["loc", [null, [15, 14], [15, 40]]]], ["content", "user.name", ["loc", [null, [16, 34], [16, 47]]]], ["content", "user.displayName", ["loc", [null, [17, 42], [17, 62]]]], ["content", "user.email", ["loc", [null, [18, 35], [18, 49]]]], ["content", "user.displayRole", ["loc", [null, [19, 34], [19, 54]]]], ["block", "if", [["get", "showActions", ["loc", [null, [20, 18], [20, 29]]]]], [], 0, null, ["loc", [null, [20, 12], [29, 19]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 32,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/users/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "unless", [["get", "user.deleted", ["loc", [null, [14, 18], [14, 30]]]]], [], 0, null, ["loc", [null, [14, 8], [31, 19]]]]],
            locals: ["user"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 34,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/users/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tr");
            dom.setAttribute(el2, "class", "table-header");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("th");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element7, [5]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element7, [7]), 0, 0);
            morphs[4] = dom.createMorphAt(element7, 9, 9);
            morphs[5] = dom.createMorphAt(element6, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["labels.username"], [], ["loc", [null, [5, 12], [5, 35]]]], ["inline", "t", ["labels.name"], [], ["loc", [null, [6, 12], [6, 31]]]], ["inline", "t", ["labels.email"], [], ["loc", [null, [7, 12], [7, 32]]]], ["inline", "t", ["labels.role"], [], ["loc", [null, [8, 12], [8, 31]]]], ["block", "if", [["get", "showActions", ["loc", [null, [9, 14], [9, 25]]]]], [], 0, null, ["loc", [null, [9, 8], [11, 15]]]], ["block", "each", [["get", "model", ["loc", [null, [13, 14], [13, 19]]]]], [], 1, null, ["loc", [null, [13, 6], [32, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 6
                },
                "end": {
                  "line": 39,
                  "column": 6
                }
              },
              "moduleName": "hospitalrun/users/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("em");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-primary");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["messages.create_new_user"], [], ["loc", [null, [38, 12], [38, 44]]]], ["element", "action", ["newItem"], [], ["loc", [null, [38, 82], [38, 102]]]], ["inline", "t", ["buttons.new_user"], [], ["loc", [null, [38, 103], [38, 127]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 41,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/users/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("em");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element1, 3, 3);
            return morphs;
          },
          statements: [["inline", "t", ["messages.no_users_found"], [], ["loc", [null, [36, 10], [36, 41]]]], ["block", "if", [["get", "canAdd", ["loc", [null, [37, 12], [37, 18]]]]], [], 0, null, ["loc", [null, [37, 6], [39, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 42,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/users/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 2], [41, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/users/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "item-listing", [], ["paginationProps", ["subexpr", "@mut", [["get", "paginationProps", ["loc", [null, [1, 32], [1, 47]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [42, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/users/route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {
  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
    actions: {
      allItems: function allItems() {
        this.transitionTo('users.index');
      }
    }
  });
});
define('hospitalrun/utils/date-sort', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = {
    sortByDate: function sortByDate(firstItem, secondItem, compareAttribute) {
      var firstDate = firstItem.get(compareAttribute),
          secondDate = secondItem.get(compareAttribute);
      return _ember['default'].compare(firstDate.getTime(), secondDate.getTime());
    }
  };
});
define("hospitalrun/utils/email-validation", ["exports"], function (exports) {
  exports["default"] = {
    emailRegex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
  };
});
define('hospitalrun/utils/i18n/compile-template', ['exports', 'ember-i18n/utils/i18n/compile-template'], function (exports, _emberI18nUtilsI18nCompileTemplate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nCompileTemplate['default'];
    }
  });
});
define('hospitalrun/utils/i18n/missing-message', ['exports', 'ember-i18n/utils/i18n/missing-message'], function (exports, _emberI18nUtilsI18nMissingMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nMissingMessage['default'];
    }
  });
});
define('hospitalrun/utils/item-condition', ['exports', 'ember'], function (exports, _ember) {
  exports.rankToMultiplier = rankToMultiplier;
  exports.getCondition = getCondition;

  var rankMultiplierValues = [{
    rank: 'A',
    value: 0.5
  }, {
    rank: 'B',
    value: 1
  }, {
    rank: 'C',
    value: 2
  }];

  function rankToMultiplier() {
    var rank = arguments.length <= 0 || arguments[0] === undefined ? 'B' : arguments[0];

    var rankModel = _ember['default'].A(rankMultiplierValues).findBy('rank', rank);
    return rankModel.value;
  }

  function getCondition(estimatedDaysOfStock) {
    var multiplier = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

    estimatedDaysOfStock *= multiplier;

    if (estimatedDaysOfStock >= 14) {
      return 'good';
    } else if (estimatedDaysOfStock < 7) {
      return 'bad';
    } else {
      return 'average';
    }
  }
});
define('hospitalrun/utils/patient-validation', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = {
    patientTypeAhead: {
      acceptance: {
        accept: true,
        'if': function _if(object) {
          if (!object.get('selectPatient')) {
            return false;
          }
          if (!object.get('hasDirtyAttributes')) {
            return false;
          }
          var patientName = object.get('patient.displayName'),
              patientTypeAhead = object.get('patientTypeAhead');
          if (_ember['default'].isEmpty(patientName) || _ember['default'].isEmpty(patientTypeAhead)) {
            // force validation to fail
            return true;
          } else {
            var typeAheadName = patientTypeAhead.substr(0, patientName.length);
            if (patientName !== typeAheadName) {
              return true;
            }
          }
          // patient is properly selected; don't do any further validation
          return false;
        },
        message: 'Please select a patient'
      }
    }
  };
});
define('hospitalrun/utils/pouch-views', ['exports'], function (exports) {
  /* global req */
  /* global compareStrings */
  /* global getCompareDate */

  function createDesignDoc(item, rev) {
    var ddoc = {
      _id: '_design/' + item.name,
      version: item.version,
      views: {}
    };
    if (rev) {
      ddoc._rev = rev;
    }
    ddoc.views[item.name] = { map: item['function'].toString() };
    if (item.sort) {
      ddoc.lists = {
        sort: item.sort
      };
    }
    return ddoc;
  }

  function generateSortFunction(sortFunction, includeCompareDate, filterFunction) {
    var generatedFunction = 'function(head, req) {' + 'function keysEqual(keyA, keyB) {' + 'for (var i= 0; i < keyA.length; i++) {' + 'if (keyA[i] !== keyB[i]) {' + 'return false;' + '}' + '}' + 'return true;' + '}';
    if (includeCompareDate) {
      generatedFunction += 'function getCompareDate(dateString) {' + 'if (!dateString || dateString === "") {' + 'return 0;' + '}' + 'return new Date(dateString).getTime();' + '}';
    }
    generatedFunction += 'function compareStrings(aString, bString) {' + 'if (!aString) {' + 'aString = "";' + '}' + 'if (!bString) {' + 'bString = "";' + '}' + 'if (aString < bString) {' + 'return -1;' + '} else if (aString > bString) {' + 'return 1;' + '} else {' + 'return 0;' + '}' + '}' + 'var row,' + 'rows=[],' + 'startingPosition = 0;' + 'while(row = getRow()) {' + 'rows.push(row);' + '}';
    if (filterFunction) {
      generatedFunction += 'rows = rows.filter(' + filterFunction + ');';
    }
    generatedFunction += 'rows.sort(' + sortFunction + ');' + 'if (req.query.sortStartKey) {' + 'var startKey = JSON.parse(req.query.sortStartKey);' + 'for (var i=0; i<rows.length; i++) {' + 'if (keysEqual(startKey, rows[i].key)) {' + 'startingPosition = i;' + 'break;' + '}' + '}' + '}' + 'if (req.query.sortDesc) {' + 'rows = rows.reverse();' + '}' + 'if (req.query.sortLimit) {' + 'rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);' + '} else if (startingPosition > 0) {' + 'rows = rows.slice(startingPosition);' + '}' + 'send(JSON.stringify({"rows" : rows}));' + '}';
    return generatedFunction;
  }

  function generateView(viewDocType, viewBody) {
    return 'function(doc) {' + 'var doctype,' + 'uidx;' + 'if (doc._id && (uidx = doc._id.indexOf("_")) > 0) {' + 'doctype = doc._id.substring(0, uidx);' + 'if(doctype === "' + viewDocType + '") {' + viewBody + '}' + '}' + '}';
  }

  function updateDesignDoc(item, db, rev) {
    var designDoc = createDesignDoc(item, rev);
    db.put(designDoc).then(function () {
      // design doc created!
      // Update index
      db.query(item.name, { stale: 'update_after' });
    }, function (err) {
      console.log('ERR updateDesignDoc:', err);
      // ignored, design doc already exists
    });
  }

  function generateDateForView(date1) {
    return 'var ' + date1 + ' = doc.data.' + date1 + ';' + 'if (' + date1 + ' && ' + date1 + ' !== "") {' + date1 + ' = new Date(' + date1 + ');' + 'if (' + date1 + '.getTime) {' + date1 + ' = ' + date1 + '.getTime();' + '}' + '}';
  }

  var designDocs = [{
    name: 'appointments_by_date',
    'function': generateView('appointment', generateDateForView('endDate') + generateDateForView('startDate') + 'emit([startDate, endDate, doc._id]);'),
    sort: generateSortFunction((function (a, b) {
      function defaultStatus(value) {
        if (!value || value === '') {
          return 'Scheduled';
        } else {
          return value;
        }
      }
      var sortBy = '';
      if (req.query && req.query.sortKey) {
        sortBy = req.query.sortKey;
      }
      switch (sortBy) {
        case 'appointmentType':
        case 'location':
        case 'provider':
          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);
        case 'date':
          {
            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);
            if (startDiff === 0) {
              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);
            } else {
              return startDiff;
            }
            break;
          }
        case 'status':
          {
            var aStatus = defaultStatus(a.doc.data[sortBy]),
                bStatus = defaultStatus(b.doc.data[sortBy]);
            return compareStrings(aStatus, bStatus);
          }
        default:
          {
            return 0; // Don't sort
          }
      }
    }).toString(), true, (function (row) {
      var i,
          filterBy = null,
          includeRow = true;
      if (req.query && req.query.filterBy) {
        filterBy = JSON.parse(req.query.filterBy);
      }
      if (!filterBy) {
        return true;
      }
      for (i = 0; i < filterBy.length; i++) {
        var currentValue = row.doc.data[filterBy[i].name];
        if (filterBy[i].name === 'status' && (!currentValue || currentValue === '')) {
          currentValue = 'Scheduled';
        }
        if (currentValue !== filterBy[i].value) {
          includeRow = false;
          break;
        }
      }
      return includeRow;
    }).toString()),
    version: 4
  }, {
    name: 'appointments_by_patient',
    'function': generateView('appointment', generateDateForView('endDate') + generateDateForView('startDate') + 'emit([doc.data.patient, startDate, endDate,doc._id]);'),
    version: 3
  }, {
    name: 'imaging_by_status',
    'function': generateView('imaging', generateDateForView('imagingDate') + generateDateForView('requestedDate') + 'emit([doc.data.status, requestedDate, imagingDate, doc._id]);'),
    version: 3
  }, {
    name: 'inventory_by_name',
    'function': generateView('inventory', 'emit([doc.data.name, doc._id]);'),
    sort: generateSortFunction((function (a, b) {
      var sortBy = '';
      if (req.query && req.query.sortKey) {
        sortBy = req.query.sortKey;
      }
      switch (sortBy) {
        case 'crossReference':
        case 'description':
        case 'friendlyId':
        case 'name':
        case 'price':
        case 'quantity':
        case 'inventoryType':
          {
            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);
          }
        default:
          {
            return 0; // Don't sort
          }
      }
    }).toString()),
    version: 3
  }, {
    name: 'inventory_by_type',
    'function': generateView('inventory', 'emit(doc.data.inventoryType);'),
    version: 4
  }, {
    name: 'inventory_purchase_by_date_received',
    'function': generateView('invPurchase', generateDateForView('dateReceived') + 'emit([dateReceived, doc._id]);'),
    version: 4
  }, {
    name: 'inventory_purchase_by_expiration_date',
    'function': generateView('invPurchase', generateDateForView('expirationDate') + 'emit([expirationDate, doc._id]);'),
    version: 4
  }, {
    name: 'inventory_request_by_item',
    'function': generateView('invRequest', generateDateForView('dateCompleted') + 'emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);'),
    version: 4
  }, {
    name: 'inventory_request_by_status',
    'function': generateView('invRequest', generateDateForView('dateCompleted') + 'emit([doc.data.status, dateCompleted, doc._id]);'),
    version: 4
  }, {
    name: 'invoice_by_status',
    'function': generateView('invoice', generateDateForView('billDate') + 'emit([doc.data.status, billDate, doc._id]);'),
    version: 3
  }, {
    name: 'lab_by_status',
    'function': generateView('lab', generateDateForView('labDate') + generateDateForView('requestedDate') + 'emit([doc.data.status, requestedDate, labDate, doc._id]);'),
    version: 3
  }, {
    name: 'medication_by_status',
    'function': generateView('medication', generateDateForView('prescriptionDate') + generateDateForView('requestedDate') + 'emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);'),
    version: 3
  }, {
    name: 'patient_by_display_id',
    'function': generateView('patient', 'if (doc.data.friendlyId) {' + 'emit([doc.data.friendlyId, doc._id]);' + '} else if (doc.data.externalPatientId) {' + 'emit([doc.data.externalPatientId, doc._id]);' + '} else {' + 'emit([doc._id, doc._id]);' + '}'),
    sort: generateSortFunction((function (a, b) {
      var sortBy = '';
      if (req.query && req.query.sortKey) {
        sortBy = req.query.sortKey;
      }
      switch (sortBy) {
        case 'firstName':
        case 'sex':
        case 'lastName':
        case 'status':
          {
            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);
          }
        case 'dateOfBirth':
          {
            return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);
          }
        default:
          {
            return 0; // Don't sort
          }
      }
    }).toString(), true),
    version: 5
  }, {
    name: 'patient_by_status',
    'function': generateView('patient', 'emit(doc.data.status);'),
    version: 2
  }, {
    name: 'patient_by_admission',
    'function': generateView('patient', 'emit(doc.data.admitted);'),
    version: 1
  }, {
    name: 'photo_by_patient',
    'function': generateView('photo', 'emit(doc.data.patient);'),
    version: 3
  }, {
    name: 'procedure_by_date',
    'function': generateView('procedure', generateDateForView('procedureDate') + 'emit([procedureDate, doc._id]);'),
    version: 3
  }, {
    name: 'pricing_by_category',
    'function': generateView('pricing', 'emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);'),
    version: 4
  }, {
    name: 'sequence_by_prefix',
    'function': generateView('sequence', 'emit(doc.data.prefix);'),
    version: 3
  }, {
    name: 'visit_by_date',
    'function': generateView('visit', generateDateForView('endDate') + generateDateForView('startDate') + 'emit([startDate, endDate, doc._id]);'),
    version: 3
  }, {
    name: 'visit_by_discharge_date',
    'function': generateView('visit', generateDateForView('endDate') + 'emit([endDate, doc._id]);'),
    version: 1
  }, {
    name: 'visit_by_patient',
    'function': generateView('visit', generateDateForView('endDate') + generateDateForView('startDate') + 'emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);'),
    version: 3
  }];

  exports['default'] = function (db) {
    designDocs.forEach(function (item) {
      db.get('_design/' + item.name).then(function (doc) {
        if (doc.version !== item.version) {
          updateDesignDoc(item, db, doc._rev);
        }
      }, function () {
        updateDesignDoc(item, db);
      });
    });
  };
});
define('hospitalrun/utils/select-values', ['exports', 'ember'], function (exports, _ember) {
  function selectValuesMap(value) {
    return {
      id: value,
      value: value
    };
  }

  exports['default'] = {
    /**
     * Map an objects into a format so that selects can use object as value for select
     * @param {object} object the object to map
     * @returns {object} the mapped object
     */
    selectObjectMap: function selectObjectMap(selectValue) {
      return _ember['default'].Object.create({
        selectObject: selectValue
      });
    },

    selectValuesMap: selectValuesMap,

    /** Map an array of strings to objects with id and value set to the string values
     * so that the array can be used for em-select
     * @param {Array} array to map.
     * @param {boolean} includeEmpty if there should be an empty item added to the select list
     */
    selectValues: function selectValues(array, includeEmpty) {
      if (_ember['default'].isArray(array)) {
        var arrayToMap = new Array(array);
        if (includeEmpty) {
          arrayToMap = [''];
          arrayToMap.addObjects(array);
        } else {
          arrayToMap = array;
        }
        return arrayToMap.map(selectValuesMap);
      }
    }
  };
});
define('hospitalrun/visits/add-diagnosis/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _ember, _hospitalrunControllersAbstractEditController) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({
    visitsController: _ember['default'].inject.controller('visits'),
    diagnosisList: _ember['default'].computed.alias('visitsController.diagnosisList'),

    editController: _ember['default'].inject.controller('visits/edit'),
    lookupListsToUpdate: [{
      name: 'diagnosisList',
      property: 'model.diagnosis',
      id: 'diagnosis_list'
    }],
    title: 'Add Diagnosis',
    updateButtonText: 'Add',
    updateButtonAction: 'add',
    showUpdateButton: true,

    actions: {
      cancel: function cancel() {
        this.send('closeModal');
      },

      add: function add() {
        this.updateLookupLists();
        var newDiag = {
          date: new Date(),
          description: this.get('model.diagnosis')
        };
        this.get('editController').send('addDiagnosis', newDiag);
      }
    }
  });
});
define("hospitalrun/visits/add-diagnosis/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/visits/add-diagnosis/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "select-or-typeahead", [], ["property", "diagnosis", "label", "Diagnosis", "list", ["subexpr", "@mut", [["get", "diagnosisList", ["loc", [null, [8, 70], [8, 83]]]]], [], []], "hint", false], ["loc", [null, [8, 4], [8, 96]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/visits/add-diagnosis/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [7, 2], [9, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/visits/add-diagnosis/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [4, 10], [4, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [5, 23], [5, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [6, 21], [6, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/visits/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {
  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({
    cancelAction: 'closeModal',
    newPricingItem: false,
    requestingController: _ember['default'].inject.controller('visits/edit')
  });
});
define("hospitalrun/visits/charge/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 31
          }
        },
        "moduleName": "hospitalrun/visits/charge/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", ["procedures/charge"], [], ["loc", [null, [1, 0], [1, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('hospitalrun/visits/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    title: 'Delete Visit',

    afterDeleteAction: (function () {
      var deleteFromPatient = this.get('model.deleteFromPatient');
      if (deleteFromPatient) {
        return 'visitDeleted';
      } else {
        return 'closeModal';
      }
    }).property('model.deleteFromPatient')
  });
});
define("hospitalrun/visits/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/visits/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    Are you sure you wish to delete this visit?\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "role", "form");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label");
          var el4 = dom.createTextNode("Start Date");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "form-control-static");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label");
          var el4 = dom.createTextNode("End Date");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "form-control-static");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label");
          var el4 = dom.createTextNode("Examiner");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "form-control-static");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label");
          var el4 = dom.createTextNode("Location");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "form-control-static");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label");
          var el4 = dom.createTextNode("Type");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "form-control-static");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 3]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5, 3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [7, 3]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [9, 3]), 0, 0);
          return morphs;
        },
        statements: [["inline", "date-format", [["get", "model.startDate", ["loc", [null, [13, 51], [13, 66]]]]], [], ["loc", [null, [13, 37], [13, 68]]]], ["inline", "date-format", [["get", "model.endDate", ["loc", [null, [17, 51], [17, 64]]]]], [], ["loc", [null, [17, 37], [17, 66]]]], ["content", "model.examiner", ["loc", [null, [21, 37], [21, 55]]]], ["content", "model.location", ["loc", [null, [25, 37], [25, 55]]]], ["content", "model.visitType", ["loc", [null, [29, 37], [29, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/visits/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [32, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/visits/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/user-session', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsPatientSubmodule, _hospitalrunUtilsSelectValues, _hospitalrunMixinsUserSession, _hospitalrunMixinsVisitTypes) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPatientNotes['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsVisitTypes['default'], {
    visitsController: _ember['default'].inject.controller('visits'),

    canAddAppointment: (function () {
      return this.currentUserCan('add_appointment');
    }).property(),

    canAddImaging: (function () {
      return this.currentUserCan('add_imaging');
    }).property(),

    canAddLab: (function () {
      return this.currentUserCan('add_lab');
    }).property(),

    canAddMedication: (function () {
      return this.currentUserCan('add_medication');
    }).property(),

    canAddDiagnosis: (function () {
      return this.currentUserCan('add_diagnosis');
    }).property(),

    canAddProcedure: (function () {
      return this.currentUserCan('add_procedure');
    }).property(),

    canAddVitals: (function () {
      return this.currentUserCan('add_vitals');
    }).property(),

    canDeleteDiagnosis: (function () {
      return this.currentUserCan('delete_diagnosis');
    }).property(),

    canDeleteImaging: (function () {
      return this.currentUserCan('delete_imaging');
    }).property(),

    canDeleteLab: (function () {
      return this.currentUserCan('delete_lab');
    }).property(),

    canDeleteMedication: (function () {
      return this.currentUserCan('delete_medication');
    }).property(),

    canDeleteProcedure: (function () {
      return this.currentUserCan('delete_procedure');
    }).property(),

    canDeleteVitals: (function () {
      return this.currentUserCan('delete_vitals');
    }).property(),

    disabledAction: (function () {
      this.get('model').validate()['catch'](_ember['default'].K);
      this._super();
    }).property('model.endDate', 'model.startDate', 'model.isValid'),

    isAdmissionVisit: (function () {
      var visitType = this.get('model.visitType'),
          isAdmission = visitType === 'Admission',
          visit = this.get('model');
      if (isAdmission) {
        visit.set('outPatient', false);
      } else {
        visit.set('status');
        visit.set('outPatient', true);
      }
      return isAdmission;
    }).property('model.visitType'),

    startDateChanged: (function () {
      var isAdmissionVisit = this.get('isAdmissionVisit'),
          startDate = this.get('model.startDate'),
          visit = this.get('model');
      if (!isAdmissionVisit) {
        visit.set('endDate', startDate);
      }
    }).observes('isAdmissionVisit', 'model.startDate'),

    cancelAction: 'returnToPatient',
    chargePricingCategory: 'Ward',
    chargeRoute: 'visits.charge',
    diagnosisList: _ember['default'].computed.alias('visitsController.diagnosisList'),
    findPatientVisits: false,
    patientImaging: _ember['default'].computed.alias('model.imaging'),
    patientLabs: _ember['default'].computed.alias('model.labs'),
    patientMedications: _ember['default'].computed.alias('model.medication'),
    pricingList: null, // This gets filled in by the route
    pricingTypes: _ember['default'].computed.alias('visitsController.wardPricingTypes'),
    physicianList: _ember['default'].computed.alias('visitsController.physicianList'),
    locationList: _ember['default'].computed.alias('visitsController.locationList'),
    visitTypesList: _ember['default'].computed.alias('visitsController.visitTypeList'),
    lookupListsToUpdate: [{
      name: 'diagnosisList',
      property: 'model.primaryBillingDiagnosis',
      id: 'diagnosis_list'
    }, {
      name: 'diagnosisList',
      property: 'model.primaryDiagnosis',
      id: 'diagnosis_list'
    }, {
      name: 'physicianList',
      property: 'model.examiner',
      id: 'physician_list'
    }, {
      name: 'locationList',
      property: 'model.location',
      id: 'visit_location_list'
    }],

    newVisit: false,
    visitStatuses: ['Admitted', 'Discharged'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),

    updateCapability: 'add_visit',

    _addChildObject: function _addChildObject(route) {
      this.transitionToRoute(route, 'new').then((function (newRoute) {
        newRoute.currentModel.setProperties({
          patient: this.get('model.patient'),
          visit: this.get('model'),
          selectPatient: false,
          returnToVisit: true
        });
      }).bind(this));
    },

    _finishAfterUpdate: function _finishAfterUpdate() {
      this.displayAlert('Visit Saved', 'The visit record has been saved.');
    },

    haveAdditionalDiagnoses: (function () {
      return !_ember['default'].isEmpty(this.get('model.additionalDiagnoses'));
    }).property('model.additionalDiagnoses.[]'),

    afterUpdate: function afterUpdate() {
      var patient = this.get('model.patient'),
          patientAdmitted = patient.get('admitted'),
          status = this.get('model.status');
      if (status === 'Admitted' && !patientAdmitted) {
        patient.set('admitted', true);
        patient.save().then(this._finishAfterUpdate.bind(this));
      } else if (status === 'Discharged' && patientAdmitted) {
        this.getPatientVisits(patient).then((function (visits) {
          if (_ember['default'].isEmpty(visits.findBy('status', 'Admitted'))) {
            patient.set('admitted', false);
            patient.save().then(this._finishAfterUpdate.bind(this));
          } else {
            this._finishAfterUpdate();
          }
        }).bind(this));
      } else {
        this._finishAfterUpdate();
      }
    },

    beforeUpdate: function beforeUpdate() {
      if (this.get('model.isNew')) {
        this.set('newVisit', true);
      }
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this.updateCharges().then(resolve, reject);
      }).bind(this));
    },

    /**
     * Adds or removes the specified object from the specified list.
     * @param {String} listName The name of the list to operate on.
     * @param {Object} listObject The object to add or removed from the
     * specified list.
     * @param {boolean} removeObject If true remove the object from the list;
     * otherwise add the specified object to the list.
     */
    updateList: function updateList(listName, listObject, removeObject) {
      var model = this.get('model');
      model.get(listName).then((function (list) {
        if (removeObject) {
          list.removeObject(listObject);
        } else {
          list.addObject(listObject);
        }
        this.send('update', true);
        this.send('closeModal');
      }).bind(this));
    },

    actions: {
      addDiagnosis: function addDiagnosis(newDiagnosis) {
        var additionalDiagnoses = this.get('model.additionalDiagnoses'),
            visit = this.get('model');
        if (!_ember['default'].isArray(additionalDiagnoses)) {
          additionalDiagnoses = [];
        }
        additionalDiagnoses.addObject(newDiagnosis);
        visit.set('additionalDiagnoses', additionalDiagnoses);
        this.send('update', true);
        this.send('closeModal');
      },

      deleteDiagnosis: function deleteDiagnosis(diagnosis) {
        var additionalDiagnoses = this.get('model.additionalDiagnoses'),
            visit = this.get('model');
        additionalDiagnoses.removeObject(diagnosis);
        visit.set('additionalDiagnoses', additionalDiagnoses);
        this.send('update', true);
      },

      addVitals: function addVitals(newVitals) {
        this.updateList('vitals', newVitals);
      },

      cancel: function cancel() {
        var cancelledItem = this.get('model');
        if (this.get('model.isNew')) {
          cancelledItem.deleteRecord();
        } else {
          cancelledItem.rollbackAttributes();
        }
        this.send(this.get('cancelAction'));
      },

      deleteProcedure: function deleteProcedure(procedure) {
        this.updateList('procedures', procedure, true);
      },

      deleteVitals: function deleteVitals(vitals) {
        this.updateList('vitals', vitals, true);
      },

      editImaging: function editImaging(imaging) {
        if (imaging.get('canEdit')) {
          imaging.setProperties({
            'returnToVisit': true
          });
        }
        this.transitionToRoute('imaging.edit', imaging);
      },

      editLab: function editLab(lab) {
        if (lab.get('canEdit')) {
          lab.setProperties({
            'returnToVisit': true
          });
          this.transitionToRoute('labs.edit', lab);
        }
      },

      editMedication: function editMedication(medication) {
        if (medication.get('canEdit')) {
          medication.set('returnToVisit', true);
          this.transitionToRoute('medication.edit', medication);
        }
      },

      showAddVitals: function showAddVitals() {
        var newVitals = this.get('store').createRecord('vital', {
          dateRecorded: new Date()
        });
        this.send('openModal', 'visits.vitals.edit', newVitals);
      },

      showAddPatientNote: function showAddPatientNote(model) {
        if (_ember['default'].isEmpty(model)) {
          model = this.get('store').createRecord('patient-note', {
            visit: this.get('model'),
            createdBy: this.getUserName(),
            patient: this.get('model').get('patient'),
            noteType: this._computeNoteType(this.get('model'))
          });
        }
        this.send('openModal', 'patients.notes', model);
      },

      newAppointment: function newAppointment() {
        this._addChildObject('appointments.edit');
      },

      newImaging: function newImaging() {
        this._addChildObject('imaging.edit');
      },

      newLab: function newLab() {
        this._addChildObject('labs.edit');
      },

      newMedication: function newMedication() {
        this._addChildObject('medication.edit');
      },

      showAddDiagnosis: function showAddDiagnosis() {
        var newDiagnosis = this.get('store').createRecord('add-diagnosis');
        this.send('openModal', 'visits.add-diagnosis', newDiagnosis);
      },

      showAddProcedure: function showAddProcedure() {
        this._addChildObject('procedures.edit');
      },

      showDeleteImaging: function showDeleteImaging(imaging) {
        this.send('openModal', 'imaging.delete', imaging);
      },

      showDeleteLab: function showDeleteLab(lab) {
        this.send('openModal', 'labs.delete', lab);
      },

      showDeleteMedication: function showDeleteMedication(medication) {
        this.send('openModal', 'medication.delete', medication);
      },

      showDeleteProcedure: function showDeleteProcedure(procedure) {
        this.send('openModal', 'visits.procedures.delete', procedure);
      },

      showDeleteVitals: function showDeleteVitals(vitals) {
        this.send('openModal', 'visits.vitals.delete', vitals);
      },

      showEditProcedure: function showEditProcedure(procedure) {
        if (_ember['default'].isEmpty(procedure.get('visit'))) {
          procedure.set('visit', this.get('model'));
        }
        procedure.set('returnToVisit', true);
        procedure.set('returnToPatient', false);
        this.transitionToRoute('procedures.edit', procedure);
      },

      showEditVitals: function showEditVitals(vitals) {
        this.send('openModal', 'visits.vitals.edit', vitals);
      },

      showDeletePatientNote: function showDeletePatientNote(note) {
        this.send('openModal', 'dialog', _ember['default'].Object.create({
          confirmAction: 'deletePatientNote',
          title: 'Delete Note',
          message: 'Are you sure you want to delete this note?',
          noteToDelete: note,
          updateButtonAction: 'confirm',
          updateButtonText: 'Ok'
        }));
      },

      deletePatientNote: function deletePatientNote(model) {
        var note = model.get('noteToDelete');
        var patientNotes = this.get('model.patientNotes');
        patientNotes.removeObject(note);
        this.send('update', true);
      }
    }
  });
});
define('hospitalrun/visits/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _ember) {
  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], {
    editTitle: 'Edit Visit',
    modelName: 'visit',
    newTitle: 'New Visit',
    pricingCategory: 'Ward',

    getNewData: function getNewData() {
      return _ember['default'].RSVP.resolve({
        visitType: 'Admission',
        startDate: new Date(),
        status: 'Admitted'
      });
    },

    actions: {
      updateNote: function updateNote() {
        this.controller.send('update', true);
      },
      deletePatientNote: function deletePatientNote(model) {
        this.controller.send('deletePatientNote', model);
      }
    }
  });
});
define("hospitalrun/visits/edit/template",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":9,"column":10},"end":{"line":13,"column":10}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"class","btn btn-primary align-right");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-plus");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element43=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element43);morphs[1] = dom.createMorphAt(element43,3,3);return morphs;},statements:[["element","action",["newAppointment"],["bubbles",false],["loc",[null,[10,70],[10,112]]]],["inline","t",["visits.edit.new_appointment"],[],["loc",[null,[11,57],[11,93]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":24,"column":14},"end":{"line":27,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);return morphs;},statements:[["inline","date-picker",[],["property","startDate","label","Admission Date","showTime",true,"class","col-sm-3 required"],["loc",[null,[25,16],[25,115]]]],["inline","date-picker",[],["property","endDate","label","Discharge Date","showTime",true,"class","col-sm-3"],["loc",[null,[26,16],[26,104]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":27,"column":14},"end":{"line":29,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","date-picker",[],["property","startDate","label","Date","class","col-sm-3 required"],["loc",[null,[28,16],[28,91]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":39,"column":14},"end":{"line":44,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","em-select",[],["class","col-sm-3","label","Visit Status","property","status","content",["subexpr","@mut",[["get","visitStatuses",["loc",[null,[41,44],[41,57]]]]],[],[]],"prompt"," "],["loc",[null,[40,16],[43,18]]]]],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":59,"column":14},"end":{"line":66,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","form-group col-sm-2");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label");var el3=dom.createTextNode(" ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("p");dom.setAttribute(el2,"class","form-control-static");var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);var el3=dom.createElement("button");dom.setAttribute(el3,"class","btn btn-primary");var el4=dom.createElement("span");dom.setAttribute(el4,"class","octicon octicon-plus");dom.appendChild(el3,el4);var el4=dom.createTextNode(" ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element38=dom.childAt(fragment,[1,3,1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element38);morphs[1] = dom.createMorphAt(element38,2,2);return morphs;},statements:[["element","action",["showAddDiagnosis"],["bubbles",false],["loc",[null,[63,52],[63,96]]]],["inline","t",["visits.edit.add_diagnosis"],[],["loc",[null,[63,140],[63,174]]]]],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":83,"column":24},"end":{"line":87,"column":24}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element34=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element34);morphs[1] = dom.createMorphAt(element34,3,3);return morphs;},statements:[["element","action",["deleteDiagnosis",["get","diagnosis",["loc",[null,[84,93],[84,102]]]]],[],["loc",[null,[84,66],[84,104]]]],["inline","t",["visits.edit.delete"],[],["loc",[null,[85,68],[85,95]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":78,"column":16},"end":{"line":90,"column":16}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element35=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(dom.childAt(element35,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element35,[3]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element35,[5]),1,1);return morphs;},statements:[["inline","date-format",[["get","diagnosis.date",["loc",[null,[80,38],[80,52]]]]],[],["loc",[null,[80,24],[80,54]]]],["content","diagnosis.description",["loc",[null,[81,24],[81,49]]]],["block","if",[["get","canDeleteDiagnosis",["loc",[null,[83,30],[83,48]]]]],[],0,null,["loc",[null,[83,24],[87,31]]]]],locals:["diagnosis"],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":68,"column":12},"end":{"line":92,"column":12}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("h4");var el2=dom.createTextNode("\n                Additional Diagnoses\n              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n              ");dom.appendChild(el0,el1);var el1=dom.createElement("table");dom.setAttribute(el1,"class","table");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("tr");dom.setAttribute(el2,"class","table-header");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("th");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("th");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("th");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element36=dom.childAt(fragment,[3]);var element37=dom.childAt(element36,[1]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(element37,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element37,[3]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element37,[5]),0,0);morphs[3] = dom.createMorphAt(element36,3,3);return morphs;},statements:[["inline","t",["visits.edit.date"],[],["loc",[null,[74,22],[74,47]]]],["inline","t",["visits.edit.diagnosis"],[],["loc",[null,[75,22],[75,52]]]],["inline","t",["visits.edit.actions"],[],["loc",[null,[76,22],[76,50]]]],["block","each",[["get","model.additionalDiagnoses",["loc",[null,[78,24],[78,49]]]]],[],0,null,["loc",[null,[78,16],[90,25]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":18,"column":10},"end":{"line":95,"column":10}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","row");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","form-group col-sm-3");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("label");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","row");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n            ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","row");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n            ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element39=dom.childAt(fragment,[1]);var element40=dom.childAt(element39,[1]);var element41=dom.childAt(fragment,[3]);var element42=dom.childAt(fragment,[5]);var morphs=new Array(13);morphs[0] = dom.createMorphAt(dom.childAt(element40,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element40,[3]),0,0);morphs[2] = dom.createMorphAt(element39,3,3);morphs[3] = dom.createMorphAt(element39,5,5);morphs[4] = dom.createMorphAt(element41,1,1);morphs[5] = dom.createMorphAt(element41,3,3);morphs[6] = dom.createMorphAt(element41,5,5);morphs[7] = dom.createMorphAt(element42,1,1);morphs[8] = dom.createMorphAt(element42,3,3);morphs[9] = dom.createMorphAt(element42,5,5);morphs[10] = dom.createMorphAt(fragment,7,7,contextualElement);morphs[11] = dom.createMorphAt(fragment,9,9,contextualElement);morphs[12] = dom.createMorphAt(fragment,11,11,contextualElement);return morphs;},statements:[["inline","t",["labels.patient"],[],["loc",[null,[21,23],[21,45]]]],["content","model.patient.displayName",["loc",[null,[22,47],[22,76]]]],["block","if",[["get","isAdmissionVisit",["loc",[null,[24,20],[24,36]]]]],[],0,1,["loc",[null,[24,14],[29,21]]]],["inline","select-or-typeahead",[],["className","col-sm-3","property","location","label","Location","list",["subexpr","@mut",[["get","locationList",["loc",[null,[31,38],[31,50]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.location",["loc",[null,[32,26],[32,40]]]]],[],[]]],["loc",[null,[30,14],[33,16]]]],["inline","em-select",[],["class","col-sm-3 required","label","Visit Type","property","visitType","content",["subexpr","@mut",[["get","visitTypes",["loc",[null,[37,45],[37,55]]]]],[],[]]],["loc",[null,[36,14],[38,16]]]],["block","if",[["get","isAdmissionVisit",["loc",[null,[39,20],[39,36]]]]],[],2,null,["loc",[null,[39,14],[44,21]]]],["inline","select-or-typeahead",[],["className","col-sm-3","property","examiner","label","Examiner","list",["subexpr","@mut",[["get","physicianList",["loc",[null,[46,38],[46,51]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.examiner",["loc",[null,[47,26],[47,40]]]]],[],[]]],["loc",[null,[45,14],[48,16]]]],["inline","select-or-typeahead",[],["className","col-sm-5","property","primaryDiagnosis","label","Admitting Diagnosis","list",["subexpr","@mut",[["get","diagnosisList",["loc",[null,[52,49],[52,62]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.primaryDiagnosis",["loc",[null,[53,26],[53,48]]]]],[],[]],"hint",false],["loc",[null,[51,14],[54,16]]]],["inline","select-or-typeahead",[],["className","col-sm-5","property","primaryBillingDiagnosis","label","Final/Billing Diagnosis","list",["subexpr","@mut",[["get","diagnosisList",["loc",[null,[56,53],[56,66]]]]],[],[]],"selection",["subexpr","@mut",[["get","model.primaryBillingDiagnosis",["loc",[null,[57,26],[57,55]]]]],[],[]],"hint",false],["loc",[null,[55,14],[58,16]]]],["block","if",[["get","canAddDiagnosis",["loc",[null,[59,20],[59,35]]]]],[],3,null,["loc",[null,[59,14],[66,21]]]],["block","if",[["get","haveAdditionalDiagnoses",["loc",[null,[68,18],[68,41]]]]],[],4,null,["loc",[null,[68,12],[92,19]]]],["inline","em-text",[],["label","Patient History","property","history","rows",3],["loc",[null,[93,12],[93,74]]]],["inline","em-text",[],["label","History since last seen","property","historySince","rows",3],["loc",[null,[94,12],[94,87]]]]],locals:[],templates:[child0,child1,child2,child3,child4]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":105,"column":14},"end":{"line":107,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-primary align-right");var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-plus");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element18=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element18);morphs[1] = dom.createMorphAt(element18,2,2);return morphs;},statements:[["element","action",["showAddPatientNote"],["bubbles",false],["loc",[null,[106,60],[106,106]]]],["inline","t",["visits.edit.new_note"],[],["loc",[null,[106,150],[106,179]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":126,"column":20},"end":{"line":128,"column":20}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-default neutral");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element14=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element14);morphs[1] = dom.createMorphAt(element14,0,0);return morphs;},statements:[["element","action",["showAddPatientNote",["get","note",["loc",[null,[127,92],[127,96]]]]],[],["loc",[null,[127,62],[127,98]]]],["inline","t",["visits.edit.edit"],[],["loc",[null,[127,99],[127,123]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":129,"column":20},"end":{"line":133,"column":20}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element13=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element13);morphs[1] = dom.createMorphAt(element13,3,3);return morphs;},statements:[["element","action",["showDeletePatientNote",["get","note",["loc",[null,[130,95],[130,99]]]]],[],["loc",[null,[130,62],[130,101]]]],["inline","t",["visits.edit.delete"],[],["loc",[null,[131,64],[131,91]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":120,"column":14},"end":{"line":136,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode(": ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element15=dom.childAt(fragment,[1]);var element16=dom.childAt(element15,[5]);var element17=dom.childAt(element15,[7]);var morphs=new Array(6);morphs[0] = dom.createMorphAt(dom.childAt(element15,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element15,[3]),0,0);morphs[2] = dom.createMorphAt(element16,0,0);morphs[3] = dom.createMorphAt(element16,2,2);morphs[4] = dom.createMorphAt(element17,1,1);morphs[5] = dom.createMorphAt(element17,2,2);return morphs;},statements:[["inline","date-format",[["get","note.date",["loc",[null,[122,36],[122,45]]]]],[],["loc",[null,[122,22],[122,47]]]],["content","note.authoredBy",["loc",[null,[123,22],[123,41]]]],["content","note.noteType",["loc",[null,[124,22],[124,39]]]],["content","note.content",["loc",[null,[124,41],[124,57]]]],["block","if",[["get","canAddNote",["loc",[null,[126,26],[126,36]]]]],[],0,null,["loc",[null,[126,20],[128,27]]]],["block","if",[["get","canDeleteNote",["loc",[null,[129,26],[129,39]]]]],[],1,null,["loc",[null,[129,20],[133,27]]]]],locals:["note"],templates:[child0,child1]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":146,"column":14},"end":{"line":148,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-primary align-right");var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-plus");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element12=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element12);morphs[1] = dom.createMorphAt(element12,2,2);return morphs;},statements:[["element","action",["showAddProcedure"],["bubbles",false],["loc",[null,[147,60],[147,104]]]],["inline","t",["visits.edit.new_procedure"],[],["loc",[null,[147,148],[147,182]]]]],locals:[],templates:[]};})();var child3=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":165,"column":20},"end":{"line":167,"column":20}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-default neutral");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element9=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element9);morphs[1] = dom.createMorphAt(element9,0,0);return morphs;},statements:[["element","action",["showEditProcedure",["get","procedure",["loc",[null,[166,91],[166,100]]]]],[],["loc",[null,[166,62],[166,102]]]],["inline","t",["labels.edit"],[],["loc",[null,[166,103],[166,122]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":168,"column":20},"end":{"line":172,"column":20}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element8=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element8);morphs[1] = dom.createMorphAt(element8,3,3);return morphs;},statements:[["element","action",["showDeleteProcedure",["get","procedure",["loc",[null,[169,93],[169,102]]]]],[],["loc",[null,[169,62],[169,104]]]],["inline","t",["visits.edit.delete"],[],["loc",[null,[170,64],[170,91]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":160,"column":14},"end":{"line":175,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element10=dom.childAt(fragment,[1]);var element11=dom.childAt(element10,[5]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(element10,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element10,[3]),0,0);morphs[2] = dom.createMorphAt(element11,1,1);morphs[3] = dom.createMorphAt(element11,2,2);return morphs;},statements:[["inline","date-format",[["get","procedure.procedureDate",["loc",[null,[162,36],[162,59]]]]],[],["loc",[null,[162,22],[162,61]]]],["content","procedure.description",["loc",[null,[163,22],[163,47]]]],["block","if",[["get","canAddProcedure",["loc",[null,[165,26],[165,41]]]]],[],0,null,["loc",[null,[165,20],[167,27]]]],["block","if",[["get","canDeleteProcedure",["loc",[null,[168,26],[168,44]]]]],[],1,null,["loc",[null,[168,20],[172,27]]]]],locals:["procedure"],templates:[child0,child1]};})();var child4=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":185,"column":14},"end":{"line":187,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-primary align-right");var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-plus");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element7=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element7);morphs[1] = dom.createMorphAt(element7,2,2);return morphs;},statements:[["element","action",["newMedication"],["bubbles",false],["loc",[null,[186,60],[186,101]]]],["inline","t",["visits.edit.new_medication"],[],["loc",[null,[186,145],[186,180]]]]],locals:[],templates:[]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":202,"column":14},"end":{"line":206,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-primary align-right");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-plus");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element6=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element6);morphs[1] = dom.createMorphAt(element6,3,3);return morphs;},statements:[["element","action",["newLab"],["bubbles",false],["loc",[null,[203,60],[203,94]]]],["inline","t",["visits.edit.new_lab"],[],["loc",[null,[204,61],[204,89]]]]],locals:[],templates:[]};})();var child6=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":221,"column":14},"end":{"line":225,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-primary align-right");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-plus");dom.appendChild(el1,el2);var el2=dom.createTextNode(" ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element5=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element5);morphs[1] = dom.createMorphAt(element5,3,3);return morphs;},statements:[["element","action",["newImaging"],["bubbles",false],["loc",[null,[222,60],[222,98]]]],["inline","t",["visits.edit.new_imaging"],[],["loc",[null,[223,61],[223,93]]]]],locals:[],templates:[]};})();var child7=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":240,"column":14},"end":{"line":244,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-primary align-right");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-plus");dom.appendChild(el1,el2);var el2=dom.createTextNode(" New Vitals\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element4=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element4);return morphs;},statements:[["element","action",["showAddVitals"],["bubbles",false],["loc",[null,[241,60],[241,101]]]]],locals:[],templates:[]};})();var child8=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":273,"column":20},"end":{"line":275,"column":20}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-default neutral");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element1=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element1);morphs[1] = dom.createMorphAt(element1,0,0);return morphs;},statements:[["element","action",["showEditVitals",["get","vital",["loc",[null,[274,88],[274,93]]]]],[],["loc",[null,[274,62],[274,95]]]],["inline","t",["labels.edit"],[],["loc",[null,[274,96],[274,115]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":276,"column":20},"end":{"line":280,"column":20}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-default warning");var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","octicon octicon-x");dom.appendChild(el1,el2);var el2=dom.createTextNode(" Delete\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element0);return morphs;},statements:[["element","action",["showDeleteVitals",["get","vital",["loc",[null,[277,90],[277,95]]]]],[],["loc",[null,[277,62],[277,97]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":262,"column":14},"end":{"line":283,"column":14}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element2=dom.childAt(fragment,[1]);var element3=dom.childAt(element2,[17]);var morphs=new Array(10);morphs[0] = dom.createMorphAt(dom.childAt(element2,[1]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(element2,[3]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(element2,[5]),0,0);morphs[3] = dom.createMorphAt(dom.childAt(element2,[7]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(element2,[9]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(element2,[11]),0,0);morphs[6] = dom.createMorphAt(dom.childAt(element2,[13]),0,0);morphs[7] = dom.createMorphAt(dom.childAt(element2,[15]),0,0);morphs[8] = dom.createMorphAt(element3,1,1);morphs[9] = dom.createMorphAt(element3,2,2);return morphs;},statements:[["inline","date-format",[["get","vital.dateRecorded",["loc",[null,[264,36],[264,54]]]]],["format","l h:mm A"],["loc",[null,[264,22],[264,74]]]],["content","vital.temperature",["loc",[null,[265,22],[265,43]]]],["content","vital.weight",["loc",[null,[266,22],[266,38]]]],["content","vital.height",["loc",[null,[267,22],[267,38]]]],["content","vital.sbp",["loc",[null,[268,22],[268,35]]]],["content","vital.dbp",["loc",[null,[269,22],[269,35]]]],["content","vital.heartRate",["loc",[null,[270,22],[270,41]]]],["content","vital.respiratoryRate",["loc",[null,[271,22],[271,47]]]],["block","if",[["get","canAddVitals",["loc",[null,[273,26],[273,38]]]]],[],0,null,["loc",[null,[273,20],[275,27]]]],["block","if",[["get","canDeleteVitals",["loc",[null,[276,26],[276,41]]]]],[],1,null,["loc",[null,[276,20],[280,27]]]]],locals:["vital"],templates:[child0,child1]};})();var child9=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":288,"column":6},"end":{"line":290,"column":6}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","partial",["item-charges"],[],["loc",[null,[289,10],[289,36]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":99,"column":4},"end":{"line":291,"column":4}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel-heading");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","panel-title");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("a");dom.setAttribute(el4,"data-toggle","collapse");dom.setAttribute(el4,"data-parent","#visit-accordion");dom.setAttribute(el4,"href","#visit-procedures");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","visit-notes");dom.setAttribute(el2,"class","panel-collapse collapse in");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createElement("tr");dom.setAttribute(el5,"class","table-header");var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n              ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel-heading");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","panel-title");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("a");dom.setAttribute(el4,"data-toggle","collapse");dom.setAttribute(el4,"data-parent","#visit-accordion");dom.setAttribute(el4,"href","#visit-procedures");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","visit-procedures");dom.setAttribute(el2,"class","panel-collapse collapse in");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createElement("tr");dom.setAttribute(el5,"class","table-header");var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                  ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createComment("");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n              ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel-heading");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","panel-title");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("a");dom.setAttribute(el4,"data-toggle","collapse");dom.setAttribute(el4,"data-parent","#patient-accordion");dom.setAttribute(el4,"href","#patient-medication");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","patient-medication");dom.setAttribute(el2,"class","panel-collapse collapse in");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel-heading");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","panel-title");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("a");dom.setAttribute(el4,"data-toggle","collapse");dom.setAttribute(el4,"data-parent","#patient-accordion");dom.setAttribute(el4,"href","#patient-labs");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","patient-labs");dom.setAttribute(el2,"class","panel-collapse collapse in");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel-heading");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","panel-title");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("a");dom.setAttribute(el4,"data-toggle","collapse");dom.setAttribute(el4,"data-parent","#patient-accordion");dom.setAttribute(el4,"href","#patient-imaging");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","patient-imaging");dom.setAttribute(el2,"class","panel-collapse collapse in");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel-heading");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","panel-title");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("a");dom.setAttribute(el4,"data-toggle","collapse");dom.setAttribute(el4,"data-parent","#visit-accordion");dom.setAttribute(el4,"href","#visit-vitals");var el5=dom.createTextNode("\n              Vitals\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"id","visit-vitals");dom.setAttribute(el2,"class","panel-collapse collapse in");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-body");var el4=dom.createTextNode("\n            ");dom.appendChild(el3,el4);var el4=dom.createElement("table");dom.setAttribute(el4,"class","table");var el5=dom.createTextNode("\n              ");dom.appendChild(el4,el5);var el5=dom.createElement("tr");dom.setAttribute(el5,"class","table-header");var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Date");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Temperature");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Weight");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Height");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("SBP");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("DBP");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Heart Rate");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Respiratory Rate");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n                ");dom.appendChild(el5,el6);var el6=dom.createElement("th");var el7=dom.createTextNode("Delete");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n              ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("            ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n          ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n        ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element19=dom.childAt(fragment,[1]);var element20=dom.childAt(element19,[1,1,1]);var element21=dom.childAt(element19,[3,1,1]);var element22=dom.childAt(element21,[1]);var element23=dom.childAt(fragment,[3]);var element24=dom.childAt(element23,[1,1,1]);var element25=dom.childAt(element23,[3,1,1]);var element26=dom.childAt(element25,[1]);var element27=dom.childAt(fragment,[5]);var element28=dom.childAt(element27,[1,1,1]);var element29=dom.childAt(fragment,[7]);var element30=dom.childAt(element29,[1,1,1]);var element31=dom.childAt(fragment,[9]);var element32=dom.childAt(element31,[1,1,1]);var element33=dom.childAt(fragment,[11]);var morphs=new Array(25);morphs[0] = dom.createMorphAt(element20,1,1);morphs[1] = dom.createMorphAt(element20,3,3);morphs[2] = dom.createMorphAt(dom.childAt(element22,[1]),0,0);morphs[3] = dom.createMorphAt(dom.childAt(element22,[3]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(element22,[5]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(element22,[7]),0,0);morphs[6] = dom.createMorphAt(element21,3,3);morphs[7] = dom.createMorphAt(element24,1,1);morphs[8] = dom.createMorphAt(element24,3,3);morphs[9] = dom.createMorphAt(dom.childAt(element26,[1]),0,0);morphs[10] = dom.createMorphAt(dom.childAt(element26,[3]),0,0);morphs[11] = dom.createMorphAt(dom.childAt(element26,[5]),0,0);morphs[12] = dom.createMorphAt(element25,3,3);morphs[13] = dom.createMorphAt(element28,1,1);morphs[14] = dom.createMorphAt(element28,3,3);morphs[15] = dom.createMorphAt(dom.childAt(element27,[3,1]),1,1);morphs[16] = dom.createMorphAt(element30,1,1);morphs[17] = dom.createMorphAt(element30,3,3);morphs[18] = dom.createMorphAt(dom.childAt(element29,[3,1]),1,1);morphs[19] = dom.createMorphAt(element32,1,1);morphs[20] = dom.createMorphAt(element32,3,3);morphs[21] = dom.createMorphAt(dom.childAt(element31,[3,1]),1,1);morphs[22] = dom.createMorphAt(dom.childAt(element33,[1,1,1]),1,1);morphs[23] = dom.createMorphAt(dom.childAt(element33,[3,1,1]),3,3);morphs[24] = dom.createMorphAt(fragment,13,13,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","t",["visits.edit.notes"],[],["loc",[null,[104,14],[104,40]]]],["block","if",[["get","canAddNote",["loc",[null,[105,20],[105,30]]]]],[],0,null,["loc",[null,[105,14],[107,21]]]],["inline","t",["visits.edit.date"],[],["loc",[null,[115,22],[115,46]]]],["inline","t",["visits.edit.authored_by"],[],["loc",[null,[116,22],[116,53]]]],["inline","t",["visits.edit.note"],[],["loc",[null,[117,22],[117,46]]]],["inline","t",["common.actions"],[],["loc",[null,[118,22],[118,44]]]],["block","each",[["get","model.patientNotes",["loc",[null,[120,22],[120,40]]]]],[],1,null,["loc",[null,[120,14],[136,23]]]],["inline","t",["visits.edit.procedures"],[],["loc",[null,[145,14],[145,45]]]],["block","if",[["get","canAddProcedure",["loc",[null,[146,20],[146,35]]]]],[],2,null,["loc",[null,[146,14],[148,21]]]],["inline","t",["visits.edit.date"],[],["loc",[null,[156,22],[156,47]]]],["inline","t",["visits.edit.procedure"],[],["loc",[null,[157,22],[157,52]]]],["inline","t",["common.actions"],[],["loc",[null,[158,22],[158,44]]]],["block","each",[["get","model.procedures",["loc",[null,[160,22],[160,38]]]]],[],3,null,["loc",[null,[160,14],[175,23]]]],["inline","t",["visits.edit.medication"],[],["loc",[null,[184,14],[184,45]]]],["block","if",[["get","canAddMedication",["loc",[null,[185,20],[185,36]]]]],[],4,null,["loc",[null,[185,14],[187,21]]]],["inline","partial",["patients/medication"],[],["loc",[null,[193,12],[193,45]]]],["inline","t",["visits.edit.labs"],[],["loc",[null,[201,14],[201,39]]]],["block","if",[["get","canAddLab",["loc",[null,[202,20],[202,29]]]]],[],5,null,["loc",[null,[202,14],[206,21]]]],["inline","partial",["patients/labs"],[],["loc",[null,[212,12],[212,39]]]],["inline","t",["visits.edit.imaging"],[],["loc",[null,[220,14],[220,42]]]],["block","if",[["get","canAddImaging",["loc",[null,[221,20],[221,33]]]]],[],6,null,["loc",[null,[221,14],[225,21]]]],["inline","partial",["patients/imaging"],[],["loc",[null,[231,12],[231,42]]]],["block","if",[["get","canAddVitals",["loc",[null,[240,20],[240,32]]]]],[],7,null,["loc",[null,[240,14],[244,21]]]],["block","each",[["get","model.vitals",["loc",[null,[262,22],[262,34]]]]],[],8,null,["loc",[null,[262,14],[283,23]]]],["block","em-form",[],["model",["subexpr","@mut",[["get","this",["loc",[null,[288,23],[288,27]]]]],[],[]],"submitButton",false],9,null,["loc",[null,[288,6],[290,18]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9]};})();return {meta:{"fragmentReason":{"name":"triple-curlies"},"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":293,"column":0}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","panel-group");dom.setAttribute(el1,"id","visit-accordion");var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","panel");var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","panel-heading");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("h3");dom.setAttribute(el4,"class","panel-title");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("a");dom.setAttribute(el5,"data-toggle","collapse");dom.setAttribute(el5,"data-parent","#visit-accordion");dom.setAttribute(el5,"href","#visit-info");var el6=dom.createTextNode("\n            ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"id","visit-info");dom.setAttribute(el3,"class","panel-collapse collapse in");var el4=dom.createTextNode("\n        ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","panel-body");var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element44=dom.childAt(fragment,[1]);var element45=dom.childAt(element44,[1]);var element46=dom.childAt(element45,[1,1]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(element46,[1]),1,1);morphs[1] = dom.createMorphAt(element46,3,3);morphs[2] = dom.createMorphAt(dom.childAt(element45,[3,1]),1,1);morphs[3] = dom.createMorphAt(element44,3,3);return morphs;},statements:[["inline","t",["visits.edit.visit_information"],[],["loc",[null,[7,12],[7,50]]]],["block","if",[["get","canAddAppointment",["loc",[null,[9,16],[9,33]]]]],[],0,null,["loc",[null,[9,10],[13,17]]]],["block","em-form",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[18,27],[18,32]]]]],[],[]],"submitButton",false],1,null,["loc",[null,[18,10],[95,22]]]],["block","unless",[["get","model.isNew",["loc",[null,[99,14],[99,25]]]]],[],2,null,["loc",[null,[99,4],[291,15]]]]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["wrong-type"]},"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":294,"column":0}},"moduleName":"hospitalrun/visits/edit/template.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","edit-panel",[],["editPanelProps",["subexpr","@mut",[["get","editPanelProps",["loc",[null,[1,29],[1,43]]]]],[],[]]],0,null,["loc",[null,[1,0],[293,15]]]]],locals:[],templates:[child0]};})());});
define('hospitalrun/visits/procedures/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    afterDeleteAction: 'notifyProcedureDelete',
    editController: _ember['default'].inject.controller('visits/edit'),
    title: 'Delete Procedure',

    actions: {
      notifyProcedureDelete: function notifyProcedureDelete() {
        this.send('closeModal');
        this.get('editController').send('deleteProcedure', this.get('model'));
      }
    }
  });
});
define("hospitalrun/visits/procedures/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/visits/procedures/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    Are you sure you wish to delete this procedure?\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/visits/procedures/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/visits/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {
  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({
    addCapability: 'add_visit',
    additionalModels: [{
      name: 'anesthesiaTypes',
      findArgs: ['lookup', 'anesthesia_types']
    }, {
      name: 'anesthesiologistList',
      findArgs: ['lookup', 'anesthesiologists']
    }, {
      name: 'diagnosisList',
      findArgs: ['lookup', 'diagnosis_list']
    }, {
      name: 'physicianList',
      findArgs: ['lookup', 'physician_list']
    }, {
      name: 'locationList',
      findArgs: ['lookup', 'visit_location_list']
    }, {
      name: 'procedureList',
      findArgs: ['lookup', 'procedure_list']
    }, {
      name: 'procedureLocations',
      findArgs: ['lookup', 'procedure_locations']
    }, {
      name: 'procedurePricingTypes',
      findArgs: ['lookup', 'procedure_pricing_types']
    }, {
      name: 'visitTypesList',
      findArgs: ['lookup', 'visit_types']
    }, {
      name: 'wardPricingTypes',
      findArgs: ['lookup', 'ward_pricing_types']
    }],
    moduleName: 'visits',
    newButtonAction: null, // No new button
    sectionTitle: 'Visits'

  });
});
define('hospitalrun/visits/vitals/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember) {
  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({
    afterDeleteAction: 'notifyVitalsDelete',
    editController: _ember['default'].inject.controller('visits/edit'),
    title: 'Delete Vitals',

    actions: {
      notifyVitalsDelete: function notifyVitalsDelete() {
        this.send('closeModal');
        this.get('editController').send('deleteVitals', this.get('model'));
      }
    }
  });
});
define("hospitalrun/visits/vitals/delete/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/visits/vitals/delete/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "alert alert-danger");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    Are you sure you wish to delete these vitals?\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/visits/vitals/delete/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [4, 23], [4, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [5, 21], [5, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('hospitalrun/visits/vitals/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {
  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({
    cancelAction: 'closeModal',

    editController: _ember['default'].inject.controller('visits/edit'),

    newVitals: false,

    temperatureLabel: 'Temperature (\xb0C)',

    title: (function () {
      var isNew = this.get('model.isNew');
      if (isNew) {
        return 'Add Vitals';
      }
      return 'Edit Vitals';
    }).property('model.isNew'),

    updateCapability: 'add_vitals',

    beforeUpdate: function beforeUpdate() {
      if (this.get('model.isNew')) {
        this.set('newVitals', true);
      }
      return _ember['default'].RSVP.Promise.resolve();
    },

    afterUpdate: function afterUpdate(vitals) {
      if (this.get('newVitals')) {
        this.get('editController').send('addVitals', vitals);
      } else {
        this.send('closeModal');
      }
    }
  });
});
define("hospitalrun/visits/vitals/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "hospitalrun/visits/vitals/edit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [5]);
            var element1 = dom.childAt(fragment, [7]);
            var element2 = dom.childAt(fragment, [9]);
            var morphs = new Array(8);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            morphs[3] = dom.createMorphAt(element0, 3, 3);
            morphs[4] = dom.createMorphAt(element1, 1, 1);
            morphs[5] = dom.createMorphAt(element1, 3, 3);
            morphs[6] = dom.createMorphAt(element2, 1, 1);
            morphs[7] = dom.createMorphAt(element2, 3, 3);
            return morphs;
          },
          statements: [["inline", "date-picker", [], ["property", "dateRecorded", "label", "Date Recorded", "class", "col-sm-6", "format", "l h:mm A", "showTime", true], ["loc", [null, [9, 6], [9, 117]]]], ["inline", "em-input", [], ["class", "col-sm-3 required", "property", "temperature", "label", ["subexpr", "@mut", [["get", "temperatureLabel", ["loc", [null, [12, 72], [12, 88]]]]], [], []]], ["loc", [null, [12, 6], [12, 91]]]], ["inline", "em-input", [], ["class", "col-sm-3", "property", "weight", "label", "Weight"], ["loc", [null, [15, 6], [15, 68]]]], ["inline", "em-input", [], ["class", "col-sm-3", "property", "height", "label", "Height"], ["loc", [null, [16, 6], [16, 68]]]], ["inline", "em-input", [], ["class", "col-sm-3 required", "property", "sbp", "label", "SBP"], ["loc", [null, [19, 6], [19, 71]]]], ["inline", "em-input", [], ["class", "col-sm-3 required", "property", "dbp", "label", "DBP"], ["loc", [null, [20, 6], [20, 71]]]], ["inline", "em-input", [], ["class", "col-sm-3 required", "property", "heartRate", "label", "Heart Rate"], ["loc", [null, [23, 6], [23, 84]]]], ["inline", "em-input", [], ["class", "col-sm-3 required", "property", "respiratoryRate", "label", "Respiratory Rate"], ["loc", [null, [24, 6], [24, 96]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "hospitalrun/visits/vitals/edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "em-form", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "submitButton", false], 0, null, ["loc", [null, [7, 2], [26, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "hospitalrun/visits/vitals/edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["hideCancelButton", ["subexpr", "@mut", [["get", "hideCancelButton", ["loc", [null, [2, 21], [2, 37]]]]], [], []], "isUpdateDisabled", ["subexpr", "@mut", [["get", "isUpdateDisabled", ["loc", [null, [3, 21], [3, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [4, 10], [4, 15]]]]], [], []], "updateButtonAction", ["subexpr", "@mut", [["get", "updateButtonAction", ["loc", [null, [5, 23], [5, 41]]]]], [], []], "updateButtonText", ["subexpr", "@mut", [["get", "updateButtonText", ["loc", [null, [6, 21], [6, 37]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [27, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('hospitalrun/config/environment', ['ember'], function(Ember) {
  var prefix = 'hospitalrun';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("hospitalrun/app")["default"].create({"name":"hospitalrun","version":"0.9.12+fedc8149"});
}

/* jshint ignore:end */
//# sourceMappingURL=hospitalrun.map